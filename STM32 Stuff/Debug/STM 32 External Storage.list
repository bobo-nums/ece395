
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f0  080065f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f8  080065f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000680  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000708  20000708  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128f3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002696  00000000  00000000  000329ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  00035048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac0  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002231a  00000000  00000000  000366b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101cc  00000000  00000000  000589ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c66a7  00000000  00000000  00068b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f23d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d0  00000000  00000000  0012f290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006310 	.word	0x08006310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006310 	.word	0x08006310

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000578:	b40f      	push	{r0, r1, r2, r3}
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <myprintf+0x44>)
 8000590:	f005 faa2 	bl	8005ad8 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <myprintf+0x44>)
 8000596:	f7ff fe1b 	bl	80001d0 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <myprintf+0x44>)
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <myprintf+0x48>)
 80005aa:	f001 fe32 	bl	8002212 <HAL_UART_Transmit>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005b8:	b004      	add	sp, #16
 80005ba:	4770      	bx	lr
 80005bc:	200000a4 	.word	0x200000a4
 80005c0:	20000240 	.word	0x20000240

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fb64 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f8fa 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9b6 	bl	8000944 <MX_GPIO_Init>
  MX_FATFS_Init();
 80005d8:	f002 f8e4 	bl	80027a4 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f988 	bl	80008f0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005e0:	f000 f950 	bl	8000884 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005e4:	4869      	ldr	r0, [pc, #420]	; (800078c <main+0x1c8>)
 80005e6:	f7ff ffc7 	bl	8000578 <myprintf>
  	HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fbc5 	bl	8000d7c <HAL_Delay>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80005f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80005f6:	2201      	movs	r2, #1
 80005f8:	4965      	ldr	r1, [pc, #404]	; (8000790 <main+0x1cc>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fb60 	bl	8004cc0 <f_mount>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	if (fres != FR_OK) {
 8000606:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <main+0x58>
	myprintf("f_mount error (%i)\r\n", fres);
 800060e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000612:	4619      	mov	r1, r3
 8000614:	485f      	ldr	r0, [pc, #380]	; (8000794 <main+0x1d0>)
 8000616:	f7ff ffaf 	bl	8000578 <myprintf>
	while(1);
 800061a:	e7fe      	b.n	800061a <main+0x56>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800061c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000624:	4619      	mov	r1, r3
 8000626:	485a      	ldr	r0, [pc, #360]	; (8000790 <main+0x1cc>)
 8000628:	f005 f8aa 	bl	8005780 <f_getfree>
 800062c:	4603      	mov	r3, r0
 800062e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	if (fres != FR_OK) {
 8000632:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <main+0x84>
	myprintf("f_getfree error (%i)\r\n", fres);
 800063a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800063e:	4619      	mov	r1, r3
 8000640:	4855      	ldr	r0, [pc, #340]	; (8000798 <main+0x1d4>)
 8000642:	f7ff ff99 	bl	8000578 <myprintf>
	while(1);
 8000646:	e7fe      	b.n	8000646 <main+0x82>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	3b02      	subs	r3, #2
 8000652:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	8952      	ldrh	r2, [r2, #10]
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	free_sectors = free_clusters * getFreeFs->csize;
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	895b      	ldrh	r3, [r3, #10]
 800066a:	461a      	mov	r2, r3
 800066c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	fb03 f302 	mul.w	r3, r3, r2
 8000676:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800067a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800067e:	0859      	lsrs	r1, r3, #1
 8000680:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000684:	085b      	lsrs	r3, r3, #1
 8000686:	461a      	mov	r2, r3
 8000688:	4844      	ldr	r0, [pc, #272]	; (800079c <main+0x1d8>)
 800068a:	f7ff ff75 	bl	8000578 <myprintf>

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 800068e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000692:	2201      	movs	r2, #1
 8000694:	4942      	ldr	r1, [pc, #264]	; (80007a0 <main+0x1dc>)
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fb58 	bl	8004d4c <f_open>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	if (fres != FR_OK) {
 80006a2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <main+0xee>
	myprintf("f_open error (%i)\r\n");
 80006aa:	483e      	ldr	r0, [pc, #248]	; (80007a4 <main+0x1e0>)
 80006ac:	f7ff ff64 	bl	8000578 <myprintf>
	while(1);
 80006b0:	e7fe      	b.n	80006b0 <main+0xec>
	}
	myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006b2:	483d      	ldr	r0, [pc, #244]	; (80007a8 <main+0x1e4>)
 80006b4:	f7ff ff60 	bl	8000578 <myprintf>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	211e      	movs	r1, #30
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 f911 	bl	80058ea <f_gets>
 80006c8:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
	if(rres != 0) {
 80006cc:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <main+0x11e>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	4834      	ldr	r0, [pc, #208]	; (80007ac <main+0x1e8>)
 80006dc:	f7ff ff4c 	bl	8000578 <myprintf>
 80006e0:	e005      	b.n	80006ee <main+0x12a>
	} else {
	myprintf("f_gets error (%i)\r\n", fres);
 80006e2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006e6:	4619      	mov	r1, r3
 80006e8:	4831      	ldr	r0, [pc, #196]	; (80007b0 <main+0x1ec>)
 80006ea:	f7ff ff45 	bl	8000578 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80006ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f2:	4618      	mov	r0, r3
 80006f4:	f005 f81a 	bl	800572c <f_close>

	//Now let's try and write a file "write.txt"
	fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80006f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006fc:	221a      	movs	r2, #26
 80006fe:	492d      	ldr	r1, [pc, #180]	; (80007b4 <main+0x1f0>)
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fb23 	bl	8004d4c <f_open>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	if(fres == FR_OK) {
 800070c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <main+0x158>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000714:	4828      	ldr	r0, [pc, #160]	; (80007b8 <main+0x1f4>)
 8000716:	f7ff ff2f 	bl	8000578 <myprintf>
 800071a:	e005      	b.n	8000728 <main+0x164>
	} else {
	myprintf("f_open error (%i)\r\n", fres);
 800071c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000720:	4619      	mov	r1, r3
 8000722:	4820      	ldr	r0, [pc, #128]	; (80007a4 <main+0x1e0>)
 8000724:	f7ff ff28 	bl	8000578 <myprintf>
	}

	//Copy in a string
	strncpy((char*)readBuf, "a new file is made!", 19);
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4a23      	ldr	r2, [pc, #140]	; (80007bc <main+0x1f8>)
 800072e:	461c      	mov	r4, r3
 8000730:	4615      	mov	r5, r2
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	682b      	ldr	r3, [r5, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	8022      	strh	r2, [r4, #0]
 800073c:	3402      	adds	r4, #2
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	7023      	strb	r3, [r4, #0]
	UINT bytesWrote;
	fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	f107 0108 	add.w	r1, r7, #8
 8000748:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800074c:	2213      	movs	r2, #19
 800074e:	f004 fdfa 	bl	8005346 <f_write>
 8000752:	4603      	mov	r3, r0
 8000754:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	if(fres == FR_OK) {
 8000758:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800075c:	2b00      	cmp	r3, #0
 800075e:	d106      	bne.n	800076e <main+0x1aa>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <main+0x1fc>)
 8000768:	f7ff ff06 	bl	8000578 <myprintf>
 800076c:	e002      	b.n	8000774 <main+0x1b0>
	} else {
	myprintf("f_write error (%i)\r\n");
 800076e:	4815      	ldr	r0, [pc, #84]	; (80007c4 <main+0x200>)
 8000770:	f7ff ff02 	bl	8000578 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000778:	4618      	mov	r0, r3
 800077a:	f004 ffd7 	bl	800572c <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 800077e:	2200      	movs	r2, #0
 8000780:	4903      	ldr	r1, [pc, #12]	; (8000790 <main+0x1cc>)
 8000782:	2000      	movs	r0, #0
 8000784:	f004 fa9c 	bl	8004cc0 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x1c4>
 800078a:	bf00      	nop
 800078c:	08006328 	.word	0x08006328
 8000790:	08006348 	.word	0x08006348
 8000794:	0800634c 	.word	0x0800634c
 8000798:	08006364 	.word	0x08006364
 800079c:	0800637c 	.word	0x0800637c
 80007a0:	080063c4 	.word	0x080063c4
 80007a4:	080063d0 	.word	0x080063d0
 80007a8:	080063e4 	.word	0x080063e4
 80007ac:	08006414 	.word	0x08006414
 80007b0:	08006440 	.word	0x08006440
 80007b4:	08006454 	.word	0x08006454
 80007b8:	08006460 	.word	0x08006460
 80007bc:	08006490 	.word	0x08006490
 80007c0:	080064a4 	.word	0x080064a4
 80007c4:	080064c8 	.word	0x080064c8

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	; 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 f94a 	bl	8005a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <SystemClock_Config+0xb4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <SystemClock_Config+0xb4>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <SystemClock_Config+0xb4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <SystemClock_Config+0xb8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <SystemClock_Config+0xb8>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <SystemClock_Config+0xb8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fd5f 	bl	80012fc <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000844:	f000 f8ce 	bl	80009e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ffc2 	bl	80017ec <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800086e:	f000 f8b9 	bl	80009e4 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI3_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI3_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI3_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI3_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI3_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI3_Init+0x64>)
 80008d6:	f001 f959 	bl	8001b8c <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f880 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001e8 	.word	0x200001e8
 80008ec:	40003c00 	.word	0x40003c00

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f001 fc26 	bl	8002178 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f857 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000240 	.word	0x20000240
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_GPIO_Init+0x98>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <MX_GPIO_Init+0x98>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_GPIO_Init+0x98>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_GPIO_Init+0x98>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <MX_GPIO_Init+0x98>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_GPIO_Init+0x98>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_GPIO_Init+0x98>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <MX_GPIO_Init+0x98>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_GPIO_Init+0x98>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0x9c>)
 80009b4:	f000 fc88 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0x9c>)
 80009d0:	f000 fade 	bl	8000f90 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aac:	2306      	movs	r3, #6
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_SPI_MspInit+0x8c>)
 8000ab8:	f000 fa6a 	bl	8000f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40003c00 	.word	0x40003c00
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020800 	.word	0x40020800

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12b      	bne.n	8000b4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_UART_MspInit+0x8c>)
 8000b46:	f000 fa23 	bl	8000f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f8c6 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f004 ff1a 	bl	8005a1c <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20020000 	.word	0x20020000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	200001a4 	.word	0x200001a4
 8000c1c:	20000708 	.word	0x20000708

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 fed9 	bl	8005a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fca5 	bl	80005c4 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c88:	08006600 	.word	0x08006600
  ldr r2, =_sbss
 8000c8c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c90:	20000708 	.word	0x20000708

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f931 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe90 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f911 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000284 	.word	0x20000284

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000284 	.word	0x20000284

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e16b      	b.n	8001284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 815a 	bne.w	800127e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80b4 	beq.w	800127e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b60      	ldr	r3, [pc, #384]	; (800129c <HAL_GPIO_Init+0x30c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a5f      	ldr	r2, [pc, #380]	; (800129c <HAL_GPIO_Init+0x30c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <HAL_GPIO_Init+0x30c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <HAL_GPIO_Init+0x310>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_GPIO_Init+0x314>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x318>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x222>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x31c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x21e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x320>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x21a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_GPIO_Init+0x324>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x216>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <HAL_GPIO_Init+0x328>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x212>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x32c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x20e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <HAL_GPIO_Init+0x330>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x20a>
 8001196:	2307      	movs	r3, #7
 8001198:	e00e      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 800119a:	2308      	movs	r3, #8
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 800119e:	2306      	movs	r3, #6
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x310>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_GPIO_Init+0x334>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x334>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_GPIO_Init+0x334>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_GPIO_Init+0x334>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f ae90 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40021c00 	.word	0x40021c00
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e264      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d075      	beq.n	8001406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131a:	4ba3      	ldr	r3, [pc, #652]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00c      	beq.n	8001340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4ba0      	ldr	r3, [pc, #640]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d112      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001332:	4b9d      	ldr	r3, [pc, #628]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133e:	d10b      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	4b99      	ldr	r3, [pc, #612]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d05b      	beq.n	8001404 <HAL_RCC_OscConfig+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d157      	bne.n	8001404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e23f      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d106      	bne.n	8001370 <HAL_RCC_OscConfig+0x74>
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a90      	ldr	r2, [pc, #576]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a8a      	ldr	r2, [pc, #552]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a87      	ldr	r2, [pc, #540]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001394:	4b84      	ldr	r3, [pc, #528]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a83      	ldr	r2, [pc, #524]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a80      	ldr	r2, [pc, #512]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcd6 	bl	8000d64 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcd2 	bl	8000d64 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e204      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xc0>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fcc2 	bl	8000d64 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fcbe 	bl	8000d64 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1f0      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b6c      	ldr	r3, [pc, #432]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0xe8>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d063      	beq.n	80014da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001412:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x152>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1c4      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4952      	ldr	r1, [pc, #328]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e03a      	b.n	80014da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <HAL_RCC_OscConfig+0x2b0>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fc77 	bl	8000d64 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fc73 	bl	8000d64 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1a5      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4940      	ldr	r1, [pc, #256]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <HAL_RCC_OscConfig+0x2b0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc56 	bl	8000d64 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc52 	bl	8000d64 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e184      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d030      	beq.n	8001548 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x2b4>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fc36 	bl	8000d64 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc32 	bl	8000d64 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e164      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x200>
 800151a:	e015      	b.n	8001548 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x2b4>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fc1f 	bl	8000d64 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fc1b 	bl	8000d64 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e14d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a0 	beq.w	8001696 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x2b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d121      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_RCC_OscConfig+0x2b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_RCC_OscConfig+0x2b8>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159e:	f7ff fbe1 	bl	8000d64 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e011      	b.n	80015ca <HAL_RCC_OscConfig+0x2ce>
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	42470000 	.word	0x42470000
 80015b0:	42470e80 	.word	0x42470e80
 80015b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b8:	f7ff fbd4 	bl	8000d64 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e106      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <HAL_RCC_OscConfig+0x4e4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x2f0>
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a80      	ldr	r2, [pc, #512]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	e01c      	b.n	8001626 <HAL_RCC_OscConfig+0x32a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d10c      	bne.n	800160e <HAL_RCC_OscConfig+0x312>
 80015f4:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a7a      	ldr	r2, [pc, #488]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	4b78      	ldr	r3, [pc, #480]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a77      	ldr	r2, [pc, #476]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	e00b      	b.n	8001626 <HAL_RCC_OscConfig+0x32a>
 800160e:	4b75      	ldr	r3, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a74      	ldr	r2, [pc, #464]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	4b72      	ldr	r3, [pc, #456]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a71      	ldr	r2, [pc, #452]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d015      	beq.n	800165a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162e:	f7ff fb99 	bl	8000d64 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff fb95 	bl	8000d64 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e0c5      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	4b65      	ldr	r3, [pc, #404]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ee      	beq.n	8001636 <HAL_RCC_OscConfig+0x33a>
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fb83 	bl	8000d64 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fb7f 	bl	8000d64 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0af      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ee      	bne.n	8001662 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d105      	bne.n	8001696 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168a:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a55      	ldr	r2, [pc, #340]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 809b 	beq.w	80017d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d05c      	beq.n	8001766 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d141      	bne.n	8001738 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b4:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb53 	bl	8000d64 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fb4f 	bl	8000d64 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e081      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	019b      	lsls	r3, r3, #6
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	061b      	lsls	r3, r3, #24
 8001704:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_RCC_OscConfig+0x4ec>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb28 	bl	8000d64 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fb24 	bl	8000d64 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e056      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x41c>
 8001736:	e04e      	b.n	80017d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fb11 	bl	8000d64 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff fb0d 	bl	8000d64 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e03f      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x44a>
 8001764:	e037      	b.n	80017d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e032      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d028      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d121      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d11a      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a2:	4013      	ands	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d111      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40007000 	.word	0x40007000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470060 	.word	0x42470060

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0cc      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d90c      	bls.n	8001828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800184a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d044      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d119      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e067      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4934      	ldr	r1, [pc, #208]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fa42 	bl	8000d64 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fa3e 	bl	8000d64 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e04f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d20c      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f821 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f9a2 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00
 80019a8:	40023800 	.word	0x40023800
 80019ac:	08006524 	.word	0x08006524
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019be:	2100      	movs	r1, #0
 80019c0:	6079      	str	r1, [r7, #4]
 80019c2:	2100      	movs	r1, #0
 80019c4:	60f9      	str	r1, [r7, #12]
 80019c6:	2100      	movs	r1, #0
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019ca:	2100      	movs	r1, #0
 80019cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ce:	4952      	ldr	r1, [pc, #328]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x160>)
 80019d0:	6889      	ldr	r1, [r1, #8]
 80019d2:	f001 010c 	and.w	r1, r1, #12
 80019d6:	2908      	cmp	r1, #8
 80019d8:	d00d      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80019da:	2908      	cmp	r1, #8
 80019dc:	f200 8094 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x150>
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d002      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x32>
 80019e4:	2904      	cmp	r1, #4
 80019e6:	d003      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x38>
 80019e8:	e08e      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x164>)
 80019ec:	60bb      	str	r3, [r7, #8]
       break;
 80019ee:	e08e      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x168>)
 80019f2:	60bb      	str	r3, [r7, #8]
      break;
 80019f4:	e08b      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f6:	4948      	ldr	r1, [pc, #288]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x160>)
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80019fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a00:	4945      	ldr	r1, [pc, #276]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a02:	6849      	ldr	r1, [r1, #4]
 8001a04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001a08:	2900      	cmp	r1, #0
 8001a0a:	d024      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4942      	ldr	r1, [pc, #264]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a0e:	6849      	ldr	r1, [r1, #4]
 8001a10:	0989      	lsrs	r1, r1, #6
 8001a12:	4608      	mov	r0, r1
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a1c:	f04f 0500 	mov.w	r5, #0
 8001a20:	ea00 0204 	and.w	r2, r0, r4
 8001a24:	ea01 0305 	and.w	r3, r1, r5
 8001a28:	493d      	ldr	r1, [pc, #244]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a2a:	fb01 f003 	mul.w	r0, r1, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	fb01 f102 	mul.w	r1, r1, r2
 8001a34:	1844      	adds	r4, r0, r1
 8001a36:	493a      	ldr	r1, [pc, #232]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a38:	fba2 0101 	umull	r0, r1, r2, r1
 8001a3c:	1863      	adds	r3, r4, r1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f7fe fc1a 	bl	8000280 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e04a      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	ea02 0400 	and.w	r4, r2, r0
 8001a6e:	ea03 0501 	and.w	r5, r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	014b      	lsls	r3, r1, #5
 8001a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a84:	0142      	lsls	r2, r0, #5
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	1b00      	subs	r0, r0, r4
 8001a8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	018b      	lsls	r3, r1, #6
 8001a9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a9e:	0182      	lsls	r2, r0, #6
 8001aa0:	1a12      	subs	r2, r2, r0
 8001aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	00d9      	lsls	r1, r3, #3
 8001ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab4:	00d0      	lsls	r0, r2, #3
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	1912      	adds	r2, r2, r4
 8001abc:	eb45 0303 	adc.w	r3, r5, r3
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0299      	lsls	r1, r3, #10
 8001aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ace:	0290      	lsls	r0, r2, #10
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	f7fe fbce 	bl	8000280 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	60bb      	str	r3, [r7, #8]
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x164>)
 8001b0a:	60bb      	str	r3, [r7, #8]
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	00f42400 	.word	0x00f42400
 8001b20:	017d7840 	.word	0x017d7840

08001b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000

08001b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0a9b      	lsrs	r3, r3, #10
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08006534 	.word	0x08006534

08001b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b68:	f7ff ffdc 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0b5b      	lsrs	r3, r3, #13
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08006534 	.word	0x08006534

08001b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07b      	b.n	8001c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d108      	bne.n	8001bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bae:	d009      	beq.n	8001bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
 8001bb6:	e005      	b.n	8001bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe ff2e 	bl	8000a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	ea42 0103 	orr.w	r1, r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0104 	and.w	r1, r3, #4
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f003 0210 	and.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b08c      	sub	sp, #48	; 0x30
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x26>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e18a      	b.n	8001fda <HAL_SPI_TransmitReceive+0x33c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ccc:	f7ff f84a 	bl	8000d64 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d00f      	beq.n	8001d0e <HAL_SPI_TransmitReceive+0x70>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cf4:	d107      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x68>
 8001cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d003      	beq.n	8001d0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d0c:	e15b      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x82>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x82>
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d26:	e14e      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d003      	beq.n	8001d3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2205      	movs	r2, #5
 8001d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	887a      	ldrh	r2, [r7, #2]
 8001d5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7c:	2b40      	cmp	r3, #64	; 0x40
 8001d7e:	d007      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d98:	d178      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_SPI_TransmitReceive+0x10a>
 8001da2:	8b7b      	ldrh	r3, [r7, #26]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d166      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dcc:	e053      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d11b      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x176>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_SPI_TransmitReceive+0x176>
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d113      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <HAL_SPI_TransmitReceive+0x1b8>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d014      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	b292      	uxth	r2, r2
 8001e38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	1c9a      	adds	r2, r3, #2
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e52:	2301      	movs	r3, #1
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e56:	f7fe ff85 	bl	8000d64 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d807      	bhi.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d003      	beq.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e74:	e0a7      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1a6      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x130>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1a1      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x130>
 8001e8a:	e07c      	b.n	8001f86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x1fc>
 8001e94:	8b7b      	ldrh	r3, [r7, #26]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d16b      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ec0:	e057      	b.n	8001f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d11c      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x26c>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0x26c>
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d114      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d119      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x2ae>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d014      	beq.n	8001f4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f4c:	f7fe ff0a 	bl	8000d64 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d803      	bhi.n	8001f64 <HAL_SPI_TransmitReceive+0x2c6>
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_TransmitReceive+0x2cc>
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f70:	e029      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1a2      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x224>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d19d      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f8b2 	bl	80020f4 <SPI_EndRxTxTransaction>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001fa2:	e010      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	e000      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3730      	adds	r7, #48	; 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ff4:	f7fe feb6 	bl	8000d64 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002004:	f7fe feae 	bl	8000d64 <HAL_GetTick>
 8002008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800201a:	e054      	b.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d050      	beq.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002024:	f7fe fe9e 	bl	8000d64 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	d902      	bls.n	800203a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d13d      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002052:	d111      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d004      	beq.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002066:	d107      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d10f      	bne.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e017      	b.n	80020e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d19b      	bne.n	800201c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000

080020f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <SPI_EndRxTxTransaction+0x7c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <SPI_EndRxTxTransaction+0x80>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211e:	d112      	bne.n	8002146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff ff5a 	bl	8001fe4 <SPI_WaitFlagStateUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3b01      	subs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d0f2      	beq.n	8002146 <SPI_EndRxTxTransaction+0x52>
 8002160:	e000      	b.n	8002164 <SPI_EndRxTxTransaction+0x70>
        break;
 8002162:	bf00      	nop
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000
 8002174:	165e9f81 	.word	0x165e9f81

08002178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e03f      	b.n	800220a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fc96 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f929 	bl	8002414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b08a      	sub	sp, #40	; 0x28
 8002216:	af02      	add	r7, sp, #8
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d17c      	bne.n	800232c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Transmit+0x2c>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e075      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_UART_Transmit+0x3e>
 800224c:	2302      	movs	r3, #2
 800224e:	e06e      	b.n	800232e <HAL_UART_Transmit+0x11c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fd7d 	bl	8000d64 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x82>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022a4:	e02a      	b.n	80022fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f840 	bl	8002336 <UART_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e036      	b.n	800232e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cf      	bne.n	80022a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2140      	movs	r1, #64	; 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f810 	bl	8002336 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e006      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b090      	sub	sp, #64	; 0x40
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002346:	e050      	b.n	80023ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d04c      	beq.n	80023ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0x30>
 8002356:	f7fe fd05 	bl	8000d64 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002362:	429a      	cmp	r2, r3
 8002364:	d241      	bcs.n	80023ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	330c      	adds	r3, #12
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	e853 3f00 	ldrex	r3, [r3]
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002386:	637a      	str	r2, [r7, #52]	; 0x34
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800238c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e5      	bne.n	8002366 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3314      	adds	r3, #20
 80023a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	e853 3f00 	ldrex	r3, [r3]
 80023a8:	613b      	str	r3, [r7, #16]
   return(result);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ba:	623a      	str	r2, [r7, #32]
 80023bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	69f9      	ldr	r1, [r7, #28]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e5      	bne.n	800239a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e00f      	b.n	800240a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	429a      	cmp	r2, r3
 8002406:	d09f      	beq.n	8002348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3740      	adds	r7, #64	; 0x40
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002418:	b09f      	sub	sp, #124	; 0x7c
 800241a:	af00      	add	r7, sp, #0
 800241c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	68d9      	ldr	r1, [r3, #12]
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	ea40 0301 	orr.w	r3, r0, r1
 8002434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	431a      	orrs	r2, r3
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	431a      	orrs	r2, r3
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4313      	orrs	r3, r2
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002458:	f021 010c 	bic.w	r1, r1, #12
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002462:	430b      	orrs	r3, r1
 8002464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	6999      	ldr	r1, [r3, #24]
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	ea40 0301 	orr.w	r3, r0, r1
 800247c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4bc5      	ldr	r3, [pc, #788]	; (8002798 <UART_SetConfig+0x384>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d004      	beq.n	8002492 <UART_SetConfig+0x7e>
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4bc3      	ldr	r3, [pc, #780]	; (800279c <UART_SetConfig+0x388>)
 800248e:	429a      	cmp	r2, r3
 8002490:	d103      	bne.n	800249a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002492:	f7ff fb67 	bl	8001b64 <HAL_RCC_GetPCLK2Freq>
 8002496:	6778      	str	r0, [r7, #116]	; 0x74
 8002498:	e002      	b.n	80024a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249a:	f7ff fb4f 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800249e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a8:	f040 80b6 	bne.w	8002618 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	461c      	mov	r4, r3
 80024b0:	f04f 0500 	mov.w	r5, #0
 80024b4:	4622      	mov	r2, r4
 80024b6:	462b      	mov	r3, r5
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	6439      	str	r1, [r7, #64]	; 0x40
 80024bc:	415b      	adcs	r3, r3
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
 80024c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024c4:	1912      	adds	r2, r2, r4
 80024c6:	eb45 0303 	adc.w	r3, r5, r3
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	00d9      	lsls	r1, r3, #3
 80024d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024d8:	00d0      	lsls	r0, r2, #3
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	1911      	adds	r1, r2, r4
 80024e0:	6639      	str	r1, [r7, #96]	; 0x60
 80024e2:	416b      	adcs	r3, r5
 80024e4:	667b      	str	r3, [r7, #100]	; 0x64
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024f4:	415b      	adcs	r3, r3
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002500:	f7fd febe 	bl	8000280 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4ba5      	ldr	r3, [pc, #660]	; (80027a0 <UART_SetConfig+0x38c>)
 800250a:	fba3 2302 	umull	r2, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	011e      	lsls	r6, r3, #4
 8002512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002514:	461c      	mov	r4, r3
 8002516:	f04f 0500 	mov.w	r5, #0
 800251a:	4622      	mov	r2, r4
 800251c:	462b      	mov	r3, r5
 800251e:	1891      	adds	r1, r2, r2
 8002520:	6339      	str	r1, [r7, #48]	; 0x30
 8002522:	415b      	adcs	r3, r3
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
 8002526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800252a:	1912      	adds	r2, r2, r4
 800252c:	eb45 0303 	adc.w	r3, r5, r3
 8002530:	f04f 0000 	mov.w	r0, #0
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	00d9      	lsls	r1, r3, #3
 800253a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800253e:	00d0      	lsls	r0, r2, #3
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	1911      	adds	r1, r2, r4
 8002546:	65b9      	str	r1, [r7, #88]	; 0x58
 8002548:	416b      	adcs	r3, r5
 800254a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	1891      	adds	r1, r2, r2
 8002558:	62b9      	str	r1, [r7, #40]	; 0x28
 800255a:	415b      	adcs	r3, r3
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002562:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002566:	f7fd fe8b 	bl	8000280 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4b8c      	ldr	r3, [pc, #560]	; (80027a0 <UART_SetConfig+0x38c>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	2164      	movs	r1, #100	; 0x64
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	3332      	adds	r3, #50	; 0x32
 8002582:	4a87      	ldr	r2, [pc, #540]	; (80027a0 <UART_SetConfig+0x38c>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002590:	441e      	add	r6, r3
 8002592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002594:	4618      	mov	r0, r3
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	1894      	adds	r4, r2, r2
 80025a0:	623c      	str	r4, [r7, #32]
 80025a2:	415b      	adcs	r3, r3
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025aa:	1812      	adds	r2, r2, r0
 80025ac:	eb41 0303 	adc.w	r3, r1, r3
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	f04f 0500 	mov.w	r5, #0
 80025b8:	00dd      	lsls	r5, r3, #3
 80025ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025be:	00d4      	lsls	r4, r2, #3
 80025c0:	4622      	mov	r2, r4
 80025c2:	462b      	mov	r3, r5
 80025c4:	1814      	adds	r4, r2, r0
 80025c6:	653c      	str	r4, [r7, #80]	; 0x50
 80025c8:	414b      	adcs	r3, r1
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	461a      	mov	r2, r3
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	1891      	adds	r1, r2, r2
 80025d8:	61b9      	str	r1, [r7, #24]
 80025da:	415b      	adcs	r3, r3
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025e6:	f7fd fe4b 	bl	8000280 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <UART_SetConfig+0x38c>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2164      	movs	r1, #100	; 0x64
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	3332      	adds	r3, #50	; 0x32
 8002602:	4a67      	ldr	r2, [pc, #412]	; (80027a0 <UART_SetConfig+0x38c>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4432      	add	r2, r6
 8002614:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002616:	e0b9      	b.n	800278c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261a:	461c      	mov	r4, r3
 800261c:	f04f 0500 	mov.w	r5, #0
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	1891      	adds	r1, r2, r2
 8002626:	6139      	str	r1, [r7, #16]
 8002628:	415b      	adcs	r3, r3
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002630:	1912      	adds	r2, r2, r4
 8002632:	eb45 0303 	adc.w	r3, r5, r3
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	00d9      	lsls	r1, r3, #3
 8002640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002644:	00d0      	lsls	r0, r2, #3
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	eb12 0804 	adds.w	r8, r2, r4
 800264e:	eb43 0905 	adc.w	r9, r3, r5
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	008b      	lsls	r3, r1, #2
 8002666:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800266a:	0082      	lsls	r2, r0, #2
 800266c:	4640      	mov	r0, r8
 800266e:	4649      	mov	r1, r9
 8002670:	f7fd fe06 	bl	8000280 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <UART_SetConfig+0x38c>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	011e      	lsls	r6, r3, #4
 8002682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002684:	4618      	mov	r0, r3
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	1894      	adds	r4, r2, r2
 8002690:	60bc      	str	r4, [r7, #8]
 8002692:	415b      	adcs	r3, r3
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800269a:	1812      	adds	r2, r2, r0
 800269c:	eb41 0303 	adc.w	r3, r1, r3
 80026a0:	f04f 0400 	mov.w	r4, #0
 80026a4:	f04f 0500 	mov.w	r5, #0
 80026a8:	00dd      	lsls	r5, r3, #3
 80026aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026ae:	00d4      	lsls	r4, r2, #3
 80026b0:	4622      	mov	r2, r4
 80026b2:	462b      	mov	r3, r5
 80026b4:	1814      	adds	r4, r2, r0
 80026b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80026b8:	414b      	adcs	r3, r1
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	008b      	lsls	r3, r1, #2
 80026d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026d4:	0082      	lsls	r2, r0, #2
 80026d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026da:	f7fd fdd1 	bl	8000280 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <UART_SetConfig+0x38c>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <UART_SetConfig+0x38c>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002702:	441e      	add	r6, r3
 8002704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002706:	4618      	mov	r0, r3
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	1894      	adds	r4, r2, r2
 8002712:	603c      	str	r4, [r7, #0]
 8002714:	415b      	adcs	r3, r3
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800271c:	1812      	adds	r2, r2, r0
 800271e:	eb41 0303 	adc.w	r3, r1, r3
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	f04f 0500 	mov.w	r5, #0
 800272a:	00dd      	lsls	r5, r3, #3
 800272c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002730:	00d4      	lsls	r4, r2, #3
 8002732:	4622      	mov	r2, r4
 8002734:	462b      	mov	r3, r5
 8002736:	eb12 0a00 	adds.w	sl, r2, r0
 800273a:	eb43 0b01 	adc.w	fp, r3, r1
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	008b      	lsls	r3, r1, #2
 8002752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002756:	0082      	lsls	r2, r0, #2
 8002758:	4650      	mov	r0, sl
 800275a:	4659      	mov	r1, fp
 800275c:	f7fd fd90 	bl	8000280 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <UART_SetConfig+0x38c>)
 8002766:	fba3 1302 	umull	r1, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2164      	movs	r1, #100	; 0x64
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	3332      	adds	r3, #50	; 0x32
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <UART_SetConfig+0x38c>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4432      	add	r2, r6
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	377c      	adds	r7, #124	; 0x7c
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	51eb851f 	.word	0x51eb851f

080027a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <MX_FATFS_Init+0x18>)
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_FATFS_Init+0x1c>)
 80027ac:	f003 f926 	bl	80059fc <FATFS_LinkDriver>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <MX_FATFS_Init+0x20>)
 80027b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000288 	.word	0x20000288
 80027c0:	2000000c 	.word	0x2000000c
 80027c4:	2000028c 	.word	0x2000028c

080027c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80027cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f9d9 	bl	8002b9c <USER_SPI_initialize>
 80027ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fab7 	bl	8002d74 <USER_SPI_status>
 8002806:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8002820:	7bf8      	ldrb	r0, [r7, #15]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	f000 faba 	bl	8002da0 <USER_SPI_read>
 800282c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4603      	mov	r3, r0
 8002844:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8002846:	7bf8      	ldrb	r0, [r7, #15]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	f000 fb0d 	bl	8002e6c <USER_SPI_write>
 8002852:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	603a      	str	r2, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	460b      	mov	r3, r1
 800286a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800286c:	79b9      	ldrb	r1, [r7, #6]
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fb76 	bl	8002f64 <USER_SPI_ioctl>
 8002878:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800288c:	f7fe fa6a 	bl	8000d64 <HAL_GetTick>
 8002890:	4603      	mov	r3, r0
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <SPI_Timer_On+0x20>)
 8002894:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <SPI_Timer_On+0x24>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200006f0 	.word	0x200006f0
 80028a8:	200006f4 	.word	0x200006f4

080028ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80028b0:	f7fe fa58 	bl	8000d64 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SPI_Timer_Status+0x24>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SPI_Timer_Status+0x28>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	bf34      	ite	cc
 80028c4:	2301      	movcc	r3, #1
 80028c6:	2300      	movcs	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200006f0 	.word	0x200006f0
 80028d4:	200006f4 	.word	0x200006f4

080028d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af02      	add	r7, sp, #8
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80028e2:	f107 020f 	add.w	r2, r7, #15
 80028e6:	1df9      	adds	r1, r7, #7
 80028e8:	2332      	movs	r3, #50	; 0x32
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2301      	movs	r3, #1
 80028ee:	4804      	ldr	r0, [pc, #16]	; (8002900 <xchg_spi+0x28>)
 80028f0:	f7ff f9d5 	bl	8001c9e <HAL_SPI_TransmitReceive>
    return rxDat;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200001e8 	.word	0x200001e8

08002904 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e00a      	b.n	800292a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	18d4      	adds	r4, r2, r3
 800291a:	20ff      	movs	r0, #255	; 0xff
 800291c:	f7ff ffdc 	bl	80028d8 <xchg_spi>
 8002920:	4603      	mov	r3, r0
 8002922:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d3f0      	bcc.n	8002914 <rcvr_spi_multi+0x10>
	}
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}

0800293c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e009      	b.n	8002960 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ffbf 	bl	80028d8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3f1      	bcc.n	800294c <xmit_spi_multi+0x10>
	}
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800297a:	f7fe f9f3 	bl	8000d64 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002984:	20ff      	movs	r0, #255	; 0xff
 8002986:	f7ff ffa7 	bl	80028d8 <xchg_spi>
 800298a:	4603      	mov	r3, r0
 800298c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2bff      	cmp	r3, #255	; 0xff
 8002992:	d007      	beq.n	80029a4 <wait_ready+0x32>
 8002994:	f7fe f9e6 	bl	8000d64 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d8ef      	bhi.n	8002984 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80029bc:	2201      	movs	r2, #1
 80029be:	2102      	movs	r1, #2
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <despiselect+0x18>)
 80029c2:	f7fe fc81 	bl	80012c8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80029c6:	20ff      	movs	r0, #255	; 0xff
 80029c8:	f7ff ff86 	bl	80028d8 <xchg_spi>

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000

080029d4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80029d8:	2200      	movs	r2, #0
 80029da:	2102      	movs	r1, #2
 80029dc:	4809      	ldr	r0, [pc, #36]	; (8002a04 <spiselect+0x30>)
 80029de:	f7fe fc73 	bl	80012c8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80029e2:	20ff      	movs	r0, #255	; 0xff
 80029e4:	f7ff ff78 	bl	80028d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80029e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ec:	f7ff ffc1 	bl	8002972 <wait_ready>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <spiselect+0x26>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e002      	b.n	8002a00 <spiselect+0x2c>

	despiselect();
 80029fa:	f7ff ffdd 	bl	80029b8 <despiselect>
	return 0;	/* Timeout */
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000

08002a08 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002a12:	20c8      	movs	r0, #200	; 0xc8
 8002a14:	f7ff ff36 	bl	8002884 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002a18:	20ff      	movs	r0, #255	; 0xff
 8002a1a:	f7ff ff5d 	bl	80028d8 <xchg_spi>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2bff      	cmp	r3, #255	; 0xff
 8002a26:	d104      	bne.n	8002a32 <rcvr_datablock+0x2a>
 8002a28:	f7ff ff40 	bl	80028ac <SPI_Timer_Status>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f2      	bne.n	8002a18 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2bfe      	cmp	r3, #254	; 0xfe
 8002a36:	d001      	beq.n	8002a3c <rcvr_datablock+0x34>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e00a      	b.n	8002a52 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff60 	bl	8002904 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002a44:	20ff      	movs	r0, #255	; 0xff
 8002a46:	f7ff ff47 	bl	80028d8 <xchg_spi>
 8002a4a:	20ff      	movs	r0, #255	; 0xff
 8002a4c:	f7ff ff44 	bl	80028d8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a6a:	f7ff ff82 	bl	8002972 <wait_ready>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <xmit_datablock+0x1e>
 8002a74:	2300      	movs	r3, #0
 8002a76:	e01e      	b.n	8002ab6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff2c 	bl	80028d8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	2bfd      	cmp	r3, #253	; 0xfd
 8002a84:	d016      	beq.n	8002ab4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff56 	bl	800293c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002a90:	20ff      	movs	r0, #255	; 0xff
 8002a92:	f7ff ff21 	bl	80028d8 <xchg_spi>
 8002a96:	20ff      	movs	r0, #255	; 0xff
 8002a98:	f7ff ff1e 	bl	80028d8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002a9c:	20ff      	movs	r0, #255	; 0xff
 8002a9e:	f7ff ff1b 	bl	80028d8 <xchg_spi>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d001      	beq.n	8002ab4 <xmit_datablock+0x5a>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <xmit_datablock+0x5c>
	}
	return 1;
 8002ab4:	2301      	movs	r3, #1
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	6039      	str	r1, [r7, #0]
 8002ac8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	da0e      	bge.n	8002af0 <send_cmd+0x32>
		cmd &= 0x7F;
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ad8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002ada:	2100      	movs	r1, #0
 8002adc:	2037      	movs	r0, #55	; 0x37
 8002ade:	f7ff ffee 	bl	8002abe <send_cmd>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d901      	bls.n	8002af0 <send_cmd+0x32>
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	e051      	b.n	8002b94 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d008      	beq.n	8002b08 <send_cmd+0x4a>
		despiselect();
 8002af6:	f7ff ff5f 	bl	80029b8 <despiselect>
		if (!spiselect()) return 0xFF;
 8002afa:	f7ff ff6b 	bl	80029d4 <spiselect>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <send_cmd+0x4a>
 8002b04:	23ff      	movs	r3, #255	; 0xff
 8002b06:	e045      	b.n	8002b94 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fee1 	bl	80028d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	0e1b      	lsrs	r3, r3, #24
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fedb 	bl	80028d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fed5 	bl	80028d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fecf 	bl	80028d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff feca 	bl	80028d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <send_cmd+0x94>
 8002b4e:	2395      	movs	r3, #149	; 0x95
 8002b50:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d101      	bne.n	8002b5c <send_cmd+0x9e>
 8002b58:	2387      	movs	r3, #135	; 0x87
 8002b5a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff feba 	bl	80028d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d102      	bne.n	8002b70 <send_cmd+0xb2>
 8002b6a:	20ff      	movs	r0, #255	; 0xff
 8002b6c:	f7ff feb4 	bl	80028d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002b70:	230a      	movs	r3, #10
 8002b72:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002b74:	20ff      	movs	r0, #255	; 0xff
 8002b76:	f7ff feaf 	bl	80028d8 <xchg_spi>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	da05      	bge.n	8002b92 <send_cmd+0xd4>
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <USER_SPI_initialize+0x14>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d6      	b.n	8002d5e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002bb0:	4b6d      	ldr	r3, [pc, #436]	; (8002d68 <USER_SPI_initialize+0x1cc>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <USER_SPI_initialize+0x2a>
 8002bbe:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <USER_SPI_initialize+0x1cc>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e0cb      	b.n	8002d5e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002bc6:	4b69      	ldr	r3, [pc, #420]	; (8002d6c <USER_SPI_initialize+0x1d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <USER_SPI_initialize+0x1d0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002bd8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002bda:	230a      	movs	r3, #10
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e005      	b.n	8002bec <USER_SPI_initialize+0x50>
 8002be0:	20ff      	movs	r0, #255	; 0xff
 8002be2:	f7ff fe79 	bl	80028d8 <xchg_spi>
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f6      	bne.n	8002be0 <USER_SPI_initialize+0x44>

	ty = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7ff ff60 	bl	8002abe <send_cmd>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 808b 	bne.w	8002d1c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c0a:	f7ff fe3b 	bl	8002884 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002c0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002c12:	2008      	movs	r0, #8
 8002c14:	f7ff ff53 	bl	8002abe <send_cmd>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d151      	bne.n	8002cc2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e00d      	b.n	8002c40 <USER_SPI_initialize+0xa4>
 8002c24:	7bfc      	ldrb	r4, [r7, #15]
 8002c26:	20ff      	movs	r0, #255	; 0xff
 8002c28:	f7ff fe56 	bl	80028d8 <xchg_spi>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4423      	add	r3, r4
 8002c36:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d9ee      	bls.n	8002c24 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002c46:	7abb      	ldrb	r3, [r7, #10]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d167      	bne.n	8002d1c <USER_SPI_initialize+0x180>
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	2baa      	cmp	r3, #170	; 0xaa
 8002c50:	d164      	bne.n	8002d1c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002c52:	bf00      	nop
 8002c54:	f7ff fe2a 	bl	80028ac <SPI_Timer_Status>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <USER_SPI_initialize+0xd2>
 8002c5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c62:	20a9      	movs	r0, #169	; 0xa9
 8002c64:	f7ff ff2b 	bl	8002abe <send_cmd>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f2      	bne.n	8002c54 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002c6e:	f7ff fe1d 	bl	80028ac <SPI_Timer_Status>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d051      	beq.n	8002d1c <USER_SPI_initialize+0x180>
 8002c78:	2100      	movs	r1, #0
 8002c7a:	203a      	movs	r0, #58	; 0x3a
 8002c7c:	f7ff ff1f 	bl	8002abe <send_cmd>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d14a      	bne.n	8002d1c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e00d      	b.n	8002ca8 <USER_SPI_initialize+0x10c>
 8002c8c:	7bfc      	ldrb	r4, [r7, #15]
 8002c8e:	20ff      	movs	r0, #255	; 0xff
 8002c90:	f7ff fe22 	bl	80028d8 <xchg_spi>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	4423      	add	r3, r4
 8002c9e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d9ee      	bls.n	8002c8c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002cae:	7a3b      	ldrb	r3, [r7, #8]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <USER_SPI_initialize+0x120>
 8002cb8:	230c      	movs	r3, #12
 8002cba:	e000      	b.n	8002cbe <USER_SPI_initialize+0x122>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	737b      	strb	r3, [r7, #13]
 8002cc0:	e02c      	b.n	8002d1c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	20a9      	movs	r0, #169	; 0xa9
 8002cc6:	f7ff fefa 	bl	8002abe <send_cmd>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d804      	bhi.n	8002cda <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	737b      	strb	r3, [r7, #13]
 8002cd4:	23a9      	movs	r3, #169	; 0xa9
 8002cd6:	73bb      	strb	r3, [r7, #14]
 8002cd8:	e003      	b.n	8002ce2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002cda:	2301      	movs	r3, #1
 8002cdc:	737b      	strb	r3, [r7, #13]
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002ce2:	bf00      	nop
 8002ce4:	f7ff fde2 	bl	80028ac <SPI_Timer_Status>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <USER_SPI_initialize+0x162>
 8002cee:	7bbb      	ldrb	r3, [r7, #14]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fee3 	bl	8002abe <send_cmd>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f2      	bne.n	8002ce4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002cfe:	f7ff fdd5 	bl	80028ac <SPI_Timer_Status>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <USER_SPI_initialize+0x17c>
 8002d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d0c:	2010      	movs	r0, #16
 8002d0e:	f7ff fed6 	bl	8002abe <send_cmd>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <USER_SPI_initialize+0x180>
				ty = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <USER_SPI_initialize+0x1d4>)
 8002d1e:	7b7b      	ldrb	r3, [r7, #13]
 8002d20:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002d22:	f7ff fe49 	bl	80029b8 <despiselect>

	if (ty) {			/* OK */
 8002d26:	7b7b      	ldrb	r3, [r7, #13]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d012      	beq.n	8002d52 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <USER_SPI_initialize+0x1d0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <USER_SPI_initialize+0x1d0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <USER_SPI_initialize+0x1cc>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <USER_SPI_initialize+0x1cc>)
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e002      	b.n	8002d58 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <USER_SPI_initialize+0x1cc>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <USER_SPI_initialize+0x1cc>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000020 	.word	0x20000020
 8002d6c:	200001e8 	.word	0x200001e8
 8002d70:	200001a8 	.word	0x200001a8

08002d74 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <USER_SPI_status+0x14>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e002      	b.n	8002d8e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <USER_SPI_status+0x28>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000020 	.word	0x20000020

08002da0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <USER_SPI_read+0x1c>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <USER_SPI_read+0x20>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e04d      	b.n	8002e5c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <USER_SPI_read+0xc4>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <USER_SPI_read+0x32>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e044      	b.n	8002e5c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <USER_SPI_read+0xc8>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <USER_SPI_read+0x44>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d111      	bne.n	8002e0e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	2011      	movs	r0, #17
 8002dee:	f7ff fe66 	bl	8002abe <send_cmd>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d129      	bne.n	8002e4c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfc:	68b8      	ldr	r0, [r7, #8]
 8002dfe:	f7ff fe03 	bl	8002a08 <rcvr_datablock>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d021      	beq.n	8002e4c <USER_SPI_read+0xac>
			count = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	e01e      	b.n	8002e4c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	2012      	movs	r0, #18
 8002e12:	f7ff fe54 	bl	8002abe <send_cmd>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d117      	bne.n	8002e4c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e20:	68b8      	ldr	r0, [r7, #8]
 8002e22:	f7ff fdf1 	bl	8002a08 <rcvr_datablock>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <USER_SPI_read+0xa2>
				buff += 512;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e32:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ed      	bne.n	8002e1c <USER_SPI_read+0x7c>
 8002e40:	e000      	b.n	8002e44 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002e42:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002e44:	2100      	movs	r1, #0
 8002e46:	200c      	movs	r0, #12
 8002e48:	f7ff fe39 	bl	8002abe <send_cmd>
		}
	}
	despiselect();
 8002e4c:	f7ff fdb4 	bl	80029b8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000020 	.word	0x20000020
 8002e68:	200001a8 	.word	0x200001a8

08002e6c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <USER_SPI_write+0x1c>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <USER_SPI_write+0x20>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e063      	b.n	8002f54 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002e8c:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <USER_SPI_write+0xf0>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <USER_SPI_write+0x32>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e05a      	b.n	8002f54 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <USER_SPI_write+0xf0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <USER_SPI_write+0x44>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e051      	b.n	8002f54 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <USER_SPI_write+0xf4>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <USER_SPI_write+0x56>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	025b      	lsls	r3, r3, #9
 8002ec0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d110      	bne.n	8002eea <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	2018      	movs	r0, #24
 8002ecc:	f7ff fdf7 	bl	8002abe <send_cmd>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d136      	bne.n	8002f44 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002ed6:	21fe      	movs	r1, #254	; 0xfe
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f7ff fdbe 	bl	8002a5a <xmit_datablock>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02f      	beq.n	8002f44 <USER_SPI_write+0xd8>
			count = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	e02c      	b.n	8002f44 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <USER_SPI_write+0xf4>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	f003 0306 	and.w	r3, r3, #6
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <USER_SPI_write+0x92>
 8002ef6:	6839      	ldr	r1, [r7, #0]
 8002ef8:	2097      	movs	r0, #151	; 0x97
 8002efa:	f7ff fde0 	bl	8002abe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	2019      	movs	r0, #25
 8002f02:	f7ff fddc 	bl	8002abe <send_cmd>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11b      	bne.n	8002f44 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002f0c:	21fc      	movs	r1, #252	; 0xfc
 8002f0e:	68b8      	ldr	r0, [r7, #8]
 8002f10:	f7ff fda3 	bl	8002a5a <xmit_datablock>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <USER_SPI_write+0xc4>
				buff += 512;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f20:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <USER_SPI_write+0xa0>
 8002f2e:	e000      	b.n	8002f32 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002f30:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002f32:	21fd      	movs	r1, #253	; 0xfd
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff fd90 	bl	8002a5a <xmit_datablock>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <USER_SPI_write+0xd8>
 8002f40:	2301      	movs	r3, #1
 8002f42:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002f44:	f7ff fd38 	bl	80029b8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000020 	.word	0x20000020
 8002f60:	200001a8 	.word	0x200001a8

08002f64 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	; 0x30
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	603a      	str	r2, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	460b      	mov	r3, r1
 8002f72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <USER_SPI_ioctl+0x1a>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e15a      	b.n	8003234 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002f7e:	4baf      	ldr	r3, [pc, #700]	; (800323c <USER_SPI_ioctl+0x2d8>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <USER_SPI_ioctl+0x2c>
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e151      	b.n	8003234 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002f96:	79bb      	ldrb	r3, [r7, #6]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	f200 8136 	bhi.w	800320a <USER_SPI_ioctl+0x2a6>
 8002f9e:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <USER_SPI_ioctl+0x40>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb9 	.word	0x08002fb9
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	0800320b 	.word	0x0800320b
 8002fb0:	08003079 	.word	0x08003079
 8002fb4:	0800316f 	.word	0x0800316f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002fb8:	f7ff fd0c 	bl	80029d4 <spiselect>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8127 	beq.w	8003212 <USER_SPI_ioctl+0x2ae>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002fca:	e122      	b.n	8003212 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2009      	movs	r0, #9
 8002fd0:	f7ff fd75 	bl	8002abe <send_cmd>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 811d 	bne.w	8003216 <USER_SPI_ioctl+0x2b2>
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	2110      	movs	r1, #16
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fd10 	bl	8002a08 <rcvr_datablock>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8113 	beq.w	8003216 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002ff0:	7b3b      	ldrb	r3, [r7, #12]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d111      	bne.n	800301e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002ffa:	7d7b      	ldrb	r3, [r7, #21]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	7d3b      	ldrb	r3, [r7, #20]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	4413      	add	r3, r2
 8003004:	461a      	mov	r2, r3
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800300e:	4413      	add	r3, r2
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	029a      	lsls	r2, r3, #10
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e028      	b.n	8003070 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800301e:	7c7b      	ldrb	r3, [r7, #17]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	b2da      	uxtb	r2, r3
 8003026:	7dbb      	ldrb	r3, [r7, #22]
 8003028:	09db      	lsrs	r3, r3, #7
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4413      	add	r3, r2
 800302e:	b2da      	uxtb	r2, r3
 8003030:	7d7b      	ldrb	r3, [r7, #21]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0306 	and.w	r3, r3, #6
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4413      	add	r3, r2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3302      	adds	r3, #2
 8003042:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003046:	7d3b      	ldrb	r3, [r7, #20]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	7cbb      	ldrb	r3, [r7, #18]
 8003056:	029b      	lsls	r3, r3, #10
 8003058:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800305c:	4413      	add	r3, r2
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003062:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003066:	3b09      	subs	r3, #9
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	409a      	lsls	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003076:	e0ce      	b.n	8003216 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <USER_SPI_ioctl+0x2dc>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d031      	beq.n	80030e8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003084:	2100      	movs	r1, #0
 8003086:	208d      	movs	r0, #141	; 0x8d
 8003088:	f7ff fd19 	bl	8002abe <send_cmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80c3 	bne.w	800321a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003094:	20ff      	movs	r0, #255	; 0xff
 8003096:	f7ff fc1f 	bl	80028d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	2110      	movs	r1, #16
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fcb1 	bl	8002a08 <rcvr_datablock>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80b6 	beq.w	800321a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80030ae:	2330      	movs	r3, #48	; 0x30
 80030b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80030b4:	e007      	b.n	80030c6 <USER_SPI_ioctl+0x162>
 80030b6:	20ff      	movs	r0, #255	; 0xff
 80030b8:	f7ff fc0e 	bl	80028d8 <xchg_spi>
 80030bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030c0:	3b01      	subs	r3, #1
 80030c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80030c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f3      	bne.n	80030b6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80030ce:	7dbb      	ldrb	r3, [r7, #22]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	2310      	movs	r3, #16
 80030d8:	fa03 f202 	lsl.w	r2, r3, r2
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80030e6:	e098      	b.n	800321a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80030e8:	2100      	movs	r1, #0
 80030ea:	2009      	movs	r0, #9
 80030ec:	f7ff fce7 	bl	8002abe <send_cmd>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 8091 	bne.w	800321a <USER_SPI_ioctl+0x2b6>
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	2110      	movs	r1, #16
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fc82 	bl	8002a08 <rcvr_datablock>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8087 	beq.w	800321a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <USER_SPI_ioctl+0x2dc>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003118:	7dbb      	ldrb	r3, [r7, #22]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003120:	7dfa      	ldrb	r2, [r7, #23]
 8003122:	09d2      	lsrs	r2, r2, #7
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	4413      	add	r3, r2
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	7e7b      	ldrb	r3, [r7, #25]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	461a      	mov	r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e013      	b.n	8003166 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800313e:	7dbb      	ldrb	r3, [r7, #22]
 8003140:	109b      	asrs	r3, r3, #2
 8003142:	b29b      	uxth	r3, r3
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	3301      	adds	r3, #1
 800314a:	7dfa      	ldrb	r2, [r7, #23]
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	f002 0218 	and.w	r2, r2, #24
 8003152:	7df9      	ldrb	r1, [r7, #23]
 8003154:	0949      	lsrs	r1, r1, #5
 8003156:	b2c9      	uxtb	r1, r1
 8003158:	440a      	add	r2, r1
 800315a:	3201      	adds	r2, #1
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	461a      	mov	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800316c:	e055      	b.n	800321a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800316e:	4b34      	ldr	r3, [pc, #208]	; (8003240 <USER_SPI_ioctl+0x2dc>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	f003 0306 	and.w	r3, r3, #6
 8003176:	2b00      	cmp	r3, #0
 8003178:	d051      	beq.n	800321e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800317a:	f107 020c 	add.w	r2, r7, #12
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	210b      	movs	r1, #11
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff feee 	bl	8002f64 <USER_SPI_ioctl>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d149      	bne.n	8003222 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800318e:	7b3b      	ldrb	r3, [r7, #12]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <USER_SPI_ioctl+0x23e>
 8003198:	7dbb      	ldrb	r3, [r7, #22]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d041      	beq.n	8003226 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <USER_SPI_ioctl+0x2dc>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	025b      	lsls	r3, r3, #9
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80031ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031cc:	2020      	movs	r0, #32
 80031ce:	f7ff fc76 	bl	8002abe <send_cmd>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d128      	bne.n	800322a <USER_SPI_ioctl+0x2c6>
 80031d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031da:	2021      	movs	r0, #33	; 0x21
 80031dc:	f7ff fc6f 	bl	8002abe <send_cmd>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d121      	bne.n	800322a <USER_SPI_ioctl+0x2c6>
 80031e6:	2100      	movs	r1, #0
 80031e8:	2026      	movs	r0, #38	; 0x26
 80031ea:	f7ff fc68 	bl	8002abe <send_cmd>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11a      	bne.n	800322a <USER_SPI_ioctl+0x2c6>
 80031f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80031f8:	f7ff fbbb 	bl	8002972 <wait_ready>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d013      	beq.n	800322a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003202:	2300      	movs	r3, #0
 8003204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003208:	e00f      	b.n	800322a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800320a:	2304      	movs	r3, #4
 800320c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003210:	e00c      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		break;
 8003212:	bf00      	nop
 8003214:	e00a      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		break;
 8003216:	bf00      	nop
 8003218:	e008      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		break;
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <USER_SPI_ioctl+0x2c8>
		break;
 800322a:	bf00      	nop
	}

	despiselect();
 800322c:	f7ff fbc4 	bl	80029b8 <despiselect>

	return res;
 8003230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003234:	4618      	mov	r0, r3
 8003236:	3730      	adds	r7, #48	; 0x30
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000020 	.word	0x20000020
 8003240:	200001a8 	.word	0x200001a8

08003244 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4a08      	ldr	r2, [pc, #32]	; (8003274 <disk_status+0x30>)
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	79fa      	ldrb	r2, [r7, #7]
 800325c:	4905      	ldr	r1, [pc, #20]	; (8003274 <disk_status+0x30>)
 800325e:	440a      	add	r2, r1
 8003260:	7a12      	ldrb	r2, [r2, #8]
 8003262:	4610      	mov	r0, r2
 8003264:	4798      	blx	r3
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]
  return stat;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	200001d4 	.word	0x200001d4

08003278 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <disk_initialize+0x48>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d111      	bne.n	80032b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <disk_initialize+0x48>)
 8003294:	2101      	movs	r1, #1
 8003296:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <disk_initialize+0x48>)
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	79fa      	ldrb	r2, [r7, #7]
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <disk_initialize+0x48>)
 80032a8:	440a      	add	r2, r1
 80032aa:	7a12      	ldrb	r2, [r2, #8]
 80032ac:	4610      	mov	r0, r2
 80032ae:	4798      	blx	r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200001d4 	.word	0x200001d4

080032c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <disk_read+0x3c>)
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	689c      	ldr	r4, [r3, #8]
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <disk_read+0x3c>)
 80032e4:	4413      	add	r3, r2
 80032e6:	7a18      	ldrb	r0, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	47a0      	blx	r4
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}
 80032fe:	bf00      	nop
 8003300:	200001d4 	.word	0x200001d4

08003304 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4603      	mov	r3, r0
 8003312:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <disk_write+0x3c>)
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	68dc      	ldr	r4, [r3, #12]
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <disk_write+0x3c>)
 8003324:	4413      	add	r3, r2
 8003326:	7a18      	ldrb	r0, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	47a0      	blx	r4
 8003330:	4603      	mov	r3, r0
 8003332:	75fb      	strb	r3, [r7, #23]
  return res;
 8003334:	7dfb      	ldrb	r3, [r7, #23]
}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	200001d4 	.word	0x200001d4

08003344 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	603a      	str	r2, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
 8003350:	460b      	mov	r3, r1
 8003352:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <disk_ioctl+0x38>)
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	79fa      	ldrb	r2, [r7, #7]
 8003362:	4906      	ldr	r1, [pc, #24]	; (800337c <disk_ioctl+0x38>)
 8003364:	440a      	add	r2, r1
 8003366:	7a10      	ldrb	r0, [r2, #8]
 8003368:	79b9      	ldrb	r1, [r7, #6]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	4798      	blx	r3
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]
  return res;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200001d4 	.word	0x200001d4

08003380 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3301      	adds	r3, #1
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003390:	89fb      	ldrh	r3, [r7, #14]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	b21a      	sxth	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b21b      	sxth	r3, r3
 800339c:	4313      	orrs	r3, r2
 800339e:	b21b      	sxth	r3, r3
 80033a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80033a2:	89fb      	ldrh	r3, [r7, #14]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3303      	adds	r3, #3
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	3202      	adds	r2, #2
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	3201      	adds	r2, #1
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80033e8:	68fb      	ldr	r3, [r7, #12]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	887a      	ldrh	r2, [r7, #2]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	1c53      	adds	r3, r2, #1
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	1c59      	adds	r1, r3, #1
 80034a8:	6179      	str	r1, [r7, #20]
 80034aa:	7812      	ldrb	r2, [r2, #0]
 80034ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f1      	bne.n	800349e <mem_cpy+0x1a>
	}
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80034c6:	b480      	push	{r7}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	617a      	str	r2, [r7, #20]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f3      	bne.n	80034d6 <mem_set+0x10>
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	61ba      	str	r2, [r7, #24]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	1acb      	subs	r3, r1, r3
 8003528:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3b01      	subs	r3, #1
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <mem_cmp+0x40>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0eb      	beq.n	8003514 <mem_cmp+0x18>

	return r;
 800353c:	697b      	ldr	r3, [r7, #20]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003554:	e002      	b.n	800355c <chk_chr+0x12>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3301      	adds	r3, #1
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <chk_chr+0x26>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	4293      	cmp	r3, r2
 800356e:	d1f2      	bne.n	8003556 <chk_chr+0xc>
	return *str;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e029      	b.n	80035e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <chk_lock+0xb4>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01d      	beq.n	80035de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80035a2:	4a24      	ldr	r2, [pc, #144]	; (8003634 <chk_lock+0xb4>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	4413      	add	r3, r2
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d116      	bne.n	80035e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <chk_lock+0xb4>)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d10c      	bne.n	80035e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <chk_lock+0xb4>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	4413      	add	r3, r2
 80035d0:	3308      	adds	r3, #8
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80035d8:	429a      	cmp	r2, r3
 80035da:	d102      	bne.n	80035e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80035dc:	e007      	b.n	80035ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d9d2      	bls.n	8003594 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d109      	bne.n	8003608 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <chk_lock+0x80>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d101      	bne.n	8003604 <chk_lock+0x84>
 8003600:	2300      	movs	r3, #0
 8003602:	e010      	b.n	8003626 <chk_lock+0xa6>
 8003604:	2312      	movs	r3, #18
 8003606:	e00e      	b.n	8003626 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <chk_lock+0xa0>
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <chk_lock+0xb4>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	4413      	add	r3, r2
 8003616:	330c      	adds	r3, #12
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d101      	bne.n	8003624 <chk_lock+0xa4>
 8003620:	2310      	movs	r3, #16
 8003622:	e000      	b.n	8003626 <chk_lock+0xa6>
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200001b4 	.word	0x200001b4

08003638 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	e002      	b.n	800364a <enq_lock+0x12>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3301      	adds	r3, #1
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d806      	bhi.n	800365e <enq_lock+0x26>
 8003650:	4a09      	ldr	r2, [pc, #36]	; (8003678 <enq_lock+0x40>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	4413      	add	r3, r2
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f2      	bne.n	8003644 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b02      	cmp	r3, #2
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	200001b4 	.word	0x200001b4

0800367c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e01f      	b.n	80036cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800368c:	4a41      	ldr	r2, [pc, #260]	; (8003794 <inc_lock+0x118>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	4413      	add	r3, r2
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d113      	bne.n	80036c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800369e:	4a3d      	ldr	r2, [pc, #244]	; (8003794 <inc_lock+0x118>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d109      	bne.n	80036c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80036b2:	4a38      	ldr	r2, [pc, #224]	; (8003794 <inc_lock+0x118>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	4413      	add	r3, r2
 80036ba:	3308      	adds	r3, #8
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d006      	beq.n	80036d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d9dc      	bls.n	800368c <inc_lock+0x10>
 80036d2:	e000      	b.n	80036d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80036d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d132      	bne.n	8003742 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e002      	b.n	80036e8 <inc_lock+0x6c>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d806      	bhi.n	80036fc <inc_lock+0x80>
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <inc_lock+0x118>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4413      	add	r3, r2
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f2      	bne.n	80036e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d101      	bne.n	8003706 <inc_lock+0x8a>
 8003702:	2300      	movs	r3, #0
 8003704:	e040      	b.n	8003788 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4922      	ldr	r1, [pc, #136]	; (8003794 <inc_lock+0x118>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	440b      	add	r3, r1
 8003712:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	491e      	ldr	r1, [pc, #120]	; (8003794 <inc_lock+0x118>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	3304      	adds	r3, #4
 8003722:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	491a      	ldr	r1, [pc, #104]	; (8003794 <inc_lock+0x118>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	440b      	add	r3, r1
 8003730:	3308      	adds	r3, #8
 8003732:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003734:	4a17      	ldr	r2, [pc, #92]	; (8003794 <inc_lock+0x118>)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	330c      	adds	r3, #12
 800373e:	2200      	movs	r2, #0
 8003740:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <inc_lock+0xe0>
 8003748:	4a12      	ldr	r2, [pc, #72]	; (8003794 <inc_lock+0x118>)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	330c      	adds	r3, #12
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <inc_lock+0xe0>
 8003758:	2300      	movs	r3, #0
 800375a:	e015      	b.n	8003788 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <inc_lock+0xf8>
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <inc_lock+0x118>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4413      	add	r3, r2
 800376a:	330c      	adds	r3, #12
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	e001      	b.n	8003778 <inc_lock+0xfc>
 8003774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003778:	4906      	ldr	r1, [pc, #24]	; (8003794 <inc_lock+0x118>)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	440b      	add	r3, r1
 8003780:	330c      	adds	r3, #12
 8003782:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3301      	adds	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	200001b4 	.word	0x200001b4

08003798 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d825      	bhi.n	80037f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <dec_lock+0x74>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4413      	add	r3, r2
 80037b4:	330c      	adds	r3, #12
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c0:	d101      	bne.n	80037c6 <dec_lock+0x2e>
 80037c2:	2300      	movs	r3, #0
 80037c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <dec_lock+0x3a>
 80037cc:	89fb      	ldrh	r3, [r7, #14]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <dec_lock+0x74>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4413      	add	r3, r2
 80037da:	330c      	adds	r3, #12
 80037dc:	89fa      	ldrh	r2, [r7, #14]
 80037de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80037e0:	89fb      	ldrh	r3, [r7, #14]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <dec_lock+0x5a>
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <dec_lock+0x74>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	737b      	strb	r3, [r7, #13]
 80037f6:	e001      	b.n	80037fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80037f8:	2302      	movs	r3, #2
 80037fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80037fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200001b4 	.word	0x200001b4

08003810 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e010      	b.n	8003840 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800381e:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <clear_lock+0x44>)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d105      	bne.n	800383a <clear_lock+0x2a>
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <clear_lock+0x44>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d9eb      	bls.n	800381e <clear_lock+0xe>
	}
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	200001b4 	.word	0x200001b4

08003858 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	78db      	ldrb	r3, [r3, #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d034      	beq.n	80038d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7858      	ldrb	r0, [r3, #1]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800387c:	2301      	movs	r3, #1
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	f7ff fd40 	bl	8003304 <disk_write>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <sync_window+0x38>
			res = FR_DISK_ERR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e022      	b.n	80038d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	1ad2      	subs	r2, r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d217      	bcs.n	80038d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	789b      	ldrb	r3, [r3, #2]
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	e010      	b.n	80038d0 <sync_window+0x78>
					wsect += fs->fsize;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4413      	add	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	7858      	ldrb	r0, [r3, #1]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80038c2:	2301      	movs	r3, #1
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	f7ff fd1d 	bl	8003304 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d8eb      	bhi.n	80038ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d01b      	beq.n	8003930 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ffad 	bl	8003858 <sync_window>
 80038fe:	4603      	mov	r3, r0
 8003900:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d113      	bne.n	8003930 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7858      	ldrb	r0, [r3, #1]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003912:	2301      	movs	r3, #1
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	f7ff fcd5 	bl	80032c4 <disk_read>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff87 	bl	8003858 <sync_window>
 800394a:	4603      	mov	r3, r0
 800394c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d158      	bne.n	8003a06 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d148      	bne.n	80039ee <sync_fs+0xb2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	791b      	ldrb	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d144      	bne.n	80039ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3330      	adds	r3, #48	; 0x30
 8003968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fda9 	bl	80034c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3330      	adds	r3, #48	; 0x30
 8003978:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800397c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fd38 	bl	80033f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3330      	adds	r3, #48	; 0x30
 800398a:	4921      	ldr	r1, [pc, #132]	; (8003a10 <sync_fs+0xd4>)
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd4d 	bl	800342c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3330      	adds	r3, #48	; 0x30
 8003996:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800399a:	491e      	ldr	r1, [pc, #120]	; (8003a14 <sync_fs+0xd8>)
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fd45 	bl	800342c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3330      	adds	r3, #48	; 0x30
 80039a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7ff fd3b 	bl	800342c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3330      	adds	r3, #48	; 0x30
 80039ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7ff fd31 	bl	800342c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7858      	ldrb	r0, [r3, #1]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	2301      	movs	r3, #1
 80039e4:	f7ff fc8e 	bl	8003304 <disk_write>
			fs->fsi_flag = 0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fca4 	bl	8003344 <disk_ioctl>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <sync_fs+0xca>
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	41615252 	.word	0x41615252
 8003a14:	61417272 	.word	0x61417272

08003a18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3b02      	subs	r3, #2
 8003a26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d301      	bcc.n	8003a38 <clust2sect+0x20>
 8003a34:	2300      	movs	r3, #0
 8003a36:	e008      	b.n	8003a4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	895b      	ldrh	r3, [r3, #10]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	fb03 f202 	mul.w	r2, r3, r2
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	4413      	add	r3, r2
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d904      	bls.n	8003a76 <get_fat+0x20>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003a76:	2301      	movs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e08f      	b.n	8003b9c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d062      	beq.n	8003b50 <get_fat+0xfa>
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	dc7c      	bgt.n	8003b88 <get_fat+0x132>
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d002      	beq.n	8003a98 <get_fat+0x42>
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d042      	beq.n	8003b1c <get_fat+0xc6>
 8003a96:	e077      	b.n	8003b88 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0a5b      	lsrs	r3, r3, #9
 8003aae:	4413      	add	r3, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6938      	ldr	r0, [r7, #16]
 8003ab4:	f7ff ff14 	bl	80038e0 <move_window>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d167      	bne.n	8003b8e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ad0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0a5b      	lsrs	r3, r3, #9
 8003ada:	4413      	add	r3, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	6938      	ldr	r0, [r7, #16]
 8003ae0:	f7ff fefe 	bl	80038e0 <move_window>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d153      	bne.n	8003b92 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <get_fat+0xbc>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	e002      	b.n	8003b18 <get_fat+0xc2>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	617b      	str	r3, [r7, #20]
			break;
 8003b1a:	e03f      	b.n	8003b9c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	4413      	add	r3, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	6938      	ldr	r0, [r7, #16]
 8003b2a:	f7ff fed9 	bl	80038e0 <move_window>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d130      	bne.n	8003b96 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003b42:	4413      	add	r3, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fc1b 	bl	8003380 <ld_word>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	617b      	str	r3, [r7, #20]
			break;
 8003b4e:	e025      	b.n	8003b9c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	09db      	lsrs	r3, r3, #7
 8003b58:	4413      	add	r3, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6938      	ldr	r0, [r7, #16]
 8003b5e:	f7ff febf 	bl	80038e0 <move_window>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d118      	bne.n	8003b9a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003b76:	4413      	add	r3, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fc19 	bl	80033b0 <ld_dword>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b84:	617b      	str	r3, [r7, #20]
			break;
 8003b86:	e009      	b.n	8003b9c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e006      	b.n	8003b9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b8e:	bf00      	nop
 8003b90:	e004      	b.n	8003b9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b92:	bf00      	nop
 8003b94:	e002      	b.n	8003b9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b9a:	bf00      	nop
		}
	}

	return val;
 8003b9c:	697b      	ldr	r3, [r7, #20]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003ba6:	b590      	push	{r4, r7, lr}
 8003ba8:	b089      	sub	sp, #36	; 0x24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f240 80d2 	bls.w	8003d62 <put_fat+0x1bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	f080 80cc 	bcs.w	8003d62 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	f000 8096 	beq.w	8003d00 <put_fat+0x15a>
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	f300 80cd 	bgt.w	8003d74 <put_fat+0x1ce>
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d002      	beq.n	8003be4 <put_fat+0x3e>
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d06e      	beq.n	8003cc0 <put_fat+0x11a>
 8003be2:	e0c7      	b.n	8003d74 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4413      	add	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	0a5b      	lsrs	r3, r3, #9
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fe6e 	bl	80038e0 <move_window>
 8003c04:	4603      	mov	r3, r0
 8003c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c08:	7ffb      	ldrb	r3, [r7, #31]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 80ab 	bne.w	8003d66 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	1c59      	adds	r1, r3, #1
 8003c1a:	61b9      	str	r1, [r7, #24]
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <put_fat+0xa4>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	b25a      	sxtb	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e001      	b.n	8003c4e <put_fat+0xa8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	0a5b      	lsrs	r3, r3, #9
 8003c60:	4413      	add	r3, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fe3b 	bl	80038e0 <move_window>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c6e:	7ffb      	ldrb	r3, [r7, #31]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d17a      	bne.n	8003d6a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <put_fat+0xf0>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e00e      	b.n	8003cb4 <put_fat+0x10e>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	b25b      	sxtb	r3, r3
 8003c9c:	f023 030f 	bic.w	r3, r3, #15
 8003ca0:	b25a      	sxtb	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	70da      	strb	r2, [r3, #3]
			break;
 8003cbe:	e059      	b.n	8003d74 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	4413      	add	r3, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff fe07 	bl	80038e0 <move_window>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d148      	bne.n	8003d6e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003cea:	4413      	add	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fb7f 	bl	80033f6 <st_word>
			fs->wflag = 1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	70da      	strb	r2, [r3, #3]
			break;
 8003cfe:	e039      	b.n	8003d74 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	09db      	lsrs	r3, r3, #7
 8003d08:	4413      	add	r3, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7ff fde7 	bl	80038e0 <move_window>
 8003d12:	4603      	mov	r3, r0
 8003d14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d12a      	bne.n	8003d72 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fb3c 	bl	80033b0 <ld_dword>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d3e:	4323      	orrs	r3, r4
 8003d40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003d50:	4413      	add	r3, r2
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fb69 	bl	800342c <st_dword>
			fs->wflag = 1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	70da      	strb	r2, [r3, #3]
			break;
 8003d60:	e008      	b.n	8003d74 <put_fat+0x1ce>
		}
	}
 8003d62:	bf00      	nop
 8003d64:	e006      	b.n	8003d74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003d72:	bf00      	nop
	return res;
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd90      	pop	{r4, r7, pc}

08003d7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b088      	sub	sp, #32
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d904      	bls.n	8003da4 <remove_chain+0x26>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d301      	bcc.n	8003da8 <remove_chain+0x2a>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e04b      	b.n	8003e40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	69b8      	ldr	r0, [r7, #24]
 8003db6:	f7ff fef6 	bl	8003ba6 <put_fat>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <remove_chain+0x4a>
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
 8003dc6:	e03b      	b.n	8003e40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff fe43 	bl	8003a56 <get_fat>
 8003dd0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d031      	beq.n	8003e3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <remove_chain+0x64>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e02e      	b.n	8003e40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d101      	bne.n	8003dee <remove_chain+0x70>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e028      	b.n	8003e40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003dee:	2200      	movs	r2, #0
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	69b8      	ldr	r0, [r7, #24]
 8003df4:	f7ff fed7 	bl	8003ba6 <put_fat>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <remove_chain+0x88>
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	e01c      	b.n	8003e40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	3b02      	subs	r3, #2
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d20b      	bcs.n	8003e2c <remove_chain+0xae>
			fs->free_clst++;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	791b      	ldrb	r3, [r3, #4]
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3c6      	bcc.n	8003dc8 <remove_chain+0x4a>
 8003e3a:	e000      	b.n	8003e3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003e3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <create_chain+0x2c>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d31b      	bcc.n	8003eac <create_chain+0x64>
 8003e74:	2301      	movs	r3, #1
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e018      	b.n	8003eac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fdea 	bl	8003a56 <get_fat>
 8003e82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d801      	bhi.n	8003e8e <create_chain+0x46>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e070      	b.n	8003f70 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d101      	bne.n	8003e9a <create_chain+0x52>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	e06a      	b.n	8003f70 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d201      	bcs.n	8003ea8 <create_chain+0x60>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	e063      	b.n	8003f70 <create_chain+0x128>
		scl = clst;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d307      	bcc.n	8003ed0 <create_chain+0x88>
				ncl = 2;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d901      	bls.n	8003ed0 <create_chain+0x88>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e04f      	b.n	8003f70 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003ed0:	69f9      	ldr	r1, [r7, #28]
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fdbf 	bl	8003a56 <get_fat>
 8003ed8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d003      	beq.n	8003eee <create_chain+0xa6>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d101      	bne.n	8003ef2 <create_chain+0xaa>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e03e      	b.n	8003f70 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d1da      	bne.n	8003eb0 <create_chain+0x68>
 8003efa:	2300      	movs	r3, #0
 8003efc:	e038      	b.n	8003f70 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003efe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	69f9      	ldr	r1, [r7, #28]
 8003f06:	6938      	ldr	r0, [r7, #16]
 8003f08:	f7ff fe4d 	bl	8003ba6 <put_fat>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <create_chain+0xe2>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d006      	beq.n	8003f2a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	6938      	ldr	r0, [r7, #16]
 8003f22:	f7ff fe40 	bl	8003ba6 <put_fat>
 8003f26:	4603      	mov	r3, r0
 8003f28:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d116      	bne.n	8003f5e <create_chain+0x116>
		fs->last_clst = ncl;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	3b02      	subs	r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d804      	bhi.n	8003f4e <create_chain+0x106>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	791b      	ldrb	r3, [r3, #4]
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	711a      	strb	r2, [r3, #4]
 8003f5c:	e007      	b.n	8003f6e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <create_chain+0x122>
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e000      	b.n	8003f6c <create_chain+0x124>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003f6e:	69fb      	ldr	r3, [r7, #28]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	0a5b      	lsrs	r3, r3, #9
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	8952      	ldrh	r2, [r2, #10]
 8003f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	613a      	str	r2, [r7, #16]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <clmt_clust+0x3a>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e010      	b.n	8003fd4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d307      	bcc.n	8003fca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003fc8:	e7e9      	b.n	8003f9e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003fca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4413      	add	r3, r2
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff6:	d204      	bcs.n	8004002 <dir_sdi+0x22>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004002:	2302      	movs	r3, #2
 8004004:	e063      	b.n	80040ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <dir_sdi+0x46>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d902      	bls.n	8004026 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10c      	bne.n	8004046 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	8912      	ldrh	r2, [r2, #8]
 8004034:	4293      	cmp	r3, r2
 8004036:	d301      	bcc.n	800403c <dir_sdi+0x5c>
 8004038:	2302      	movs	r3, #2
 800403a:	e048      	b.n	80040ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	61da      	str	r2, [r3, #28]
 8004044:	e029      	b.n	800409a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	895b      	ldrh	r3, [r3, #10]
 800404a:	025b      	lsls	r3, r3, #9
 800404c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800404e:	e019      	b.n	8004084 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fcfe 	bl	8003a56 <get_fat>
 800405a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d101      	bne.n	8004068 <dir_sdi+0x88>
 8004064:	2301      	movs	r3, #1
 8004066:	e032      	b.n	80040ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d904      	bls.n	8004078 <dir_sdi+0x98>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d301      	bcc.n	800407c <dir_sdi+0x9c>
 8004078:	2302      	movs	r3, #2
 800407a:	e028      	b.n	80040ce <dir_sdi+0xee>
			ofs -= csz;
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d2e1      	bcs.n	8004050 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800408c:	6979      	ldr	r1, [r7, #20]
 800408e:	6938      	ldr	r0, [r7, #16]
 8004090:	f7ff fcc2 	bl	8003a18 <clust2sect>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <dir_sdi+0xcc>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e010      	b.n	80040ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	0a5b      	lsrs	r3, r3, #9
 80040b4:	441a      	add	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	441a      	add	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	3320      	adds	r3, #32
 80040ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <dir_next+0x28>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040fc:	d301      	bcc.n	8004102 <dir_next+0x2c>
 80040fe:	2304      	movs	r3, #4
 8004100:	e0aa      	b.n	8004258 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 8098 	bne.w	800423e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	8912      	ldrh	r2, [r2, #8]
 8004128:	4293      	cmp	r3, r2
 800412a:	f0c0 8088 	bcc.w	800423e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	61da      	str	r2, [r3, #28]
 8004134:	2304      	movs	r3, #4
 8004136:	e08f      	b.n	8004258 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	8952      	ldrh	r2, [r2, #10]
 8004140:	3a01      	subs	r2, #1
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d17a      	bne.n	800423e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7ff fc80 	bl	8003a56 <get_fat>
 8004156:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d801      	bhi.n	8004162 <dir_next+0x8c>
 800415e:	2302      	movs	r3, #2
 8004160:	e07a      	b.n	8004258 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d101      	bne.n	800416e <dir_next+0x98>
 800416a:	2301      	movs	r3, #1
 800416c:	e074      	b.n	8004258 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	d358      	bcc.n	800422a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	61da      	str	r2, [r3, #28]
 8004184:	2304      	movs	r3, #4
 8004186:	e067      	b.n	8004258 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7ff fe59 	bl	8003e48 <create_chain>
 8004196:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <dir_next+0xcc>
 800419e:	2307      	movs	r3, #7
 80041a0:	e05a      	b.n	8004258 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <dir_next+0xd6>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e055      	b.n	8004258 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d101      	bne.n	80041b8 <dir_next+0xe2>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e04f      	b.n	8004258 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff fb4d 	bl	8003858 <sync_window>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <dir_next+0xf2>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e047      	b.n	8004258 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3330      	adds	r3, #48	; 0x30
 80041cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f977 	bl	80034c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff fc1a 	bl	8003a18 <clust2sect>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80041ea:	e012      	b.n	8004212 <dir_next+0x13c>
						fs->wflag = 1;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fb30 	bl	8003858 <sync_window>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <dir_next+0x12c>
 80041fe:	2301      	movs	r3, #1
 8004200:	e02a      	b.n	8004258 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3301      	adds	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	895b      	ldrh	r3, [r3, #10]
 8004216:	461a      	mov	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4293      	cmp	r3, r2
 800421c:	d3e6      	bcc.n	80041ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad2      	subs	r2, r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004230:	6979      	ldr	r1, [r7, #20]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fbf0 	bl	8003a18 <clust2sect>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004250:	441a      	add	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004270:	2100      	movs	r1, #0
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff feb4 	bl	8003fe0 <dir_sdi>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d12b      	bne.n	80042da <dir_alloc+0x7a>
		n = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	4619      	mov	r1, r3
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fb27 	bl	80038e0 <move_window>
 8004292:	4603      	mov	r3, r0
 8004294:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2be5      	cmp	r3, #229	; 0xe5
 80042a4:	d004      	beq.n	80042b0 <dir_alloc+0x50>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3301      	adds	r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d102      	bne.n	80042c4 <dir_alloc+0x64>
 80042be:	e00c      	b.n	80042da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80042c4:	2101      	movs	r1, #1
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ff05 	bl	80040d6 <dir_next>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0d7      	beq.n	8004286 <dir_alloc+0x26>
 80042d6:	e000      	b.n	80042da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80042d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d101      	bne.n	80042e4 <dir_alloc+0x84>
 80042e0:	2307      	movs	r3, #7
 80042e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	331a      	adds	r3, #26
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff f83f 	bl	8003380 <ld_word>
 8004302:	4603      	mov	r3, r0
 8004304:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d109      	bne.n	8004322 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f834 	bl	8003380 <ld_word>
 8004318:	4603      	mov	r3, r0
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	331a      	adds	r3, #26
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	b292      	uxth	r2, r2
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f857 	bl	80033f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d109      	bne.n	8004364 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f103 0214 	add.w	r2, r3, #20
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b29b      	uxth	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7ff f849 	bl	80033f6 <st_word>
	}
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800437a:	2100      	movs	r1, #0
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe2f 	bl	8003fe0 <dir_sdi>
 8004382:	4603      	mov	r3, r0
 8004384:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <dir_find+0x24>
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	e03e      	b.n	800440e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4619      	mov	r1, r3
 8004396:	6938      	ldr	r0, [r7, #16]
 8004398:	f7ff faa2 	bl	80038e0 <move_window>
 800439c:	4603      	mov	r3, r0
 800439e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d12f      	bne.n	8004406 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <dir_find+0x4e>
 80043b4:	2304      	movs	r3, #4
 80043b6:	75fb      	strb	r3, [r7, #23]
 80043b8:	e028      	b.n	800440c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	330b      	adds	r3, #11
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	330b      	adds	r3, #11
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <dir_find+0x86>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a18      	ldr	r0, [r3, #32]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3324      	adds	r3, #36	; 0x24
 80043e4:	220b      	movs	r2, #11
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7ff f888 	bl	80034fc <mem_cmp>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80043f2:	2100      	movs	r1, #0
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fe6e 	bl	80040d6 <dir_next>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0c5      	beq.n	8004390 <dir_find+0x24>
 8004404:	e002      	b.n	800440c <dir_find+0xa0>
		if (res != FR_OK) break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800440a:	bf00      	nop

	return res;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004424:	2101      	movs	r1, #1
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff1a 	bl	8004260 <dir_alloc>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11c      	bne.n	8004470 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4619      	mov	r1, r3
 800443c:	68b8      	ldr	r0, [r7, #8]
 800443e:	f7ff fa4f 	bl	80038e0 <move_window>
 8004442:	4603      	mov	r3, r0
 8004444:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d111      	bne.n	8004470 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2220      	movs	r2, #32
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff f836 	bl	80034c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a18      	ldr	r0, [r3, #32]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3324      	adds	r3, #36	; 0x24
 8004462:	220b      	movs	r2, #11
 8004464:	4619      	mov	r1, r3
 8004466:	f7ff f80d 	bl	8003484 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2201      	movs	r2, #1
 800446e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3324      	adds	r3, #36	; 0x24
 8004490:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004492:	220b      	movs	r2, #11
 8004494:	2120      	movs	r1, #32
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f7ff f815 	bl	80034c6 <mem_set>
	si = i = 0; ni = 8;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	2308      	movs	r3, #8
 80044a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	61fa      	str	r2, [r7, #28]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80044b6:	7efb      	ldrb	r3, [r7, #27]
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d94e      	bls.n	800455a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80044bc:	7efb      	ldrb	r3, [r7, #27]
 80044be:	2b2f      	cmp	r3, #47	; 0x2f
 80044c0:	d006      	beq.n	80044d0 <create_name+0x54>
 80044c2:	7efb      	ldrb	r3, [r7, #27]
 80044c4:	2b5c      	cmp	r3, #92	; 0x5c
 80044c6:	d110      	bne.n	80044ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80044c8:	e002      	b.n	80044d0 <create_name+0x54>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b2f      	cmp	r3, #47	; 0x2f
 80044da:	d0f6      	beq.n	80044ca <create_name+0x4e>
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b5c      	cmp	r3, #92	; 0x5c
 80044e6:	d0f0      	beq.n	80044ca <create_name+0x4e>
			break;
 80044e8:	e038      	b.n	800455c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80044ea:	7efb      	ldrb	r3, [r7, #27]
 80044ec:	2b2e      	cmp	r3, #46	; 0x2e
 80044ee:	d003      	beq.n	80044f8 <create_name+0x7c>
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d30c      	bcc.n	8004512 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b0b      	cmp	r3, #11
 80044fc:	d002      	beq.n	8004504 <create_name+0x88>
 80044fe:	7efb      	ldrb	r3, [r7, #27]
 8004500:	2b2e      	cmp	r3, #46	; 0x2e
 8004502:	d001      	beq.n	8004508 <create_name+0x8c>
 8004504:	2306      	movs	r3, #6
 8004506:	e044      	b.n	8004592 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004508:	2308      	movs	r3, #8
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	230b      	movs	r3, #11
 800450e:	617b      	str	r3, [r7, #20]
			continue;
 8004510:	e022      	b.n	8004558 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004512:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da04      	bge.n	8004524 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800451a:	7efb      	ldrb	r3, [r7, #27]
 800451c:	3b80      	subs	r3, #128	; 0x80
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <create_name+0x120>)
 8004520:	5cd3      	ldrb	r3, [r2, r3]
 8004522:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004524:	7efb      	ldrb	r3, [r7, #27]
 8004526:	4619      	mov	r1, r3
 8004528:	481d      	ldr	r0, [pc, #116]	; (80045a0 <create_name+0x124>)
 800452a:	f7ff f80e 	bl	800354a <chk_chr>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <create_name+0xbc>
 8004534:	2306      	movs	r3, #6
 8004536:	e02c      	b.n	8004592 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004538:	7efb      	ldrb	r3, [r7, #27]
 800453a:	2b60      	cmp	r3, #96	; 0x60
 800453c:	d905      	bls.n	800454a <create_name+0xce>
 800453e:	7efb      	ldrb	r3, [r7, #27]
 8004540:	2b7a      	cmp	r3, #122	; 0x7a
 8004542:	d802      	bhi.n	800454a <create_name+0xce>
 8004544:	7efb      	ldrb	r3, [r7, #27]
 8004546:	3b20      	subs	r3, #32
 8004548:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	613a      	str	r2, [r7, #16]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4413      	add	r3, r2
 8004554:	7efa      	ldrb	r2, [r7, #27]
 8004556:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004558:	e7a6      	b.n	80044a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800455a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	441a      	add	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <create_name+0xf4>
 800456c:	2306      	movs	r3, #6
 800456e:	e010      	b.n	8004592 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2be5      	cmp	r3, #229	; 0xe5
 8004576:	d102      	bne.n	800457e <create_name+0x102>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2205      	movs	r2, #5
 800457c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800457e:	7efb      	ldrb	r3, [r7, #27]
 8004580:	2b20      	cmp	r3, #32
 8004582:	d801      	bhi.n	8004588 <create_name+0x10c>
 8004584:	2204      	movs	r2, #4
 8004586:	e000      	b.n	800458a <create_name+0x10e>
 8004588:	2200      	movs	r2, #0
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	330b      	adds	r3, #11
 800458e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004590:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	0800653c 	.word	0x0800653c
 80045a0:	080064e0 	.word	0x080064e0

080045a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80045b8:	e002      	b.n	80045c0 <follow_path+0x1c>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b2f      	cmp	r3, #47	; 0x2f
 80045c6:	d0f8      	beq.n	80045ba <follow_path+0x16>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b5c      	cmp	r3, #92	; 0x5c
 80045ce:	d0f4      	beq.n	80045ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b1f      	cmp	r3, #31
 80045dc:	d80a      	bhi.n	80045f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80045e6:	2100      	movs	r1, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fcf9 	bl	8003fe0 <dir_sdi>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]
 80045f2:	e043      	b.n	800467c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80045f4:	463b      	mov	r3, r7
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff3f 	bl	800447c <create_name>
 80045fe:	4603      	mov	r3, r0
 8004600:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d134      	bne.n	8004672 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff feaf 	bl	800436c <dir_find>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004618:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800461a:	7dfb      	ldrb	r3, [r7, #23]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b04      	cmp	r3, #4
 8004624:	d127      	bne.n	8004676 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d122      	bne.n	8004676 <follow_path+0xd2>
 8004630:	2305      	movs	r3, #5
 8004632:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004634:	e01f      	b.n	8004676 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11c      	bne.n	800467a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	799b      	ldrb	r3, [r3, #6]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800464c:	2305      	movs	r3, #5
 800464e:	75fb      	strb	r3, [r7, #23]
 8004650:	e014      	b.n	800467c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004660:	4413      	add	r3, r2
 8004662:	4619      	mov	r1, r3
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fe42 	bl	80042ee <ld_clust>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004670:	e7c0      	b.n	80045f4 <follow_path+0x50>
			if (res != FR_OK) break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <follow_path+0xd8>
				break;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800467a:	bf00      	nop
			}
		}
	}

	return res;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004686:	b480      	push	{r7}
 8004688:	b087      	sub	sp, #28
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d031      	beq.n	8004700 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e002      	b.n	80046aa <get_ldnumber+0x24>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3301      	adds	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d903      	bls.n	80046ba <get_ldnumber+0x34>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b3a      	cmp	r3, #58	; 0x3a
 80046b8:	d1f4      	bne.n	80046a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b3a      	cmp	r3, #58	; 0x3a
 80046c0:	d11c      	bne.n	80046fc <get_ldnumber+0x76>
			tp = *path;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	60fa      	str	r2, [r7, #12]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	3b30      	subs	r3, #48	; 0x30
 80046d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d80e      	bhi.n	80046f8 <get_ldnumber+0x72>
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d10a      	bne.n	80046f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <get_ldnumber+0x72>
					vol = (int)i;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3301      	adds	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	e002      	b.n	8004702 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004700:	693b      	ldr	r3, [r7, #16]
}
 8004702:	4618      	mov	r0, r3
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	70da      	strb	r2, [r3, #3]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff f8d8 	bl	80038e0 <move_window>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <check_fs+0x2a>
 8004736:	2304      	movs	r3, #4
 8004738:	e038      	b.n	80047ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3330      	adds	r3, #48	; 0x30
 800473e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fe1c 	bl	8003380 <ld_word>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <check_fs+0x48>
 8004754:	2303      	movs	r3, #3
 8004756:	e029      	b.n	80047ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800475e:	2be9      	cmp	r3, #233	; 0xe9
 8004760:	d009      	beq.n	8004776 <check_fs+0x66>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004768:	2beb      	cmp	r3, #235	; 0xeb
 800476a:	d11e      	bne.n	80047aa <check_fs+0x9a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004772:	2b90      	cmp	r3, #144	; 0x90
 8004774:	d119      	bne.n	80047aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3330      	adds	r3, #48	; 0x30
 800477a:	3336      	adds	r3, #54	; 0x36
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fe17 	bl	80033b0 <ld_dword>
 8004782:	4603      	mov	r3, r0
 8004784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004788:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <check_fs+0xa4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <check_fs+0x82>
 800478e:	2300      	movs	r3, #0
 8004790:	e00c      	b.n	80047ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3330      	adds	r3, #48	; 0x30
 8004796:	3352      	adds	r3, #82	; 0x52
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fe09 	bl	80033b0 <ld_dword>
 800479e:	4603      	mov	r3, r0
 80047a0:	4a05      	ldr	r2, [pc, #20]	; (80047b8 <check_fs+0xa8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <check_fs+0x9a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80047aa:	2302      	movs	r3, #2
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00544146 	.word	0x00544146
 80047b8:	33544146 	.word	0x33544146

080047bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b096      	sub	sp, #88	; 0x58
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff ff58 	bl	8004686 <get_ldnumber>
 80047d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80047d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da01      	bge.n	80047e2 <find_volume+0x26>
 80047de:	230b      	movs	r3, #11
 80047e0:	e22e      	b.n	8004c40 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80047e2:	4aa8      	ldr	r2, [pc, #672]	; (8004a84 <find_volume+0x2c8>)
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <find_volume+0x3a>
 80047f2:	230c      	movs	r3, #12
 80047f4:	e224      	b.n	8004c40 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fd17 	bl	8003244 <disk_status>
 8004816:	4603      	mov	r3, r0
 8004818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800481c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10c      	bne.n	8004842 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <find_volume+0x82>
 800482e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800483a:	230a      	movs	r3, #10
 800483c:	e200      	b.n	8004c40 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800483e:	2300      	movs	r3, #0
 8004840:	e1fe      	b.n	8004c40 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	b2da      	uxtb	r2, r3
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fd0f 	bl	8003278 <disk_initialize>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800486c:	2303      	movs	r3, #3
 800486e:	e1e7      	b.n	8004c40 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <find_volume+0xca>
 8004876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004882:	230a      	movs	r3, #10
 8004884:	e1dc      	b.n	8004c40 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800488a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800488c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800488e:	f7ff ff3f 	bl	8004710 <check_fs>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800489c:	2b02      	cmp	r3, #2
 800489e:	d14b      	bne.n	8004938 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048a0:	2300      	movs	r3, #0
 80048a2:	643b      	str	r3, [r7, #64]	; 0x40
 80048a4:	e01f      	b.n	80048e6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80048b4:	4413      	add	r3, r2
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	3304      	adds	r3, #4
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <find_volume+0x114>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	3308      	adds	r3, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fd72 	bl	80033b0 <ld_dword>
 80048cc:	4602      	mov	r2, r0
 80048ce:	e000      	b.n	80048d2 <find_volume+0x116>
 80048d0:	2200      	movs	r2, #0
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80048da:	440b      	add	r3, r1
 80048dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e2:	3301      	adds	r3, #1
 80048e4:	643b      	str	r3, [r7, #64]	; 0x40
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d9dc      	bls.n	80048a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80048ec:	2300      	movs	r3, #0
 80048ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <find_volume+0x140>
 80048f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f8:	3b01      	subs	r3, #1
 80048fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004904:	4413      	add	r3, r2
 8004906:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800490a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <find_volume+0x162>
 8004912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004916:	f7ff fefb 	bl	8004710 <check_fs>
 800491a:	4603      	mov	r3, r0
 800491c:	e000      	b.n	8004920 <find_volume+0x164>
 800491e:	2303      	movs	r3, #3
 8004920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004928:	2b01      	cmp	r3, #1
 800492a:	d905      	bls.n	8004938 <find_volume+0x17c>
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	3301      	adds	r3, #1
 8004930:	643b      	str	r3, [r7, #64]	; 0x40
 8004932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004934:	2b03      	cmp	r3, #3
 8004936:	d9e1      	bls.n	80048fc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800493c:	2b04      	cmp	r3, #4
 800493e:	d101      	bne.n	8004944 <find_volume+0x188>
 8004940:	2301      	movs	r3, #1
 8004942:	e17d      	b.n	8004c40 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004948:	2b01      	cmp	r3, #1
 800494a:	d901      	bls.n	8004950 <find_volume+0x194>
 800494c:	230d      	movs	r3, #13
 800494e:	e177      	b.n	8004c40 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	3330      	adds	r3, #48	; 0x30
 8004954:	330b      	adds	r3, #11
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fd12 	bl	8003380 <ld_word>
 800495c:	4603      	mov	r3, r0
 800495e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004962:	d001      	beq.n	8004968 <find_volume+0x1ac>
 8004964:	230d      	movs	r3, #13
 8004966:	e16b      	b.n	8004c40 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	3330      	adds	r3, #48	; 0x30
 800496c:	3316      	adds	r3, #22
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fd06 	bl	8003380 <ld_word>
 8004974:	4603      	mov	r3, r0
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <find_volume+0x1d0>
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	3330      	adds	r3, #48	; 0x30
 8004982:	3324      	adds	r3, #36	; 0x24
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fd13 	bl	80033b0 <ld_dword>
 800498a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004990:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	789b      	ldrb	r3, [r3, #2]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d005      	beq.n	80049b0 <find_volume+0x1f4>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	789b      	ldrb	r3, [r3, #2]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d001      	beq.n	80049b0 <find_volume+0x1f4>
 80049ac:	230d      	movs	r3, #13
 80049ae:	e147      	b.n	8004c40 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	789b      	ldrb	r3, [r3, #2]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	895b      	ldrh	r3, [r3, #10]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <find_volume+0x228>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	895b      	ldrh	r3, [r3, #10]
 80049d6:	461a      	mov	r2, r3
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	895b      	ldrh	r3, [r3, #10]
 80049dc:	3b01      	subs	r3, #1
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <find_volume+0x22c>
 80049e4:	230d      	movs	r3, #13
 80049e6:	e12b      	b.n	8004c40 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	3330      	adds	r3, #48	; 0x30
 80049ec:	3311      	adds	r3, #17
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fcc6 	bl	8003380 <ld_word>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	891b      	ldrh	r3, [r3, #8]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <find_volume+0x252>
 8004a0a:	230d      	movs	r3, #13
 8004a0c:	e118      	b.n	8004c40 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	3330      	adds	r3, #48	; 0x30
 8004a12:	3313      	adds	r3, #19
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe fcb3 	bl	8003380 <ld_word>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <find_volume+0x276>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	3330      	adds	r3, #48	; 0x30
 8004a28:	3320      	adds	r3, #32
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fcc0 	bl	80033b0 <ld_dword>
 8004a30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	3330      	adds	r3, #48	; 0x30
 8004a36:	330e      	adds	r3, #14
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fca1 	bl	8003380 <ld_word>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <find_volume+0x290>
 8004a48:	230d      	movs	r3, #13
 8004a4a:	e0f9      	b.n	8004c40 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004a4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	4413      	add	r3, r2
 8004a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a54:	8912      	ldrh	r2, [r2, #8]
 8004a56:	0912      	lsrs	r2, r2, #4
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d201      	bcs.n	8004a6a <find_volume+0x2ae>
 8004a66:	230d      	movs	r3, #13
 8004a68:	e0ea      	b.n	8004c40 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a72:	8952      	ldrh	r2, [r2, #10]
 8004a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <find_volume+0x2cc>
 8004a80:	230d      	movs	r3, #13
 8004a82:	e0dd      	b.n	8004c40 <find_volume+0x484>
 8004a84:	200001ac 	.word	0x200001ac
		fmt = FS_FAT32;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d802      	bhi.n	8004a9e <find_volume+0x2e2>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d802      	bhi.n	8004aae <find_volume+0x2f2>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004aba:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004abc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac0:	441a      	add	r2, r3
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	441a      	add	r2, r3
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d11e      	bne.n	8004b16 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	3330      	adds	r3, #48	; 0x30
 8004adc:	332a      	adds	r3, #42	; 0x2a
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fc4e 	bl	8003380 <ld_word>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <find_volume+0x332>
 8004aea:	230d      	movs	r3, #13
 8004aec:	e0a8      	b.n	8004c40 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	891b      	ldrh	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <find_volume+0x33e>
 8004af6:	230d      	movs	r3, #13
 8004af8:	e0a2      	b.n	8004c40 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	3330      	adds	r3, #48	; 0x30
 8004afe:	332c      	adds	r3, #44	; 0x2c
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe fc55 	bl	80033b0 <ld_dword>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	647b      	str	r3, [r7, #68]	; 0x44
 8004b14:	e01f      	b.n	8004b56 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	891b      	ldrh	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <find_volume+0x366>
 8004b1e:	230d      	movs	r3, #13
 8004b20:	e08e      	b.n	8004c40 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b28:	441a      	add	r2, r3
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d103      	bne.n	8004b3e <find_volume+0x382>
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	e00a      	b.n	8004b54 <find_volume+0x398>
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	085a      	lsrs	r2, r3, #1
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b60:	0a5b      	lsrs	r3, r3, #9
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d201      	bcs.n	8004b6a <find_volume+0x3ae>
 8004b66:	230d      	movs	r3, #13
 8004b68:	e06a      	b.n	8004c40 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	611a      	str	r2, [r3, #16]
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d149      	bne.n	8004c1c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	3330      	adds	r3, #48	; 0x30
 8004b8c:	3330      	adds	r3, #48	; 0x30
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fbf6 	bl	8003380 <ld_word>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d140      	bne.n	8004c1c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ba2:	f7fe fe9d 	bl	80038e0 <move_window>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d137      	bne.n	8004c1c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	2200      	movs	r2, #0
 8004bb0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	3330      	adds	r3, #48	; 0x30
 8004bb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fbe0 	bl	8003380 <ld_word>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d127      	bne.n	8004c1c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	3330      	adds	r3, #48	; 0x30
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fbed 	bl	80033b0 <ld_dword>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <find_volume+0x48c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d11e      	bne.n	8004c1c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	3330      	adds	r3, #48	; 0x30
 8004be2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fbe2 	bl	80033b0 <ld_dword>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <find_volume+0x490>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d113      	bne.n	8004c1c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	3330      	adds	r3, #48	; 0x30
 8004bf8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fbd7 	bl	80033b0 <ld_dword>
 8004c02:	4602      	mov	r2, r0
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	3330      	adds	r3, #48	; 0x30
 8004c0c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fbcd 	bl	80033b0 <ld_dword>
 8004c16:	4602      	mov	r2, r0
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c22:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <find_volume+0x494>)
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <find_volume+0x494>)
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <find_volume+0x494>)
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004c38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c3a:	f7fe fde9 	bl	8003810 <clear_lock>
#endif
	return FR_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3758      	adds	r7, #88	; 0x58
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	41615252 	.word	0x41615252
 8004c4c:	61417272 	.word	0x61417272
 8004c50:	200001b0 	.word	0x200001b0

08004c54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004c5e:	2309      	movs	r3, #9
 8004c60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01c      	beq.n	8004ca2 <validate+0x4e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d018      	beq.n	8004ca2 <validate+0x4e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d013      	beq.n	8004ca2 <validate+0x4e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	889a      	ldrh	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	88db      	ldrh	r3, [r3, #6]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d10c      	bne.n	8004ca2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fad8 	bl	8003244 <disk_status>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <validate+0x4e>
			res = FR_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <validate+0x5a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	e000      	b.n	8004cb0 <validate+0x5c>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	6013      	str	r3, [r2, #0]
	return res;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004cd2:	f107 0310 	add.w	r3, r7, #16
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fcd5 	bl	8004686 <get_ldnumber>
 8004cdc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	da01      	bge.n	8004ce8 <f_mount+0x28>
 8004ce4:	230b      	movs	r3, #11
 8004ce6:	e02b      	b.n	8004d40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004ce8:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <f_mount+0x88>)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004cf8:	69b8      	ldr	r0, [r7, #24]
 8004cfa:	f7fe fd89 	bl	8003810 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	490d      	ldr	r1, [pc, #52]	; (8004d48 <f_mount+0x88>)
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <f_mount+0x66>
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d001      	beq.n	8004d2a <f_mount+0x6a>
 8004d26:	2300      	movs	r3, #0
 8004d28:	e00a      	b.n	8004d40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004d2a:	f107 010c 	add.w	r1, r7, #12
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	2200      	movs	r2, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fd41 	bl	80047bc <find_volume>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200001ac 	.word	0x200001ac

08004d4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b098      	sub	sp, #96	; 0x60
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <f_open+0x18>
 8004d60:	2309      	movs	r3, #9
 8004d62:	e1ad      	b.n	80050c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004d6c:	79fa      	ldrb	r2, [r7, #7]
 8004d6e:	f107 0110 	add.w	r1, r7, #16
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fd20 	bl	80047bc <find_volume>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f040 8191 	bne.w	80050ae <f_open+0x362>
		dj.obj.fs = fs;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	f107 0314 	add.w	r3, r7, #20
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fc03 	bl	80045a4 <follow_path>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d11a      	bne.n	8004de2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004dac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	da03      	bge.n	8004dbe <f_open+0x72>
				res = FR_INVALID_NAME;
 8004db6:	2306      	movs	r3, #6
 8004db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004dbc:	e011      	b.n	8004de2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fbd2 	bl	8003580 <chk_lock>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	f003 031c 	and.w	r3, r3, #28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d07f      	beq.n	8004eec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d017      	beq.n	8004e24 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004df4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d10e      	bne.n	8004e1a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004dfc:	f7fe fc1c 	bl	8003638 <enq_lock>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <f_open+0xc8>
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fb03 	bl	8004416 <dir_register>
 8004e10:	4603      	mov	r3, r0
 8004e12:	e000      	b.n	8004e16 <f_open+0xca>
 8004e14:	2312      	movs	r3, #18
 8004e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	f043 0308 	orr.w	r3, r3, #8
 8004e20:	71fb      	strb	r3, [r7, #7]
 8004e22:	e010      	b.n	8004e46 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e24:	7ebb      	ldrb	r3, [r7, #26]
 8004e26:	f003 0311 	and.w	r3, r3, #17
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <f_open+0xea>
					res = FR_DENIED;
 8004e2e:	2307      	movs	r3, #7
 8004e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004e34:	e007      	b.n	8004e46 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <f_open+0xfa>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d168      	bne.n	8004f20 <f_open+0x1d4>
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d063      	beq.n	8004f20 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004e58:	f7fd fcb6 	bl	80027c8 <get_fattime>
 8004e5c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	330e      	adds	r3, #14
 8004e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fae1 	bl	800342c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	3316      	adds	r3, #22
 8004e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe fadb 	bl	800342c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	330b      	adds	r3, #11
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fa32 	bl	80042ee <ld_clust>
 8004e8a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e90:	2200      	movs	r2, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fa4a 	bl	800432c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	331c      	adds	r3, #28
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fac4 	bl	800342c <st_dword>
					fs->wflag = 1;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d037      	beq.n	8004f20 <f_open+0x1d4>
						dw = fs->winsect;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	2200      	movs	r2, #0
 8004ebc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe ff5d 	bl	8003d7e <remove_chain>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d126      	bne.n	8004f20 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fd02 	bl	80038e0 <move_window>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e019      	b.n	8004f20 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d115      	bne.n	8004f20 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004ef4:	7ebb      	ldrb	r3, [r7, #26]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004efe:	2304      	movs	r3, #4
 8004f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f04:	e00c      	b.n	8004f20 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <f_open+0x1d4>
 8004f10:	7ebb      	ldrb	r3, [r7, #26]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <f_open+0x1d4>
						res = FR_DENIED;
 8004f1a:	2307      	movs	r3, #7
 8004f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d128      	bne.n	8004f7a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f38:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe fb8b 	bl	800367c <inc_lock>
 8004f66:	4602      	mov	r2, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <f_open+0x22e>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 8095 	bne.w	80050ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f9af 	bl	80042ee <ld_clust>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	331c      	adds	r3, #28
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fa08 	bl	80033b0 <ld_dword>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	88da      	ldrh	r2, [r3, #6]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	79fa      	ldrb	r2, [r7, #7]
 8004fbe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3330      	adds	r3, #48	; 0x30
 8004fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe fa72 	bl	80034c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d060      	beq.n	80050ae <f_open+0x362>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05c      	beq.n	80050ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	895b      	ldrh	r3, [r3, #10]
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	657b      	str	r3, [r7, #84]	; 0x54
 8005010:	e016      	b.n	8005040 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fd1d 	bl	8003a56 <get_fat>
 800501c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800501e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005020:	2b01      	cmp	r3, #1
 8005022:	d802      	bhi.n	800502a <f_open+0x2de>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800502a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d102      	bne.n	8005038 <f_open+0x2ec>
 8005032:	2301      	movs	r3, #1
 8005034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005038:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800503a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	657b      	str	r3, [r7, #84]	; 0x54
 8005040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <f_open+0x304>
 8005048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504c:	429a      	cmp	r2, r3
 800504e:	d8e0      	bhi.n	8005012 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005054:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800505a:	2b00      	cmp	r3, #0
 800505c:	d127      	bne.n	80050ae <f_open+0x362>
 800505e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	2b00      	cmp	r3, #0
 8005066:	d022      	beq.n	80050ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fcd3 	bl	8003a18 <clust2sect>
 8005072:	6478      	str	r0, [r7, #68]	; 0x44
 8005074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <f_open+0x336>
						res = FR_INT_ERR;
 800507a:	2302      	movs	r3, #2
 800507c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005080:	e015      	b.n	80050ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005084:	0a5a      	lsrs	r2, r3, #9
 8005086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005088:	441a      	add	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	7858      	ldrb	r0, [r3, #1]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	2301      	movs	r3, #1
 800509e:	f7fe f911 	bl	80032c4 <disk_read>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <f_open+0x362>
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80050ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <f_open+0x370>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80050bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3760      	adds	r7, #96	; 0x60
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08e      	sub	sp, #56	; 0x38
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f107 0214 	add.w	r2, r7, #20
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fdb3 	bl	8004c54 <validate>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80050f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <f_read+0x44>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	7d5b      	ldrb	r3, [r3, #21]
 8005100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <f_read+0x4a>
 800510c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005110:	e115      	b.n	800533e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	7d1b      	ldrb	r3, [r3, #20]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <f_read+0x5a>
 800511e:	2307      	movs	r3, #7
 8005120:	e10d      	b.n	800533e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	429a      	cmp	r2, r3
 8005134:	f240 80fe 	bls.w	8005334 <f_read+0x26c>
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800513c:	e0fa      	b.n	8005334 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	2b00      	cmp	r3, #0
 8005148:	f040 80c6 	bne.w	80052d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	8952      	ldrh	r2, [r2, #10]
 8005156:	3a01      	subs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d12f      	bne.n	80051c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	633b      	str	r3, [r7, #48]	; 0x30
 8005170:	e013      	b.n	800519a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7fe fef9 	bl	8003f78 <clmt_clust>
 8005186:	6338      	str	r0, [r7, #48]	; 0x30
 8005188:	e007      	b.n	800519a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7fe fc5f 	bl	8003a56 <get_fat>
 8005198:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	d804      	bhi.n	80051aa <f_read+0xe2>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2202      	movs	r2, #2
 80051a4:	755a      	strb	r2, [r3, #21]
 80051a6:	2302      	movs	r3, #2
 80051a8:	e0c9      	b.n	800533e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d104      	bne.n	80051bc <f_read+0xf4>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	755a      	strb	r2, [r3, #21]
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0c0      	b.n	800533e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7fe fc24 	bl	8003a18 <clust2sect>
 80051d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <f_read+0x11a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2202      	movs	r2, #2
 80051dc:	755a      	strb	r2, [r3, #21]
 80051de:	2302      	movs	r3, #2
 80051e0:	e0ad      	b.n	800533e <f_read+0x276>
			sect += csect;
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d039      	beq.n	800526a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	4413      	add	r3, r2
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	8952      	ldrh	r2, [r2, #10]
 8005200:	4293      	cmp	r3, r2
 8005202:	d905      	bls.n	8005210 <f_read+0x148>
					cc = fs->csize - csect;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	895b      	ldrh	r3, [r3, #10]
 8005208:	461a      	mov	r2, r3
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	7858      	ldrb	r0, [r3, #1]
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800521a:	f7fe f853 	bl	80032c4 <disk_read>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <f_read+0x166>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	755a      	strb	r2, [r3, #21]
 800522a:	2301      	movs	r3, #1
 800522c:	e087      	b.n	800533e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	7d1b      	ldrb	r3, [r3, #20]
 8005232:	b25b      	sxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	da14      	bge.n	8005262 <f_read+0x19a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005242:	429a      	cmp	r2, r3
 8005244:	d90d      	bls.n	8005262 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1a      	ldr	r2, [r3, #32]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	025b      	lsls	r3, r3, #9
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	18d0      	adds	r0, r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3330      	adds	r3, #48	; 0x30
 8005258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525c:	4619      	mov	r1, r3
 800525e:	f7fe f911 	bl	8003484 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	025b      	lsls	r3, r3, #9
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005268:	e050      	b.n	800530c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d02e      	beq.n	80052d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	7d1b      	ldrb	r3, [r3, #20]
 8005278:	b25b      	sxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	da18      	bge.n	80052b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	7858      	ldrb	r0, [r3, #1]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	2301      	movs	r3, #1
 800528e:	f7fe f839 	bl	8003304 <disk_write>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <f_read+0x1da>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	755a      	strb	r2, [r3, #21]
 800529e:	2301      	movs	r3, #1
 80052a0:	e04d      	b.n	800533e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	7d1b      	ldrb	r3, [r3, #20]
 80052a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	7858      	ldrb	r0, [r3, #1]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80052ba:	2301      	movs	r3, #1
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	f7fe f801 	bl	80032c4 <disk_read>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <f_read+0x20a>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	755a      	strb	r2, [r3, #21]
 80052ce:	2301      	movs	r3, #1
 80052d0:	e035      	b.n	800533e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80052e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d901      	bls.n	80052f2 <f_read+0x22a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005300:	4413      	add	r3, r2
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	4619      	mov	r1, r3
 8005306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005308:	f7fe f8bc 	bl	8003484 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	4413      	add	r3, r2
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	441a      	add	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	619a      	str	r2, [r3, #24]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	441a      	add	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f47f af01 	bne.w	800513e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3738      	adds	r7, #56	; 0x38
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b08c      	sub	sp, #48	; 0x30
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f107 0210 	add.w	r2, r7, #16
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fc74 	bl	8004c54 <validate>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <f_write+0x44>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	7d5b      	ldrb	r3, [r3, #21]
 800537e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <f_write+0x4a>
 800538a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800538e:	e14b      	b.n	8005628 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	7d1b      	ldrb	r3, [r3, #20]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <f_write+0x5a>
 800539c:	2307      	movs	r3, #7
 800539e:	e143      	b.n	8005628 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	441a      	add	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	f080 812d 	bcs.w	800560c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80053ba:	e127      	b.n	800560c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f040 80e3 	bne.w	8005590 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	0a5b      	lsrs	r3, r3, #9
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	8952      	ldrh	r2, [r2, #10]
 80053d4:	3a01      	subs	r2, #1
 80053d6:	4013      	ands	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d143      	bne.n	8005468 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10c      	bne.n	8005402 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11a      	bne.n	800542a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fd25 	bl	8003e48 <create_chain>
 80053fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8005400:	e013      	b.n	800542a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7fe fdb1 	bl	8003f78 <clmt_clust>
 8005416:	62b8      	str	r0, [r7, #40]	; 0x28
 8005418:	e007      	b.n	800542a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fe fd10 	bl	8003e48 <create_chain>
 8005428:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80f2 	beq.w	8005616 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	2b01      	cmp	r3, #1
 8005436:	d104      	bne.n	8005442 <f_write+0xfc>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2202      	movs	r2, #2
 800543c:	755a      	strb	r2, [r3, #21]
 800543e:	2302      	movs	r3, #2
 8005440:	e0f2      	b.n	8005628 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d104      	bne.n	8005454 <f_write+0x10e>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	755a      	strb	r2, [r3, #21]
 8005450:	2301      	movs	r3, #1
 8005452:	e0e9      	b.n	8005628 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <f_write+0x122>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005466:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	7d1b      	ldrb	r3, [r3, #20]
 800546c:	b25b      	sxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	da18      	bge.n	80054a4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	7858      	ldrb	r0, [r3, #1]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	2301      	movs	r3, #1
 8005482:	f7fd ff3f 	bl	8003304 <disk_write>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <f_write+0x150>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	755a      	strb	r2, [r3, #21]
 8005492:	2301      	movs	r3, #1
 8005494:	e0c8      	b.n	8005628 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	7d1b      	ldrb	r3, [r3, #20]
 800549a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f7fe fab3 	bl	8003a18 <clust2sect>
 80054b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <f_write+0x17e>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	755a      	strb	r2, [r3, #21]
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0b1      	b.n	8005628 <f_write+0x2e2>
			sect += csect;
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	4413      	add	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0a5b      	lsrs	r3, r3, #9
 80054d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d03c      	beq.n	8005552 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	4413      	add	r3, r2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	8952      	ldrh	r2, [r2, #10]
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d905      	bls.n	80054f2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	895b      	ldrh	r3, [r3, #10]
 80054ea:	461a      	mov	r2, r3
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	7858      	ldrb	r0, [r3, #1]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	69f9      	ldr	r1, [r7, #28]
 80054fc:	f7fd ff02 	bl	8003304 <disk_write>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <f_write+0x1ca>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	755a      	strb	r2, [r3, #21]
 800550c:	2301      	movs	r3, #1
 800550e:	e08b      	b.n	8005628 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	429a      	cmp	r2, r3
 800551c:	d915      	bls.n	800554a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	025b      	lsls	r3, r3, #9
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	4619      	mov	r1, r3
 8005538:	f7fd ffa4 	bl	8003484 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	7d1b      	ldrb	r3, [r3, #20]
 8005540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	025b      	lsls	r3, r3, #9
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005550:	e03f      	b.n	80055d2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	429a      	cmp	r2, r3
 800555a:	d016      	beq.n	800558a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005564:	429a      	cmp	r2, r3
 8005566:	d210      	bcs.n	800558a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	7858      	ldrb	r0, [r3, #1]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005572:	2301      	movs	r3, #1
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	f7fd fea5 	bl	80032c4 <disk_read>
 800557a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	755a      	strb	r2, [r3, #21]
 8005586:	2301      	movs	r3, #1
 8005588:	e04e      	b.n	8005628 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005598:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d901      	bls.n	80055aa <f_write+0x264>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b8:	4413      	add	r3, r2
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd ff60 	bl	8003484 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	7d1b      	ldrb	r3, [r3, #20]
 80055c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	4413      	add	r3, r2
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	619a      	str	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bf38      	it	cc
 80055f2:	461a      	movcc	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	60da      	str	r2, [r3, #12]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	441a      	add	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f47f aed4 	bne.w	80053bc <f_write+0x76>
 8005614:	e000      	b.n	8005618 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005616:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	7d1b      	ldrb	r3, [r3, #20]
 800561c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3730      	adds	r7, #48	; 0x30
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f107 0208 	add.w	r2, r7, #8
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fb07 	bl	8004c54 <validate>
 8005646:	4603      	mov	r3, r0
 8005648:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d168      	bne.n	8005722 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	7d1b      	ldrb	r3, [r3, #20]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d062      	beq.n	8005722 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	7d1b      	ldrb	r3, [r3, #20]
 8005660:	b25b      	sxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	da15      	bge.n	8005692 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	7858      	ldrb	r0, [r3, #1]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	2301      	movs	r3, #1
 8005676:	f7fd fe45 	bl	8003304 <disk_write>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <f_sync+0x54>
 8005680:	2301      	movs	r3, #1
 8005682:	e04f      	b.n	8005724 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7d1b      	ldrb	r3, [r3, #20]
 8005688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568c:	b2da      	uxtb	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005692:	f7fd f899 	bl	80027c8 <get_fattime>
 8005696:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7fe f91d 	bl	80038e0 <move_window>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d138      	bne.n	8005722 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	330b      	adds	r3, #11
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	330b      	adds	r3, #11
 80056c0:	f042 0220 	orr.w	r2, r2, #32
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	461a      	mov	r2, r3
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f7fe fe2a 	bl	800432c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f103 021c 	add.w	r2, r3, #28
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fd fea1 	bl	800342c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3316      	adds	r3, #22
 80056ee:	6939      	ldr	r1, [r7, #16]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fd fe9b 	bl	800342c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3312      	adds	r3, #18
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fd fe7a 	bl	80033f6 <st_word>
					fs->wflag = 1;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2201      	movs	r2, #1
 8005706:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe f916 	bl	800393c <sync_fs>
 8005710:	4603      	mov	r3, r0
 8005712:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7d1b      	ldrb	r3, [r3, #20]
 8005718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571c:	b2da      	uxtb	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff7b 	bl	8005630 <f_sync>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d118      	bne.n	8005776 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	4611      	mov	r1, r2
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fa81 	bl	8004c54 <validate>
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10c      	bne.n	8005776 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe f819 	bl	8003798 <dec_lock>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b092      	sub	sp, #72	; 0x48
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800578c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	2200      	movs	r2, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff f810 	bl	80047bc <find_volume>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80057a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8099 	bne.w	80058de <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80057ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	3b02      	subs	r3, #2
 80057bc:	429a      	cmp	r2, r3
 80057be:	d804      	bhi.n	80057ca <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e089      	b.n	80058de <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d128      	bne.n	8005828 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80057d6:	2302      	movs	r3, #2
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80057de:	f107 0314 	add.w	r3, r7, #20
 80057e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe f936 	bl	8003a56 <get_fat>
 80057ea:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d103      	bne.n	80057fc <f_getfree+0x7c>
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80057fa:	e063      	b.n	80058c4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d103      	bne.n	800580a <f_getfree+0x8a>
 8005802:	2302      	movs	r3, #2
 8005804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005808:	e05c      	b.n	80058c4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <f_getfree+0x96>
 8005810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005812:	3301      	adds	r3, #1
 8005814:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	3301      	adds	r3, #1
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005822:	429a      	cmp	r2, r3
 8005824:	d3db      	bcc.n	80057de <f_getfree+0x5e>
 8005826:	e04d      	b.n	80058c4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	2300      	movs	r3, #0
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	2b00      	cmp	r3, #0
 8005840:	d113      	bne.n	800586a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	63ba      	str	r2, [r7, #56]	; 0x38
 800584a:	4619      	mov	r1, r3
 800584c:	f7fe f848 	bl	80038e0 <move_window>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005856:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800585a:	2b00      	cmp	r3, #0
 800585c:	d131      	bne.n	80058c2 <f_getfree+0x142>
							p = fs->win;
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	3330      	adds	r3, #48	; 0x30
 8005862:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d10f      	bne.n	8005892 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005874:	f7fd fd84 	bl	8003380 <ld_word>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <f_getfree+0x104>
 800587e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005880:	3301      	adds	r3, #1
 8005882:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	3302      	adds	r3, #2
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	3b02      	subs	r3, #2
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
 8005890:	e010      	b.n	80058b4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005894:	f7fd fd8c 	bl	80033b0 <ld_dword>
 8005898:	4603      	mov	r3, r0
 800589a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <f_getfree+0x128>
 80058a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a4:	3301      	adds	r3, #1
 80058a6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	3304      	adds	r3, #4
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	3b04      	subs	r3, #4
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80058b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b6:	3b01      	subs	r3, #1
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1bd      	bne.n	800583c <f_getfree+0xbc>
 80058c0:	e000      	b.n	80058c4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80058c2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ce:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	791a      	ldrb	r2, [r3, #4]
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80058de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3748      	adds	r7, #72	; 0x48
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b088      	sub	sp, #32
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80058fe:	e01b      	b.n	8005938 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	f107 0114 	add.w	r1, r7, #20
 8005908:	2201      	movs	r2, #1
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fbdc 	bl	80050c8 <f_read>
		if (rc != 1) break;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d116      	bne.n	8005944 <f_gets+0x5a>
		c = s[0];
 8005916:	7d3b      	ldrb	r3, [r7, #20]
 8005918:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	2b0d      	cmp	r3, #13
 800591e:	d100      	bne.n	8005922 <f_gets+0x38>
 8005920:	e00a      	b.n	8005938 <f_gets+0x4e>
		*p++ = c;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	61ba      	str	r2, [r7, #24]
 8005928:	7dfa      	ldrb	r2, [r7, #23]
 800592a:	701a      	strb	r2, [r3, #0]
		n++;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005932:	7dfb      	ldrb	r3, [r7, #23]
 8005934:	2b0a      	cmp	r3, #10
 8005936:	d007      	beq.n	8005948 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3b01      	subs	r3, #1
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	429a      	cmp	r2, r3
 8005940:	dbde      	blt.n	8005900 <f_gets+0x16>
 8005942:	e002      	b.n	800594a <f_gets+0x60>
		if (rc != 1) break;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005948:	bf00      	nop
	}
	*p = 0;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <f_gets+0x70>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	e000      	b.n	800595c <f_gets+0x72>
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800597a:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 800597c:	7a5b      	ldrb	r3, [r3, #9]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d131      	bne.n	80059e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 8005986:	7a5b      	ldrb	r3, [r3, #9]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 800598e:	2100      	movs	r1, #0
 8005990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005992:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 8005994:	7a5b      	ldrb	r3, [r3, #9]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 80059a4:	7a5b      	ldrb	r3, [r3, #9]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 80059ac:	4413      	add	r3, r2
 80059ae:	79fa      	ldrb	r2, [r7, #7]
 80059b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 80059b4:	7a5b      	ldrb	r3, [r3, #9]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	b2d1      	uxtb	r1, r2
 80059bc:	4a0e      	ldr	r2, [pc, #56]	; (80059f8 <FATFS_LinkDriverEx+0x94>)
 80059be:	7251      	strb	r1, [r2, #9]
 80059c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80059c2:	7dbb      	ldrb	r3, [r7, #22]
 80059c4:	3330      	adds	r3, #48	; 0x30
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3301      	adds	r3, #1
 80059d0:	223a      	movs	r2, #58	; 0x3a
 80059d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	3302      	adds	r3, #2
 80059d8:	222f      	movs	r2, #47	; 0x2f
 80059da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3303      	adds	r3, #3
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	200001d4 	.word	0x200001d4

080059fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ffaa 	bl	8005964 <FATFS_LinkDriverEx>
 8005a10:	4603      	mov	r3, r0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <__errno>:
 8005a1c:	4b01      	ldr	r3, [pc, #4]	; (8005a24 <__errno+0x8>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000024 	.word	0x20000024

08005a28 <__libc_init_array>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	4d0d      	ldr	r5, [pc, #52]	; (8005a60 <__libc_init_array+0x38>)
 8005a2c:	4c0d      	ldr	r4, [pc, #52]	; (8005a64 <__libc_init_array+0x3c>)
 8005a2e:	1b64      	subs	r4, r4, r5
 8005a30:	10a4      	asrs	r4, r4, #2
 8005a32:	2600      	movs	r6, #0
 8005a34:	42a6      	cmp	r6, r4
 8005a36:	d109      	bne.n	8005a4c <__libc_init_array+0x24>
 8005a38:	4d0b      	ldr	r5, [pc, #44]	; (8005a68 <__libc_init_array+0x40>)
 8005a3a:	4c0c      	ldr	r4, [pc, #48]	; (8005a6c <__libc_init_array+0x44>)
 8005a3c:	f000 fc68 	bl	8006310 <_init>
 8005a40:	1b64      	subs	r4, r4, r5
 8005a42:	10a4      	asrs	r4, r4, #2
 8005a44:	2600      	movs	r6, #0
 8005a46:	42a6      	cmp	r6, r4
 8005a48:	d105      	bne.n	8005a56 <__libc_init_array+0x2e>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a50:	4798      	blx	r3
 8005a52:	3601      	adds	r6, #1
 8005a54:	e7ee      	b.n	8005a34 <__libc_init_array+0xc>
 8005a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5a:	4798      	blx	r3
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	e7f2      	b.n	8005a46 <__libc_init_array+0x1e>
 8005a60:	080065f8 	.word	0x080065f8
 8005a64:	080065f8 	.word	0x080065f8
 8005a68:	080065f8 	.word	0x080065f8
 8005a6c:	080065fc 	.word	0x080065fc

08005a70 <memset>:
 8005a70:	4402      	add	r2, r0
 8005a72:	4603      	mov	r3, r0
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d100      	bne.n	8005a7a <memset+0xa>
 8005a78:	4770      	bx	lr
 8005a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7e:	e7f9      	b.n	8005a74 <memset+0x4>

08005a80 <_vsniprintf_r>:
 8005a80:	b530      	push	{r4, r5, lr}
 8005a82:	1e14      	subs	r4, r2, #0
 8005a84:	4605      	mov	r5, r0
 8005a86:	b09b      	sub	sp, #108	; 0x6c
 8005a88:	4618      	mov	r0, r3
 8005a8a:	da05      	bge.n	8005a98 <_vsniprintf_r+0x18>
 8005a8c:	238b      	movs	r3, #139	; 0x8b
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	b01b      	add	sp, #108	; 0x6c
 8005a96:	bd30      	pop	{r4, r5, pc}
 8005a98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005aa0:	bf14      	ite	ne
 8005aa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005aa6:	4623      	moveq	r3, r4
 8005aa8:	9302      	str	r3, [sp, #8]
 8005aaa:	9305      	str	r3, [sp, #20]
 8005aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ab0:	9100      	str	r1, [sp, #0]
 8005ab2:	9104      	str	r1, [sp, #16]
 8005ab4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005ab8:	4602      	mov	r2, r0
 8005aba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005abc:	4669      	mov	r1, sp
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f874 	bl	8005bac <_svfiprintf_r>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	bfbc      	itt	lt
 8005ac8:	238b      	movlt	r3, #139	; 0x8b
 8005aca:	602b      	strlt	r3, [r5, #0]
 8005acc:	2c00      	cmp	r4, #0
 8005ace:	d0e1      	beq.n	8005a94 <_vsniprintf_r+0x14>
 8005ad0:	9b00      	ldr	r3, [sp, #0]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	e7dd      	b.n	8005a94 <_vsniprintf_r+0x14>

08005ad8 <vsniprintf>:
 8005ad8:	b507      	push	{r0, r1, r2, lr}
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	460a      	mov	r2, r1
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	4803      	ldr	r0, [pc, #12]	; (8005af0 <vsniprintf+0x18>)
 8005ae4:	6800      	ldr	r0, [r0, #0]
 8005ae6:	f7ff ffcb 	bl	8005a80 <_vsniprintf_r>
 8005aea:	b003      	add	sp, #12
 8005aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8005af0:	20000024 	.word	0x20000024

08005af4 <__ssputs_r>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	688e      	ldr	r6, [r1, #8]
 8005afa:	429e      	cmp	r6, r3
 8005afc:	4682      	mov	sl, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	4690      	mov	r8, r2
 8005b02:	461f      	mov	r7, r3
 8005b04:	d838      	bhi.n	8005b78 <__ssputs_r+0x84>
 8005b06:	898a      	ldrh	r2, [r1, #12]
 8005b08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b0c:	d032      	beq.n	8005b74 <__ssputs_r+0x80>
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	6909      	ldr	r1, [r1, #16]
 8005b12:	eba5 0901 	sub.w	r9, r5, r1
 8005b16:	6965      	ldr	r5, [r4, #20]
 8005b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b20:	3301      	adds	r3, #1
 8005b22:	444b      	add	r3, r9
 8005b24:	106d      	asrs	r5, r5, #1
 8005b26:	429d      	cmp	r5, r3
 8005b28:	bf38      	it	cc
 8005b2a:	461d      	movcc	r5, r3
 8005b2c:	0553      	lsls	r3, r2, #21
 8005b2e:	d531      	bpl.n	8005b94 <__ssputs_r+0xa0>
 8005b30:	4629      	mov	r1, r5
 8005b32:	f000 fb47 	bl	80061c4 <_malloc_r>
 8005b36:	4606      	mov	r6, r0
 8005b38:	b950      	cbnz	r0, 8005b50 <__ssputs_r+0x5c>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	f8ca 3000 	str.w	r3, [sl]
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	6921      	ldr	r1, [r4, #16]
 8005b52:	464a      	mov	r2, r9
 8005b54:	f000 fabe 	bl	80060d4 <memcpy>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	6126      	str	r6, [r4, #16]
 8005b66:	6165      	str	r5, [r4, #20]
 8005b68:	444e      	add	r6, r9
 8005b6a:	eba5 0509 	sub.w	r5, r5, r9
 8005b6e:	6026      	str	r6, [r4, #0]
 8005b70:	60a5      	str	r5, [r4, #8]
 8005b72:	463e      	mov	r6, r7
 8005b74:	42be      	cmp	r6, r7
 8005b76:	d900      	bls.n	8005b7a <__ssputs_r+0x86>
 8005b78:	463e      	mov	r6, r7
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	4641      	mov	r1, r8
 8005b80:	f000 fab6 	bl	80060f0 <memmove>
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	1b9b      	subs	r3, r3, r6
 8005b8a:	4432      	add	r2, r6
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	2000      	movs	r0, #0
 8005b92:	e7db      	b.n	8005b4c <__ssputs_r+0x58>
 8005b94:	462a      	mov	r2, r5
 8005b96:	f000 fb6f 	bl	8006278 <_realloc_r>
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d1e1      	bne.n	8005b64 <__ssputs_r+0x70>
 8005ba0:	6921      	ldr	r1, [r4, #16]
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	f000 fabe 	bl	8006124 <_free_r>
 8005ba8:	e7c7      	b.n	8005b3a <__ssputs_r+0x46>
	...

08005bac <_svfiprintf_r>:
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	4698      	mov	r8, r3
 8005bb2:	898b      	ldrh	r3, [r1, #12]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	b09d      	sub	sp, #116	; 0x74
 8005bb8:	4607      	mov	r7, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	d50e      	bpl.n	8005bde <_svfiprintf_r+0x32>
 8005bc0:	690b      	ldr	r3, [r1, #16]
 8005bc2:	b963      	cbnz	r3, 8005bde <_svfiprintf_r+0x32>
 8005bc4:	2140      	movs	r1, #64	; 0x40
 8005bc6:	f000 fafd 	bl	80061c4 <_malloc_r>
 8005bca:	6028      	str	r0, [r5, #0]
 8005bcc:	6128      	str	r0, [r5, #16]
 8005bce:	b920      	cbnz	r0, 8005bda <_svfiprintf_r+0x2e>
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e0d1      	b.n	8005d7e <_svfiprintf_r+0x1d2>
 8005bda:	2340      	movs	r3, #64	; 0x40
 8005bdc:	616b      	str	r3, [r5, #20]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9309      	str	r3, [sp, #36]	; 0x24
 8005be2:	2320      	movs	r3, #32
 8005be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bec:	2330      	movs	r3, #48	; 0x30
 8005bee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d98 <_svfiprintf_r+0x1ec>
 8005bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bf6:	f04f 0901 	mov.w	r9, #1
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	469a      	mov	sl, r3
 8005bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c02:	b10a      	cbz	r2, 8005c08 <_svfiprintf_r+0x5c>
 8005c04:	2a25      	cmp	r2, #37	; 0x25
 8005c06:	d1f9      	bne.n	8005bfc <_svfiprintf_r+0x50>
 8005c08:	ebba 0b04 	subs.w	fp, sl, r4
 8005c0c:	d00b      	beq.n	8005c26 <_svfiprintf_r+0x7a>
 8005c0e:	465b      	mov	r3, fp
 8005c10:	4622      	mov	r2, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff ff6d 	bl	8005af4 <__ssputs_r>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f000 80aa 	beq.w	8005d74 <_svfiprintf_r+0x1c8>
 8005c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c22:	445a      	add	r2, fp
 8005c24:	9209      	str	r2, [sp, #36]	; 0x24
 8005c26:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80a2 	beq.w	8005d74 <_svfiprintf_r+0x1c8>
 8005c30:	2300      	movs	r3, #0
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c3a:	f10a 0a01 	add.w	sl, sl, #1
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	9307      	str	r3, [sp, #28]
 8005c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c46:	931a      	str	r3, [sp, #104]	; 0x68
 8005c48:	4654      	mov	r4, sl
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c50:	4851      	ldr	r0, [pc, #324]	; (8005d98 <_svfiprintf_r+0x1ec>)
 8005c52:	f7fa fac5 	bl	80001e0 <memchr>
 8005c56:	9a04      	ldr	r2, [sp, #16]
 8005c58:	b9d8      	cbnz	r0, 8005c92 <_svfiprintf_r+0xe6>
 8005c5a:	06d0      	lsls	r0, r2, #27
 8005c5c:	bf44      	itt	mi
 8005c5e:	2320      	movmi	r3, #32
 8005c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c64:	0711      	lsls	r1, r2, #28
 8005c66:	bf44      	itt	mi
 8005c68:	232b      	movmi	r3, #43	; 0x2b
 8005c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c72:	2b2a      	cmp	r3, #42	; 0x2a
 8005c74:	d015      	beq.n	8005ca2 <_svfiprintf_r+0xf6>
 8005c76:	9a07      	ldr	r2, [sp, #28]
 8005c78:	4654      	mov	r4, sl
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f04f 0c0a 	mov.w	ip, #10
 8005c80:	4621      	mov	r1, r4
 8005c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c86:	3b30      	subs	r3, #48	; 0x30
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d94e      	bls.n	8005d2a <_svfiprintf_r+0x17e>
 8005c8c:	b1b0      	cbz	r0, 8005cbc <_svfiprintf_r+0x110>
 8005c8e:	9207      	str	r2, [sp, #28]
 8005c90:	e014      	b.n	8005cbc <_svfiprintf_r+0x110>
 8005c92:	eba0 0308 	sub.w	r3, r0, r8
 8005c96:	fa09 f303 	lsl.w	r3, r9, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	46a2      	mov	sl, r4
 8005ca0:	e7d2      	b.n	8005c48 <_svfiprintf_r+0x9c>
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	1d19      	adds	r1, r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	9103      	str	r1, [sp, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfbb      	ittet	lt
 8005cae:	425b      	neglt	r3, r3
 8005cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005cb4:	9307      	strge	r3, [sp, #28]
 8005cb6:	9307      	strlt	r3, [sp, #28]
 8005cb8:	bfb8      	it	lt
 8005cba:	9204      	strlt	r2, [sp, #16]
 8005cbc:	7823      	ldrb	r3, [r4, #0]
 8005cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005cc0:	d10c      	bne.n	8005cdc <_svfiprintf_r+0x130>
 8005cc2:	7863      	ldrb	r3, [r4, #1]
 8005cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc6:	d135      	bne.n	8005d34 <_svfiprintf_r+0x188>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9203      	str	r2, [sp, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfb8      	it	lt
 8005cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cd8:	3402      	adds	r4, #2
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005da8 <_svfiprintf_r+0x1fc>
 8005ce0:	7821      	ldrb	r1, [r4, #0]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	f7fa fa7b 	bl	80001e0 <memchr>
 8005cea:	b140      	cbz	r0, 8005cfe <_svfiprintf_r+0x152>
 8005cec:	2340      	movs	r3, #64	; 0x40
 8005cee:	eba0 000a 	sub.w	r0, r0, sl
 8005cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8005cf6:	9b04      	ldr	r3, [sp, #16]
 8005cf8:	4303      	orrs	r3, r0
 8005cfa:	3401      	adds	r4, #1
 8005cfc:	9304      	str	r3, [sp, #16]
 8005cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d02:	4826      	ldr	r0, [pc, #152]	; (8005d9c <_svfiprintf_r+0x1f0>)
 8005d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d08:	2206      	movs	r2, #6
 8005d0a:	f7fa fa69 	bl	80001e0 <memchr>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d038      	beq.n	8005d84 <_svfiprintf_r+0x1d8>
 8005d12:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <_svfiprintf_r+0x1f4>)
 8005d14:	bb1b      	cbnz	r3, 8005d5e <_svfiprintf_r+0x1b2>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	3307      	adds	r3, #7
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	3308      	adds	r3, #8
 8005d20:	9303      	str	r3, [sp, #12]
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	4433      	add	r3, r6
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	e767      	b.n	8005bfa <_svfiprintf_r+0x4e>
 8005d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d2e:	460c      	mov	r4, r1
 8005d30:	2001      	movs	r0, #1
 8005d32:	e7a5      	b.n	8005c80 <_svfiprintf_r+0xd4>
 8005d34:	2300      	movs	r3, #0
 8005d36:	3401      	adds	r4, #1
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	f04f 0c0a 	mov.w	ip, #10
 8005d40:	4620      	mov	r0, r4
 8005d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d46:	3a30      	subs	r2, #48	; 0x30
 8005d48:	2a09      	cmp	r2, #9
 8005d4a:	d903      	bls.n	8005d54 <_svfiprintf_r+0x1a8>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0c5      	beq.n	8005cdc <_svfiprintf_r+0x130>
 8005d50:	9105      	str	r1, [sp, #20]
 8005d52:	e7c3      	b.n	8005cdc <_svfiprintf_r+0x130>
 8005d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d58:	4604      	mov	r4, r0
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e7f0      	b.n	8005d40 <_svfiprintf_r+0x194>
 8005d5e:	ab03      	add	r3, sp, #12
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	462a      	mov	r2, r5
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <_svfiprintf_r+0x1f8>)
 8005d66:	a904      	add	r1, sp, #16
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f3af 8000 	nop.w
 8005d6e:	1c42      	adds	r2, r0, #1
 8005d70:	4606      	mov	r6, r0
 8005d72:	d1d6      	bne.n	8005d22 <_svfiprintf_r+0x176>
 8005d74:	89ab      	ldrh	r3, [r5, #12]
 8005d76:	065b      	lsls	r3, r3, #25
 8005d78:	f53f af2c 	bmi.w	8005bd4 <_svfiprintf_r+0x28>
 8005d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d7e:	b01d      	add	sp, #116	; 0x74
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <_svfiprintf_r+0x1f8>)
 8005d8c:	a904      	add	r1, sp, #16
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f000 f87a 	bl	8005e88 <_printf_i>
 8005d94:	e7eb      	b.n	8005d6e <_svfiprintf_r+0x1c2>
 8005d96:	bf00      	nop
 8005d98:	080065bc 	.word	0x080065bc
 8005d9c:	080065c6 	.word	0x080065c6
 8005da0:	00000000 	.word	0x00000000
 8005da4:	08005af5 	.word	0x08005af5
 8005da8:	080065c2 	.word	0x080065c2

08005dac <_printf_common>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	4616      	mov	r6, r2
 8005db2:	4699      	mov	r9, r3
 8005db4:	688a      	ldr	r2, [r1, #8]
 8005db6:	690b      	ldr	r3, [r1, #16]
 8005db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	bfb8      	it	lt
 8005dc0:	4613      	movlt	r3, r2
 8005dc2:	6033      	str	r3, [r6, #0]
 8005dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dc8:	4607      	mov	r7, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	b10a      	cbz	r2, 8005dd2 <_printf_common+0x26>
 8005dce:	3301      	adds	r3, #1
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	0699      	lsls	r1, r3, #26
 8005dd6:	bf42      	ittt	mi
 8005dd8:	6833      	ldrmi	r3, [r6, #0]
 8005dda:	3302      	addmi	r3, #2
 8005ddc:	6033      	strmi	r3, [r6, #0]
 8005dde:	6825      	ldr	r5, [r4, #0]
 8005de0:	f015 0506 	ands.w	r5, r5, #6
 8005de4:	d106      	bne.n	8005df4 <_printf_common+0x48>
 8005de6:	f104 0a19 	add.w	sl, r4, #25
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	6832      	ldr	r2, [r6, #0]
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	dc26      	bgt.n	8005e42 <_printf_common+0x96>
 8005df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005df8:	1e13      	subs	r3, r2, #0
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	2301      	movne	r3, #1
 8005e00:	0692      	lsls	r2, r2, #26
 8005e02:	d42b      	bmi.n	8005e5c <_printf_common+0xb0>
 8005e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e08:	4649      	mov	r1, r9
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c0      	blx	r8
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d01e      	beq.n	8005e50 <_printf_common+0xa4>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	68e5      	ldr	r5, [r4, #12]
 8005e16:	6832      	ldr	r2, [r6, #0]
 8005e18:	f003 0306 	and.w	r3, r3, #6
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	bf08      	it	eq
 8005e20:	1aad      	subeq	r5, r5, r2
 8005e22:	68a3      	ldr	r3, [r4, #8]
 8005e24:	6922      	ldr	r2, [r4, #16]
 8005e26:	bf0c      	ite	eq
 8005e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e2c:	2500      	movne	r5, #0
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	bfc4      	itt	gt
 8005e32:	1a9b      	subgt	r3, r3, r2
 8005e34:	18ed      	addgt	r5, r5, r3
 8005e36:	2600      	movs	r6, #0
 8005e38:	341a      	adds	r4, #26
 8005e3a:	42b5      	cmp	r5, r6
 8005e3c:	d11a      	bne.n	8005e74 <_printf_common+0xc8>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e008      	b.n	8005e54 <_printf_common+0xa8>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4652      	mov	r2, sl
 8005e46:	4649      	mov	r1, r9
 8005e48:	4638      	mov	r0, r7
 8005e4a:	47c0      	blx	r8
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d103      	bne.n	8005e58 <_printf_common+0xac>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e58:	3501      	adds	r5, #1
 8005e5a:	e7c6      	b.n	8005dea <_printf_common+0x3e>
 8005e5c:	18e1      	adds	r1, r4, r3
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	2030      	movs	r0, #48	; 0x30
 8005e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e66:	4422      	add	r2, r4
 8005e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e70:	3302      	adds	r3, #2
 8005e72:	e7c7      	b.n	8005e04 <_printf_common+0x58>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4622      	mov	r2, r4
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d0e6      	beq.n	8005e50 <_printf_common+0xa4>
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7d9      	b.n	8005e3a <_printf_common+0x8e>
	...

08005e88 <_printf_i>:
 8005e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	4691      	mov	r9, r2
 8005e90:	7e27      	ldrb	r7, [r4, #24]
 8005e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e94:	2f78      	cmp	r7, #120	; 0x78
 8005e96:	4680      	mov	r8, r0
 8005e98:	469a      	mov	sl, r3
 8005e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e9e:	d807      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ea0:	2f62      	cmp	r7, #98	; 0x62
 8005ea2:	d80a      	bhi.n	8005eba <_printf_i+0x32>
 8005ea4:	2f00      	cmp	r7, #0
 8005ea6:	f000 80d8 	beq.w	800605a <_printf_i+0x1d2>
 8005eaa:	2f58      	cmp	r7, #88	; 0x58
 8005eac:	f000 80a3 	beq.w	8005ff6 <_printf_i+0x16e>
 8005eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eb8:	e03a      	b.n	8005f30 <_printf_i+0xa8>
 8005eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ebe:	2b15      	cmp	r3, #21
 8005ec0:	d8f6      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ec2:	a001      	add	r0, pc, #4	; (adr r0, 8005ec8 <_printf_i+0x40>)
 8005ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005eb1 	.word	0x08005eb1
 8005ed4:	08005eb1 	.word	0x08005eb1
 8005ed8:	08005eb1 	.word	0x08005eb1
 8005edc:	08005eb1 	.word	0x08005eb1
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005eb1 	.word	0x08005eb1
 8005ee8:	08005eb1 	.word	0x08005eb1
 8005eec:	08005eb1 	.word	0x08005eb1
 8005ef0:	08005eb1 	.word	0x08005eb1
 8005ef4:	08006041 	.word	0x08006041
 8005ef8:	08005f65 	.word	0x08005f65
 8005efc:	08006023 	.word	0x08006023
 8005f00:	08005eb1 	.word	0x08005eb1
 8005f04:	08005eb1 	.word	0x08005eb1
 8005f08:	08006063 	.word	0x08006063
 8005f0c:	08005eb1 	.word	0x08005eb1
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005eb1 	.word	0x08005eb1
 8005f18:	08005eb1 	.word	0x08005eb1
 8005f1c:	0800602b 	.word	0x0800602b
 8005f20:	680b      	ldr	r3, [r1, #0]
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	600a      	str	r2, [r1, #0]
 8005f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0a3      	b.n	800607c <_printf_i+0x1f4>
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	6808      	ldr	r0, [r1, #0]
 8005f38:	062e      	lsls	r6, r5, #24
 8005f3a:	f100 0304 	add.w	r3, r0, #4
 8005f3e:	d50a      	bpl.n	8005f56 <_printf_i+0xce>
 8005f40:	6805      	ldr	r5, [r0, #0]
 8005f42:	600b      	str	r3, [r1, #0]
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	da03      	bge.n	8005f50 <_printf_i+0xc8>
 8005f48:	232d      	movs	r3, #45	; 0x2d
 8005f4a:	426d      	negs	r5, r5
 8005f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f50:	485e      	ldr	r0, [pc, #376]	; (80060cc <_printf_i+0x244>)
 8005f52:	230a      	movs	r3, #10
 8005f54:	e019      	b.n	8005f8a <_printf_i+0x102>
 8005f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f5a:	6805      	ldr	r5, [r0, #0]
 8005f5c:	600b      	str	r3, [r1, #0]
 8005f5e:	bf18      	it	ne
 8005f60:	b22d      	sxthne	r5, r5
 8005f62:	e7ef      	b.n	8005f44 <_printf_i+0xbc>
 8005f64:	680b      	ldr	r3, [r1, #0]
 8005f66:	6825      	ldr	r5, [r4, #0]
 8005f68:	1d18      	adds	r0, r3, #4
 8005f6a:	6008      	str	r0, [r1, #0]
 8005f6c:	0628      	lsls	r0, r5, #24
 8005f6e:	d501      	bpl.n	8005f74 <_printf_i+0xec>
 8005f70:	681d      	ldr	r5, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <_printf_i+0xf2>
 8005f74:	0669      	lsls	r1, r5, #25
 8005f76:	d5fb      	bpl.n	8005f70 <_printf_i+0xe8>
 8005f78:	881d      	ldrh	r5, [r3, #0]
 8005f7a:	4854      	ldr	r0, [pc, #336]	; (80060cc <_printf_i+0x244>)
 8005f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f7e:	bf0c      	ite	eq
 8005f80:	2308      	moveq	r3, #8
 8005f82:	230a      	movne	r3, #10
 8005f84:	2100      	movs	r1, #0
 8005f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f8a:	6866      	ldr	r6, [r4, #4]
 8005f8c:	60a6      	str	r6, [r4, #8]
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	bfa2      	ittt	ge
 8005f92:	6821      	ldrge	r1, [r4, #0]
 8005f94:	f021 0104 	bicge.w	r1, r1, #4
 8005f98:	6021      	strge	r1, [r4, #0]
 8005f9a:	b90d      	cbnz	r5, 8005fa0 <_printf_i+0x118>
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	d04d      	beq.n	800603c <_printf_i+0x1b4>
 8005fa0:	4616      	mov	r6, r2
 8005fa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fa6:	fb03 5711 	mls	r7, r3, r1, r5
 8005faa:	5dc7      	ldrb	r7, [r0, r7]
 8005fac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fb0:	462f      	mov	r7, r5
 8005fb2:	42bb      	cmp	r3, r7
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	d9f4      	bls.n	8005fa2 <_printf_i+0x11a>
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d10b      	bne.n	8005fd4 <_printf_i+0x14c>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	07df      	lsls	r7, r3, #31
 8005fc0:	d508      	bpl.n	8005fd4 <_printf_i+0x14c>
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	4299      	cmp	r1, r3
 8005fc8:	bfde      	ittt	le
 8005fca:	2330      	movle	r3, #48	; 0x30
 8005fcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fd4:	1b92      	subs	r2, r2, r6
 8005fd6:	6122      	str	r2, [r4, #16]
 8005fd8:	f8cd a000 	str.w	sl, [sp]
 8005fdc:	464b      	mov	r3, r9
 8005fde:	aa03      	add	r2, sp, #12
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7ff fee2 	bl	8005dac <_printf_common>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d14c      	bne.n	8006086 <_printf_i+0x1fe>
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	b004      	add	sp, #16
 8005ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff6:	4835      	ldr	r0, [pc, #212]	; (80060cc <_printf_i+0x244>)
 8005ff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	680e      	ldr	r6, [r1, #0]
 8006000:	061f      	lsls	r7, r3, #24
 8006002:	f856 5b04 	ldr.w	r5, [r6], #4
 8006006:	600e      	str	r6, [r1, #0]
 8006008:	d514      	bpl.n	8006034 <_printf_i+0x1ac>
 800600a:	07d9      	lsls	r1, r3, #31
 800600c:	bf44      	itt	mi
 800600e:	f043 0320 	orrmi.w	r3, r3, #32
 8006012:	6023      	strmi	r3, [r4, #0]
 8006014:	b91d      	cbnz	r5, 800601e <_printf_i+0x196>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f023 0320 	bic.w	r3, r3, #32
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	2310      	movs	r3, #16
 8006020:	e7b0      	b.n	8005f84 <_printf_i+0xfc>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	f043 0320 	orr.w	r3, r3, #32
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	2378      	movs	r3, #120	; 0x78
 800602c:	4828      	ldr	r0, [pc, #160]	; (80060d0 <_printf_i+0x248>)
 800602e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006032:	e7e3      	b.n	8005ffc <_printf_i+0x174>
 8006034:	065e      	lsls	r6, r3, #25
 8006036:	bf48      	it	mi
 8006038:	b2ad      	uxthmi	r5, r5
 800603a:	e7e6      	b.n	800600a <_printf_i+0x182>
 800603c:	4616      	mov	r6, r2
 800603e:	e7bb      	b.n	8005fb8 <_printf_i+0x130>
 8006040:	680b      	ldr	r3, [r1, #0]
 8006042:	6826      	ldr	r6, [r4, #0]
 8006044:	6960      	ldr	r0, [r4, #20]
 8006046:	1d1d      	adds	r5, r3, #4
 8006048:	600d      	str	r5, [r1, #0]
 800604a:	0635      	lsls	r5, r6, #24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	d501      	bpl.n	8006054 <_printf_i+0x1cc>
 8006050:	6018      	str	r0, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0x1d2>
 8006054:	0671      	lsls	r1, r6, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0x1c8>
 8006058:	8018      	strh	r0, [r3, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	4616      	mov	r6, r2
 8006060:	e7ba      	b.n	8005fd8 <_printf_i+0x150>
 8006062:	680b      	ldr	r3, [r1, #0]
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	600a      	str	r2, [r1, #0]
 8006068:	681e      	ldr	r6, [r3, #0]
 800606a:	6862      	ldr	r2, [r4, #4]
 800606c:	2100      	movs	r1, #0
 800606e:	4630      	mov	r0, r6
 8006070:	f7fa f8b6 	bl	80001e0 <memchr>
 8006074:	b108      	cbz	r0, 800607a <_printf_i+0x1f2>
 8006076:	1b80      	subs	r0, r0, r6
 8006078:	6060      	str	r0, [r4, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	2300      	movs	r3, #0
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006084:	e7a8      	b.n	8005fd8 <_printf_i+0x150>
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	4632      	mov	r2, r6
 800608a:	4649      	mov	r1, r9
 800608c:	4640      	mov	r0, r8
 800608e:	47d0      	blx	sl
 8006090:	3001      	adds	r0, #1
 8006092:	d0ab      	beq.n	8005fec <_printf_i+0x164>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	079b      	lsls	r3, r3, #30
 8006098:	d413      	bmi.n	80060c2 <_printf_i+0x23a>
 800609a:	68e0      	ldr	r0, [r4, #12]
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	4298      	cmp	r0, r3
 80060a0:	bfb8      	it	lt
 80060a2:	4618      	movlt	r0, r3
 80060a4:	e7a4      	b.n	8005ff0 <_printf_i+0x168>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4632      	mov	r2, r6
 80060aa:	4649      	mov	r1, r9
 80060ac:	4640      	mov	r0, r8
 80060ae:	47d0      	blx	sl
 80060b0:	3001      	adds	r0, #1
 80060b2:	d09b      	beq.n	8005fec <_printf_i+0x164>
 80060b4:	3501      	adds	r5, #1
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	9903      	ldr	r1, [sp, #12]
 80060ba:	1a5b      	subs	r3, r3, r1
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dcf2      	bgt.n	80060a6 <_printf_i+0x21e>
 80060c0:	e7eb      	b.n	800609a <_printf_i+0x212>
 80060c2:	2500      	movs	r5, #0
 80060c4:	f104 0619 	add.w	r6, r4, #25
 80060c8:	e7f5      	b.n	80060b6 <_printf_i+0x22e>
 80060ca:	bf00      	nop
 80060cc:	080065cd 	.word	0x080065cd
 80060d0:	080065de 	.word	0x080065de

080060d4 <memcpy>:
 80060d4:	440a      	add	r2, r1
 80060d6:	4291      	cmp	r1, r2
 80060d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060dc:	d100      	bne.n	80060e0 <memcpy+0xc>
 80060de:	4770      	bx	lr
 80060e0:	b510      	push	{r4, lr}
 80060e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ea:	4291      	cmp	r1, r2
 80060ec:	d1f9      	bne.n	80060e2 <memcpy+0xe>
 80060ee:	bd10      	pop	{r4, pc}

080060f0 <memmove>:
 80060f0:	4288      	cmp	r0, r1
 80060f2:	b510      	push	{r4, lr}
 80060f4:	eb01 0402 	add.w	r4, r1, r2
 80060f8:	d902      	bls.n	8006100 <memmove+0x10>
 80060fa:	4284      	cmp	r4, r0
 80060fc:	4623      	mov	r3, r4
 80060fe:	d807      	bhi.n	8006110 <memmove+0x20>
 8006100:	1e43      	subs	r3, r0, #1
 8006102:	42a1      	cmp	r1, r4
 8006104:	d008      	beq.n	8006118 <memmove+0x28>
 8006106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800610a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800610e:	e7f8      	b.n	8006102 <memmove+0x12>
 8006110:	4402      	add	r2, r0
 8006112:	4601      	mov	r1, r0
 8006114:	428a      	cmp	r2, r1
 8006116:	d100      	bne.n	800611a <memmove+0x2a>
 8006118:	bd10      	pop	{r4, pc}
 800611a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800611e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006122:	e7f7      	b.n	8006114 <memmove+0x24>

08006124 <_free_r>:
 8006124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006126:	2900      	cmp	r1, #0
 8006128:	d048      	beq.n	80061bc <_free_r+0x98>
 800612a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612e:	9001      	str	r0, [sp, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f1a1 0404 	sub.w	r4, r1, #4
 8006136:	bfb8      	it	lt
 8006138:	18e4      	addlt	r4, r4, r3
 800613a:	f000 f8d3 	bl	80062e4 <__malloc_lock>
 800613e:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <_free_r+0x9c>)
 8006140:	9801      	ldr	r0, [sp, #4]
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	4615      	mov	r5, r2
 8006146:	b933      	cbnz	r3, 8006156 <_free_r+0x32>
 8006148:	6063      	str	r3, [r4, #4]
 800614a:	6014      	str	r4, [r2, #0]
 800614c:	b003      	add	sp, #12
 800614e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006152:	f000 b8cd 	b.w	80062f0 <__malloc_unlock>
 8006156:	42a3      	cmp	r3, r4
 8006158:	d90b      	bls.n	8006172 <_free_r+0x4e>
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	1862      	adds	r2, r4, r1
 800615e:	4293      	cmp	r3, r2
 8006160:	bf04      	itt	eq
 8006162:	681a      	ldreq	r2, [r3, #0]
 8006164:	685b      	ldreq	r3, [r3, #4]
 8006166:	6063      	str	r3, [r4, #4]
 8006168:	bf04      	itt	eq
 800616a:	1852      	addeq	r2, r2, r1
 800616c:	6022      	streq	r2, [r4, #0]
 800616e:	602c      	str	r4, [r5, #0]
 8006170:	e7ec      	b.n	800614c <_free_r+0x28>
 8006172:	461a      	mov	r2, r3
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b10b      	cbz	r3, 800617c <_free_r+0x58>
 8006178:	42a3      	cmp	r3, r4
 800617a:	d9fa      	bls.n	8006172 <_free_r+0x4e>
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	1855      	adds	r5, r2, r1
 8006180:	42a5      	cmp	r5, r4
 8006182:	d10b      	bne.n	800619c <_free_r+0x78>
 8006184:	6824      	ldr	r4, [r4, #0]
 8006186:	4421      	add	r1, r4
 8006188:	1854      	adds	r4, r2, r1
 800618a:	42a3      	cmp	r3, r4
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	d1dd      	bne.n	800614c <_free_r+0x28>
 8006190:	681c      	ldr	r4, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	6053      	str	r3, [r2, #4]
 8006196:	4421      	add	r1, r4
 8006198:	6011      	str	r1, [r2, #0]
 800619a:	e7d7      	b.n	800614c <_free_r+0x28>
 800619c:	d902      	bls.n	80061a4 <_free_r+0x80>
 800619e:	230c      	movs	r3, #12
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	e7d3      	b.n	800614c <_free_r+0x28>
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	1961      	adds	r1, r4, r5
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf04      	itt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	bf04      	itt	eq
 80061b4:	1949      	addeq	r1, r1, r5
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	6054      	str	r4, [r2, #4]
 80061ba:	e7c7      	b.n	800614c <_free_r+0x28>
 80061bc:	b003      	add	sp, #12
 80061be:	bd30      	pop	{r4, r5, pc}
 80061c0:	200001e0 	.word	0x200001e0

080061c4 <_malloc_r>:
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	1ccd      	adds	r5, r1, #3
 80061c8:	f025 0503 	bic.w	r5, r5, #3
 80061cc:	3508      	adds	r5, #8
 80061ce:	2d0c      	cmp	r5, #12
 80061d0:	bf38      	it	cc
 80061d2:	250c      	movcc	r5, #12
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	4606      	mov	r6, r0
 80061d8:	db01      	blt.n	80061de <_malloc_r+0x1a>
 80061da:	42a9      	cmp	r1, r5
 80061dc:	d903      	bls.n	80061e6 <_malloc_r+0x22>
 80061de:	230c      	movs	r3, #12
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	2000      	movs	r0, #0
 80061e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e6:	f000 f87d 	bl	80062e4 <__malloc_lock>
 80061ea:	4921      	ldr	r1, [pc, #132]	; (8006270 <_malloc_r+0xac>)
 80061ec:	680a      	ldr	r2, [r1, #0]
 80061ee:	4614      	mov	r4, r2
 80061f0:	b99c      	cbnz	r4, 800621a <_malloc_r+0x56>
 80061f2:	4f20      	ldr	r7, [pc, #128]	; (8006274 <_malloc_r+0xb0>)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	b923      	cbnz	r3, 8006202 <_malloc_r+0x3e>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4630      	mov	r0, r6
 80061fc:	f000 f862 	bl	80062c4 <_sbrk_r>
 8006200:	6038      	str	r0, [r7, #0]
 8006202:	4629      	mov	r1, r5
 8006204:	4630      	mov	r0, r6
 8006206:	f000 f85d 	bl	80062c4 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d123      	bne.n	8006256 <_malloc_r+0x92>
 800620e:	230c      	movs	r3, #12
 8006210:	6033      	str	r3, [r6, #0]
 8006212:	4630      	mov	r0, r6
 8006214:	f000 f86c 	bl	80062f0 <__malloc_unlock>
 8006218:	e7e3      	b.n	80061e2 <_malloc_r+0x1e>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	1b5b      	subs	r3, r3, r5
 800621e:	d417      	bmi.n	8006250 <_malloc_r+0x8c>
 8006220:	2b0b      	cmp	r3, #11
 8006222:	d903      	bls.n	800622c <_malloc_r+0x68>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	441c      	add	r4, r3
 8006228:	6025      	str	r5, [r4, #0]
 800622a:	e004      	b.n	8006236 <_malloc_r+0x72>
 800622c:	6863      	ldr	r3, [r4, #4]
 800622e:	42a2      	cmp	r2, r4
 8006230:	bf0c      	ite	eq
 8006232:	600b      	streq	r3, [r1, #0]
 8006234:	6053      	strne	r3, [r2, #4]
 8006236:	4630      	mov	r0, r6
 8006238:	f000 f85a 	bl	80062f0 <__malloc_unlock>
 800623c:	f104 000b 	add.w	r0, r4, #11
 8006240:	1d23      	adds	r3, r4, #4
 8006242:	f020 0007 	bic.w	r0, r0, #7
 8006246:	1ac2      	subs	r2, r0, r3
 8006248:	d0cc      	beq.n	80061e4 <_malloc_r+0x20>
 800624a:	1a1b      	subs	r3, r3, r0
 800624c:	50a3      	str	r3, [r4, r2]
 800624e:	e7c9      	b.n	80061e4 <_malloc_r+0x20>
 8006250:	4622      	mov	r2, r4
 8006252:	6864      	ldr	r4, [r4, #4]
 8006254:	e7cc      	b.n	80061f0 <_malloc_r+0x2c>
 8006256:	1cc4      	adds	r4, r0, #3
 8006258:	f024 0403 	bic.w	r4, r4, #3
 800625c:	42a0      	cmp	r0, r4
 800625e:	d0e3      	beq.n	8006228 <_malloc_r+0x64>
 8006260:	1a21      	subs	r1, r4, r0
 8006262:	4630      	mov	r0, r6
 8006264:	f000 f82e 	bl	80062c4 <_sbrk_r>
 8006268:	3001      	adds	r0, #1
 800626a:	d1dd      	bne.n	8006228 <_malloc_r+0x64>
 800626c:	e7cf      	b.n	800620e <_malloc_r+0x4a>
 800626e:	bf00      	nop
 8006270:	200001e0 	.word	0x200001e0
 8006274:	200001e4 	.word	0x200001e4

08006278 <_realloc_r>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	4607      	mov	r7, r0
 800627c:	4614      	mov	r4, r2
 800627e:	460e      	mov	r6, r1
 8006280:	b921      	cbnz	r1, 800628c <_realloc_r+0x14>
 8006282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006286:	4611      	mov	r1, r2
 8006288:	f7ff bf9c 	b.w	80061c4 <_malloc_r>
 800628c:	b922      	cbnz	r2, 8006298 <_realloc_r+0x20>
 800628e:	f7ff ff49 	bl	8006124 <_free_r>
 8006292:	4625      	mov	r5, r4
 8006294:	4628      	mov	r0, r5
 8006296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006298:	f000 f830 	bl	80062fc <_malloc_usable_size_r>
 800629c:	42a0      	cmp	r0, r4
 800629e:	d20f      	bcs.n	80062c0 <_realloc_r+0x48>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4638      	mov	r0, r7
 80062a4:	f7ff ff8e 	bl	80061c4 <_malloc_r>
 80062a8:	4605      	mov	r5, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0f2      	beq.n	8006294 <_realloc_r+0x1c>
 80062ae:	4631      	mov	r1, r6
 80062b0:	4622      	mov	r2, r4
 80062b2:	f7ff ff0f 	bl	80060d4 <memcpy>
 80062b6:	4631      	mov	r1, r6
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff ff33 	bl	8006124 <_free_r>
 80062be:	e7e9      	b.n	8006294 <_realloc_r+0x1c>
 80062c0:	4635      	mov	r5, r6
 80062c2:	e7e7      	b.n	8006294 <_realloc_r+0x1c>

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	; (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fa fc70 	bl	8000bb4 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	200006f8 	.word	0x200006f8

080062e4 <__malloc_lock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_lock+0x8>)
 80062e6:	f000 b811 	b.w	800630c <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	20000700 	.word	0x20000700

080062f0 <__malloc_unlock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_unlock+0x8>)
 80062f2:	f000 b80c 	b.w	800630e <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	20000700 	.word	0x20000700

080062fc <_malloc_usable_size_r>:
 80062fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006300:	1f18      	subs	r0, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfbc      	itt	lt
 8006306:	580b      	ldrlt	r3, [r1, r0]
 8006308:	18c0      	addlt	r0, r0, r3
 800630a:	4770      	bx	lr

0800630c <__retarget_lock_acquire_recursive>:
 800630c:	4770      	bx	lr

0800630e <__retarget_lock_release_recursive>:
 800630e:	4770      	bx	lr

08006310 <_init>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr

0800631c <_fini>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	bf00      	nop
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr
