
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800a460  0800a460  0001a460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abbc  0800abbc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abc4  0800abc4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abc8  0800abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800abcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000720  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000914  20000914  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019078  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000365c  00000000  00000000  0003929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0003c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e50  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e8f  00000000  00000000  0003e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e09  00000000  00000000  0006258f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfe9  00000000  00000000  00078398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146381  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005100  00000000  00000000  001463d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a444 	.word	0x0800a444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800a444 	.word	0x0800a444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <BME_init>:
 *      Author: bobox
 */

#include "bme.h"

bool BME_init(SPI_HandleTypeDef* spi){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(BME_read8(spi, BME280_REGISTER_CHIPID) != 0x60){
 8000ea8:	21d0      	movs	r1, #208	; 0xd0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f8cc 	bl	8001048 <BME_read8>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b60      	cmp	r3, #96	; 0x60
 8000eb4:	d001      	beq.n	8000eba <BME_init+0x1a>
    return false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e01b      	b.n	8000ef2 <BME_init+0x52>
  }
  BME_write8(spi, BME280_REGISTER_SOFTRESET, 0xB6);
 8000eba:	22b6      	movs	r2, #182	; 0xb6
 8000ebc:	21e0      	movs	r1, #224	; 0xe0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f81c 	bl	8000efc <BME_write8>
  HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f001 f88b 	bl	8001fe0 <HAL_Delay>
  while(isReadingCalibration(spi)){
 8000eca:	e002      	b.n	8000ed2 <BME_init+0x32>
    HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f001 f887 	bl	8001fe0 <HAL_Delay>
  while(isReadingCalibration(spi)){
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f838 	bl	8000f48 <isReadingCalibration>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f6      	bne.n	8000ecc <BME_init+0x2c>
  }
  readCoefficients(spi);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f848 	bl	8000f74 <readCoefficients>
  setSampling(spi);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f867 	bl	8000fb8 <setSampling>
  HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f001 f878 	bl	8001fe0 <HAL_Delay>
  return true;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <BME_write8>:

void BME_write8(SPI_HandleTypeDef* spi, uint8_t addr, uint8_t val){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	70bb      	strb	r3, [r7, #2]
  uint8_t buf[2];
  buf[0] = addr & ~0x80;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	733b      	strb	r3, [r7, #12]
  buf[1] = val;
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <BME_write8+0x48>)
 8000f20:	f001 fb1c 	bl	800255c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi, &buf, 2, 100);
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f002 fc46 	bl	80037be <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <BME_write8+0x48>)
 8000f38:	f001 fb10 	bl	800255c <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <isReadingCalibration>:

bool isReadingCalibration(SPI_HandleTypeDef* spi){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint8_t const rStatus = BME_read8(spi, BME280_REGISTER_STATUS);
 8000f50:	21f3      	movs	r1, #243	; 0xf3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f878 	bl	8001048 <BME_read8>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
  return (rStatus & (1 << 0)) != 0;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <readCoefficients>:

void readCoefficients(SPI_HandleTypeDef* spi){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  _bme280_calib.dig_T1 = BME_read16_LE(spi, BME280_REGISTER_DIG_T1);
 8000f7c:	2188      	movs	r1, #136	; 0x88
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f836 	bl	8000ff0 <BME_read16_LE>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <readCoefficients+0x40>)
 8000f8a:	801a      	strh	r2, [r3, #0]
  _bme280_calib.dig_T2 = BME_readS16_LE(spi, BME280_REGISTER_DIG_T2);
 8000f8c:	218a      	movs	r1, #138	; 0x8a
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f849 	bl	8001026 <BME_readS16_LE>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <readCoefficients+0x40>)
 8000f9a:	805a      	strh	r2, [r3, #2]
  _bme280_calib.dig_T3 = BME_readS16_LE(spi, BME280_REGISTER_DIG_T3);
 8000f9c:	218c      	movs	r1, #140	; 0x8c
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f841 	bl	8001026 <BME_readS16_LE>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <readCoefficients+0x40>)
 8000faa:	809a      	strh	r2, [r3, #4]
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000358 	.word	0x20000358

08000fb8 <setSampling>:

void setSampling(SPI_HandleTypeDef* spi){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  BME_write8(spi, BME280_REGISTER_CONTROL, MODE_SLEEP);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	21f4      	movs	r1, #244	; 0xf4
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff99 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONTROLHUMID, SAMPLING_X16);
 8000fca:	2205      	movs	r2, #5
 8000fcc:	21f2      	movs	r1, #242	; 0xf2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff94 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONFIG, (STANDBY_MS_0_5 << 5) | (FILTER_OFF << 2) | 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21f5      	movs	r1, #245	; 0xf5
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff8f 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONTROL, (SAMPLING_X16 << 5) | (SAMPLING_X16 << 2) | MODE_NORMAL);
 8000fde:	22b7      	movs	r2, #183	; 0xb7
 8000fe0:	21f4      	movs	r1, #244	; 0xf4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff8a 	bl	8000efc <BME_write8>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <BME_read16_LE>:

uint16_t BME_read16_LE(SPI_HandleTypeDef* spi, uint8_t addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  uint16_t temp = BME_read16(spi, addr);
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f84b 	bl	800109c <BME_read16>
 8001006:	4603      	mov	r3, r0
 8001008:	81fb      	strh	r3, [r7, #14]
  return (temp >> 8) | (temp << 8);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <BME_readS16_LE>:

int16_t BME_readS16_LE(SPI_HandleTypeDef* spi, uint8_t addr){
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
  return (int16_t)BME_read16_LE(spi, addr);
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffda 	bl	8000ff0 <BME_read16_LE>
 800103c:	4603      	mov	r3, r0
 800103e:	b21b      	sxth	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <BME_read8>:

uint8_t BME_read8(SPI_HandleTypeDef* spi, uint8_t addr){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];
    addr = (uint8_t)(addr | 0x80);
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105a:	b2db      	uxtb	r3, r3
 800105c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <BME_read8+0x50>)
 8001064:	f001 fa7a 	bl	800255c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 8001068:	1cf9      	adds	r1, r7, #3
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	2201      	movs	r2, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fba5 	bl	80037be <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 1, 100);
 8001074:	f107 010c 	add.w	r1, r7, #12
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	2201      	movs	r2, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f002 fcda 	bl	8003a36 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <BME_read8+0x50>)
 8001088:	f001 fa68 	bl	800255c <HAL_GPIO_WritePin>
    return buf[0];
 800108c:	7b3b      	ldrb	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800

0800109c <BME_read16>:

uint16_t BME_read16(SPI_HandleTypeDef* spi, uint8_t addr){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  uint8_t buf[2];
  addr = (uint8_t)(addr | 0x80);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <BME_read16+0x5c>)
 80010b8:	f001 fa50 	bl	800255c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi, &addr, 1, 100);
 80010bc:	1cf9      	adds	r1, r7, #3
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	2201      	movs	r2, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f002 fb7b 	bl	80037be <HAL_SPI_Transmit>
  HAL_SPI_Receive(spi, buf, 3, 100);
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2203      	movs	r2, #3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f002 fcb0 	bl	8003a36 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <BME_read16+0x5c>)
 80010dc:	f001 fa3e 	bl	800255c <HAL_GPIO_WritePin>
  return (uint16_t)(buf[0]) << 8 | (uint16_t)(buf[1]);
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020800 	.word	0x40020800

080010fc <BME_read24>:

uint32_t BME_read24(SPI_HandleTypeDef* spi, uint8_t addr){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[3];
    addr = (uint8_t)(addr | 0x80);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110e:	b2db      	uxtb	r3, r3
 8001110:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4810      	ldr	r0, [pc, #64]	; (8001158 <BME_read24+0x5c>)
 8001118:	f001 fa20 	bl	800255c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 800111c:	1cf9      	adds	r1, r7, #3
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	2201      	movs	r2, #1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f002 fb4b 	bl	80037be <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 3, 100);
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	2203      	movs	r2, #3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f002 fc80 	bl	8003a36 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <BME_read24+0x5c>)
 800113c:	f001 fa0e 	bl	800255c <HAL_GPIO_WritePin>
    return (uint32_t)buf[0] << 16 | (uint32_t)buf[1] << 8 | (uint32_t)buf[2];
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4313      	orrs	r3, r2
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	4313      	orrs	r3, r2
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020800 	.word	0x40020800

0800115c <BME_readTemperature>:

float BME_readTemperature(SPI_HandleTypeDef* spi) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = BME_read24(spi, BME280_REGISTER_TEMPDATA);
 8001164:	21fa      	movs	r1, #250	; 0xfa
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffc8 	bl	80010fc <BME_read24>
 800116c:	4603      	mov	r3, r0
 800116e:	61fb      	str	r3, [r7, #28]
  if (adc_T == 0x800000){ // value in case temp measurement was disabled
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001176:	d102      	bne.n	800117e <BME_readTemperature+0x22>
    return -1;
 8001178:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800117c:	e050      	b.n	8001220 <BME_readTemperature+0xc4>
  }
  adc_T >>= 4;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	111b      	asrs	r3, r3, #4
 8001182:	61fb      	str	r3, [r7, #28]

  var1 = (int32_t)((adc_T / 8) - ((int32_t)_bme280_calib.dig_T1 * 2));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <BME_readTemperature+0x30>
 800118a:	3307      	adds	r3, #7
 800118c:	10db      	asrs	r3, r3, #3
 800118e:	461a      	mov	r2, r3
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <BME_readTemperature+0xd4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	61bb      	str	r3, [r7, #24]
  var1 = (var1 * ((int32_t)_bme280_calib.dig_T2)) / 2048;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <BME_readTemperature+0xd4>)
 800119c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a0:	461a      	mov	r2, r3
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	fb03 f302 	mul.w	r3, r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da01      	bge.n	80011b0 <BME_readTemperature+0x54>
 80011ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011b0:	12db      	asrs	r3, r3, #11
 80011b2:	61bb      	str	r3, [r7, #24]
  var2 = (int32_t)((adc_T / 16) - ((int32_t)_bme280_calib.dig_T1));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da00      	bge.n	80011bc <BME_readTemperature+0x60>
 80011ba:	330f      	adds	r3, #15
 80011bc:	111b      	asrs	r3, r3, #4
 80011be:	461a      	mov	r2, r3
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <BME_readTemperature+0xd4>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  var2 = (((var2 * var2) / 4096) * ((int32_t)_bme280_calib.dig_T3)) / 16384;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fb03 f303 	mul.w	r3, r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da01      	bge.n	80011d6 <BME_readTemperature+0x7a>
 80011d2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80011d6:	131b      	asrs	r3, r3, #12
 80011d8:	461a      	mov	r2, r3
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <BME_readTemperature+0xd4>)
 80011dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011e0:	fb03 f302 	mul.w	r3, r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da02      	bge.n	80011ee <BME_readTemperature+0x92>
 80011e8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80011ec:	333f      	adds	r3, #63	; 0x3f
 80011ee:	139b      	asrs	r3, r3, #14
 80011f0:	617b      	str	r3, [r7, #20]

  int32_t t_fine = var1 + var2;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]

  int32_t T = (t_fine * 5 + 128) / 256;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3380      	adds	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <BME_readTemperature+0xae>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	60fb      	str	r3, [r7, #12]

  return (float)T / 100;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001234 <BME_readTemperature+0xd8>
 800121c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001220:	eef0 7a47 	vmov.f32	s15, s14
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000358 	.word	0x20000358
 8001234:	42c80000 	.word	0x42c80000

08001238 <HALL_read>:
 *      Author: bobox
 */

#include "hall.h"

void HALL_read(SPI_HandleTypeDef* spi, uint8_t* buf) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	// format data bytes
	uint8_t data[2];
	data[0] = START_B_0;
 8001242:	23aa      	movs	r3, #170	; 0xaa
 8001244:	733b      	strb	r3, [r7, #12]
	data[1] = START_B_1;
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_RESET);	// pull CS low
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <HALL_read+0x4c>)
 8001252:	f001 f983 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &data, 2, 100);					        	// send 2 bytes
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	2202      	movs	r2, #2
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f002 faad 	bl	80037be <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 4, 100);                                  // receieve 2 data bytes + 2 inverted data bytes
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	2204      	movs	r2, #4
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f002 fbe3 	bl	8003a36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_SET);	// pull CS high
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <HALL_read+0x4c>)
 8001278:	f001 f970 	bl	800255c <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020800 	.word	0x40020800

08001288 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8001288:	b40f      	push	{r0, r1, r2, r3}
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129e:	480b      	ldr	r0, [pc, #44]	; (80012cc <myprintf+0x44>)
 80012a0:	f006 feb6 	bl	8008010 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <myprintf+0x44>)
 80012a6:	f7fe ff93 	bl	80001d0 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	4905      	ldr	r1, [pc, #20]	; (80012cc <myprintf+0x44>)
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <myprintf+0x48>)
 80012ba:	f002 ffec 	bl	8004296 <HAL_UART_Transmit>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012c8:	b004      	add	sp, #16
 80012ca:	4770      	bx	lr
 80012cc:	20000214 	.word	0x20000214
 80012d0:	2000044c 	.word	0x2000044c

080012d4 <todo_on_alarm>:

void todo_on_alarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef* time, uint16_t hall_data, float temp){
 80012d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d8:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 80012dc:	af04      	add	r7, sp, #16
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	6018      	str	r0, [r3, #0]
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	6019      	str	r1, [r3, #0]
 80012ea:	463b      	mov	r3, r7
 80012ec:	ed83 0a00 	vstr	s0, [r3]
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	801a      	strh	r2, [r3, #0]
    FATFS FatFs;
    SD_mount(&FatFs);
 80012f4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fb29 	bl	8001950 <SD_mount>
    char buf[256] = "%02d:%02d:%02d, %d, %.2f\n";
 80012fe:	f507 768a 	add.w	r6, r7, #276	; 0x114
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <todo_on_alarm+0xdc>)
 8001304:	4634      	mov	r4, r6
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001310:	c403      	stmia	r4!, {r0, r1}
 8001312:	8022      	strh	r2, [r4, #0]
 8001314:	f106 031a 	add.w	r3, r6, #26
 8001318:	22e6      	movs	r2, #230	; 0xe6
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f006 f9b9 	bl	8007694 <memset>
    char buf2[256];
    sprintf(buf2, buf, time->Hours, time->Minutes, time->Seconds, hall_data, temp);
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461e      	mov	r6, r3
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	4698      	mov	r8, r3
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	461d      	mov	r5, r3
 8001340:	1dbb      	adds	r3, r7, #6
 8001342:	881c      	ldrh	r4, [r3, #0]
 8001344:	463b      	mov	r3, r7
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f7ff f8fe 	bl	8000548 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8001354:	f107 0014 	add.w	r0, r7, #20
 8001358:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800135c:	9401      	str	r4, [sp, #4]
 800135e:	9500      	str	r5, [sp, #0]
 8001360:	4643      	mov	r3, r8
 8001362:	4632      	mov	r2, r6
 8001364:	f006 fe08 	bl	8007f78 <siprintf>
    myprintf("hall: %d | temp: %.2f  ", hall_data, temp);
 8001368:	1dbb      	adds	r3, r7, #6
 800136a:	881c      	ldrh	r4, [r3, #0]
 800136c:	463b      	mov	r3, r7
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	f7ff f8ea 	bl	8000548 <__aeabi_f2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4621      	mov	r1, r4
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <todo_on_alarm+0xe0>)
 800137c:	f7ff ff84 	bl	8001288 <myprintf>
    int btw = strlen(buf2);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe ff23 	bl	80001d0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
    SD_write("data.csv", FA_READ | FA_WRITE | FA_OPEN_APPEND, buf2, btw);
 8001390:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001394:	f107 0214 	add.w	r2, r7, #20
 8001398:	2133      	movs	r1, #51	; 0x33
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <todo_on_alarm+0xe4>)
 800139c:	f000 fb0a 	bl	80019b4 <SD_write>
    SD_unmount();
 80013a0:	f000 fb5a 	bl	8001a58 <SD_unmount>
}
 80013a4:	bf00      	nop
 80013a6:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 80013aa:	46bd      	mov	sp, r7
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b0:	0800a484 	.word	0x0800a484
 80013b4:	0800a460 	.word	0x0800a460
 80013b8:	0800a478 	.word	0x0800a478

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c4:	f000 fd9a 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c8:	f000 f898 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013cc:	f000 f9ee 	bl	80017ac <MX_GPIO_Init>
  MX_FATFS_Init();
 80013d0:	f003 fa2a 	bl	8004828 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80013d4:	f000 f9c0 	bl	8001758 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80013d8:	f000 f988 	bl	80016ec <MX_SPI3_Init>
  MX_RTC_Init();
 80013dc:	f000 f8ee 	bl	80015bc <MX_RTC_Init>
  MX_SPI2_Init();
 80013e0:	f000 f94c 	bl	800167c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 80013e4:	20c8      	movs	r0, #200	; 0xc8
 80013e6:	f000 fdfb 	bl	8001fe0 <HAL_Delay>
  BME_init(&hspi3);
 80013ea:	483c      	ldr	r0, [pc, #240]	; (80014dc <main+0x120>)
 80013ec:	f7ff fd58 	bl	8000ea0 <BME_init>
  FATFS FatFs;
  SD_mount(&FatFs);
 80013f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 faab 	bl	8001950 <SD_mount>

  // Write header
  char buf[256] = "Time, Angle, Temperature\n";
 80013fa:	f107 0620 	add.w	r6, r7, #32
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <main+0x124>)
 8001400:	4634      	mov	r4, r6
 8001402:	461d      	mov	r5, r3
 8001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800140c:	c403      	stmia	r4!, {r0, r1}
 800140e:	8022      	strh	r2, [r4, #0]
 8001410:	f106 031a 	add.w	r3, r6, #26
 8001414:	22e6      	movs	r2, #230	; 0xe6
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f006 f93b 	bl	8007694 <memset>
  int btw = strlen(buf);
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe fed4 	bl	80001d0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  UINT bytesWrote;
  bytesWrote = SD_write("data.csv", FA_READ | FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS, buf, btw);
 800142e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001432:	f107 0220 	add.w	r2, r7, #32
 8001436:	211b      	movs	r1, #27
 8001438:	482a      	ldr	r0, [pc, #168]	; (80014e4 <main+0x128>)
 800143a:	f000 fabb 	bl	80019b4 <SD_write>
 800143e:	f8c7 0358 	str.w	r0, [r7, #856]	; 0x358
  myprintf("Wrote %i bytes to 'data.csv'!\r\n", bytesWrote);
 8001442:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8001446:	4828      	ldr	r0, [pc, #160]	; (80014e8 <main+0x12c>)
 8001448:	f7ff ff1e 	bl	8001288 <myprintf>

  SD_unmount();
 800144c:	f000 fb04 	bl	8001a58 <SD_unmount>

  // reset timer to 0
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x0000){
 8001450:	2101      	movs	r1, #1
 8001452:	4826      	ldr	r0, [pc, #152]	; (80014ec <main+0x130>)
 8001454:	f002 f912 	bl	800367c <HAL_RTCEx_BKUPRead>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <main+0xa8>
    rtc_set_time(&hrtc);
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <main+0x130>)
 8001460:	f000 fa2b 	bl	80018ba <rtc_set_time>
    // myprintf("%.2f   ", temp);
    // HAL_Delay(1000);

    RTC_TimeTypeDef myTime;
    RTC_DateTypeDef myDate;
    rtc_get_time(&hrtc, &myDate, &myTime);
 8001464:	f107 020c 	add.w	r2, r7, #12
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	481f      	ldr	r0, [pc, #124]	; (80014ec <main+0x130>)
 8001470:	f000 fa5a 	bl	8001928 <rtc_get_time>
    uint16_t hall_data;
    float temp = 0.0;
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    // HAL_Delay(200);
    uint32_t current_second = HAL_GetTick();
 800147c:	f000 fda4 	bl	8001fc8 <HAL_GetTick>
 8001480:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350
    if (current_second - last_second > 1000){
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <main+0x134>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001492:	d9e7      	bls.n	8001464 <main+0xa8>
        // 1 second has elapsed, log stuff
        HALL_read(&hspi2, &hall_data);
 8001494:	1dbb      	adds	r3, r7, #6
 8001496:	4619      	mov	r1, r3
 8001498:	4816      	ldr	r0, [pc, #88]	; (80014f4 <main+0x138>)
 800149a:	f7ff fecd 	bl	8001238 <HALL_read>
        hall_data = hall_data/182;
 800149e:	1dbb      	adds	r3, r7, #6
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	085b      	lsrs	r3, r3, #1
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <main+0x13c>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	801a      	strh	r2, [r3, #0]
        temp = BME_readTemperature(&hspi3);
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <main+0x120>)
 80014b4:	f7ff fe52 	bl	800115c <BME_readTemperature>
 80014b8:	ed87 0ad5 	vstr	s0, [r7, #852]	; 0x354
        todo_on_alarm(&hrtc, &myTime, hall_data, temp);
 80014bc:	1dbb      	adds	r3, r7, #6
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	ed97 0ad5 	vldr	s0, [r7, #852]	; 0x354
 80014c8:	4619      	mov	r1, r3
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <main+0x130>)
 80014cc:	f7ff ff02 	bl	80012d4 <todo_on_alarm>
        last_second = current_second;
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <main+0x134>)
 80014d2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80014d6:	6013      	str	r3, [r2, #0]
  {
 80014d8:	e7c4      	b.n	8001464 <main+0xa8>
 80014da:	bf00      	nop
 80014dc:	200003d4 	.word	0x200003d4
 80014e0:	0800a5a4 	.word	0x0800a5a4
 80014e4:	0800a478 	.word	0x0800a478
 80014e8:	0800a584 	.word	0x0800a584
 80014ec:	2000042c 	.word	0x2000042c
 80014f0:	20000210 	.word	0x20000210
 80014f4:	2000037c 	.word	0x2000037c
 80014f8:	b40b40b5 	.word	0xb40b40b5

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f006 f8c2 	bl	8007694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <SystemClock_Config+0xb8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <SystemClock_Config+0xb8>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <SystemClock_Config+0xb8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <SystemClock_Config+0xbc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <SystemClock_Config+0xbc>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <SystemClock_Config+0xbc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001558:	230a      	movs	r3, #10
 800155a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2310      	movs	r3, #16
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001564:	2301      	movs	r3, #1
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f001 f80d 	bl	8002590 <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800157c:	f000 f998 	bl	80018b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fa70 	bl	8002a80 <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015a6:	f000 f983 	bl	80018b0 <Error_Handler>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3750      	adds	r7, #80	; 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000

080015bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_RTC_Init+0xb8>)
 80015d6:	4a28      	ldr	r2, [pc, #160]	; (8001678 <MX_RTC_Init+0xbc>)
 80015d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_RTC_Init+0xb8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_RTC_Init+0xb8>)
 80015e2:	227f      	movs	r2, #127	; 0x7f
 80015e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_RTC_Init+0xb8>)
 80015e8:	22ff      	movs	r2, #255	; 0xff
 80015ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <MX_RTC_Init+0xb8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_RTC_Init+0xb8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_RTC_Init+0xb8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015fe:	481d      	ldr	r0, [pc, #116]	; (8001674 <MX_RTC_Init+0xb8>)
 8001600:	f001 fcf0 	bl	8002fe4 <HAL_RTC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800160a:	f000 f951 	bl	80018b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800160e:	2300      	movs	r3, #0
 8001610:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001612:	2300      	movs	r3, #0
 8001614:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001616:	2300      	movs	r3, #0
 8001618:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <MX_RTC_Init+0xb8>)
 800162a:	f001 fd6c 	bl	8003106 <HAL_RTC_SetTime>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001634:	f000 f93c 	bl	80018b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001638:	2301      	movs	r3, #1
 800163a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800163c:	2301      	movs	r3, #1
 800163e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001640:	2301      	movs	r3, #1
 8001642:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001644:	2300      	movs	r3, #0
 8001646:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	2201      	movs	r2, #1
 800164c:	4619      	mov	r1, r3
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_RTC_Init+0xb8>)
 8001650:	f001 fe74 	bl	800333c <HAL_RTC_SetDate>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800165a:	f000 f929 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register 
 800165e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001662:	2101      	movs	r1, #1
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_RTC_Init+0xb8>)
 8001666:	f001 ffef 	bl	8003648 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000042c 	.word	0x2000042c
 8001678:	40002800 	.word	0x40002800

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <MX_SPI2_Init+0x6c>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001694:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SPI2_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016ca:	220a      	movs	r2, #10
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016d0:	f001 ffec 	bl	80036ac <HAL_SPI_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016da:	f000 f8e9 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000037c 	.word	0x2000037c
 80016e8:	40003800 	.word	0x40003800

080016ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_SPI3_Init+0x64>)
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <MX_SPI3_Init+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_SPI3_Init+0x64>)
 80016f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_SPI3_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_SPI3_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_SPI3_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_SPI3_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_SPI3_Init+0x64>)
 8001718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_SPI3_Init+0x64>)
 8001720:	2238      	movs	r2, #56	; 0x38
 8001722:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <MX_SPI3_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_SPI3_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <MX_SPI3_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_SPI3_Init+0x64>)
 8001738:	220a      	movs	r2, #10
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_SPI3_Init+0x64>)
 800173e:	f001 ffb5 	bl	80036ac <HAL_SPI_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001748:	f000 f8b2 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200003d4 	.word	0x200003d4
 8001754:	40003c00 	.word	0x40003c00

08001758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_USART2_UART_Init+0x50>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001764:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001790:	f002 fd34 	bl	80041fc <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179a:	f000 f889 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000044c 	.word	0x2000044c
 80017a8:	40004400 	.word	0x40004400

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <MX_GPIO_Init+0xf8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a36      	ldr	r2, [pc, #216]	; (80018a4 <MX_GPIO_Init+0xf8>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <MX_GPIO_Init+0xf8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <MX_GPIO_Init+0xf8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <MX_GPIO_Init+0xf8>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <MX_GPIO_Init+0xf8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <MX_GPIO_Init+0xf8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <MX_GPIO_Init+0xf8>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <MX_GPIO_Init+0xf8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <MX_GPIO_Init+0xf8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <MX_GPIO_Init+0xf8>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <MX_GPIO_Init+0xf8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BME_CS_Pin|HALL_CS_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001838:	481b      	ldr	r0, [pc, #108]	; (80018a8 <MX_GPIO_Init+0xfc>)
 800183a:	f000 fe8f 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2102      	movs	r1, #2
 8001842:	481a      	ldr	r0, [pc, #104]	; (80018ac <MX_GPIO_Init+0x100>)
 8001844:	f000 fe8a 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8001848:	2308      	movs	r3, #8
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4814      	ldr	r0, [pc, #80]	; (80018ac <MX_GPIO_Init+0x100>)
 800185c:	f000 fcca 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BME_CS_Pin HALL_CS_Pin */
  GPIO_InitStruct.Pin = BME_CS_Pin|HALL_CS_Pin;
 8001860:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <MX_GPIO_Init+0xfc>)
 800187a:	f000 fcbb 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800187e:	2302      	movs	r3, #2
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_GPIO_Init+0x100>)
 8001896:	f000 fcad 	bl	80021f4 <HAL_GPIO_Init>

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40021000 	.word	0x40021000

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <Error_Handler+0x8>

080018ba <rtc_set_time>:
 *      Author: bobox
 */

#include "rtc.h"

void rtc_set_time(RTC_HandleTypeDef* hrtc) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b088      	sub	sp, #32
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    sTime.Hours = 0x00;    // set hours
 80018c2:	2300      	movs	r3, #0
 80018c4:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0x00;  // set minutes
 80018c6:	2300      	movs	r3, #0
 80018c8:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0x00;  // set seconds
 80018ca:	2300      	movs	r3, #0
 80018cc:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2201      	movs	r2, #1
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f001 fc11 	bl	8003106 <HAL_RTC_SetTime>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <rtc_set_time+0x34>
        Error_Handler();
 80018ea:	f7ff ffe1 	bl	80018b0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;  // day
 80018ee:	2301      	movs	r3, #1
 80018f0:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;     // month
 80018f2:	2301      	movs	r3, #1
 80018f4:	727b      	strb	r3, [r7, #9]
    sDate.Date = 0x00;                   // date
 80018f6:	2300      	movs	r3, #0
 80018f8:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 0x00;                   // year
 80018fa:	2300      	movs	r3, #0
 80018fc:	72fb      	strb	r3, [r7, #11]
    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	2201      	movs	r2, #1
 8001904:	4619      	mov	r1, r3
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f001 fd18 	bl	800333c <HAL_RTC_SetDate>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <rtc_set_time+0x5c>
        Error_Handler();
 8001912:	f7ff ffcd 	bl	80018b0 <Error_Handler>
    }
    HAL_RTCEx_BKUPWrite(hrtc, RTC_BKP_DR1, 0x0000);  // backup register
 8001916:	2200      	movs	r2, #0
 8001918:	2101      	movs	r1, #1
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f001 fe94 	bl	8003648 <HAL_RTCEx_BKUPWrite>
}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <rtc_get_time>:

void rtc_get_time(RTC_HandleTypeDef* hrtc, RTC_DateTypeDef* date, RTC_TimeTypeDef* time) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
    /* Get the RTC current Time */
    HAL_RTC_GetTime(hrtc, time, RTC_FORMAT_BIN);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f001 fca1 	bl	8003280 <HAL_RTC_GetTime>
    /* Get the RTC current Date */
    HAL_RTC_GetDate(hrtc, date, RTC_FORMAT_BIN);   
 800193e:	2200      	movs	r2, #0
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f001 fda1 	bl	800348a <HAL_RTC_GetDate>
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <SD_mount>:
 *      Author: bobox
 */

#include "sd.h"

void SD_mount(FATFS* FatFs) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    FRESULT fres;  // result after operations

    // loop until SD card detected
    while (HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin) != GPIO_PIN_SET) {
 8001958:	e006      	b.n	8001968 <SD_mount+0x18>
        myprintf("waiting to init");
 800195a:	4812      	ldr	r0, [pc, #72]	; (80019a4 <SD_mount+0x54>)
 800195c:	f7ff fc94 	bl	8001288 <myprintf>
        HAL_Delay(1000);
 8001960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001964:	f000 fb3c 	bl	8001fe0 <HAL_Delay>
    while (HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin) != GPIO_PIN_SET) {
 8001968:	2108      	movs	r1, #8
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <SD_mount+0x58>)
 800196c:	f000 fdde 	bl	800252c <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b01      	cmp	r3, #1
 8001974:	d1f1      	bne.n	800195a <SD_mount+0xa>
    }
    HAL_Delay(200);  // short delay to let SD card mount
 8001976:	20c8      	movs	r0, #200	; 0xc8
 8001978:	f000 fb32 	bl	8001fe0 <HAL_Delay>

    // Open the file system
    fres = f_mount(FatFs, "", 1);  // 1=mount now
 800197c:	2201      	movs	r2, #1
 800197e:	490b      	ldr	r1, [pc, #44]	; (80019ac <SD_mount+0x5c>)
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f005 f9df 	bl	8006d44 <f_mount>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]
    if (fres != FR_OK) {
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <SD_mount+0x4c>
        myprintf("f_mount error (%i)\r\n", fres);
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	4619      	mov	r1, r3
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <SD_mount+0x60>)
 8001996:	f7ff fc77 	bl	8001288 <myprintf>
        while (1);
 800199a:	e7fe      	b.n	800199a <SD_mount+0x4a>
    }
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	0800a6a4 	.word	0x0800a6a4
 80019a8:	40021000 	.word	0x40021000
 80019ac:	0800a6b4 	.word	0x0800a6b4
 80019b0:	0800a6b8 	.word	0x0800a6b8

080019b4 <SD_write>:

UINT SD_write(const TCHAR* path, BYTE mode, const char* buf, UINT btw) {
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	f107 040c 	add.w	r4, r7, #12
 80019c0:	6020      	str	r0, [r4, #0]
 80019c2:	4608      	mov	r0, r1
 80019c4:	1d39      	adds	r1, r7, #4
 80019c6:	600a      	str	r2, [r1, #0]
 80019c8:	463a      	mov	r2, r7
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	f107 030b 	add.w	r3, r7, #11
 80019d0:	4602      	mov	r2, r0
 80019d2:	701a      	strb	r2, [r3, #0]
    FIL fil;       // file handle
    FRESULT fres;  // result after operations
    UINT bytesWrote;

    fres = f_open(&fil, path, mode);
 80019d4:	f107 030b 	add.w	r3, r7, #11
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	f107 0014 	add.w	r0, r7, #20
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	f005 f9f4 	bl	8006dd0 <f_open>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    if (fres != FR_OK) {
 80019ee:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <SD_write+0x50>
        myprintf("f_open error (%i)\r\n", fres);
 80019f6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80019fa:	4619      	mov	r1, r3
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <SD_write+0x9c>)
 80019fe:	f7ff fc43 	bl	8001288 <myprintf>
        while (1);
 8001a02:	e7fe      	b.n	8001a02 <SD_write+0x4e>
    }

    fres = f_write(&fil, buf, btw, &bytesWrote);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	463a      	mov	r2, r7
 8001a0a:	1d39      	adds	r1, r7, #4
 8001a0c:	f107 0014 	add.w	r0, r7, #20
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6809      	ldr	r1, [r1, #0]
 8001a14:	f005 fb9a 	bl	800714c <f_write>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    if (fres != FR_OK) {
 8001a1e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <SD_write+0x80>
        myprintf("f_write error (%i)\r\n", fres);
 8001a26:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <SD_write+0xa0>)
 8001a2e:	f7ff fc2b 	bl	8001288 <myprintf>
        while (1);
 8001a32:	e7fe      	b.n	8001a32 <SD_write+0x7e>
    }
    f_close(&fil);  // close file
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f005 fd7a 	bl	8007532 <f_close>
    return bytesWrote;
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0800a6d0 	.word	0x0800a6d0
 8001a54:	0800a6e4 	.word	0x0800a6e4

08001a58 <SD_unmount>:

void SD_unmount() {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    f_mount(NULL, "", 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4903      	ldr	r1, [pc, #12]	; (8001a6c <SD_unmount+0x14>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f005 f96f 	bl	8006d44 <f_mount>
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	0800a6b4 	.word	0x0800a6b4

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_MspInit+0x4c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_MspInit+0x4c>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_MspInit+0x4c>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_RTC_MspInit+0x4c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d111      	bne.n	8001b04 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 f996 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001afa:	f7ff fed9 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_RTC_MspInit+0x50>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40002800 	.word	0x40002800
 8001b10:	42470e3c 	.word	0x42470e3c

08001b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a33      	ldr	r2, [pc, #204]	; (8001c00 <HAL_SPI_MspInit+0xec>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12d      	bne.n	8001b92 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a31      	ldr	r2, [pc, #196]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b6e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b80:	2305      	movs	r3, #5
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481f      	ldr	r0, [pc, #124]	; (8001c08 <HAL_SPI_MspInit+0xf4>)
 8001b8c:	f000 fb32 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b90:	e031      	b.n	8001bf6 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_SPI_MspInit+0xf8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d12c      	bne.n	8001bf6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_SPI_MspInit+0xf0>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001be6:	2306      	movs	r3, #6
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4807      	ldr	r0, [pc, #28]	; (8001c10 <HAL_SPI_MspInit+0xfc>)
 8001bf2:	f000 faff 	bl	80021f4 <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	; 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40003800 	.word	0x40003800
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40003c00 	.word	0x40003c00
 8001c10:	40020800 	.word	0x40020800

08001c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_UART_MspInit+0x84>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12b      	bne.n	8001c8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_UART_MspInit+0x88>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_UART_MspInit+0x88>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_UART_MspInit+0x88>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_UART_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_UART_MspInit+0x88>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_UART_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c6e:	230c      	movs	r3, #12
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_UART_MspInit+0x8c>)
 8001c8a:	f000 fab3 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40004400 	.word	0x40004400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f956 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d12:	f005 fc95 	bl	8007640 <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3a:	e7fe      	b.n	8001d3a <_exit+0x12>

08001d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e00a      	b.n	8001d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4e:	f3af 8000 	nop.w
 8001d52:	4601      	mov	r1, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf0      	blt.n	8001d4e <_read+0x12>
	}

return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e009      	b.n	8001d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf1      	blt.n	8001d88 <_write+0x12>
	}
	return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_close>:

int _close(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_isatty>:

int _isatty(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	return 1;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f005 fbfa 	bl	8007640 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20020000 	.word	0x20020000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000314 	.word	0x20000314
 8001e80:	20000918 	.word	0x20000918

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopFillZerobss+0x12>
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <LoopFillZerobss+0x16>)
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <LoopFillZerobss+0x1a>)
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <LoopFillZerobss+0x1e>)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:
 8001eb6:	58d4      	ldr	r4, [r2, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:
 8001ebc:	18c4      	adds	r4, r0, r3
 8001ebe:	428c      	cmp	r4, r1
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x22>)
 8001ec4:	4c0b      	ldr	r4, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x26>)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:
 8001ece:	42a2      	cmp	r2, r4
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>
 8001ed2:	f7ff ffd7 	bl	8001e84 <SystemInit>
 8001ed6:	f005 fbb9 	bl	800764c <__libc_init_array>
 8001eda:	f7ff fa6f 	bl	80013bc <main>
 8001ede:	4770      	bx	lr
 8001ee0:	20020000 	.word	0x20020000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	200001f4 	.word	0x200001f4
 8001eec:	0800abcc 	.word	0x0800abcc
 8001ef0:	200001f4 	.word	0x200001f4
 8001ef4:	20000914 	.word	0x20000914

08001ef8 <ADC_IRQHandler>:
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f931 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fd9e 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f93b 	bl	80021da <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f911 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000490 	.word	0x20000490

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000490 	.word	0x20000490

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff47 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff5c 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffb0 	bl	8002148 <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e16b      	b.n	80024e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 815a 	bne.w	80024e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80b4 	beq.w	80024e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b60      	ldr	r3, [pc, #384]	; (8002500 <HAL_GPIO_Init+0x30c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a5f      	ldr	r2, [pc, #380]	; (8002500 <HAL_GPIO_Init+0x30c>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_GPIO_Init+0x30c>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a5b      	ldr	r2, [pc, #364]	; (8002504 <HAL_GPIO_Init+0x310>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_GPIO_Init+0x314>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02b      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_GPIO_Init+0x318>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d025      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_GPIO_Init+0x31c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01f      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4f      	ldr	r2, [pc, #316]	; (8002514 <HAL_GPIO_Init+0x320>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d019      	beq.n	800240e <HAL_GPIO_Init+0x21a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4e      	ldr	r2, [pc, #312]	; (8002518 <HAL_GPIO_Init+0x324>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0x216>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4d      	ldr	r2, [pc, #308]	; (800251c <HAL_GPIO_Init+0x328>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00d      	beq.n	8002406 <HAL_GPIO_Init+0x212>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4c      	ldr	r2, [pc, #304]	; (8002520 <HAL_GPIO_Init+0x32c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <HAL_GPIO_Init+0x20e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4b      	ldr	r2, [pc, #300]	; (8002524 <HAL_GPIO_Init+0x330>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_GPIO_Init+0x20a>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e00e      	b.n	800241c <HAL_GPIO_Init+0x228>
 80023fe:	2308      	movs	r3, #8
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002402:	2306      	movs	r3, #6
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x228>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x228>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x228>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_GPIO_Init+0x310>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_GPIO_Init+0x334>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245e:	4a32      	ldr	r2, [pc, #200]	; (8002528 <HAL_GPIO_Init+0x334>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_GPIO_Init+0x334>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_GPIO_Init+0x334>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_GPIO_Init+0x334>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_GPIO_Init+0x334>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_GPIO_Init+0x334>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <HAL_GPIO_Init+0x334>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae90 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e001      	b.n	800254e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	041a      	lsls	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e264      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d075      	beq.n	800269a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	4ba3      	ldr	r3, [pc, #652]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4ba0      	ldr	r3, [pc, #640]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b9d      	ldr	r3, [pc, #628]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d10b      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b99      	ldr	r3, [pc, #612]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <HAL_RCC_OscConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d157      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e23f      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b91      	ldr	r3, [pc, #580]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a90      	ldr	r2, [pc, #576]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b8b      	ldr	r3, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a8a      	ldr	r2, [pc, #552]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a87      	ldr	r2, [pc, #540]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002628:	4b84      	ldr	r3, [pc, #528]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a83      	ldr	r2, [pc, #524]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a80      	ldr	r2, [pc, #512]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fcbe 	bl	8001fc8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fcba 	bl	8001fc8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e204      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xc0>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fcaa 	bl	8001fc8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fca6 	bl	8001fc8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1f0      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b6c      	ldr	r3, [pc, #432]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0xe8>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b62      	ldr	r3, [pc, #392]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b5f      	ldr	r3, [pc, #380]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1c4      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b56      	ldr	r3, [pc, #344]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4952      	ldr	r1, [pc, #328]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <HAL_RCC_OscConfig+0x2b0>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff fc5f 	bl	8001fc8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff fc5b 	bl	8001fc8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1a5      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4940      	ldr	r1, [pc, #256]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_OscConfig+0x2b0>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff fc3e 	bl	8001fc8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7ff fc3a 	bl	8001fc8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e184      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d030      	beq.n	80027dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_RCC_OscConfig+0x2b4>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7ff fc1e 	bl	8001fc8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7ff fc1a 	bl	8001fc8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e164      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x200>
 80027ae:	e015      	b.n	80027dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x2b4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7ff fc07 	bl	8001fc8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7ff fc03 	bl	8001fc8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e14d      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a0 	beq.w	800292a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x2ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x2b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d121      	bne.n	800286a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_RCC_OscConfig+0x2b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_RCC_OscConfig+0x2b8>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7ff fbc9 	bl	8001fc8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e011      	b.n	800285e <HAL_RCC_OscConfig+0x2ce>
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	42470000 	.word	0x42470000
 8002844:	42470e80 	.word	0x42470e80
 8002848:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7ff fbbc 	bl	8001fc8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e106      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <HAL_RCC_OscConfig+0x4e4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x2f0>
 8002872:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
 800287e:	e01c      	b.n	80028ba <HAL_RCC_OscConfig+0x32a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x312>
 8002888:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
 8002894:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a77      	ldr	r2, [pc, #476]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x32a>
 80028a2:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4a74      	ldr	r2, [pc, #464]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	; 0x70
 80028ae:	4b72      	ldr	r3, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a71      	ldr	r2, [pc, #452]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d015      	beq.n	80028ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7ff fb81 	bl	8001fc8 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7ff fb7d 	bl	8001fc8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0c5      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ee      	beq.n	80028ca <HAL_RCC_OscConfig+0x33a>
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fb6b 	bl	8001fc8 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7ff fb67 	bl	8001fc8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0af      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	4b5a      	ldr	r3, [pc, #360]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 809b 	beq.w	8002a6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d05c      	beq.n	80029fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d141      	bne.n	80029cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7ff fb3b 	bl	8001fc8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002956:	f7ff fb37 	bl	8001fc8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e081      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002968:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	019b      	lsls	r3, r3, #6
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	4937      	ldr	r1, [pc, #220]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fb10 	bl	8001fc8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ac:	f7ff fb0c 	bl	8001fc8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e056      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x41c>
 80029ca:	e04e      	b.n	8002a6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7ff faf9 	bl	8001fc8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7ff faf5 	bl	8001fc8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e03f      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x44a>
 80029f8:	e037      	b.n	8002a6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e032      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d028      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d121      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d11a      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a36:	4013      	ands	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d111      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40007000 	.word	0x40007000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	42470060 	.word	0x42470060

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cc      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90c      	bls.n	8002abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e067      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7ff fa2a 	bl	8001fc8 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7ff fa26 	bl	8001fc8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20c      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f98a 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	0800a740 	.word	0x0800a740
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c52:	2100      	movs	r1, #0
 8002c54:	6079      	str	r1, [r7, #4]
 8002c56:	2100      	movs	r1, #0
 8002c58:	60f9      	str	r1, [r7, #12]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c5e:	2100      	movs	r1, #0
 8002c60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c62:	4952      	ldr	r1, [pc, #328]	; (8002dac <HAL_RCC_GetSysClockFreq+0x160>)
 8002c64:	6889      	ldr	r1, [r1, #8]
 8002c66:	f001 010c 	and.w	r1, r1, #12
 8002c6a:	2908      	cmp	r1, #8
 8002c6c:	d00d      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x3e>
 8002c6e:	2908      	cmp	r1, #8
 8002c70:	f200 8094 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x150>
 8002c74:	2900      	cmp	r1, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x32>
 8002c78:	2904      	cmp	r1, #4
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x38>
 8002c7c:	e08e      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7e:	4b4c      	ldr	r3, [pc, #304]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c80:	60bb      	str	r3, [r7, #8]
       break;
 8002c82:	e08e      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c86:	60bb      	str	r3, [r7, #8]
      break;
 8002c88:	e08b      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8a:	4948      	ldr	r1, [pc, #288]	; (8002dac <HAL_RCC_GetSysClockFreq+0x160>)
 8002c8c:	6849      	ldr	r1, [r1, #4]
 8002c8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c92:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c94:	4945      	ldr	r1, [pc, #276]	; (8002dac <HAL_RCC_GetSysClockFreq+0x160>)
 8002c96:	6849      	ldr	r1, [r1, #4]
 8002c98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c9c:	2900      	cmp	r1, #0
 8002c9e:	d024      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca0:	4942      	ldr	r1, [pc, #264]	; (8002dac <HAL_RCC_GetSysClockFreq+0x160>)
 8002ca2:	6849      	ldr	r1, [r1, #4]
 8002ca4:	0989      	lsrs	r1, r1, #6
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cb0:	f04f 0500 	mov.w	r5, #0
 8002cb4:	ea00 0204 	and.w	r2, r0, r4
 8002cb8:	ea01 0305 	and.w	r3, r1, r5
 8002cbc:	493d      	ldr	r1, [pc, #244]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cbe:	fb01 f003 	mul.w	r0, r1, r3
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	fb01 f102 	mul.w	r1, r1, r2
 8002cc8:	1844      	adds	r4, r0, r1
 8002cca:	493a      	ldr	r1, [pc, #232]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ccc:	fba2 0101 	umull	r0, r1, r2, r1
 8002cd0:	1863      	adds	r3, r4, r1
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	f7fd ff64 	bl	8000ba8 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e04a      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCC_GetSysClockFreq+0x160>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	ea02 0400 	and.w	r4, r2, r0
 8002d02:	ea03 0501 	and.w	r5, r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	014b      	lsls	r3, r1, #5
 8002d14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d18:	0142      	lsls	r2, r0, #5
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	1b00      	subs	r0, r0, r4
 8002d20:	eb61 0105 	sbc.w	r1, r1, r5
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	018b      	lsls	r3, r1, #6
 8002d2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d32:	0182      	lsls	r2, r0, #6
 8002d34:	1a12      	subs	r2, r2, r0
 8002d36:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	00d9      	lsls	r1, r3, #3
 8002d44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d48:	00d0      	lsls	r0, r2, #3
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	1912      	adds	r2, r2, r4
 8002d50:	eb45 0303 	adc.w	r3, r5, r3
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	0299      	lsls	r1, r3, #10
 8002d5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d62:	0290      	lsls	r0, r2, #10
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f7fd ff18 	bl	8000ba8 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_GetSysClockFreq+0x160>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	60bb      	str	r3, [r7, #8]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d9e:	60bb      	str	r3, [r7, #8]
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	68bb      	ldr	r3, [r7, #8]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	017d7840 	.word	0x017d7840

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000000 	.word	0x20000000

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800a750 	.word	0x0800a750

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	f7ff ffdc 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0b5b      	lsrs	r3, r3, #13
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	0800a750 	.word	0x0800a750

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d035      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e48:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4e:	f7ff f8bb 	bl	8001fc8 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e56:	f7ff f8b7 	bl	8001fc8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0b0      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e68:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	019a      	lsls	r2, r3, #6
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	071b      	lsls	r3, r3, #28
 8002e80:	4955      	ldr	r1, [pc, #340]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e88:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e8e:	f7ff f89b 	bl	8001fc8 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e96:	f7ff f897 	bl	8001fc8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e090      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8083 	beq.w	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eea:	f7ff f86d 	bl	8001fc8 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7ff f869 	bl	8001fc8 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e062      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02f      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d028      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d114      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f56:	f7ff f837 	bl	8001fc8 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7ff f833 	bl	8001fc8 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e02a      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	490d      	ldr	r1, [pc, #52]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]
 8002fa8:	e005      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc2:	4905      	ldr	r1, [pc, #20]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	42470068 	.word	0x42470068
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	42470e40 	.word	0x42470e40

08002fe4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e083      	b.n	80030fe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7f5b      	ldrb	r3, [r3, #29]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fd5a 	bl	8001ac0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	22ca      	movs	r2, #202	; 0xca
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2253      	movs	r2, #83	; 0x53
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 faa8 	bl	8003578 <RTC_EnterInitMode>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	22ff      	movs	r2, #255	; 0xff
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e05e      	b.n	80030fe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800304e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003052:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	041a      	lsls	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa3a 	bl	8003528 <HAL_RTC_WaitForSynchro>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e018      	b.n	80030fe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003106:	b590      	push	{r4, r7, lr}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	7f1b      	ldrb	r3, [r3, #28]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_RTC_SetTime+0x1c>
 800311e:	2302      	movs	r3, #2
 8003120:	e0aa      	b.n	8003278 <HAL_RTC_SetTime+0x172>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2202      	movs	r2, #2
 800312c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d126      	bne.n	8003182 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fa3f 	bl	80035d0 <RTC_ByteToBcd2>
 8003152:	4603      	mov	r3, r0
 8003154:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fa38 	bl	80035d0 <RTC_ByteToBcd2>
 8003160:	4603      	mov	r3, r0
 8003162:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003164:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	789b      	ldrb	r3, [r3, #2]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa30 	bl	80035d0 <RTC_ByteToBcd2>
 8003170:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003172:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	78db      	ldrb	r3, [r3, #3]
 800317a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e018      	b.n	80031b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80031a2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80031a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	22ca      	movs	r2, #202	; 0xca
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2253      	movs	r2, #83	; 0x53
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f9d7 	bl	8003578 <RTC_EnterInitMode>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2204      	movs	r2, #4
 80031dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e047      	b.n	8003278 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031f6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003206:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d111      	bne.n	8003262 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f972 	bl	8003528 <HAL_RTC_WaitForSynchro>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	22ff      	movs	r2, #255	; 0xff
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2204      	movs	r2, #4
 8003256:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00a      	b.n	8003278 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	22ff      	movs	r2, #255	; 0xff
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003276:	2300      	movs	r3, #0
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11a      	bne.n	8003332 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f983 	bl	800360c <RTC_Bcd2ToByte>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f97a 	bl	800360c <RTC_Bcd2ToByte>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	789b      	ldrb	r3, [r3, #2]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f971 	bl	800360c <RTC_Bcd2ToByte>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	7f1b      	ldrb	r3, [r3, #28]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_RTC_SetDate+0x1c>
 8003354:	2302      	movs	r3, #2
 8003356:	e094      	b.n	8003482 <HAL_RTC_SetDate+0x146>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2202      	movs	r2, #2
 8003362:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10e      	bne.n	8003388 <HAL_RTC_SetDate+0x4c>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	f023 0310 	bic.w	r3, r3, #16
 800337e:	b2db      	uxtb	r3, r3
 8003380:	330a      	adds	r3, #10
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11c      	bne.n	80033c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	78db      	ldrb	r3, [r3, #3]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f91c 	bl	80035d0 <RTC_ByteToBcd2>
 8003398:	4603      	mov	r3, r0
 800339a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f915 	bl	80035d0 <RTC_ByteToBcd2>
 80033a6:	4603      	mov	r3, r0
 80033a8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033aa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	789b      	ldrb	r3, [r3, #2]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f90d 	bl	80035d0 <RTC_ByteToBcd2>
 80033b6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80033b8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e00e      	b.n	80033e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	78db      	ldrb	r3, [r3, #3]
 80033cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033d4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80033da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	22ca      	movs	r2, #202	; 0xca
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2253      	movs	r2, #83	; 0x53
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8be 	bl	8003578 <RTC_EnterInitMode>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	22ff      	movs	r2, #255	; 0xff
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2204      	movs	r2, #4
 800340e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e033      	b.n	8003482 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003424:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003428:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003438:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d111      	bne.n	800346c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f86d 	bl	8003528 <HAL_RTC_WaitForSynchro>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ff      	movs	r2, #255	; 0xff
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2204      	movs	r2, #4
 8003460:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e00a      	b.n	8003482 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	22ff      	movs	r2, #255	; 0xff
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}

0800348a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0b5b      	lsrs	r3, r3, #13
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11a      	bne.n	800351e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	78db      	ldrb	r3, [r3, #3]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f88d 	bl	800360c <RTC_Bcd2ToByte>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f884 	bl	800360c <RTC_Bcd2ToByte>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	789b      	ldrb	r3, [r3, #2]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f87b 	bl	800360c <RTC_Bcd2ToByte>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003542:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003544:	f7fe fd40 	bl	8001fc8 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800354a:	e009      	b.n	8003560 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800354c:	f7fe fd3c 	bl	8001fc8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800355a:	d901      	bls.n	8003560 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e007      	b.n	8003570 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ee      	beq.n	800354c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d119      	bne.n	80035c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f04f 32ff 	mov.w	r2, #4294967295
 800359a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800359c:	f7fe fd14 	bl	8001fc8 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80035a2:	e009      	b.n	80035b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035a4:	f7fe fd10 	bl	8001fc8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b2:	d901      	bls.n	80035b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e007      	b.n	80035c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ee      	beq.n	80035a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80035de:	e005      	b.n	80035ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3301      	adds	r3, #1
 80035e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	3b0a      	subs	r3, #10
 80035ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d8f6      	bhi.n	80035e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b2db      	uxtb	r3, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4413      	add	r3, r2
 800363a:	b2db      	uxtb	r3, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3350      	adds	r3, #80	; 0x50
 800365e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4413      	add	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3350      	adds	r3, #80	; 0x50
 8003690:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4413      	add	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07b      	b.n	80037b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ce:	d009      	beq.n	80036e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
 80036d6:	e005      	b.n	80036e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe fa08 	bl	8001b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	ea42 0103 	orr.w	r1, r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	f003 0104 	and.w	r1, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f003 0210 	and.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b088      	sub	sp, #32
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_SPI_Transmit+0x22>
 80037dc:	2302      	movs	r3, #2
 80037de:	e126      	b.n	8003a2e <HAL_SPI_Transmit+0x270>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037e8:	f7fe fbee 	bl	8001fc8 <HAL_GetTick>
 80037ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d002      	beq.n	8003804 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003802:	e10b      	b.n	8003a1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_SPI_Transmit+0x52>
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003814:	e102      	b.n	8003a1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2203      	movs	r2, #3
 800381a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d10f      	bne.n	800387e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d007      	beq.n	800389c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a4:	d14b      	bne.n	800393e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_Transmit+0xf6>
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d13e      	bne.n	8003932 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038d8:	e02b      	b.n	8003932 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d112      	bne.n	800390e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36
 800390c:	e011      	b.n	8003932 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800390e:	f7fe fb5b 	bl	8001fc8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d803      	bhi.n	8003926 <HAL_SPI_Transmit+0x168>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d102      	bne.n	800392c <HAL_SPI_Transmit+0x16e>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003930:	e074      	b.n	8003a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ce      	bne.n	80038da <HAL_SPI_Transmit+0x11c>
 800393c:	e04c      	b.n	80039d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SPI_Transmit+0x18e>
 8003946:	8afb      	ldrh	r3, [r7, #22]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d140      	bne.n	80039ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003972:	e02c      	b.n	80039ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d113      	bne.n	80039aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039a8:	e011      	b.n	80039ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039aa:	f7fe fb0d 	bl	8001fc8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d803      	bhi.n	80039c2 <HAL_SPI_Transmit+0x204>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d102      	bne.n	80039c8 <HAL_SPI_Transmit+0x20a>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039cc:	e026      	b.n	8003a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1cd      	bne.n	8003974 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fbcb 	bl	8004178 <SPI_EndRxTxTransaction>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e000      	b.n	8003a1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b088      	sub	sp, #32
 8003a3a:	af02      	add	r7, sp, #8
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a52:	d112      	bne.n	8003a7a <HAL_SPI_Receive+0x44>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10e      	bne.n	8003a7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f8f1 	bl	8003c58 <HAL_SPI_TransmitReceive>
 8003a76:	4603      	mov	r3, r0
 8003a78:	e0ea      	b.n	8003c50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_SPI_Receive+0x52>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e0e3      	b.n	8003c50 <HAL_SPI_Receive+0x21a>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a90:	f7fe fa9a 	bl	8001fc8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003aa6:	e0ca      	b.n	8003c3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Receive+0x7e>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ab8:	e0c1      	b.n	8003c3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2204      	movs	r2, #4
 8003abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	d10f      	bne.n	8003b22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d007      	beq.n	8003b40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d162      	bne.n	8003c0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b48:	e02e      	b.n	8003ba8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d115      	bne.n	8003b84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f103 020c 	add.w	r2, r3, #12
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b82:	e011      	b.n	8003ba8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b84:	f7fe fa20 	bl	8001fc8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d803      	bhi.n	8003b9c <HAL_SPI_Receive+0x166>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Receive+0x16c>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ba6:	e04a      	b.n	8003c3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cb      	bne.n	8003b4a <HAL_SPI_Receive+0x114>
 8003bb2:	e031      	b.n	8003c18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d113      	bne.n	8003bea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003be8:	e011      	b.n	8003c0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bea:	f7fe f9ed 	bl	8001fc8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d803      	bhi.n	8003c02 <HAL_SPI_Receive+0x1cc>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d102      	bne.n	8003c08 <HAL_SPI_Receive+0x1d2>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c0c:	e017      	b.n	8003c3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1cd      	bne.n	8003bb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fa45 	bl	80040ac <SPI_EndRxTransaction>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
 8003c3a:	e000      	b.n	8003c3e <HAL_SPI_Receive+0x208>
  }

error :
 8003c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c66:	2301      	movs	r3, #1
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x26>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e18a      	b.n	8003f94 <HAL_SPI_TransmitReceive+0x33c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c86:	f7fe f99f 	bl	8001fc8 <HAL_GetTick>
 8003c8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d00f      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x70>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d107      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x68>
 8003cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d003      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cc6:	e15b      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x82>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x82>
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ce0:	e14e      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d003      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	887a      	ldrh	r2, [r7, #2]
 8003d1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d007      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d52:	d178      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x10a>
 8003d5c:	8b7b      	ldrh	r3, [r7, #26]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d166      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d86:	e053      	b.n	8003e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d11b      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x176>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d016      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x176>
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d113      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	881a      	ldrh	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	1c9a      	adds	r2, r3, #2
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d119      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x1b8>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d014      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	b292      	uxth	r2, r2
 8003df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e10:	f7fe f8da 	bl	8001fc8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d807      	bhi.n	8003e30 <HAL_SPI_TransmitReceive+0x1d8>
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d003      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e2e:	e0a7      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1a6      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x130>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1a1      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x130>
 8003e44:	e07c      	b.n	8003f40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x1fc>
 8003e4e:	8b7b      	ldrh	r3, [r7, #26]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d16b      	bne.n	8003f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7a:	e057      	b.n	8003f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d11c      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x26c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x26c>
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d114      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d119      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x2ae>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f02:	2301      	movs	r3, #1
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f06:	f7fe f85f 	bl	8001fc8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d803      	bhi.n	8003f1e <HAL_SPI_TransmitReceive+0x2c6>
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x2cc>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d103      	bne.n	8003f2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f2a:	e029      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1a2      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x224>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d19d      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f917 	bl	8004178 <SPI_EndRxTxTransaction>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f5c:	e010      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	e000      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3730      	adds	r7, #48	; 0x30
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fac:	f7fe f80c 	bl	8001fc8 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fbc:	f7fe f804 	bl	8001fc8 <HAL_GetTick>
 8003fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	0d1b      	lsrs	r3, r3, #20
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd2:	e054      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d050      	beq.n	800407e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fdc:	f7fd fff4 	bl	8001fc8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d902      	bls.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d13d      	bne.n	800406e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400a:	d111      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d004      	beq.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d107      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004038:	d10f      	bne.n	800405a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e017      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3b01      	subs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d19b      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000000 	.word	0x20000000

080040ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c0:	d111      	bne.n	80040e6 <SPI_EndRxTransaction+0x3a>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ca:	d004      	beq.n	80040d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d107      	bne.n	80040e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ee:	d12a      	bne.n	8004146 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f8:	d012      	beq.n	8004120 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff49 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02d      	beq.n	800416c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e026      	b.n	800416e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2101      	movs	r1, #1
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff36 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01a      	beq.n	800416c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e013      	b.n	800416e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	2101      	movs	r1, #1
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff23 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e000      	b.n	800416e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <SPI_EndRxTxTransaction+0x7c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <SPI_EndRxTxTransaction+0x80>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	0d5b      	lsrs	r3, r3, #21
 8004190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d112      	bne.n	80041ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2200      	movs	r2, #0
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff fef4 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e00f      	b.n	80041ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d0f2      	beq.n	80041ca <SPI_EndRxTxTransaction+0x52>
 80041e4:	e000      	b.n	80041e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80041e6:	bf00      	nop
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000000 	.word	0x20000000
 80041f8:	165e9f81 	.word	0x165e9f81

080041fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e03f      	b.n	800428e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fcf6 	bl	8001c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	; 0x24
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f929 	bl	8004498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b08a      	sub	sp, #40	; 0x28
 800429a:	af02      	add	r7, sp, #8
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d17c      	bne.n	80043b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_UART_Transmit+0x2c>
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e075      	b.n	80043b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_UART_Transmit+0x3e>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e06e      	b.n	80043b2 <HAL_UART_Transmit+0x11c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2221      	movs	r2, #33	; 0x21
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ea:	f7fd fe6d 	bl	8001fc8 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	88fa      	ldrh	r2, [r7, #6]
 80042fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d108      	bne.n	8004318 <HAL_UART_Transmit+0x82>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	e003      	b.n	8004320 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004328:	e02a      	b.n	8004380 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f840 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e036      	b.n	80043b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	3302      	adds	r3, #2
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e007      	b.n	8004372 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	3301      	adds	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1cf      	bne.n	800432a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2140      	movs	r1, #64	; 0x40
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f810 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e006      	b.n	80043b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e000      	b.n	80043b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
  }
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b090      	sub	sp, #64	; 0x40
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	e050      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d04c      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	f7fd fdf5 	bl	8001fc8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d241      	bcs.n	800446e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800440a:	637a      	str	r2, [r7, #52]	; 0x34
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e5      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	613b      	str	r3, [r7, #16]
   return(result);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443e:	623a      	str	r2, [r7, #32]
 8004440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	69f9      	ldr	r1, [r7, #28]
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	61bb      	str	r3, [r7, #24]
   return(result);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d09f      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3740      	adds	r7, #64	; 0x40
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	b09f      	sub	sp, #124	; 0x7c
 800449e:	af00      	add	r7, sp, #0
 80044a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ae:	68d9      	ldr	r1, [r3, #12]
 80044b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	ea40 0301 	orr.w	r3, r0, r1
 80044b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044dc:	f021 010c 	bic.w	r1, r1, #12
 80044e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044e6:	430b      	orrs	r3, r1
 80044e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	6999      	ldr	r1, [r3, #24]
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	ea40 0301 	orr.w	r3, r0, r1
 8004500:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4bc5      	ldr	r3, [pc, #788]	; (800481c <UART_SetConfig+0x384>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d004      	beq.n	8004516 <UART_SetConfig+0x7e>
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4bc3      	ldr	r3, [pc, #780]	; (8004820 <UART_SetConfig+0x388>)
 8004512:	429a      	cmp	r2, r3
 8004514:	d103      	bne.n	800451e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004516:	f7fe fc6f 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 800451a:	6778      	str	r0, [r7, #116]	; 0x74
 800451c:	e002      	b.n	8004524 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800451e:	f7fe fc57 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004522:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	f040 80b6 	bne.w	800469c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004532:	461c      	mov	r4, r3
 8004534:	f04f 0500 	mov.w	r5, #0
 8004538:	4622      	mov	r2, r4
 800453a:	462b      	mov	r3, r5
 800453c:	1891      	adds	r1, r2, r2
 800453e:	6439      	str	r1, [r7, #64]	; 0x40
 8004540:	415b      	adcs	r3, r3
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
 8004544:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004548:	1912      	adds	r2, r2, r4
 800454a:	eb45 0303 	adc.w	r3, r5, r3
 800454e:	f04f 0000 	mov.w	r0, #0
 8004552:	f04f 0100 	mov.w	r1, #0
 8004556:	00d9      	lsls	r1, r3, #3
 8004558:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800455c:	00d0      	lsls	r0, r2, #3
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	1911      	adds	r1, r2, r4
 8004564:	6639      	str	r1, [r7, #96]	; 0x60
 8004566:	416b      	adcs	r3, r5
 8004568:	667b      	str	r3, [r7, #100]	; 0x64
 800456a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	461a      	mov	r2, r3
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	1891      	adds	r1, r2, r2
 8004576:	63b9      	str	r1, [r7, #56]	; 0x38
 8004578:	415b      	adcs	r3, r3
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004580:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004584:	f7fc fb10 	bl	8000ba8 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4ba5      	ldr	r3, [pc, #660]	; (8004824 <UART_SetConfig+0x38c>)
 800458e:	fba3 2302 	umull	r2, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	011e      	lsls	r6, r3, #4
 8004596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004598:	461c      	mov	r4, r3
 800459a:	f04f 0500 	mov.w	r5, #0
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	6339      	str	r1, [r7, #48]	; 0x30
 80045a6:	415b      	adcs	r3, r3
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045ae:	1912      	adds	r2, r2, r4
 80045b0:	eb45 0303 	adc.w	r3, r5, r3
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	00d9      	lsls	r1, r3, #3
 80045be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c2:	00d0      	lsls	r0, r2, #3
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	1911      	adds	r1, r2, r4
 80045ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80045cc:	416b      	adcs	r3, r5
 80045ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	1891      	adds	r1, r2, r2
 80045dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80045de:	415b      	adcs	r3, r3
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ea:	f7fc fadd 	bl	8000ba8 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4b8c      	ldr	r3, [pc, #560]	; (8004824 <UART_SetConfig+0x38c>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	; 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	4a87      	ldr	r2, [pc, #540]	; (8004824 <UART_SetConfig+0x38c>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004614:	441e      	add	r6, r3
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	4618      	mov	r0, r3
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	1894      	adds	r4, r2, r2
 8004624:	623c      	str	r4, [r7, #32]
 8004626:	415b      	adcs	r3, r3
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800462e:	1812      	adds	r2, r2, r0
 8004630:	eb41 0303 	adc.w	r3, r1, r3
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	f04f 0500 	mov.w	r5, #0
 800463c:	00dd      	lsls	r5, r3, #3
 800463e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004642:	00d4      	lsls	r4, r2, #3
 8004644:	4622      	mov	r2, r4
 8004646:	462b      	mov	r3, r5
 8004648:	1814      	adds	r4, r2, r0
 800464a:	653c      	str	r4, [r7, #80]	; 0x50
 800464c:	414b      	adcs	r3, r1
 800464e:	657b      	str	r3, [r7, #84]	; 0x54
 8004650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	1891      	adds	r1, r2, r2
 800465c:	61b9      	str	r1, [r7, #24]
 800465e:	415b      	adcs	r3, r3
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004666:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800466a:	f7fc fa9d 	bl	8000ba8 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b6c      	ldr	r3, [pc, #432]	; (8004824 <UART_SetConfig+0x38c>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a67      	ldr	r2, [pc, #412]	; (8004824 <UART_SetConfig+0x38c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0207 	and.w	r2, r3, #7
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4432      	add	r2, r6
 8004698:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800469a:	e0b9      	b.n	8004810 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469e:	461c      	mov	r4, r3
 80046a0:	f04f 0500 	mov.w	r5, #0
 80046a4:	4622      	mov	r2, r4
 80046a6:	462b      	mov	r3, r5
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	6139      	str	r1, [r7, #16]
 80046ac:	415b      	adcs	r3, r3
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046b4:	1912      	adds	r2, r2, r4
 80046b6:	eb45 0303 	adc.w	r3, r5, r3
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	00d9      	lsls	r1, r3, #3
 80046c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046c8:	00d0      	lsls	r0, r2, #3
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	eb12 0804 	adds.w	r8, r2, r4
 80046d2:	eb43 0905 	adc.w	r9, r3, r5
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4618      	mov	r0, r3
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	008b      	lsls	r3, r1, #2
 80046ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046ee:	0082      	lsls	r2, r0, #2
 80046f0:	4640      	mov	r0, r8
 80046f2:	4649      	mov	r1, r9
 80046f4:	f7fc fa58 	bl	8000ba8 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4b49      	ldr	r3, [pc, #292]	; (8004824 <UART_SetConfig+0x38c>)
 80046fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	011e      	lsls	r6, r3, #4
 8004706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004708:	4618      	mov	r0, r3
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	1894      	adds	r4, r2, r2
 8004714:	60bc      	str	r4, [r7, #8]
 8004716:	415b      	adcs	r3, r3
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800471e:	1812      	adds	r2, r2, r0
 8004720:	eb41 0303 	adc.w	r3, r1, r3
 8004724:	f04f 0400 	mov.w	r4, #0
 8004728:	f04f 0500 	mov.w	r5, #0
 800472c:	00dd      	lsls	r5, r3, #3
 800472e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004732:	00d4      	lsls	r4, r2, #3
 8004734:	4622      	mov	r2, r4
 8004736:	462b      	mov	r3, r5
 8004738:	1814      	adds	r4, r2, r0
 800473a:	64bc      	str	r4, [r7, #72]	; 0x48
 800473c:	414b      	adcs	r3, r1
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	008b      	lsls	r3, r1, #2
 8004754:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004758:	0082      	lsls	r2, r0, #2
 800475a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800475e:	f7fc fa23 	bl	8000ba8 <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <UART_SetConfig+0x38c>)
 8004768:	fba3 1302 	umull	r1, r3, r3, r2
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	2164      	movs	r1, #100	; 0x64
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	3332      	adds	r3, #50	; 0x32
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <UART_SetConfig+0x38c>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004786:	441e      	add	r6, r3
 8004788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478a:	4618      	mov	r0, r3
 800478c:	f04f 0100 	mov.w	r1, #0
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	1894      	adds	r4, r2, r2
 8004796:	603c      	str	r4, [r7, #0]
 8004798:	415b      	adcs	r3, r3
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a0:	1812      	adds	r2, r2, r0
 80047a2:	eb41 0303 	adc.w	r3, r1, r3
 80047a6:	f04f 0400 	mov.w	r4, #0
 80047aa:	f04f 0500 	mov.w	r5, #0
 80047ae:	00dd      	lsls	r5, r3, #3
 80047b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047b4:	00d4      	lsls	r4, r2, #3
 80047b6:	4622      	mov	r2, r4
 80047b8:	462b      	mov	r3, r5
 80047ba:	eb12 0a00 	adds.w	sl, r2, r0
 80047be:	eb43 0b01 	adc.w	fp, r3, r1
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	008b      	lsls	r3, r1, #2
 80047d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047da:	0082      	lsls	r2, r0, #2
 80047dc:	4650      	mov	r0, sl
 80047de:	4659      	mov	r1, fp
 80047e0:	f7fc f9e2 	bl	8000ba8 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <UART_SetConfig+0x38c>)
 80047ea:	fba3 1302 	umull	r1, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2164      	movs	r1, #100	; 0x64
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	; 0x32
 80047fc:	4a09      	ldr	r2, [pc, #36]	; (8004824 <UART_SetConfig+0x38c>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4432      	add	r2, r6
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	377c      	adds	r7, #124	; 0x7c
 8004814:	46bd      	mov	sp, r7
 8004816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481a:	bf00      	nop
 800481c:	40011000 	.word	0x40011000
 8004820:	40011400 	.word	0x40011400
 8004824:	51eb851f 	.word	0x51eb851f

08004828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800482c:	4904      	ldr	r1, [pc, #16]	; (8004840 <MX_FATFS_Init+0x18>)
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <MX_FATFS_Init+0x1c>)
 8004830:	f002 fef6 	bl	8007620 <FATFS_LinkDriver>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <MX_FATFS_Init+0x20>)
 800483a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800483c:	bf00      	nop
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000494 	.word	0x20000494
 8004844:	2000000c 	.word	0x2000000c
 8004848:	20000498 	.word	0x20000498

0800484c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004850:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f9d9 	bl	8004c20 <USER_SPI_initialize>
 800486e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fab7 	bl	8004df8 <USER_SPI_status>
 800488a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80048a4:	7bf8      	ldrb	r0, [r7, #15]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	f000 faba 	bl	8004e24 <USER_SPI_read>
 80048b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80048ca:	7bf8      	ldrb	r0, [r7, #15]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	f000 fb0d 	bl	8004ef0 <USER_SPI_write>
 80048d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	603a      	str	r2, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
 80048ec:	460b      	mov	r3, r1
 80048ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80048f0:	79b9      	ldrb	r1, [r7, #6]
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fb76 	bl	8004fe8 <USER_SPI_ioctl>
 80048fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004910:	f7fd fb5a 	bl	8001fc8 <HAL_GetTick>
 8004914:	4603      	mov	r3, r0
 8004916:	4a04      	ldr	r2, [pc, #16]	; (8004928 <SPI_Timer_On+0x20>)
 8004918:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800491a:	4a04      	ldr	r2, [pc, #16]	; (800492c <SPI_Timer_On+0x24>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	200008fc 	.word	0x200008fc
 800492c:	20000900 	.word	0x20000900

08004930 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004934:	f7fd fb48 	bl	8001fc8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <SPI_Timer_Status+0x24>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <SPI_Timer_Status+0x28>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	bf34      	ite	cc
 8004948:	2301      	movcc	r3, #1
 800494a:	2300      	movcs	r3, #0
 800494c:	b2db      	uxtb	r3, r3
}
 800494e:	4618      	mov	r0, r3
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200008fc 	.word	0x200008fc
 8004958:	20000900 	.word	0x20000900

0800495c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af02      	add	r7, sp, #8
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004966:	f107 020f 	add.w	r2, r7, #15
 800496a:	1df9      	adds	r1, r7, #7
 800496c:	2332      	movs	r3, #50	; 0x32
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2301      	movs	r3, #1
 8004972:	4804      	ldr	r0, [pc, #16]	; (8004984 <xchg_spi+0x28>)
 8004974:	f7ff f970 	bl	8003c58 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200003d4 	.word	0x200003d4

08004988 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e00a      	b.n	80049ae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	18d4      	adds	r4, r2, r3
 800499e:	20ff      	movs	r0, #255	; 0xff
 80049a0:	f7ff ffdc 	bl	800495c <xchg_spi>
 80049a4:	4603      	mov	r3, r0
 80049a6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d3f0      	bcc.n	8004998 <rcvr_spi_multi+0x10>
	}
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd90      	pop	{r4, r7, pc}

080049c0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e009      	b.n	80049e4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ffbf 	bl	800495c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d3f1      	bcc.n	80049d0 <xmit_spi_multi+0x10>
	}
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80049fe:	f7fd fae3 	bl	8001fc8 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004a08:	20ff      	movs	r0, #255	; 0xff
 8004a0a:	f7ff ffa7 	bl	800495c <xchg_spi>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2bff      	cmp	r3, #255	; 0xff
 8004a16:	d007      	beq.n	8004a28 <wait_ready+0x32>
 8004a18:	f7fd fad6 	bl	8001fc8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d8ef      	bhi.n	8004a08 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004a40:	2201      	movs	r2, #1
 8004a42:	2102      	movs	r1, #2
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <despiselect+0x18>)
 8004a46:	f7fd fd89 	bl	800255c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004a4a:	20ff      	movs	r0, #255	; 0xff
 8004a4c:	f7ff ff86 	bl	800495c <xchg_spi>

}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4809      	ldr	r0, [pc, #36]	; (8004a88 <spiselect+0x30>)
 8004a62:	f7fd fd7b 	bl	800255c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004a66:	20ff      	movs	r0, #255	; 0xff
 8004a68:	f7ff ff78 	bl	800495c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a70:	f7ff ffc1 	bl	80049f6 <wait_ready>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <spiselect+0x26>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e002      	b.n	8004a84 <spiselect+0x2c>

	despiselect();
 8004a7e:	f7ff ffdd 	bl	8004a3c <despiselect>
	return 0;	/* Timeout */
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000

08004a8c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004a96:	20c8      	movs	r0, #200	; 0xc8
 8004a98:	f7ff ff36 	bl	8004908 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004a9c:	20ff      	movs	r0, #255	; 0xff
 8004a9e:	f7ff ff5d 	bl	800495c <xchg_spi>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2bff      	cmp	r3, #255	; 0xff
 8004aaa:	d104      	bne.n	8004ab6 <rcvr_datablock+0x2a>
 8004aac:	f7ff ff40 	bl	8004930 <SPI_Timer_Status>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f2      	bne.n	8004a9c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2bfe      	cmp	r3, #254	; 0xfe
 8004aba:	d001      	beq.n	8004ac0 <rcvr_datablock+0x34>
 8004abc:	2300      	movs	r3, #0
 8004abe:	e00a      	b.n	8004ad6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff60 	bl	8004988 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004ac8:	20ff      	movs	r0, #255	; 0xff
 8004aca:	f7ff ff47 	bl	800495c <xchg_spi>
 8004ace:	20ff      	movs	r0, #255	; 0xff
 8004ad0:	f7ff ff44 	bl	800495c <xchg_spi>

	return 1;						/* Function succeeded */
 8004ad4:	2301      	movs	r3, #1
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aee:	f7ff ff82 	bl	80049f6 <wait_ready>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <xmit_datablock+0x1e>
 8004af8:	2300      	movs	r3, #0
 8004afa:	e01e      	b.n	8004b3a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff ff2c 	bl	800495c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	2bfd      	cmp	r3, #253	; 0xfd
 8004b08:	d016      	beq.n	8004b38 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff56 	bl	80049c0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004b14:	20ff      	movs	r0, #255	; 0xff
 8004b16:	f7ff ff21 	bl	800495c <xchg_spi>
 8004b1a:	20ff      	movs	r0, #255	; 0xff
 8004b1c:	f7ff ff1e 	bl	800495c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004b20:	20ff      	movs	r0, #255	; 0xff
 8004b22:	f7ff ff1b 	bl	800495c <xchg_spi>
 8004b26:	4603      	mov	r3, r0
 8004b28:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d001      	beq.n	8004b38 <xmit_datablock+0x5a>
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <xmit_datablock+0x5c>
	}
	return 1;
 8004b38:	2301      	movs	r3, #1
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	6039      	str	r1, [r7, #0]
 8004b4c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da0e      	bge.n	8004b74 <send_cmd+0x32>
		cmd &= 0x7F;
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	2037      	movs	r0, #55	; 0x37
 8004b62:	f7ff ffee 	bl	8004b42 <send_cmd>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004b6a:	7bbb      	ldrb	r3, [r7, #14]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d901      	bls.n	8004b74 <send_cmd+0x32>
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	e051      	b.n	8004c18 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d008      	beq.n	8004b8c <send_cmd+0x4a>
		despiselect();
 8004b7a:	f7ff ff5f 	bl	8004a3c <despiselect>
		if (!spiselect()) return 0xFF;
 8004b7e:	f7ff ff6b 	bl	8004a58 <spiselect>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <send_cmd+0x4a>
 8004b88:	23ff      	movs	r3, #255	; 0xff
 8004b8a:	e045      	b.n	8004c18 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fee1 	bl	800495c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fedb 	bl	800495c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fed5 	bl	800495c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fecf 	bl	800495c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff feca 	bl	800495c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <send_cmd+0x94>
 8004bd2:	2395      	movs	r3, #149	; 0x95
 8004bd4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d101      	bne.n	8004be0 <send_cmd+0x9e>
 8004bdc:	2387      	movs	r3, #135	; 0x87
 8004bde:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff feba 	bl	800495c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d102      	bne.n	8004bf4 <send_cmd+0xb2>
 8004bee:	20ff      	movs	r0, #255	; 0xff
 8004bf0:	f7ff feb4 	bl	800495c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004bf8:	20ff      	movs	r0, #255	; 0xff
 8004bfa:	f7ff feaf 	bl	800495c <xchg_spi>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da05      	bge.n	8004c16 <send_cmd+0xd4>
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <USER_SPI_initialize+0x14>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0d6      	b.n	8004de2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004c34:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <USER_SPI_initialize+0x1cc>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <USER_SPI_initialize+0x2a>
 8004c42:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <USER_SPI_initialize+0x1cc>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e0cb      	b.n	8004de2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004c4a:	4b69      	ldr	r3, [pc, #420]	; (8004df0 <USER_SPI_initialize+0x1d0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c54:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <USER_SPI_initialize+0x1d0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8004c5c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004c5e:	230a      	movs	r3, #10
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	e005      	b.n	8004c70 <USER_SPI_initialize+0x50>
 8004c64:	20ff      	movs	r0, #255	; 0xff
 8004c66:	f7ff fe79 	bl	800495c <xchg_spi>
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f6      	bne.n	8004c64 <USER_SPI_initialize+0x44>

	ty = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7ff ff60 	bl	8004b42 <send_cmd>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 808b 	bne.w	8004da0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c8e:	f7ff fe3b 	bl	8004908 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004c92:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c96:	2008      	movs	r0, #8
 8004c98:	f7ff ff53 	bl	8004b42 <send_cmd>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d151      	bne.n	8004d46 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e00d      	b.n	8004cc4 <USER_SPI_initialize+0xa4>
 8004ca8:	7bfc      	ldrb	r4, [r7, #15]
 8004caa:	20ff      	movs	r0, #255	; 0xff
 8004cac:	f7ff fe56 	bl	800495c <xchg_spi>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	4423      	add	r3, r4
 8004cba:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d9ee      	bls.n	8004ca8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004cca:	7abb      	ldrb	r3, [r7, #10]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d167      	bne.n	8004da0 <USER_SPI_initialize+0x180>
 8004cd0:	7afb      	ldrb	r3, [r7, #11]
 8004cd2:	2baa      	cmp	r3, #170	; 0xaa
 8004cd4:	d164      	bne.n	8004da0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004cd6:	bf00      	nop
 8004cd8:	f7ff fe2a 	bl	8004930 <SPI_Timer_Status>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <USER_SPI_initialize+0xd2>
 8004ce2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ce6:	20a9      	movs	r0, #169	; 0xa9
 8004ce8:	f7ff ff2b 	bl	8004b42 <send_cmd>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f2      	bne.n	8004cd8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004cf2:	f7ff fe1d 	bl	8004930 <SPI_Timer_Status>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d051      	beq.n	8004da0 <USER_SPI_initialize+0x180>
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	203a      	movs	r0, #58	; 0x3a
 8004d00:	f7ff ff1f 	bl	8004b42 <send_cmd>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d14a      	bne.n	8004da0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
 8004d0e:	e00d      	b.n	8004d2c <USER_SPI_initialize+0x10c>
 8004d10:	7bfc      	ldrb	r4, [r7, #15]
 8004d12:	20ff      	movs	r0, #255	; 0xff
 8004d14:	f7ff fe22 	bl	800495c <xchg_spi>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	4423      	add	r3, r4
 8004d22:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d9ee      	bls.n	8004d10 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004d32:	7a3b      	ldrb	r3, [r7, #8]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <USER_SPI_initialize+0x120>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	e000      	b.n	8004d42 <USER_SPI_initialize+0x122>
 8004d40:	2304      	movs	r3, #4
 8004d42:	737b      	strb	r3, [r7, #13]
 8004d44:	e02c      	b.n	8004da0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004d46:	2100      	movs	r1, #0
 8004d48:	20a9      	movs	r0, #169	; 0xa9
 8004d4a:	f7ff fefa 	bl	8004b42 <send_cmd>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d804      	bhi.n	8004d5e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004d54:	2302      	movs	r3, #2
 8004d56:	737b      	strb	r3, [r7, #13]
 8004d58:	23a9      	movs	r3, #169	; 0xa9
 8004d5a:	73bb      	strb	r3, [r7, #14]
 8004d5c:	e003      	b.n	8004d66 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004d5e:	2301      	movs	r3, #1
 8004d60:	737b      	strb	r3, [r7, #13]
 8004d62:	2301      	movs	r3, #1
 8004d64:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004d66:	bf00      	nop
 8004d68:	f7ff fde2 	bl	8004930 <SPI_Timer_Status>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <USER_SPI_initialize+0x162>
 8004d72:	7bbb      	ldrb	r3, [r7, #14]
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fee3 	bl	8004b42 <send_cmd>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f2      	bne.n	8004d68 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004d82:	f7ff fdd5 	bl	8004930 <SPI_Timer_Status>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <USER_SPI_initialize+0x17c>
 8004d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d90:	2010      	movs	r0, #16
 8004d92:	f7ff fed6 	bl	8004b42 <send_cmd>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <USER_SPI_initialize+0x180>
				ty = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <USER_SPI_initialize+0x1d4>)
 8004da2:	7b7b      	ldrb	r3, [r7, #13]
 8004da4:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004da6:	f7ff fe49 	bl	8004a3c <despiselect>

	if (ty) {			/* OK */
 8004daa:	7b7b      	ldrb	r3, [r7, #13]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <USER_SPI_initialize+0x1d0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <USER_SPI_initialize+0x1d0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0208 	orr.w	r2, r2, #8
 8004dc2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <USER_SPI_initialize+0x1cc>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <USER_SPI_initialize+0x1cc>)
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e002      	b.n	8004ddc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <USER_SPI_initialize+0x1cc>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <USER_SPI_initialize+0x1cc>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b2db      	uxtb	r3, r3
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000020 	.word	0x20000020
 8004df0:	200003d4 	.word	0x200003d4
 8004df4:	20000318 	.word	0x20000318

08004df8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <USER_SPI_status+0x14>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e002      	b.n	8004e12 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <USER_SPI_status+0x28>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000020 	.word	0x20000020

08004e24 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <USER_SPI_read+0x1c>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <USER_SPI_read+0x20>
 8004e40:	2304      	movs	r3, #4
 8004e42:	e04d      	b.n	8004ee0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004e44:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <USER_SPI_read+0xc4>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <USER_SPI_read+0x32>
 8004e52:	2303      	movs	r3, #3
 8004e54:	e044      	b.n	8004ee0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004e56:	4b25      	ldr	r3, [pc, #148]	; (8004eec <USER_SPI_read+0xc8>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <USER_SPI_read+0x44>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d111      	bne.n	8004e92 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	2011      	movs	r0, #17
 8004e72:	f7ff fe66 	bl	8004b42 <send_cmd>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d129      	bne.n	8004ed0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f7ff fe03 	bl	8004a8c <rcvr_datablock>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d021      	beq.n	8004ed0 <USER_SPI_read+0xac>
			count = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	e01e      	b.n	8004ed0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	2012      	movs	r0, #18
 8004e96:	f7ff fe54 	bl	8004b42 <send_cmd>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d117      	bne.n	8004ed0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ea4:	68b8      	ldr	r0, [r7, #8]
 8004ea6:	f7ff fdf1 	bl	8004a8c <rcvr_datablock>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <USER_SPI_read+0xa2>
				buff += 512;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004eb6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ed      	bne.n	8004ea0 <USER_SPI_read+0x7c>
 8004ec4:	e000      	b.n	8004ec8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004ec6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004ec8:	2100      	movs	r1, #0
 8004eca:	200c      	movs	r0, #12
 8004ecc:	f7ff fe39 	bl	8004b42 <send_cmd>
		}
	}
	despiselect();
 8004ed0:	f7ff fdb4 	bl	8004a3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bf14      	ite	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	2300      	moveq	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000020 	.word	0x20000020
 8004eec:	20000318 	.word	0x20000318

08004ef0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <USER_SPI_write+0x1c>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <USER_SPI_write+0x20>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	e063      	b.n	8004fd8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <USER_SPI_write+0xf0>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <USER_SPI_write+0x32>
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e05a      	b.n	8004fd8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004f22:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <USER_SPI_write+0xf0>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <USER_SPI_write+0x44>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e051      	b.n	8004fd8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <USER_SPI_write+0xf4>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <USER_SPI_write+0x56>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	025b      	lsls	r3, r3, #9
 8004f44:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d110      	bne.n	8004f6e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	2018      	movs	r0, #24
 8004f50:	f7ff fdf7 	bl	8004b42 <send_cmd>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d136      	bne.n	8004fc8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004f5a:	21fe      	movs	r1, #254	; 0xfe
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f7ff fdbe 	bl	8004ade <xmit_datablock>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02f      	beq.n	8004fc8 <USER_SPI_write+0xd8>
			count = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	e02c      	b.n	8004fc8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <USER_SPI_write+0xf4>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <USER_SPI_write+0x92>
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	2097      	movs	r0, #151	; 0x97
 8004f7e:	f7ff fde0 	bl	8004b42 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	2019      	movs	r0, #25
 8004f86:	f7ff fddc 	bl	8004b42 <send_cmd>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11b      	bne.n	8004fc8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004f90:	21fc      	movs	r1, #252	; 0xfc
 8004f92:	68b8      	ldr	r0, [r7, #8]
 8004f94:	f7ff fda3 	bl	8004ade <xmit_datablock>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <USER_SPI_write+0xc4>
				buff += 512;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004fa4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ee      	bne.n	8004f90 <USER_SPI_write+0xa0>
 8004fb2:	e000      	b.n	8004fb6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004fb4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004fb6:	21fd      	movs	r1, #253	; 0xfd
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f7ff fd90 	bl	8004ade <xmit_datablock>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <USER_SPI_write+0xd8>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004fc8:	f7ff fd38 	bl	8004a3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000020 	.word	0x20000020
 8004fe4:	20000318 	.word	0x20000318

08004fe8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	603a      	str	r2, [r7, #0]
 8004ff2:	71fb      	strb	r3, [r7, #7]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <USER_SPI_ioctl+0x1a>
 8004ffe:	2304      	movs	r3, #4
 8005000:	e15a      	b.n	80052b8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005002:	4baf      	ldr	r3, [pc, #700]	; (80052c0 <USER_SPI_ioctl+0x2d8>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <USER_SPI_ioctl+0x2c>
 8005010:	2303      	movs	r3, #3
 8005012:	e151      	b.n	80052b8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800501a:	79bb      	ldrb	r3, [r7, #6]
 800501c:	2b04      	cmp	r3, #4
 800501e:	f200 8136 	bhi.w	800528e <USER_SPI_ioctl+0x2a6>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <USER_SPI_ioctl+0x40>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800503d 	.word	0x0800503d
 800502c:	08005051 	.word	0x08005051
 8005030:	0800528f 	.word	0x0800528f
 8005034:	080050fd 	.word	0x080050fd
 8005038:	080051f3 	.word	0x080051f3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800503c:	f7ff fd0c 	bl	8004a58 <spiselect>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8127 	beq.w	8005296 <USER_SPI_ioctl+0x2ae>
 8005048:	2300      	movs	r3, #0
 800504a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800504e:	e122      	b.n	8005296 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005050:	2100      	movs	r1, #0
 8005052:	2009      	movs	r0, #9
 8005054:	f7ff fd75 	bl	8004b42 <send_cmd>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 811d 	bne.w	800529a <USER_SPI_ioctl+0x2b2>
 8005060:	f107 030c 	add.w	r3, r7, #12
 8005064:	2110      	movs	r1, #16
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fd10 	bl	8004a8c <rcvr_datablock>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8113 	beq.w	800529a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005074:	7b3b      	ldrb	r3, [r7, #12]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d111      	bne.n	80050a2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800507e:	7d7b      	ldrb	r3, [r7, #21]
 8005080:	461a      	mov	r2, r3
 8005082:	7d3b      	ldrb	r3, [r7, #20]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	4413      	add	r3, r2
 8005088:	461a      	mov	r2, r3
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005092:	4413      	add	r3, r2
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	029a      	lsls	r2, r3, #10
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	e028      	b.n	80050f4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80050a2:	7c7b      	ldrb	r3, [r7, #17]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	7dbb      	ldrb	r3, [r7, #22]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	7d7b      	ldrb	r3, [r7, #21]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	3302      	adds	r3, #2
 80050c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80050ca:	7d3b      	ldrb	r3, [r7, #20]
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	7cbb      	ldrb	r3, [r7, #18]
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050e0:	4413      	add	r3, r2
 80050e2:	3301      	adds	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80050e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050ea:	3b09      	subs	r3, #9
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	409a      	lsls	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80050fa:	e0ce      	b.n	800529a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80050fc:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <USER_SPI_ioctl+0x2dc>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d031      	beq.n	800516c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005108:	2100      	movs	r1, #0
 800510a:	208d      	movs	r0, #141	; 0x8d
 800510c:	f7ff fd19 	bl	8004b42 <send_cmd>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 80c3 	bne.w	800529e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005118:	20ff      	movs	r0, #255	; 0xff
 800511a:	f7ff fc1f 	bl	800495c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	2110      	movs	r1, #16
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fcb1 	bl	8004a8c <rcvr_datablock>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80b6 	beq.w	800529e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005132:	2330      	movs	r3, #48	; 0x30
 8005134:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005138:	e007      	b.n	800514a <USER_SPI_ioctl+0x162>
 800513a:	20ff      	movs	r0, #255	; 0xff
 800513c:	f7ff fc0e 	bl	800495c <xchg_spi>
 8005140:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005144:	3b01      	subs	r3, #1
 8005146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800514a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f3      	bne.n	800513a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005152:	7dbb      	ldrb	r3, [r7, #22]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	b2db      	uxtb	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	2310      	movs	r3, #16
 800515c:	fa03 f202 	lsl.w	r2, r3, r2
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800516a:	e098      	b.n	800529e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800516c:	2100      	movs	r1, #0
 800516e:	2009      	movs	r0, #9
 8005170:	f7ff fce7 	bl	8004b42 <send_cmd>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 8091 	bne.w	800529e <USER_SPI_ioctl+0x2b6>
 800517c:	f107 030c 	add.w	r3, r7, #12
 8005180:	2110      	movs	r1, #16
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fc82 	bl	8004a8c <rcvr_datablock>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8087 	beq.w	800529e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005190:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <USER_SPI_ioctl+0x2dc>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d012      	beq.n	80051c2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800519c:	7dbb      	ldrb	r3, [r7, #22]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80051a4:	7dfa      	ldrb	r2, [r7, #23]
 80051a6:	09d2      	lsrs	r2, r2, #7
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	4413      	add	r3, r2
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	7e7b      	ldrb	r3, [r7, #25]
 80051b0:	099b      	lsrs	r3, r3, #6
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e013      	b.n	80051ea <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80051c2:	7dbb      	ldrb	r3, [r7, #22]
 80051c4:	109b      	asrs	r3, r3, #2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	3301      	adds	r3, #1
 80051ce:	7dfa      	ldrb	r2, [r7, #23]
 80051d0:	00d2      	lsls	r2, r2, #3
 80051d2:	f002 0218 	and.w	r2, r2, #24
 80051d6:	7df9      	ldrb	r1, [r7, #23]
 80051d8:	0949      	lsrs	r1, r1, #5
 80051da:	b2c9      	uxtb	r1, r1
 80051dc:	440a      	add	r2, r1
 80051de:	3201      	adds	r2, #1
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80051f0:	e055      	b.n	800529e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80051f2:	4b34      	ldr	r3, [pc, #208]	; (80052c4 <USER_SPI_ioctl+0x2dc>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f003 0306 	and.w	r3, r3, #6
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d051      	beq.n	80052a2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80051fe:	f107 020c 	add.w	r2, r7, #12
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	210b      	movs	r1, #11
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff feee 	bl	8004fe8 <USER_SPI_ioctl>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d149      	bne.n	80052a6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005212:	7b3b      	ldrb	r3, [r7, #12]
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <USER_SPI_ioctl+0x23e>
 800521c:	7dbb      	ldrb	r3, [r7, #22]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d041      	beq.n	80052aa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005236:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <USER_SPI_ioctl+0x2dc>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	025b      	lsls	r3, r3, #9
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800524e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005250:	2020      	movs	r0, #32
 8005252:	f7ff fc76 	bl	8004b42 <send_cmd>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d128      	bne.n	80052ae <USER_SPI_ioctl+0x2c6>
 800525c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525e:	2021      	movs	r0, #33	; 0x21
 8005260:	f7ff fc6f 	bl	8004b42 <send_cmd>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d121      	bne.n	80052ae <USER_SPI_ioctl+0x2c6>
 800526a:	2100      	movs	r1, #0
 800526c:	2026      	movs	r0, #38	; 0x26
 800526e:	f7ff fc68 	bl	8004b42 <send_cmd>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11a      	bne.n	80052ae <USER_SPI_ioctl+0x2c6>
 8005278:	f247 5030 	movw	r0, #30000	; 0x7530
 800527c:	f7ff fbbb 	bl	80049f6 <wait_ready>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d013      	beq.n	80052ae <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005286:	2300      	movs	r3, #0
 8005288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800528c:	e00f      	b.n	80052ae <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800528e:	2304      	movs	r3, #4
 8005290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005294:	e00c      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		break;
 8005296:	bf00      	nop
 8005298:	e00a      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		break;
 800529a:	bf00      	nop
 800529c:	e008      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		break;
 800529e:	bf00      	nop
 80052a0:	e006      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <USER_SPI_ioctl+0x2c8>
		break;
 80052ae:	bf00      	nop
	}

	despiselect();
 80052b0:	f7ff fbc4 	bl	8004a3c <despiselect>

	return res;
 80052b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3730      	adds	r7, #48	; 0x30
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000020 	.word	0x20000020
 80052c4:	20000318 	.word	0x20000318

080052c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <disk_status+0x30>)
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	79fa      	ldrb	r2, [r7, #7]
 80052e0:	4905      	ldr	r1, [pc, #20]	; (80052f8 <disk_status+0x30>)
 80052e2:	440a      	add	r2, r1
 80052e4:	7a12      	ldrb	r2, [r2, #8]
 80052e6:	4610      	mov	r0, r2
 80052e8:	4798      	blx	r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000344 	.word	0x20000344

080052fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <disk_initialize+0x48>)
 800530e:	5cd3      	ldrb	r3, [r2, r3]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d111      	bne.n	8005338 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <disk_initialize+0x48>)
 8005318:	2101      	movs	r1, #1
 800531a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <disk_initialize+0x48>)
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	79fa      	ldrb	r2, [r7, #7]
 800532a:	4906      	ldr	r1, [pc, #24]	; (8005344 <disk_initialize+0x48>)
 800532c:	440a      	add	r2, r1
 800532e:	7a12      	ldrb	r2, [r2, #8]
 8005330:	4610      	mov	r0, r2
 8005332:	4798      	blx	r3
 8005334:	4603      	mov	r3, r0
 8005336:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000344 	.word	0x20000344

08005348 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4603      	mov	r3, r0
 8005356:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <disk_read+0x3c>)
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	689c      	ldr	r4, [r3, #8]
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <disk_read+0x3c>)
 8005368:	4413      	add	r3, r2
 800536a:	7a18      	ldrb	r0, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	47a0      	blx	r4
 8005374:	4603      	mov	r3, r0
 8005376:	75fb      	strb	r3, [r7, #23]
  return res;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	bd90      	pop	{r4, r7, pc}
 8005382:	bf00      	nop
 8005384:	20000344 	.word	0x20000344

08005388 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <disk_write+0x3c>)
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68dc      	ldr	r4, [r3, #12]
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <disk_write+0x3c>)
 80053a8:	4413      	add	r3, r2
 80053aa:	7a18      	ldrb	r0, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	47a0      	blx	r4
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd90      	pop	{r4, r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000344 	.word	0x20000344

080053c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	603a      	str	r2, [r7, #0]
 80053d2:	71fb      	strb	r3, [r7, #7]
 80053d4:	460b      	mov	r3, r1
 80053d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <disk_ioctl+0x38>)
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	79fa      	ldrb	r2, [r7, #7]
 80053e6:	4906      	ldr	r1, [pc, #24]	; (8005400 <disk_ioctl+0x38>)
 80053e8:	440a      	add	r2, r1
 80053ea:	7a10      	ldrb	r0, [r2, #8]
 80053ec:	79b9      	ldrb	r1, [r7, #6]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	4798      	blx	r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000344 	.word	0x20000344

08005404 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3301      	adds	r3, #1
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005414:	89fb      	ldrh	r3, [r7, #14]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	b21a      	sxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b21b      	sxth	r3, r3
 8005420:	4313      	orrs	r3, r2
 8005422:	b21b      	sxth	r3, r3
 8005424:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005426:	89fb      	ldrh	r3, [r7, #14]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3303      	adds	r3, #3
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	3202      	adds	r2, #2
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	3201      	adds	r2, #1
 800545a:	7812      	ldrb	r2, [r2, #0]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
	return rv;
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	887a      	ldrh	r2, [r7, #2]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	0a1b      	lsrs	r3, r3, #8
 8005496:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	887a      	ldrh	r2, [r7, #2]
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	0a1b      	lsrs	r3, r3, #8
 80054ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	1c53      	adds	r3, r2, #1
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	6179      	str	r1, [r7, #20]
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3b01      	subs	r3, #1
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f1      	bne.n	8005522 <mem_cpy+0x1a>
	}
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	617a      	str	r2, [r7, #20]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3b01      	subs	r3, #1
 800556a:	607b      	str	r3, [r7, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f3      	bne.n	800555a <mem_set+0x10>
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	61ba      	str	r2, [r7, #24]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	1acb      	subs	r3, r1, r3
 80055ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <mem_cmp+0x40>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0eb      	beq.n	8005598 <mem_cmp+0x18>

	return r;
 80055c0:	697b      	ldr	r3, [r7, #20]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3724      	adds	r7, #36	; 0x24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80055d8:	e002      	b.n	80055e0 <chk_chr+0x12>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3301      	adds	r3, #1
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <chk_chr+0x26>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d1f2      	bne.n	80055da <chk_chr+0xc>
	return *str;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	781b      	ldrb	r3, [r3, #0]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	e029      	b.n	800566c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005618:	4a27      	ldr	r2, [pc, #156]	; (80056b8 <chk_lock+0xb4>)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	4413      	add	r3, r2
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01d      	beq.n	8005662 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005626:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <chk_lock+0xb4>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	4413      	add	r3, r2
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d116      	bne.n	8005666 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <chk_lock+0xb4>)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	4413      	add	r3, r2
 8005640:	3304      	adds	r3, #4
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005648:	429a      	cmp	r2, r3
 800564a:	d10c      	bne.n	8005666 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800564c:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <chk_lock+0xb4>)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	4413      	add	r3, r2
 8005654:	3308      	adds	r3, #8
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800565c:	429a      	cmp	r2, r3
 800565e:	d102      	bne.n	8005666 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005660:	e007      	b.n	8005672 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005662:	2301      	movs	r3, #1
 8005664:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d9d2      	bls.n	8005618 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d109      	bne.n	800568c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <chk_lock+0x80>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d101      	bne.n	8005688 <chk_lock+0x84>
 8005684:	2300      	movs	r3, #0
 8005686:	e010      	b.n	80056aa <chk_lock+0xa6>
 8005688:	2312      	movs	r3, #18
 800568a:	e00e      	b.n	80056aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d108      	bne.n	80056a4 <chk_lock+0xa0>
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <chk_lock+0xb4>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	330c      	adds	r3, #12
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d101      	bne.n	80056a8 <chk_lock+0xa4>
 80056a4:	2310      	movs	r3, #16
 80056a6:	e000      	b.n	80056aa <chk_lock+0xa6>
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20000324 	.word	0x20000324

080056bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	e002      	b.n	80056ce <enq_lock+0x12>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3301      	adds	r3, #1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d806      	bhi.n	80056e2 <enq_lock+0x26>
 80056d4:	4a09      	ldr	r2, [pc, #36]	; (80056fc <enq_lock+0x40>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4413      	add	r3, r2
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f2      	bne.n	80056c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000324 	.word	0x20000324

08005700 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e01f      	b.n	8005750 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005710:	4a41      	ldr	r2, [pc, #260]	; (8005818 <inc_lock+0x118>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4413      	add	r3, r2
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d113      	bne.n	800574a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005722:	4a3d      	ldr	r2, [pc, #244]	; (8005818 <inc_lock+0x118>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	4413      	add	r3, r2
 800572a:	3304      	adds	r3, #4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005732:	429a      	cmp	r2, r3
 8005734:	d109      	bne.n	800574a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005736:	4a38      	ldr	r2, [pc, #224]	; (8005818 <inc_lock+0x118>)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	4413      	add	r3, r2
 800573e:	3308      	adds	r3, #8
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005746:	429a      	cmp	r2, r3
 8005748:	d006      	beq.n	8005758 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d9dc      	bls.n	8005710 <inc_lock+0x10>
 8005756:	e000      	b.n	800575a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005758:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d132      	bne.n	80057c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e002      	b.n	800576c <inc_lock+0x6c>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3301      	adds	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d806      	bhi.n	8005780 <inc_lock+0x80>
 8005772:	4a29      	ldr	r2, [pc, #164]	; (8005818 <inc_lock+0x118>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	4413      	add	r3, r2
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f2      	bne.n	8005766 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d101      	bne.n	800578a <inc_lock+0x8a>
 8005786:	2300      	movs	r3, #0
 8005788:	e040      	b.n	800580c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4922      	ldr	r1, [pc, #136]	; (8005818 <inc_lock+0x118>)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	440b      	add	r3, r1
 8005796:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	491e      	ldr	r1, [pc, #120]	; (8005818 <inc_lock+0x118>)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	440b      	add	r3, r1
 80057a4:	3304      	adds	r3, #4
 80057a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	491a      	ldr	r1, [pc, #104]	; (8005818 <inc_lock+0x118>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	440b      	add	r3, r1
 80057b4:	3308      	adds	r3, #8
 80057b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <inc_lock+0x118>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	4413      	add	r3, r2
 80057c0:	330c      	adds	r3, #12
 80057c2:	2200      	movs	r2, #0
 80057c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <inc_lock+0xe0>
 80057cc:	4a12      	ldr	r2, [pc, #72]	; (8005818 <inc_lock+0x118>)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	4413      	add	r3, r2
 80057d4:	330c      	adds	r3, #12
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <inc_lock+0xe0>
 80057dc:	2300      	movs	r3, #0
 80057de:	e015      	b.n	800580c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <inc_lock+0xf8>
 80057e6:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <inc_lock+0x118>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	4413      	add	r3, r2
 80057ee:	330c      	adds	r3, #12
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	e001      	b.n	80057fc <inc_lock+0xfc>
 80057f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fc:	4906      	ldr	r1, [pc, #24]	; (8005818 <inc_lock+0x118>)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	440b      	add	r3, r1
 8005804:	330c      	adds	r3, #12
 8005806:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	20000324 	.word	0x20000324

0800581c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3b01      	subs	r3, #1
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d825      	bhi.n	800587c <dec_lock+0x60>
		n = Files[i].ctr;
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <dec_lock+0x74>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	4413      	add	r3, r2
 8005838:	330c      	adds	r3, #12
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005844:	d101      	bne.n	800584a <dec_lock+0x2e>
 8005846:	2300      	movs	r3, #0
 8005848:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800584a:	89fb      	ldrh	r3, [r7, #14]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <dec_lock+0x3a>
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	3b01      	subs	r3, #1
 8005854:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005856:	4a0e      	ldr	r2, [pc, #56]	; (8005890 <dec_lock+0x74>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	4413      	add	r3, r2
 800585e:	330c      	adds	r3, #12
 8005860:	89fa      	ldrh	r2, [r7, #14]
 8005862:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005864:	89fb      	ldrh	r3, [r7, #14]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <dec_lock+0x5a>
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <dec_lock+0x74>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	4413      	add	r3, r2
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	737b      	strb	r3, [r7, #13]
 800587a:	e001      	b.n	8005880 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800587c:	2302      	movs	r3, #2
 800587e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005880:	7b7b      	ldrb	r3, [r7, #13]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000324 	.word	0x20000324

08005894 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e010      	b.n	80058c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <clear_lock+0x44>)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	4413      	add	r3, r2
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d105      	bne.n	80058be <clear_lock+0x2a>
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <clear_lock+0x44>)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	4413      	add	r3, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d9eb      	bls.n	80058a2 <clear_lock+0xe>
	}
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000324 	.word	0x20000324

080058dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d034      	beq.n	800595a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7858      	ldrb	r0, [r3, #1]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005900:	2301      	movs	r3, #1
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	f7ff fd40 	bl	8005388 <disk_write>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <sync_window+0x38>
			res = FR_DISK_ERR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
 8005912:	e022      	b.n	800595a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d217      	bcs.n	800595a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	789b      	ldrb	r3, [r3, #2]
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e010      	b.n	8005954 <sync_window+0x78>
					wsect += fs->fsize;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4413      	add	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7858      	ldrb	r0, [r3, #1]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005946:	2301      	movs	r3, #1
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	f7ff fd1d 	bl	8005388 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3b01      	subs	r3, #1
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d8eb      	bhi.n	8005932 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d01b      	beq.n	80059b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ffad 	bl	80058dc <sync_window>
 8005982:	4603      	mov	r3, r0
 8005984:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d113      	bne.n	80059b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7858      	ldrb	r0, [r3, #1]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005996:	2301      	movs	r3, #1
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	f7ff fcd5 	bl	8005348 <disk_read>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80059a4:	f04f 33ff 	mov.w	r3, #4294967295
 80059a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff ff87 	bl	80058dc <sync_window>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d158      	bne.n	8005a8a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d148      	bne.n	8005a72 <sync_fs+0xb2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	791b      	ldrb	r3, [r3, #4]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d144      	bne.n	8005a72 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3330      	adds	r3, #48	; 0x30
 80059ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff fda9 	bl	800554a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3330      	adds	r3, #48	; 0x30
 80059fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fd38 	bl	800547a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3330      	adds	r3, #48	; 0x30
 8005a0e:	4921      	ldr	r1, [pc, #132]	; (8005a94 <sync_fs+0xd4>)
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fd4d 	bl	80054b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3330      	adds	r3, #48	; 0x30
 8005a1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a1e:	491e      	ldr	r1, [pc, #120]	; (8005a98 <sync_fs+0xd8>)
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fd45 	bl	80054b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3330      	adds	r3, #48	; 0x30
 8005a2a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7ff fd3b 	bl	80054b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3330      	adds	r3, #48	; 0x30
 8005a3e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7ff fd31 	bl	80054b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7858      	ldrb	r0, [r3, #1]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	2301      	movs	r3, #1
 8005a68:	f7ff fc8e 	bl	8005388 <disk_write>
			fs->fsi_flag = 0;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fca4 	bl	80053c8 <disk_ioctl>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <sync_fs+0xca>
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	41615252 	.word	0x41615252
 8005a98:	61417272 	.word	0x61417272

08005a9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	3b02      	subs	r3, #2
 8005aaa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	3b02      	subs	r3, #2
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d301      	bcc.n	8005abc <clust2sect+0x20>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e008      	b.n	8005ace <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	895b      	ldrh	r3, [r3, #10]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	fb03 f202 	mul.w	r2, r3, r2
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	4413      	add	r3, r2
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d904      	bls.n	8005afa <get_fat+0x20>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e08f      	b.n	8005c20 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d062      	beq.n	8005bd4 <get_fat+0xfa>
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	dc7c      	bgt.n	8005c0c <get_fat+0x132>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d002      	beq.n	8005b1c <get_fat+0x42>
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d042      	beq.n	8005ba0 <get_fat+0xc6>
 8005b1a:	e077      	b.n	8005c0c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	4413      	add	r3, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	6938      	ldr	r0, [r7, #16]
 8005b38:	f7ff ff14 	bl	8005964 <move_window>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d167      	bne.n	8005c12 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	60fa      	str	r2, [r7, #12]
 8005b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0a5b      	lsrs	r3, r3, #9
 8005b5e:	4413      	add	r3, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	6938      	ldr	r0, [r7, #16]
 8005b64:	f7ff fefe 	bl	8005964 <move_window>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d153      	bne.n	8005c16 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <get_fat+0xbc>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	e002      	b.n	8005b9c <get_fat+0xc2>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9c:	617b      	str	r3, [r7, #20]
			break;
 8005b9e:	e03f      	b.n	8005c20 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	4413      	add	r3, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f7ff fed9 	bl	8005964 <move_window>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d130      	bne.n	8005c1a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005bc6:	4413      	add	r3, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fc1b 	bl	8005404 <ld_word>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	617b      	str	r3, [r7, #20]
			break;
 8005bd2:	e025      	b.n	8005c20 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	4413      	add	r3, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	6938      	ldr	r0, [r7, #16]
 8005be2:	f7ff febf 	bl	8005964 <move_window>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d118      	bne.n	8005c1e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005bfa:	4413      	add	r3, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fc19 	bl	8005434 <ld_dword>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c08:	617b      	str	r3, [r7, #20]
			break;
 8005c0a:	e009      	b.n	8005c20 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e006      	b.n	8005c20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c12:	bf00      	nop
 8005c14:	e004      	b.n	8005c20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c16:	bf00      	nop
 8005c18:	e002      	b.n	8005c20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c1e:	bf00      	nop
		}
	}

	return val;
 8005c20:	697b      	ldr	r3, [r7, #20]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005c2a:	b590      	push	{r4, r7, lr}
 8005c2c:	b089      	sub	sp, #36	; 0x24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005c36:	2302      	movs	r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f240 80d2 	bls.w	8005de6 <put_fat+0x1bc>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	f080 80cc 	bcs.w	8005de6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	f000 8096 	beq.w	8005d84 <put_fat+0x15a>
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	f300 80cd 	bgt.w	8005df8 <put_fat+0x1ce>
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d002      	beq.n	8005c68 <put_fat+0x3e>
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d06e      	beq.n	8005d44 <put_fat+0x11a>
 8005c66:	e0c7      	b.n	8005df8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4413      	add	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	0a5b      	lsrs	r3, r3, #9
 8005c7e:	4413      	add	r3, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff fe6e 	bl	8005964 <move_window>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 80ab 	bne.w	8005dea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1c59      	adds	r1, r3, #1
 8005c9e:	61b9      	str	r1, [r7, #24]
 8005ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca4:	4413      	add	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00d      	beq.n	8005cce <put_fat+0xa4>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	b25a      	sxtb	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b25b      	sxtb	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e001      	b.n	8005cd2 <put_fat+0xa8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	0a5b      	lsrs	r3, r3, #9
 8005ce4:	4413      	add	r3, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fe3b 	bl	8005964 <move_window>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cf2:	7ffb      	ldrb	r3, [r7, #31]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d17a      	bne.n	8005dee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d04:	4413      	add	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <put_fat+0xf0>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	e00e      	b.n	8005d38 <put_fat+0x10e>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f023 030f 	bic.w	r3, r3, #15
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	b25b      	sxtb	r3, r3
 8005d32:	4313      	orrs	r3, r2
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	70da      	strb	r2, [r3, #3]
			break;
 8005d42:	e059      	b.n	8005df8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fe07 	bl	8005964 <move_window>
 8005d56:	4603      	mov	r3, r0
 8005d58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d148      	bne.n	8005df2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d6e:	4413      	add	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	b292      	uxth	r2, r2
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fb7f 	bl	800547a <st_word>
			fs->wflag = 1;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	70da      	strb	r2, [r3, #3]
			break;
 8005d82:	e039      	b.n	8005df8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1a      	ldr	r2, [r3, #32]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	09db      	lsrs	r3, r3, #7
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fde7 	bl	8005964 <move_window>
 8005d96:	4603      	mov	r3, r0
 8005d98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d12a      	bne.n	8005df6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005db4:	4413      	add	r3, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fb3c 	bl	8005434 <ld_dword>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005dc2:	4323      	orrs	r3, r4
 8005dc4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005dd4:	4413      	add	r3, r2
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fb69 	bl	80054b0 <st_dword>
			fs->wflag = 1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	70da      	strb	r2, [r3, #3]
			break;
 8005de4:	e008      	b.n	8005df8 <put_fat+0x1ce>
		}
	}
 8005de6:	bf00      	nop
 8005de8:	e006      	b.n	8005df8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005df6:	bf00      	nop
	return res;
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3724      	adds	r7, #36	; 0x24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}

08005e02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b088      	sub	sp, #32
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d904      	bls.n	8005e28 <remove_chain+0x26>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d301      	bcc.n	8005e2c <remove_chain+0x2a>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e04b      	b.n	8005ec4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e32:	f04f 32ff 	mov.w	r2, #4294967295
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	69b8      	ldr	r0, [r7, #24]
 8005e3a:	f7ff fef6 	bl	8005c2a <put_fat>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <remove_chain+0x4a>
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	e03b      	b.n	8005ec4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fe43 	bl	8005ada <get_fat>
 8005e54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d031      	beq.n	8005ec0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <remove_chain+0x64>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e02e      	b.n	8005ec4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d101      	bne.n	8005e72 <remove_chain+0x70>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e028      	b.n	8005ec4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e72:	2200      	movs	r2, #0
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	69b8      	ldr	r0, [r7, #24]
 8005e78:	f7ff fed7 	bl	8005c2a <put_fat>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005e80:	7ffb      	ldrb	r3, [r7, #31]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <remove_chain+0x88>
 8005e86:	7ffb      	ldrb	r3, [r7, #31]
 8005e88:	e01c      	b.n	8005ec4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	3b02      	subs	r3, #2
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d20b      	bcs.n	8005eb0 <remove_chain+0xae>
			fs->free_clst++;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	791b      	ldrb	r3, [r3, #4]
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d3c6      	bcc.n	8005e4c <remove_chain+0x4a>
 8005ebe:	e000      	b.n	8005ec2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005ec0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10d      	bne.n	8005efe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <create_chain+0x2c>
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d31b      	bcc.n	8005f30 <create_chain+0x64>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e018      	b.n	8005f30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fdea 	bl	8005ada <get_fat>
 8005f06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d801      	bhi.n	8005f12 <create_chain+0x46>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e070      	b.n	8005ff4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d101      	bne.n	8005f1e <create_chain+0x52>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	e06a      	b.n	8005ff4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d201      	bcs.n	8005f2c <create_chain+0x60>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	e063      	b.n	8005ff4 <create_chain+0x128>
		scl = clst;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	3301      	adds	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d307      	bcc.n	8005f54 <create_chain+0x88>
				ncl = 2;
 8005f44:	2302      	movs	r3, #2
 8005f46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d901      	bls.n	8005f54 <create_chain+0x88>
 8005f50:	2300      	movs	r3, #0
 8005f52:	e04f      	b.n	8005ff4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fdbf 	bl	8005ada <get_fat>
 8005f5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d003      	beq.n	8005f72 <create_chain+0xa6>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d101      	bne.n	8005f76 <create_chain+0xaa>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	e03e      	b.n	8005ff4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d1da      	bne.n	8005f34 <create_chain+0x68>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e038      	b.n	8005ff4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005f82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	69f9      	ldr	r1, [r7, #28]
 8005f8a:	6938      	ldr	r0, [r7, #16]
 8005f8c:	f7ff fe4d 	bl	8005c2a <put_fat>
 8005f90:	4603      	mov	r3, r0
 8005f92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <create_chain+0xe2>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d006      	beq.n	8005fae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6938      	ldr	r0, [r7, #16]
 8005fa6:	f7ff fe40 	bl	8005c2a <put_fat>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d116      	bne.n	8005fe2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	3b02      	subs	r3, #2
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d804      	bhi.n	8005fd2 <create_chain+0x106>
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	1e5a      	subs	r2, r3, #1
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	711a      	strb	r2, [r3, #4]
 8005fe0:	e007      	b.n	8005ff2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d102      	bne.n	8005fee <create_chain+0x122>
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	e000      	b.n	8005ff0 <create_chain+0x124>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ff2:	69fb      	ldr	r3, [r7, #28]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3720      	adds	r7, #32
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	3304      	adds	r3, #4
 8006012:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	0a5b      	lsrs	r3, r3, #9
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	8952      	ldrh	r2, [r2, #10]
 800601c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006020:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	613a      	str	r2, [r7, #16]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <clmt_clust+0x3a>
 8006032:	2300      	movs	r3, #0
 8006034:	e010      	b.n	8006058 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	429a      	cmp	r2, r3
 800603c:	d307      	bcc.n	800604e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3304      	adds	r3, #4
 800604a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800604c:	e7e9      	b.n	8006022 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800604e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
}
 8006058:	4618      	mov	r0, r3
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800607a:	d204      	bcs.n	8006086 <dir_sdi+0x22>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006086:	2302      	movs	r3, #2
 8006088:	e063      	b.n	8006152 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <dir_sdi+0x46>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d902      	bls.n	80060aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10c      	bne.n	80060ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	8912      	ldrh	r2, [r2, #8]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d301      	bcc.n	80060c0 <dir_sdi+0x5c>
 80060bc:	2302      	movs	r3, #2
 80060be:	e048      	b.n	8006152 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	61da      	str	r2, [r3, #28]
 80060c8:	e029      	b.n	800611e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	895b      	ldrh	r3, [r3, #10]
 80060ce:	025b      	lsls	r3, r3, #9
 80060d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80060d2:	e019      	b.n	8006108 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6979      	ldr	r1, [r7, #20]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fcfe 	bl	8005ada <get_fat>
 80060de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d101      	bne.n	80060ec <dir_sdi+0x88>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e032      	b.n	8006152 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d904      	bls.n	80060fc <dir_sdi+0x98>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d301      	bcc.n	8006100 <dir_sdi+0x9c>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e028      	b.n	8006152 <dir_sdi+0xee>
			ofs -= csz;
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	429a      	cmp	r2, r3
 800610e:	d2e1      	bcs.n	80060d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006110:	6979      	ldr	r1, [r7, #20]
 8006112:	6938      	ldr	r0, [r7, #16]
 8006114:	f7ff fcc2 	bl	8005a9c <clust2sect>
 8006118:	4602      	mov	r2, r0
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <dir_sdi+0xcc>
 800612c:	2302      	movs	r3, #2
 800612e:	e010      	b.n	8006152 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	0a5b      	lsrs	r3, r3, #9
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	441a      	add	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b086      	sub	sp, #24
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	3320      	adds	r3, #32
 8006170:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <dir_next+0x28>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006180:	d301      	bcc.n	8006186 <dir_next+0x2c>
 8006182:	2304      	movs	r3, #4
 8006184:	e0aa      	b.n	80062dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8098 	bne.w	80062c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	8912      	ldrh	r2, [r2, #8]
 80061ac:	4293      	cmp	r3, r2
 80061ae:	f0c0 8088 	bcc.w	80062c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	61da      	str	r2, [r3, #28]
 80061b8:	2304      	movs	r3, #4
 80061ba:	e08f      	b.n	80062dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0a5b      	lsrs	r3, r3, #9
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	8952      	ldrh	r2, [r2, #10]
 80061c4:	3a01      	subs	r2, #1
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d17a      	bne.n	80062c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7ff fc80 	bl	8005ada <get_fat>
 80061da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d801      	bhi.n	80061e6 <dir_next+0x8c>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e07a      	b.n	80062dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d101      	bne.n	80061f2 <dir_next+0x98>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e074      	b.n	80062dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d358      	bcc.n	80062ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	61da      	str	r2, [r3, #28]
 8006208:	2304      	movs	r3, #4
 800620a:	e067      	b.n	80062dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f7ff fe59 	bl	8005ecc <create_chain>
 800621a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <dir_next+0xcc>
 8006222:	2307      	movs	r3, #7
 8006224:	e05a      	b.n	80062dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <dir_next+0xd6>
 800622c:	2302      	movs	r3, #2
 800622e:	e055      	b.n	80062dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d101      	bne.n	800623c <dir_next+0xe2>
 8006238:	2301      	movs	r3, #1
 800623a:	e04f      	b.n	80062dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff fb4d 	bl	80058dc <sync_window>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <dir_next+0xf2>
 8006248:	2301      	movs	r3, #1
 800624a:	e047      	b.n	80062dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3330      	adds	r3, #48	; 0x30
 8006250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff f977 	bl	800554a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	6979      	ldr	r1, [r7, #20]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fc1a 	bl	8005a9c <clust2sect>
 8006268:	4602      	mov	r2, r0
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	62da      	str	r2, [r3, #44]	; 0x2c
 800626e:	e012      	b.n	8006296 <dir_next+0x13c>
						fs->wflag = 1;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fb30 	bl	80058dc <sync_window>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <dir_next+0x12c>
 8006282:	2301      	movs	r3, #1
 8006284:	e02a      	b.n	80062dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3301      	adds	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	62da      	str	r2, [r3, #44]	; 0x2c
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	895b      	ldrh	r3, [r3, #10]
 800629a:	461a      	mov	r2, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4293      	cmp	r3, r2
 80062a0:	d3e6      	bcc.n	8006270 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80062b4:	6979      	ldr	r1, [r7, #20]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fbf0 	bl	8005a9c <clust2sect>
 80062bc:	4602      	mov	r2, r0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80062f4:	2100      	movs	r1, #0
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff feb4 	bl	8006064 <dir_sdi>
 80062fc:	4603      	mov	r3, r0
 80062fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d12b      	bne.n	800635e <dir_alloc+0x7a>
		n = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4619      	mov	r1, r3
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff fb27 	bl	8005964 <move_window>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d11d      	bne.n	800635c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2be5      	cmp	r3, #229	; 0xe5
 8006328:	d004      	beq.n	8006334 <dir_alloc+0x50>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3301      	adds	r3, #1
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d102      	bne.n	8006348 <dir_alloc+0x64>
 8006342:	e00c      	b.n	800635e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006348:	2101      	movs	r1, #1
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ff05 	bl	800615a <dir_next>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0d7      	beq.n	800630a <dir_alloc+0x26>
 800635a:	e000      	b.n	800635e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800635c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d101      	bne.n	8006368 <dir_alloc+0x84>
 8006364:	2307      	movs	r3, #7
 8006366:	75fb      	strb	r3, [r7, #23]
	return res;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	331a      	adds	r3, #26
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f83f 	bl	8005404 <ld_word>
 8006386:	4603      	mov	r3, r0
 8006388:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d109      	bne.n	80063a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff f834 	bl	8005404 <ld_word>
 800639c:	4603      	mov	r3, r0
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	331a      	adds	r3, #26
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	b292      	uxth	r2, r2
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f857 	bl	800547a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d109      	bne.n	80063e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f103 0214 	add.w	r2, r3, #20
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7ff f849 	bl	800547a <st_word>
	}
}
 80063e8:	bf00      	nop
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063fe:	2100      	movs	r1, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff fe2f 	bl	8006064 <dir_sdi>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <dir_find+0x24>
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	e03e      	b.n	8006492 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	4619      	mov	r1, r3
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7ff faa2 	bl	8005964 <move_window>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d12f      	bne.n	800648a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <dir_find+0x4e>
 8006438:	2304      	movs	r3, #4
 800643a:	75fb      	strb	r3, [r7, #23]
 800643c:	e028      	b.n	8006490 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	330b      	adds	r3, #11
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800644a:	b2da      	uxtb	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	330b      	adds	r3, #11
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <dir_find+0x86>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a18      	ldr	r0, [r3, #32]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	220b      	movs	r2, #11
 800646a:	4619      	mov	r1, r3
 800646c:	f7ff f888 	bl	8005580 <mem_cmp>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006476:	2100      	movs	r1, #0
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fe6e 	bl	800615a <dir_next>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0c5      	beq.n	8006414 <dir_find+0x24>
 8006488:	e002      	b.n	8006490 <dir_find+0xa0>
		if (res != FR_OK) break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800648e:	bf00      	nop

	return res;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80064a8:	2101      	movs	r1, #1
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff ff1a 	bl	80062e4 <dir_alloc>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11c      	bne.n	80064f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	4619      	mov	r1, r3
 80064c0:	68b8      	ldr	r0, [r7, #8]
 80064c2:	f7ff fa4f 	bl	8005964 <move_window>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d111      	bne.n	80064f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	2220      	movs	r2, #32
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff f836 	bl	800554a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a18      	ldr	r0, [r3, #32]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3324      	adds	r3, #36	; 0x24
 80064e6:	220b      	movs	r2, #11
 80064e8:	4619      	mov	r1, r3
 80064ea:	f7ff f80d 	bl	8005508 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2201      	movs	r2, #1
 80064f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006516:	220b      	movs	r2, #11
 8006518:	2120      	movs	r1, #32
 800651a:	68b8      	ldr	r0, [r7, #8]
 800651c:	f7ff f815 	bl	800554a <mem_set>
	si = i = 0; ni = 8;
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	2308      	movs	r3, #8
 800652a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	61fa      	str	r2, [r7, #28]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800653a:	7efb      	ldrb	r3, [r7, #27]
 800653c:	2b20      	cmp	r3, #32
 800653e:	d94e      	bls.n	80065de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006540:	7efb      	ldrb	r3, [r7, #27]
 8006542:	2b2f      	cmp	r3, #47	; 0x2f
 8006544:	d006      	beq.n	8006554 <create_name+0x54>
 8006546:	7efb      	ldrb	r3, [r7, #27]
 8006548:	2b5c      	cmp	r3, #92	; 0x5c
 800654a:	d110      	bne.n	800656e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800654c:	e002      	b.n	8006554 <create_name+0x54>
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3301      	adds	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b2f      	cmp	r3, #47	; 0x2f
 800655e:	d0f6      	beq.n	800654e <create_name+0x4e>
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b5c      	cmp	r3, #92	; 0x5c
 800656a:	d0f0      	beq.n	800654e <create_name+0x4e>
			break;
 800656c:	e038      	b.n	80065e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800656e:	7efb      	ldrb	r3, [r7, #27]
 8006570:	2b2e      	cmp	r3, #46	; 0x2e
 8006572:	d003      	beq.n	800657c <create_name+0x7c>
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	429a      	cmp	r2, r3
 800657a:	d30c      	bcc.n	8006596 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2b0b      	cmp	r3, #11
 8006580:	d002      	beq.n	8006588 <create_name+0x88>
 8006582:	7efb      	ldrb	r3, [r7, #27]
 8006584:	2b2e      	cmp	r3, #46	; 0x2e
 8006586:	d001      	beq.n	800658c <create_name+0x8c>
 8006588:	2306      	movs	r3, #6
 800658a:	e044      	b.n	8006616 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800658c:	2308      	movs	r3, #8
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	230b      	movs	r3, #11
 8006592:	617b      	str	r3, [r7, #20]
			continue;
 8006594:	e022      	b.n	80065dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006596:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800659a:	2b00      	cmp	r3, #0
 800659c:	da04      	bge.n	80065a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800659e:	7efb      	ldrb	r3, [r7, #27]
 80065a0:	3b80      	subs	r3, #128	; 0x80
 80065a2:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <create_name+0x120>)
 80065a4:	5cd3      	ldrb	r3, [r2, r3]
 80065a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80065a8:	7efb      	ldrb	r3, [r7, #27]
 80065aa:	4619      	mov	r1, r3
 80065ac:	481d      	ldr	r0, [pc, #116]	; (8006624 <create_name+0x124>)
 80065ae:	f7ff f80e 	bl	80055ce <chk_chr>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <create_name+0xbc>
 80065b8:	2306      	movs	r3, #6
 80065ba:	e02c      	b.n	8006616 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80065bc:	7efb      	ldrb	r3, [r7, #27]
 80065be:	2b60      	cmp	r3, #96	; 0x60
 80065c0:	d905      	bls.n	80065ce <create_name+0xce>
 80065c2:	7efb      	ldrb	r3, [r7, #27]
 80065c4:	2b7a      	cmp	r3, #122	; 0x7a
 80065c6:	d802      	bhi.n	80065ce <create_name+0xce>
 80065c8:	7efb      	ldrb	r3, [r7, #27]
 80065ca:	3b20      	subs	r3, #32
 80065cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	613a      	str	r2, [r7, #16]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	4413      	add	r3, r2
 80065d8:	7efa      	ldrb	r2, [r7, #27]
 80065da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80065dc:	e7a6      	b.n	800652c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80065de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	441a      	add	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <create_name+0xf4>
 80065f0:	2306      	movs	r3, #6
 80065f2:	e010      	b.n	8006616 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2be5      	cmp	r3, #229	; 0xe5
 80065fa:	d102      	bne.n	8006602 <create_name+0x102>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2205      	movs	r2, #5
 8006600:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006602:	7efb      	ldrb	r3, [r7, #27]
 8006604:	2b20      	cmp	r3, #32
 8006606:	d801      	bhi.n	800660c <create_name+0x10c>
 8006608:	2204      	movs	r2, #4
 800660a:	e000      	b.n	800660e <create_name+0x10e>
 800660c:	2200      	movs	r2, #0
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	330b      	adds	r3, #11
 8006612:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006614:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	0800a758 	.word	0x0800a758
 8006624:	0800a6fc 	.word	0x0800a6fc

08006628 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800663c:	e002      	b.n	8006644 <follow_path+0x1c>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b2f      	cmp	r3, #47	; 0x2f
 800664a:	d0f8      	beq.n	800663e <follow_path+0x16>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b5c      	cmp	r3, #92	; 0x5c
 8006652:	d0f4      	beq.n	800663e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2200      	movs	r2, #0
 8006658:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b1f      	cmp	r3, #31
 8006660:	d80a      	bhi.n	8006678 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2280      	movs	r2, #128	; 0x80
 8006666:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800666a:	2100      	movs	r1, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff fcf9 	bl	8006064 <dir_sdi>
 8006672:	4603      	mov	r3, r0
 8006674:	75fb      	strb	r3, [r7, #23]
 8006676:	e043      	b.n	8006700 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006678:	463b      	mov	r3, r7
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff3f 	bl	8006500 <create_name>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d134      	bne.n	80066f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff feaf 	bl	80063f0 <dir_find>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800669c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d127      	bne.n	80066fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80066aa:	7afb      	ldrb	r3, [r7, #11]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d122      	bne.n	80066fa <follow_path+0xd2>
 80066b4:	2305      	movs	r3, #5
 80066b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80066b8:	e01f      	b.n	80066fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11c      	bne.n	80066fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	799b      	ldrb	r3, [r3, #6]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80066d0:	2305      	movs	r3, #5
 80066d2:	75fb      	strb	r3, [r7, #23]
 80066d4:	e014      	b.n	8006700 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e4:	4413      	add	r3, r2
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fe42 	bl	8006372 <ld_clust>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066f4:	e7c0      	b.n	8006678 <follow_path+0x50>
			if (res != FR_OK) break;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <follow_path+0xd8>
				break;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066fe:	bf00      	nop
			}
		}
	}

	return res;
 8006700:	7dfb      	ldrb	r3, [r7, #23]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800670a:	b480      	push	{r7}
 800670c:	b087      	sub	sp, #28
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d031      	beq.n	8006784 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e002      	b.n	800672e <get_ldnumber+0x24>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3301      	adds	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b20      	cmp	r3, #32
 8006734:	d903      	bls.n	800673e <get_ldnumber+0x34>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b3a      	cmp	r3, #58	; 0x3a
 800673c:	d1f4      	bne.n	8006728 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b3a      	cmp	r3, #58	; 0x3a
 8006744:	d11c      	bne.n	8006780 <get_ldnumber+0x76>
			tp = *path;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	60fa      	str	r2, [r7, #12]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	3b30      	subs	r3, #48	; 0x30
 8006756:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b09      	cmp	r3, #9
 800675c:	d80e      	bhi.n	800677c <get_ldnumber+0x72>
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	429a      	cmp	r2, r3
 8006764:	d10a      	bne.n	800677c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <get_ldnumber+0x72>
					vol = (int)i;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	3301      	adds	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	e002      	b.n	8006786 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006784:	693b      	ldr	r3, [r7, #16]
}
 8006786:	4618      	mov	r0, r3
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	70da      	strb	r2, [r3, #3]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff f8d8 	bl	8005964 <move_window>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <check_fs+0x2a>
 80067ba:	2304      	movs	r3, #4
 80067bc:	e038      	b.n	8006830 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3330      	adds	r3, #48	; 0x30
 80067c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fe1c 	bl	8005404 <ld_word>
 80067cc:	4603      	mov	r3, r0
 80067ce:	461a      	mov	r2, r3
 80067d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d001      	beq.n	80067dc <check_fs+0x48>
 80067d8:	2303      	movs	r3, #3
 80067da:	e029      	b.n	8006830 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067e2:	2be9      	cmp	r3, #233	; 0xe9
 80067e4:	d009      	beq.n	80067fa <check_fs+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ec:	2beb      	cmp	r3, #235	; 0xeb
 80067ee:	d11e      	bne.n	800682e <check_fs+0x9a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067f6:	2b90      	cmp	r3, #144	; 0x90
 80067f8:	d119      	bne.n	800682e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3330      	adds	r3, #48	; 0x30
 80067fe:	3336      	adds	r3, #54	; 0x36
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fe17 	bl	8005434 <ld_dword>
 8006806:	4603      	mov	r3, r0
 8006808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <check_fs+0xa4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <check_fs+0x82>
 8006812:	2300      	movs	r3, #0
 8006814:	e00c      	b.n	8006830 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3330      	adds	r3, #48	; 0x30
 800681a:	3352      	adds	r3, #82	; 0x52
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fe09 	bl	8005434 <ld_dword>
 8006822:	4603      	mov	r3, r0
 8006824:	4a05      	ldr	r2, [pc, #20]	; (800683c <check_fs+0xa8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d101      	bne.n	800682e <check_fs+0x9a>
 800682a:	2300      	movs	r3, #0
 800682c:	e000      	b.n	8006830 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800682e:	2302      	movs	r3, #2
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	00544146 	.word	0x00544146
 800683c:	33544146 	.word	0x33544146

08006840 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b096      	sub	sp, #88	; 0x58
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff ff58 	bl	800670a <get_ldnumber>
 800685a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	2b00      	cmp	r3, #0
 8006860:	da01      	bge.n	8006866 <find_volume+0x26>
 8006862:	230b      	movs	r3, #11
 8006864:	e22e      	b.n	8006cc4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006866:	4aa8      	ldr	r2, [pc, #672]	; (8006b08 <find_volume+0x2c8>)
 8006868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <find_volume+0x3a>
 8006876:	230c      	movs	r3, #12
 8006878:	e224      	b.n	8006cc4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fd17 	bl	80052c8 <disk_status>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10c      	bne.n	80068c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <find_volume+0x82>
 80068b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80068be:	230a      	movs	r3, #10
 80068c0:	e200      	b.n	8006cc4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80068c2:	2300      	movs	r3, #0
 80068c4:	e1fe      	b.n	8006cc4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe fd0f 	bl	80052fc <disk_initialize>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80068e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80068f0:	2303      	movs	r3, #3
 80068f2:	e1e7      	b.n	8006cc4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <find_volume+0xca>
 80068fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006906:	230a      	movs	r3, #10
 8006908:	e1dc      	b.n	8006cc4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800690e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006912:	f7ff ff3f 	bl	8006794 <check_fs>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800691c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006920:	2b02      	cmp	r3, #2
 8006922:	d14b      	bne.n	80069bc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006924:	2300      	movs	r3, #0
 8006926:	643b      	str	r3, [r7, #64]	; 0x40
 8006928:	e01f      	b.n	800696a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006938:	4413      	add	r3, r2
 800693a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	3304      	adds	r3, #4
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <find_volume+0x114>
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	3308      	adds	r3, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fd72 	bl	8005434 <ld_dword>
 8006950:	4602      	mov	r2, r0
 8006952:	e000      	b.n	8006956 <find_volume+0x116>
 8006954:	2200      	movs	r2, #0
 8006956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800695e:	440b      	add	r3, r1
 8006960:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006966:	3301      	adds	r3, #1
 8006968:	643b      	str	r3, [r7, #64]	; 0x40
 800696a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696c:	2b03      	cmp	r3, #3
 800696e:	d9dc      	bls.n	800692a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006970:	2300      	movs	r3, #0
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <find_volume+0x140>
 800697a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697c:	3b01      	subs	r3, #1
 800697e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006988:	4413      	add	r3, r2
 800698a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800698e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <find_volume+0x162>
 8006996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800699a:	f7ff fefb 	bl	8006794 <check_fs>
 800699e:	4603      	mov	r3, r0
 80069a0:	e000      	b.n	80069a4 <find_volume+0x164>
 80069a2:	2303      	movs	r3, #3
 80069a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80069a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d905      	bls.n	80069bc <find_volume+0x17c>
 80069b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b2:	3301      	adds	r3, #1
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40
 80069b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d9e1      	bls.n	8006980 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80069bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d101      	bne.n	80069c8 <find_volume+0x188>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e17d      	b.n	8006cc4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80069c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d901      	bls.n	80069d4 <find_volume+0x194>
 80069d0:	230d      	movs	r3, #13
 80069d2:	e177      	b.n	8006cc4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	3330      	adds	r3, #48	; 0x30
 80069d8:	330b      	adds	r3, #11
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fd12 	bl	8005404 <ld_word>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d001      	beq.n	80069ec <find_volume+0x1ac>
 80069e8:	230d      	movs	r3, #13
 80069ea:	e16b      	b.n	8006cc4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	3330      	adds	r3, #48	; 0x30
 80069f0:	3316      	adds	r3, #22
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fd06 	bl	8005404 <ld_word>
 80069f8:	4603      	mov	r3, r0
 80069fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <find_volume+0x1d0>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	3330      	adds	r3, #48	; 0x30
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fd13 	bl	8005434 <ld_dword>
 8006a0e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a14:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d005      	beq.n	8006a34 <find_volume+0x1f4>
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	789b      	ldrb	r3, [r3, #2]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0x1f4>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e147      	b.n	8006cc4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	789b      	ldrb	r3, [r3, #2]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	895b      	ldrh	r3, [r3, #10]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <find_volume+0x228>
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	895b      	ldrh	r3, [r3, #10]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	895b      	ldrh	r3, [r3, #10]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <find_volume+0x22c>
 8006a68:	230d      	movs	r3, #13
 8006a6a:	e12b      	b.n	8006cc4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	3330      	adds	r3, #48	; 0x30
 8006a70:	3311      	adds	r3, #17
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fcc6 	bl	8005404 <ld_word>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	891b      	ldrh	r3, [r3, #8]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <find_volume+0x252>
 8006a8e:	230d      	movs	r3, #13
 8006a90:	e118      	b.n	8006cc4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	3330      	adds	r3, #48	; 0x30
 8006a96:	3313      	adds	r3, #19
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fcb3 	bl	8005404 <ld_word>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <find_volume+0x276>
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	3330      	adds	r3, #48	; 0x30
 8006aac:	3320      	adds	r3, #32
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fcc0 	bl	8005434 <ld_dword>
 8006ab4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	3330      	adds	r3, #48	; 0x30
 8006aba:	330e      	adds	r3, #14
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fca1 	bl	8005404 <ld_word>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <find_volume+0x290>
 8006acc:	230d      	movs	r3, #13
 8006ace:	e0f9      	b.n	8006cc4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ad0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad4:	4413      	add	r3, r2
 8006ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad8:	8912      	ldrh	r2, [r2, #8]
 8006ada:	0912      	lsrs	r2, r2, #4
 8006adc:	b292      	uxth	r2, r2
 8006ade:	4413      	add	r3, r2
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d201      	bcs.n	8006aee <find_volume+0x2ae>
 8006aea:	230d      	movs	r3, #13
 8006aec:	e0ea      	b.n	8006cc4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af6:	8952      	ldrh	r2, [r2, #10]
 8006af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <find_volume+0x2cc>
 8006b04:	230d      	movs	r3, #13
 8006b06:	e0dd      	b.n	8006cc4 <find_volume+0x484>
 8006b08:	2000031c 	.word	0x2000031c
		fmt = FS_FAT32;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d802      	bhi.n	8006b22 <find_volume+0x2e2>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d802      	bhi.n	8006b32 <find_volume+0x2f2>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b3e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b44:	441a      	add	r2, r3
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	441a      	add	r2, r3
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d11e      	bne.n	8006b9a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	3330      	adds	r3, #48	; 0x30
 8006b60:	332a      	adds	r3, #42	; 0x2a
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fc4e 	bl	8005404 <ld_word>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <find_volume+0x332>
 8006b6e:	230d      	movs	r3, #13
 8006b70:	e0a8      	b.n	8006cc4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	891b      	ldrh	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <find_volume+0x33e>
 8006b7a:	230d      	movs	r3, #13
 8006b7c:	e0a2      	b.n	8006cc4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	332c      	adds	r3, #44	; 0x2c
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe fc55 	bl	8005434 <ld_dword>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	647b      	str	r3, [r7, #68]	; 0x44
 8006b98:	e01f      	b.n	8006bda <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	891b      	ldrh	r3, [r3, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <find_volume+0x366>
 8006ba2:	230d      	movs	r3, #13
 8006ba4:	e08e      	b.n	8006cc4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bac:	441a      	add	r2, r3
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d103      	bne.n	8006bc2 <find_volume+0x382>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	e00a      	b.n	8006bd8 <find_volume+0x398>
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4413      	add	r3, r2
 8006bcc:	085a      	lsrs	r2, r3, #1
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bd8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006be4:	0a5b      	lsrs	r3, r3, #9
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d201      	bcs.n	8006bee <find_volume+0x3ae>
 8006bea:	230d      	movs	r3, #13
 8006bec:	e06a      	b.n	8006cc4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf4:	611a      	str	r2, [r3, #16]
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	2280      	movs	r2, #128	; 0x80
 8006c02:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d149      	bne.n	8006ca0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	3330      	adds	r3, #48	; 0x30
 8006c10:	3330      	adds	r3, #48	; 0x30
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fbf6 	bl	8005404 <ld_word>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d140      	bne.n	8006ca0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c20:	3301      	adds	r3, #1
 8006c22:	4619      	mov	r1, r3
 8006c24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c26:	f7fe fe9d 	bl	8005964 <move_window>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d137      	bne.n	8006ca0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2200      	movs	r2, #0
 8006c34:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	3330      	adds	r3, #48	; 0x30
 8006c3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fbe0 	bl	8005404 <ld_word>
 8006c44:	4603      	mov	r3, r0
 8006c46:	461a      	mov	r2, r3
 8006c48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d127      	bne.n	8006ca0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	3330      	adds	r3, #48	; 0x30
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fbed 	bl	8005434 <ld_dword>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <find_volume+0x48c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d11e      	bne.n	8006ca0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	3330      	adds	r3, #48	; 0x30
 8006c66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fbe2 	bl	8005434 <ld_dword>
 8006c70:	4603      	mov	r3, r0
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <find_volume+0x490>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d113      	bne.n	8006ca0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	3330      	adds	r3, #48	; 0x30
 8006c7c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fbd7 	bl	8005434 <ld_dword>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	3330      	adds	r3, #48	; 0x30
 8006c90:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fbcd 	bl	8005434 <ld_dword>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006ca6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <find_volume+0x494>)
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <find_volume+0x494>)
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <find_volume+0x494>)
 8006cb6:	881a      	ldrh	r2, [r3, #0]
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006cbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cbe:	f7fe fde9 	bl	8005894 <clear_lock>
#endif
	return FR_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3758      	adds	r7, #88	; 0x58
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	41615252 	.word	0x41615252
 8006cd0:	61417272 	.word	0x61417272
 8006cd4:	20000320 	.word	0x20000320

08006cd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006ce2:	2309      	movs	r3, #9
 8006ce4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01c      	beq.n	8006d26 <validate+0x4e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d018      	beq.n	8006d26 <validate+0x4e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d013      	beq.n	8006d26 <validate+0x4e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	889a      	ldrh	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	88db      	ldrh	r3, [r3, #6]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d10c      	bne.n	8006d26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fad8 	bl	80052c8 <disk_status>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <validate+0x4e>
			res = FR_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <validate+0x5a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	e000      	b.n	8006d34 <validate+0x5c>
 8006d32:	2300      	movs	r3, #0
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	6013      	str	r3, [r2, #0]
	return res;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d56:	f107 0310 	add.w	r3, r7, #16
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fcd5 	bl	800670a <get_ldnumber>
 8006d60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da01      	bge.n	8006d6c <f_mount+0x28>
 8006d68:	230b      	movs	r3, #11
 8006d6a:	e02b      	b.n	8006dc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d6c:	4a17      	ldr	r2, [pc, #92]	; (8006dcc <f_mount+0x88>)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006d7c:	69b8      	ldr	r0, [r7, #24]
 8006d7e:	f7fe fd89 	bl	8005894 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	490d      	ldr	r1, [pc, #52]	; (8006dcc <f_mount+0x88>)
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <f_mount+0x66>
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d001      	beq.n	8006dae <f_mount+0x6a>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e00a      	b.n	8006dc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006dae:	f107 010c 	add.w	r1, r7, #12
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	2200      	movs	r2, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fd41 	bl	8006840 <find_volume>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3720      	adds	r7, #32
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	2000031c 	.word	0x2000031c

08006dd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b098      	sub	sp, #96	; 0x60
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <f_open+0x18>
 8006de4:	2309      	movs	r3, #9
 8006de6:	e1ad      	b.n	8007144 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006df0:	79fa      	ldrb	r2, [r7, #7]
 8006df2:	f107 0110 	add.w	r1, r7, #16
 8006df6:	f107 0308 	add.w	r3, r7, #8
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fd20 	bl	8006840 <find_volume>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006e06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 8191 	bne.w	8007132 <f_open+0x362>
		dj.obj.fs = fs;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	f107 0314 	add.w	r3, r7, #20
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fc03 	bl	8006628 <follow_path>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11a      	bne.n	8006e66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da03      	bge.n	8006e42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006e3a:	2306      	movs	r3, #6
 8006e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e40:	e011      	b.n	8006e66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	f023 0301 	bic.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	bf14      	ite	ne
 8006e4c:	2301      	movne	r3, #1
 8006e4e:	2300      	moveq	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fbd2 	bl	8005604 <chk_lock>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	f003 031c 	and.w	r3, r3, #28
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d07f      	beq.n	8006f70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d017      	beq.n	8006ea8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d10e      	bne.n	8006e9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e80:	f7fe fc1c 	bl	80056bc <enq_lock>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d006      	beq.n	8006e98 <f_open+0xc8>
 8006e8a:	f107 0314 	add.w	r3, r7, #20
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fb03 	bl	800649a <dir_register>
 8006e94:	4603      	mov	r3, r0
 8006e96:	e000      	b.n	8006e9a <f_open+0xca>
 8006e98:	2312      	movs	r3, #18
 8006e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	f043 0308 	orr.w	r3, r3, #8
 8006ea4:	71fb      	strb	r3, [r7, #7]
 8006ea6:	e010      	b.n	8006eca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ea8:	7ebb      	ldrb	r3, [r7, #26]
 8006eaa:	f003 0311 	and.w	r3, r3, #17
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <f_open+0xea>
					res = FR_DENIED;
 8006eb2:	2307      	movs	r3, #7
 8006eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006eb8:	e007      	b.n	8006eca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <f_open+0xfa>
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d168      	bne.n	8006fa4 <f_open+0x1d4>
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d063      	beq.n	8006fa4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006edc:	f7fd fcb6 	bl	800484c <get_fattime>
 8006ee0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee4:	330e      	adds	r3, #14
 8006ee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fae1 	bl	80054b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	3316      	adds	r3, #22
 8006ef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fadb 	bl	80054b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	330b      	adds	r3, #11
 8006efe:	2220      	movs	r2, #32
 8006f00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fa32 	bl	8006372 <ld_clust>
 8006f0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f14:	2200      	movs	r2, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff fa4a 	bl	80063b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	331c      	adds	r3, #28
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fac4 	bl	80054b0 <st_dword>
					fs->wflag = 1;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d037      	beq.n	8006fa4 <f_open+0x1d4>
						dw = fs->winsect;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006f3a:	f107 0314 	add.w	r3, r7, #20
 8006f3e:	2200      	movs	r2, #0
 8006f40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe ff5d 	bl	8005e02 <remove_chain>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d126      	bne.n	8006fa4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fd02 	bl	8005964 <move_window>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	60da      	str	r2, [r3, #12]
 8006f6e:	e019      	b.n	8006fa4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d115      	bne.n	8006fa4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006f78:	7ebb      	ldrb	r3, [r7, #26]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006f82:	2304      	movs	r3, #4
 8006f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f88:	e00c      	b.n	8006fa4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <f_open+0x1d4>
 8006f94:	7ebb      	ldrb	r3, [r7, #26]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <f_open+0x1d4>
						res = FR_DENIED;
 8006f9e:	2307      	movs	r3, #7
 8006fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d128      	bne.n	8006ffe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	f023 0301 	bic.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fb8b 	bl	8005700 <inc_lock>
 8006fea:	4602      	mov	r2, r0
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <f_open+0x22e>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 8095 	bne.w	8007132 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff f9af 	bl	8006372 <ld_clust>
 8007014:	4602      	mov	r2, r0
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	331c      	adds	r3, #28
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fa08 	bl	8005434 <ld_dword>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	88da      	ldrh	r2, [r3, #6]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	79fa      	ldrb	r2, [r7, #7]
 8007042:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3330      	adds	r3, #48	; 0x30
 800705a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fa72 	bl	800554a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d060      	beq.n	8007132 <f_open+0x362>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d05c      	beq.n	8007132 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	895b      	ldrh	r3, [r3, #10]
 8007084:	025b      	lsls	r3, r3, #9
 8007086:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	657b      	str	r3, [r7, #84]	; 0x54
 8007094:	e016      	b.n	80070c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fd1d 	bl	8005ada <get_fat>
 80070a0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80070a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d802      	bhi.n	80070ae <f_open+0x2de>
 80070a8:	2302      	movs	r3, #2
 80070aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80070ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d102      	bne.n	80070bc <f_open+0x2ec>
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	657b      	str	r3, [r7, #84]	; 0x54
 80070c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <f_open+0x304>
 80070cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d8e0      	bhi.n	8007096 <f_open+0x2c6>
				}
				fp->clust = clst;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80070da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d127      	bne.n	8007132 <f_open+0x362>
 80070e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d022      	beq.n	8007132 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fcd3 	bl	8005a9c <clust2sect>
 80070f6:	6478      	str	r0, [r7, #68]	; 0x44
 80070f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <f_open+0x336>
						res = FR_INT_ERR;
 80070fe:	2302      	movs	r3, #2
 8007100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007104:	e015      	b.n	8007132 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007108:	0a5a      	lsrs	r2, r3, #9
 800710a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	7858      	ldrb	r0, [r3, #1]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	2301      	movs	r3, #1
 8007122:	f7fe f911 	bl	8005348 <disk_read>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <f_open+0x362>
 800712c:	2301      	movs	r3, #1
 800712e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <f_open+0x370>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007144:	4618      	mov	r0, r3
 8007146:	3760      	adds	r7, #96	; 0x60
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	; 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f107 0210 	add.w	r2, r7, #16
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fdb3 	bl	8006cd8 <validate>
 8007172:	4603      	mov	r3, r0
 8007174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <f_write+0x44>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7d5b      	ldrb	r3, [r3, #21]
 8007184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <f_write+0x4a>
 8007190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007194:	e14b      	b.n	800742e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	7d1b      	ldrb	r3, [r3, #20]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <f_write+0x5a>
 80071a2:	2307      	movs	r3, #7
 80071a4:	e143      	b.n	800742e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	441a      	add	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	f080 812d 	bcs.w	8007412 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	43db      	mvns	r3, r3
 80071be:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80071c0:	e127      	b.n	8007412 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 80e3 	bne.w	8007396 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	8952      	ldrh	r2, [r2, #10]
 80071da:	3a01      	subs	r2, #1
 80071dc:	4013      	ands	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d143      	bne.n	800726e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10c      	bne.n	8007208 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d11a      	bne.n	8007230 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fe64 	bl	8005ecc <create_chain>
 8007204:	62b8      	str	r0, [r7, #40]	; 0x28
 8007206:	e013      	b.n	8007230 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	4619      	mov	r1, r3
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7fe fef0 	bl	8005ffc <clmt_clust>
 800721c:	62b8      	str	r0, [r7, #40]	; 0x28
 800721e:	e007      	b.n	8007230 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fe fe4f 	bl	8005ecc <create_chain>
 800722e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80f2 	beq.w	800741c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	2b01      	cmp	r3, #1
 800723c:	d104      	bne.n	8007248 <f_write+0xfc>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2202      	movs	r2, #2
 8007242:	755a      	strb	r2, [r3, #21]
 8007244:	2302      	movs	r3, #2
 8007246:	e0f2      	b.n	800742e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d104      	bne.n	800725a <f_write+0x10e>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	755a      	strb	r2, [r3, #21]
 8007256:	2301      	movs	r3, #1
 8007258:	e0e9      	b.n	800742e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800725e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <f_write+0x122>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800726c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	7d1b      	ldrb	r3, [r3, #20]
 8007272:	b25b      	sxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	da18      	bge.n	80072aa <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	7858      	ldrb	r0, [r3, #1]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1a      	ldr	r2, [r3, #32]
 8007286:	2301      	movs	r3, #1
 8007288:	f7fe f87e 	bl	8005388 <disk_write>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <f_write+0x150>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	755a      	strb	r2, [r3, #21]
 8007298:	2301      	movs	r3, #1
 800729a:	e0c8      	b.n	800742e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	7d1b      	ldrb	r3, [r3, #20]
 80072a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fe fbf2 	bl	8005a9c <clust2sect>
 80072b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <f_write+0x17e>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2202      	movs	r2, #2
 80072c4:	755a      	strb	r2, [r3, #21]
 80072c6:	2302      	movs	r3, #2
 80072c8:	e0b1      	b.n	800742e <f_write+0x2e2>
			sect += csect;
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	0a5b      	lsrs	r3, r3, #9
 80072d6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d03c      	beq.n	8007358 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	4413      	add	r3, r2
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	8952      	ldrh	r2, [r2, #10]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d905      	bls.n	80072f8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	895b      	ldrh	r3, [r3, #10]
 80072f0:	461a      	mov	r2, r3
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	7858      	ldrb	r0, [r3, #1]
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	f7fe f841 	bl	8005388 <disk_write>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <f_write+0x1ca>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	755a      	strb	r2, [r3, #21]
 8007312:	2301      	movs	r3, #1
 8007314:	e08b      	b.n	800742e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	6a3a      	ldr	r2, [r7, #32]
 8007320:	429a      	cmp	r2, r3
 8007322:	d915      	bls.n	8007350 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	025b      	lsls	r3, r3, #9
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800733c:	4619      	mov	r1, r3
 800733e:	f7fe f8e3 	bl	8005508 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	7d1b      	ldrb	r3, [r3, #20]
 8007346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734a:	b2da      	uxtb	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	025b      	lsls	r3, r3, #9
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007356:	e03f      	b.n	80073d8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	429a      	cmp	r2, r3
 8007360:	d016      	beq.n	8007390 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800736a:	429a      	cmp	r2, r3
 800736c:	d210      	bcs.n	8007390 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	7858      	ldrb	r0, [r3, #1]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007378:	2301      	movs	r3, #1
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	f7fd ffe4 	bl	8005348 <disk_read>
 8007380:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	755a      	strb	r2, [r3, #21]
 800738c:	2301      	movs	r3, #1
 800738e:	e04e      	b.n	800742e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80073a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d901      	bls.n	80073b0 <f_write+0x264>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	4413      	add	r3, r2
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	69f9      	ldr	r1, [r7, #28]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe f89f 	bl	8005508 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	7d1b      	ldrb	r3, [r3, #20]
 80073ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	4413      	add	r3, r2
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	441a      	add	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	619a      	str	r2, [r3, #24]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	bf38      	it	cc
 80073f8:	461a      	movcc	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	60da      	str	r2, [r3, #12]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	441a      	add	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f47f aed4 	bne.w	80071c2 <f_write+0x76>
 800741a:	e000      	b.n	800741e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800741c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	7d1b      	ldrb	r3, [r3, #20]
 8007422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3730      	adds	r7, #48	; 0x30
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f107 0208 	add.w	r2, r7, #8
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fc46 	bl	8006cd8 <validate>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d168      	bne.n	8007528 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7d1b      	ldrb	r3, [r3, #20]
 800745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d062      	beq.n	8007528 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	7d1b      	ldrb	r3, [r3, #20]
 8007466:	b25b      	sxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	da15      	bge.n	8007498 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	7858      	ldrb	r0, [r3, #1]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1a      	ldr	r2, [r3, #32]
 800747a:	2301      	movs	r3, #1
 800747c:	f7fd ff84 	bl	8005388 <disk_write>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <f_sync+0x54>
 8007486:	2301      	movs	r3, #1
 8007488:	e04f      	b.n	800752a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007492:	b2da      	uxtb	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007498:	f7fd f9d8 	bl	800484c <get_fattime>
 800749c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f7fe fa5c 	bl	8005964 <move_window>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d138      	bne.n	8007528 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	330b      	adds	r3, #11
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	330b      	adds	r3, #11
 80074c6:	f042 0220 	orr.w	r2, r2, #32
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	461a      	mov	r2, r3
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	f7fe ff69 	bl	80063b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f103 021c 	add.w	r2, r3, #28
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fd ffe0 	bl	80054b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3316      	adds	r3, #22
 80074f4:	6939      	ldr	r1, [r7, #16]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fd ffda 	bl	80054b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3312      	adds	r3, #18
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd ffb9 	bl	800547a <st_word>
					fs->wflag = 1;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2201      	movs	r2, #1
 800750c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fa55 	bl	80059c0 <sync_fs>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7d1b      	ldrb	r3, [r3, #20]
 800751e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007522:	b2da      	uxtb	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007528:	7dfb      	ldrb	r3, [r7, #23]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff ff7b 	bl	8007436 <f_sync>
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d118      	bne.n	800757c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f107 0208 	add.w	r2, r7, #8
 8007550:	4611      	mov	r1, r2
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff fbc0 	bl	8006cd8 <validate>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10c      	bne.n	800757c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe f958 	bl	800581c <dec_lock>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007596:	2301      	movs	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800759e:	4b1f      	ldr	r3, [pc, #124]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075a0:	7a5b      	ldrb	r3, [r3, #9]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d131      	bne.n	800760c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075a8:	4b1c      	ldr	r3, [pc, #112]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075aa:	7a5b      	ldrb	r3, [r3, #9]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	4b1a      	ldr	r3, [pc, #104]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075b6:	4b19      	ldr	r3, [pc, #100]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075b8:	7a5b      	ldrb	r3, [r3, #9]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	4a17      	ldr	r2, [pc, #92]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075c6:	4b15      	ldr	r3, [pc, #84]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075c8:	7a5b      	ldrb	r3, [r3, #9]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	4b13      	ldr	r3, [pc, #76]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075d0:	4413      	add	r3, r2
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075d8:	7a5b      	ldrb	r3, [r3, #9]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	b2d1      	uxtb	r1, r2
 80075e0:	4a0e      	ldr	r2, [pc, #56]	; (800761c <FATFS_LinkDriverEx+0x94>)
 80075e2:	7251      	strb	r1, [r2, #9]
 80075e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80075e6:	7dbb      	ldrb	r3, [r7, #22]
 80075e8:	3330      	adds	r3, #48	; 0x30
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3301      	adds	r3, #1
 80075f4:	223a      	movs	r2, #58	; 0x3a
 80075f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3302      	adds	r3, #2
 80075fc:	222f      	movs	r2, #47	; 0x2f
 80075fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3303      	adds	r3, #3
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
}
 800760e:	4618      	mov	r0, r3
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000344 	.word	0x20000344

08007620 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ffaa 	bl	8007588 <FATFS_LinkDriverEx>
 8007634:	4603      	mov	r3, r0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	; (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000024 	.word	0x20000024

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	; (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	; (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <__libc_init_array+0x44>)
 8007660:	f002 fef0 	bl	800a444 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	0800abc4 	.word	0x0800abc4
 8007688:	0800abc4 	.word	0x0800abc4
 800768c:	0800abc4 	.word	0x0800abc4
 8007690:	0800abc8 	.word	0x0800abc8

08007694 <memset>:
 8007694:	4402      	add	r2, r0
 8007696:	4603      	mov	r3, r0
 8007698:	4293      	cmp	r3, r2
 800769a:	d100      	bne.n	800769e <memset+0xa>
 800769c:	4770      	bx	lr
 800769e:	f803 1b01 	strb.w	r1, [r3], #1
 80076a2:	e7f9      	b.n	8007698 <memset+0x4>

080076a4 <__cvt>:
 80076a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	ec55 4b10 	vmov	r4, r5, d0
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	460e      	mov	r6, r1
 80076b0:	4619      	mov	r1, r3
 80076b2:	462b      	mov	r3, r5
 80076b4:	bfbb      	ittet	lt
 80076b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076ba:	461d      	movlt	r5, r3
 80076bc:	2300      	movge	r3, #0
 80076be:	232d      	movlt	r3, #45	; 0x2d
 80076c0:	700b      	strb	r3, [r1, #0]
 80076c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076c8:	4691      	mov	r9, r2
 80076ca:	f023 0820 	bic.w	r8, r3, #32
 80076ce:	bfbc      	itt	lt
 80076d0:	4622      	movlt	r2, r4
 80076d2:	4614      	movlt	r4, r2
 80076d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076d8:	d005      	beq.n	80076e6 <__cvt+0x42>
 80076da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076de:	d100      	bne.n	80076e2 <__cvt+0x3e>
 80076e0:	3601      	adds	r6, #1
 80076e2:	2102      	movs	r1, #2
 80076e4:	e000      	b.n	80076e8 <__cvt+0x44>
 80076e6:	2103      	movs	r1, #3
 80076e8:	ab03      	add	r3, sp, #12
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	ab02      	add	r3, sp, #8
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	ec45 4b10 	vmov	d0, r4, r5
 80076f4:	4653      	mov	r3, sl
 80076f6:	4632      	mov	r2, r6
 80076f8:	f000 fd26 	bl	8008148 <_dtoa_r>
 80076fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007700:	4607      	mov	r7, r0
 8007702:	d102      	bne.n	800770a <__cvt+0x66>
 8007704:	f019 0f01 	tst.w	r9, #1
 8007708:	d022      	beq.n	8007750 <__cvt+0xac>
 800770a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800770e:	eb07 0906 	add.w	r9, r7, r6
 8007712:	d110      	bne.n	8007736 <__cvt+0x92>
 8007714:	783b      	ldrb	r3, [r7, #0]
 8007716:	2b30      	cmp	r3, #48	; 0x30
 8007718:	d10a      	bne.n	8007730 <__cvt+0x8c>
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4620      	mov	r0, r4
 8007720:	4629      	mov	r1, r5
 8007722:	f7f9 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007726:	b918      	cbnz	r0, 8007730 <__cvt+0x8c>
 8007728:	f1c6 0601 	rsb	r6, r6, #1
 800772c:	f8ca 6000 	str.w	r6, [sl]
 8007730:	f8da 3000 	ldr.w	r3, [sl]
 8007734:	4499      	add	r9, r3
 8007736:	2200      	movs	r2, #0
 8007738:	2300      	movs	r3, #0
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f9 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007742:	b108      	cbz	r0, 8007748 <__cvt+0xa4>
 8007744:	f8cd 900c 	str.w	r9, [sp, #12]
 8007748:	2230      	movs	r2, #48	; 0x30
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	454b      	cmp	r3, r9
 800774e:	d307      	bcc.n	8007760 <__cvt+0xbc>
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007754:	1bdb      	subs	r3, r3, r7
 8007756:	4638      	mov	r0, r7
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	b004      	add	sp, #16
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	1c59      	adds	r1, r3, #1
 8007762:	9103      	str	r1, [sp, #12]
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e7f0      	b.n	800774a <__cvt+0xa6>

08007768 <__exponent>:
 8007768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776a:	4603      	mov	r3, r0
 800776c:	2900      	cmp	r1, #0
 800776e:	bfb8      	it	lt
 8007770:	4249      	neglt	r1, r1
 8007772:	f803 2b02 	strb.w	r2, [r3], #2
 8007776:	bfb4      	ite	lt
 8007778:	222d      	movlt	r2, #45	; 0x2d
 800777a:	222b      	movge	r2, #43	; 0x2b
 800777c:	2909      	cmp	r1, #9
 800777e:	7042      	strb	r2, [r0, #1]
 8007780:	dd2a      	ble.n	80077d8 <__exponent+0x70>
 8007782:	f10d 0407 	add.w	r4, sp, #7
 8007786:	46a4      	mov	ip, r4
 8007788:	270a      	movs	r7, #10
 800778a:	46a6      	mov	lr, r4
 800778c:	460a      	mov	r2, r1
 800778e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007792:	fb07 1516 	mls	r5, r7, r6, r1
 8007796:	3530      	adds	r5, #48	; 0x30
 8007798:	2a63      	cmp	r2, #99	; 0x63
 800779a:	f104 34ff 	add.w	r4, r4, #4294967295
 800779e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077a2:	4631      	mov	r1, r6
 80077a4:	dcf1      	bgt.n	800778a <__exponent+0x22>
 80077a6:	3130      	adds	r1, #48	; 0x30
 80077a8:	f1ae 0502 	sub.w	r5, lr, #2
 80077ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077b0:	1c44      	adds	r4, r0, #1
 80077b2:	4629      	mov	r1, r5
 80077b4:	4561      	cmp	r1, ip
 80077b6:	d30a      	bcc.n	80077ce <__exponent+0x66>
 80077b8:	f10d 0209 	add.w	r2, sp, #9
 80077bc:	eba2 020e 	sub.w	r2, r2, lr
 80077c0:	4565      	cmp	r5, ip
 80077c2:	bf88      	it	hi
 80077c4:	2200      	movhi	r2, #0
 80077c6:	4413      	add	r3, r2
 80077c8:	1a18      	subs	r0, r3, r0
 80077ca:	b003      	add	sp, #12
 80077cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077d6:	e7ed      	b.n	80077b4 <__exponent+0x4c>
 80077d8:	2330      	movs	r3, #48	; 0x30
 80077da:	3130      	adds	r1, #48	; 0x30
 80077dc:	7083      	strb	r3, [r0, #2]
 80077de:	70c1      	strb	r1, [r0, #3]
 80077e0:	1d03      	adds	r3, r0, #4
 80077e2:	e7f1      	b.n	80077c8 <__exponent+0x60>

080077e4 <_printf_float>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	ed2d 8b02 	vpush	{d8}
 80077ec:	b08d      	sub	sp, #52	; 0x34
 80077ee:	460c      	mov	r4, r1
 80077f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077f4:	4616      	mov	r6, r2
 80077f6:	461f      	mov	r7, r3
 80077f8:	4605      	mov	r5, r0
 80077fa:	f001 fa91 	bl	8008d20 <_localeconv_r>
 80077fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007802:	4650      	mov	r0, sl
 8007804:	f7f8 fce4 	bl	80001d0 <strlen>
 8007808:	2300      	movs	r3, #0
 800780a:	930a      	str	r3, [sp, #40]	; 0x28
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	f8d8 3000 	ldr.w	r3, [r8]
 8007814:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007818:	3307      	adds	r3, #7
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	f103 0208 	add.w	r2, r3, #8
 8007822:	f8c8 2000 	str.w	r2, [r8]
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800782e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f8cd 8018 	str.w	r8, [sp, #24]
 800783c:	ee08 0a10 	vmov	s16, r0
 8007840:	4b9f      	ldr	r3, [pc, #636]	; (8007ac0 <_printf_float+0x2dc>)
 8007842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007846:	f04f 32ff 	mov.w	r2, #4294967295
 800784a:	f7f9 f96f 	bl	8000b2c <__aeabi_dcmpun>
 800784e:	bb88      	cbnz	r0, 80078b4 <_printf_float+0xd0>
 8007850:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007854:	4b9a      	ldr	r3, [pc, #616]	; (8007ac0 <_printf_float+0x2dc>)
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	f7f9 f949 	bl	8000af0 <__aeabi_dcmple>
 800785e:	bb48      	cbnz	r0, 80078b4 <_printf_float+0xd0>
 8007860:	2200      	movs	r2, #0
 8007862:	2300      	movs	r3, #0
 8007864:	4640      	mov	r0, r8
 8007866:	4649      	mov	r1, r9
 8007868:	f7f9 f938 	bl	8000adc <__aeabi_dcmplt>
 800786c:	b110      	cbz	r0, 8007874 <_printf_float+0x90>
 800786e:	232d      	movs	r3, #45	; 0x2d
 8007870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007874:	4b93      	ldr	r3, [pc, #588]	; (8007ac4 <_printf_float+0x2e0>)
 8007876:	4894      	ldr	r0, [pc, #592]	; (8007ac8 <_printf_float+0x2e4>)
 8007878:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800787c:	bf94      	ite	ls
 800787e:	4698      	movls	r8, r3
 8007880:	4680      	movhi	r8, r0
 8007882:	2303      	movs	r3, #3
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	9b05      	ldr	r3, [sp, #20]
 8007888:	f023 0204 	bic.w	r2, r3, #4
 800788c:	6022      	str	r2, [r4, #0]
 800788e:	f04f 0900 	mov.w	r9, #0
 8007892:	9700      	str	r7, [sp, #0]
 8007894:	4633      	mov	r3, r6
 8007896:	aa0b      	add	r2, sp, #44	; 0x2c
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f9d8 	bl	8007c50 <_printf_common>
 80078a0:	3001      	adds	r0, #1
 80078a2:	f040 8090 	bne.w	80079c6 <_printf_float+0x1e2>
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295
 80078aa:	b00d      	add	sp, #52	; 0x34
 80078ac:	ecbd 8b02 	vpop	{d8}
 80078b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f936 	bl	8000b2c <__aeabi_dcmpun>
 80078c0:	b140      	cbz	r0, 80078d4 <_printf_float+0xf0>
 80078c2:	464b      	mov	r3, r9
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bfbc      	itt	lt
 80078c8:	232d      	movlt	r3, #45	; 0x2d
 80078ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078ce:	487f      	ldr	r0, [pc, #508]	; (8007acc <_printf_float+0x2e8>)
 80078d0:	4b7f      	ldr	r3, [pc, #508]	; (8007ad0 <_printf_float+0x2ec>)
 80078d2:	e7d1      	b.n	8007878 <_printf_float+0x94>
 80078d4:	6863      	ldr	r3, [r4, #4]
 80078d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078da:	9206      	str	r2, [sp, #24]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	d13f      	bne.n	8007960 <_printf_float+0x17c>
 80078e0:	2306      	movs	r3, #6
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	6861      	ldr	r1, [r4, #4]
 80078e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078ec:	2300      	movs	r3, #0
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	ab0a      	add	r3, sp, #40	; 0x28
 80078f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078f6:	ab09      	add	r3, sp, #36	; 0x24
 80078f8:	ec49 8b10 	vmov	d0, r8, r9
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6022      	str	r2, [r4, #0]
 8007900:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007904:	4628      	mov	r0, r5
 8007906:	f7ff fecd 	bl	80076a4 <__cvt>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800790e:	2b47      	cmp	r3, #71	; 0x47
 8007910:	4680      	mov	r8, r0
 8007912:	d108      	bne.n	8007926 <_printf_float+0x142>
 8007914:	1cc8      	adds	r0, r1, #3
 8007916:	db02      	blt.n	800791e <_printf_float+0x13a>
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	4299      	cmp	r1, r3
 800791c:	dd41      	ble.n	80079a2 <_printf_float+0x1be>
 800791e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007922:	fa5f fb8b 	uxtb.w	fp, fp
 8007926:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800792a:	d820      	bhi.n	800796e <_printf_float+0x18a>
 800792c:	3901      	subs	r1, #1
 800792e:	465a      	mov	r2, fp
 8007930:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007934:	9109      	str	r1, [sp, #36]	; 0x24
 8007936:	f7ff ff17 	bl	8007768 <__exponent>
 800793a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800793c:	1813      	adds	r3, r2, r0
 800793e:	2a01      	cmp	r2, #1
 8007940:	4681      	mov	r9, r0
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	dc02      	bgt.n	800794c <_printf_float+0x168>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	07d2      	lsls	r2, r2, #31
 800794a:	d501      	bpl.n	8007950 <_printf_float+0x16c>
 800794c:	3301      	adds	r3, #1
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007954:	2b00      	cmp	r3, #0
 8007956:	d09c      	beq.n	8007892 <_printf_float+0xae>
 8007958:	232d      	movs	r3, #45	; 0x2d
 800795a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800795e:	e798      	b.n	8007892 <_printf_float+0xae>
 8007960:	9a06      	ldr	r2, [sp, #24]
 8007962:	2a47      	cmp	r2, #71	; 0x47
 8007964:	d1be      	bne.n	80078e4 <_printf_float+0x100>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1bc      	bne.n	80078e4 <_printf_float+0x100>
 800796a:	2301      	movs	r3, #1
 800796c:	e7b9      	b.n	80078e2 <_printf_float+0xfe>
 800796e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007972:	d118      	bne.n	80079a6 <_printf_float+0x1c2>
 8007974:	2900      	cmp	r1, #0
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	dd0b      	ble.n	8007992 <_printf_float+0x1ae>
 800797a:	6121      	str	r1, [r4, #16]
 800797c:	b913      	cbnz	r3, 8007984 <_printf_float+0x1a0>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d502      	bpl.n	800798a <_printf_float+0x1a6>
 8007984:	3301      	adds	r3, #1
 8007986:	440b      	add	r3, r1
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	65a1      	str	r1, [r4, #88]	; 0x58
 800798c:	f04f 0900 	mov.w	r9, #0
 8007990:	e7de      	b.n	8007950 <_printf_float+0x16c>
 8007992:	b913      	cbnz	r3, 800799a <_printf_float+0x1b6>
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	07d2      	lsls	r2, r2, #31
 8007998:	d501      	bpl.n	800799e <_printf_float+0x1ba>
 800799a:	3302      	adds	r3, #2
 800799c:	e7f4      	b.n	8007988 <_printf_float+0x1a4>
 800799e:	2301      	movs	r3, #1
 80079a0:	e7f2      	b.n	8007988 <_printf_float+0x1a4>
 80079a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a8:	4299      	cmp	r1, r3
 80079aa:	db05      	blt.n	80079b8 <_printf_float+0x1d4>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	6121      	str	r1, [r4, #16]
 80079b0:	07d8      	lsls	r0, r3, #31
 80079b2:	d5ea      	bpl.n	800798a <_printf_float+0x1a6>
 80079b4:	1c4b      	adds	r3, r1, #1
 80079b6:	e7e7      	b.n	8007988 <_printf_float+0x1a4>
 80079b8:	2900      	cmp	r1, #0
 80079ba:	bfd4      	ite	le
 80079bc:	f1c1 0202 	rsble	r2, r1, #2
 80079c0:	2201      	movgt	r2, #1
 80079c2:	4413      	add	r3, r2
 80079c4:	e7e0      	b.n	8007988 <_printf_float+0x1a4>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	055a      	lsls	r2, r3, #21
 80079ca:	d407      	bmi.n	80079dc <_printf_float+0x1f8>
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	4642      	mov	r2, r8
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	d12c      	bne.n	8007a34 <_printf_float+0x250>
 80079da:	e764      	b.n	80078a6 <_printf_float+0xc2>
 80079dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079e0:	f240 80e0 	bls.w	8007ba4 <_printf_float+0x3c0>
 80079e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079e8:	2200      	movs	r2, #0
 80079ea:	2300      	movs	r3, #0
 80079ec:	f7f9 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d034      	beq.n	8007a5e <_printf_float+0x27a>
 80079f4:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <_printf_float+0x2f0>)
 80079f6:	2301      	movs	r3, #1
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f af51 	beq.w	80078a6 <_printf_float+0xc2>
 8007a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	db02      	blt.n	8007a12 <_printf_float+0x22e>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	07d8      	lsls	r0, r3, #31
 8007a10:	d510      	bpl.n	8007a34 <_printf_float+0x250>
 8007a12:	ee18 3a10 	vmov	r3, s16
 8007a16:	4652      	mov	r2, sl
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af41 	beq.w	80078a6 <_printf_float+0xc2>
 8007a24:	f04f 0800 	mov.w	r8, #0
 8007a28:	f104 091a 	add.w	r9, r4, #26
 8007a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	4543      	cmp	r3, r8
 8007a32:	dc09      	bgt.n	8007a48 <_printf_float+0x264>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	079b      	lsls	r3, r3, #30
 8007a38:	f100 8105 	bmi.w	8007c46 <_printf_float+0x462>
 8007a3c:	68e0      	ldr	r0, [r4, #12]
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a40:	4298      	cmp	r0, r3
 8007a42:	bfb8      	it	lt
 8007a44:	4618      	movlt	r0, r3
 8007a46:	e730      	b.n	80078aa <_printf_float+0xc6>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	464a      	mov	r2, r9
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f af27 	beq.w	80078a6 <_printf_float+0xc2>
 8007a58:	f108 0801 	add.w	r8, r8, #1
 8007a5c:	e7e6      	b.n	8007a2c <_printf_float+0x248>
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dc39      	bgt.n	8007ad8 <_printf_float+0x2f4>
 8007a64:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <_printf_float+0x2f0>)
 8007a66:	2301      	movs	r3, #1
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f af19 	beq.w	80078a6 <_printf_float+0xc2>
 8007a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d102      	bne.n	8007a82 <_printf_float+0x29e>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07d9      	lsls	r1, r3, #31
 8007a80:	d5d8      	bpl.n	8007a34 <_printf_float+0x250>
 8007a82:	ee18 3a10 	vmov	r3, s16
 8007a86:	4652      	mov	r2, sl
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	47b8      	blx	r7
 8007a8e:	3001      	adds	r0, #1
 8007a90:	f43f af09 	beq.w	80078a6 <_printf_float+0xc2>
 8007a94:	f04f 0900 	mov.w	r9, #0
 8007a98:	f104 0a1a 	add.w	sl, r4, #26
 8007a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9e:	425b      	negs	r3, r3
 8007aa0:	454b      	cmp	r3, r9
 8007aa2:	dc01      	bgt.n	8007aa8 <_printf_float+0x2c4>
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa6:	e792      	b.n	80079ce <_printf_float+0x1ea>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f aef7 	beq.w	80078a6 <_printf_float+0xc2>
 8007ab8:	f109 0901 	add.w	r9, r9, #1
 8007abc:	e7ee      	b.n	8007a9c <_printf_float+0x2b8>
 8007abe:	bf00      	nop
 8007ac0:	7fefffff 	.word	0x7fefffff
 8007ac4:	0800a7dc 	.word	0x0800a7dc
 8007ac8:	0800a7e0 	.word	0x0800a7e0
 8007acc:	0800a7e8 	.word	0x0800a7e8
 8007ad0:	0800a7e4 	.word	0x0800a7e4
 8007ad4:	0800a7ec 	.word	0x0800a7ec
 8007ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007adc:	429a      	cmp	r2, r3
 8007ade:	bfa8      	it	ge
 8007ae0:	461a      	movge	r2, r3
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	4691      	mov	r9, r2
 8007ae6:	dc37      	bgt.n	8007b58 <_printf_float+0x374>
 8007ae8:	f04f 0b00 	mov.w	fp, #0
 8007aec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af0:	f104 021a 	add.w	r2, r4, #26
 8007af4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007af6:	9305      	str	r3, [sp, #20]
 8007af8:	eba3 0309 	sub.w	r3, r3, r9
 8007afc:	455b      	cmp	r3, fp
 8007afe:	dc33      	bgt.n	8007b68 <_printf_float+0x384>
 8007b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b04:	429a      	cmp	r2, r3
 8007b06:	db3b      	blt.n	8007b80 <_printf_float+0x39c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07da      	lsls	r2, r3, #31
 8007b0c:	d438      	bmi.n	8007b80 <_printf_float+0x39c>
 8007b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	eba2 0901 	sub.w	r9, r2, r1
 8007b1a:	4599      	cmp	r9, r3
 8007b1c:	bfa8      	it	ge
 8007b1e:	4699      	movge	r9, r3
 8007b20:	f1b9 0f00 	cmp.w	r9, #0
 8007b24:	dc35      	bgt.n	8007b92 <_printf_float+0x3ae>
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b2e:	f104 0a1a 	add.w	sl, r4, #26
 8007b32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	eba3 0309 	sub.w	r3, r3, r9
 8007b3c:	4543      	cmp	r3, r8
 8007b3e:	f77f af79 	ble.w	8007a34 <_printf_float+0x250>
 8007b42:	2301      	movs	r3, #1
 8007b44:	4652      	mov	r2, sl
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f aeaa 	beq.w	80078a6 <_printf_float+0xc2>
 8007b52:	f108 0801 	add.w	r8, r8, #1
 8007b56:	e7ec      	b.n	8007b32 <_printf_float+0x34e>
 8007b58:	4613      	mov	r3, r2
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	d1c0      	bne.n	8007ae8 <_printf_float+0x304>
 8007b66:	e69e      	b.n	80078a6 <_printf_float+0xc2>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	9205      	str	r2, [sp, #20]
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f ae97 	beq.w	80078a6 <_printf_float+0xc2>
 8007b78:	9a05      	ldr	r2, [sp, #20]
 8007b7a:	f10b 0b01 	add.w	fp, fp, #1
 8007b7e:	e7b9      	b.n	8007af4 <_printf_float+0x310>
 8007b80:	ee18 3a10 	vmov	r3, s16
 8007b84:	4652      	mov	r2, sl
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1be      	bne.n	8007b0e <_printf_float+0x32a>
 8007b90:	e689      	b.n	80078a6 <_printf_float+0xc2>
 8007b92:	9a05      	ldr	r2, [sp, #20]
 8007b94:	464b      	mov	r3, r9
 8007b96:	4442      	add	r2, r8
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d1c1      	bne.n	8007b26 <_printf_float+0x342>
 8007ba2:	e680      	b.n	80078a6 <_printf_float+0xc2>
 8007ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba6:	2a01      	cmp	r2, #1
 8007ba8:	dc01      	bgt.n	8007bae <_printf_float+0x3ca>
 8007baa:	07db      	lsls	r3, r3, #31
 8007bac:	d538      	bpl.n	8007c20 <_printf_float+0x43c>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	f43f ae74 	beq.w	80078a6 <_printf_float+0xc2>
 8007bbe:	ee18 3a10 	vmov	r3, s16
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f ae6b 	beq.w	80078a6 <_printf_float+0xc2>
 8007bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f7f8 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bdc:	b9d8      	cbnz	r0, 8007c16 <_printf_float+0x432>
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	f108 0201 	add.w	r2, r8, #1
 8007be4:	3b01      	subs	r3, #1
 8007be6:	4631      	mov	r1, r6
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	d10e      	bne.n	8007c0e <_printf_float+0x42a>
 8007bf0:	e659      	b.n	80078a6 <_printf_float+0xc2>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f ae52 	beq.w	80078a6 <_printf_float+0xc2>
 8007c02:	f108 0801 	add.w	r8, r8, #1
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	4543      	cmp	r3, r8
 8007c0c:	dcf1      	bgt.n	8007bf2 <_printf_float+0x40e>
 8007c0e:	464b      	mov	r3, r9
 8007c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c14:	e6dc      	b.n	80079d0 <_printf_float+0x1ec>
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	f104 0a1a 	add.w	sl, r4, #26
 8007c1e:	e7f2      	b.n	8007c06 <_printf_float+0x422>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4642      	mov	r2, r8
 8007c24:	e7df      	b.n	8007be6 <_printf_float+0x402>
 8007c26:	2301      	movs	r3, #1
 8007c28:	464a      	mov	r2, r9
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae38 	beq.w	80078a6 <_printf_float+0xc2>
 8007c36:	f108 0801 	add.w	r8, r8, #1
 8007c3a:	68e3      	ldr	r3, [r4, #12]
 8007c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c3e:	1a5b      	subs	r3, r3, r1
 8007c40:	4543      	cmp	r3, r8
 8007c42:	dcf0      	bgt.n	8007c26 <_printf_float+0x442>
 8007c44:	e6fa      	b.n	8007a3c <_printf_float+0x258>
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	f104 0919 	add.w	r9, r4, #25
 8007c4e:	e7f4      	b.n	8007c3a <_printf_float+0x456>

08007c50 <_printf_common>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4616      	mov	r6, r2
 8007c56:	4699      	mov	r9, r3
 8007c58:	688a      	ldr	r2, [r1, #8]
 8007c5a:	690b      	ldr	r3, [r1, #16]
 8007c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bfb8      	it	lt
 8007c64:	4613      	movlt	r3, r2
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b10a      	cbz	r2, 8007c76 <_printf_common+0x26>
 8007c72:	3301      	adds	r3, #1
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	0699      	lsls	r1, r3, #26
 8007c7a:	bf42      	ittt	mi
 8007c7c:	6833      	ldrmi	r3, [r6, #0]
 8007c7e:	3302      	addmi	r3, #2
 8007c80:	6033      	strmi	r3, [r6, #0]
 8007c82:	6825      	ldr	r5, [r4, #0]
 8007c84:	f015 0506 	ands.w	r5, r5, #6
 8007c88:	d106      	bne.n	8007c98 <_printf_common+0x48>
 8007c8a:	f104 0a19 	add.w	sl, r4, #25
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	6832      	ldr	r2, [r6, #0]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dc26      	bgt.n	8007ce6 <_printf_common+0x96>
 8007c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c9c:	1e13      	subs	r3, r2, #0
 8007c9e:	6822      	ldr	r2, [r4, #0]
 8007ca0:	bf18      	it	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	0692      	lsls	r2, r2, #26
 8007ca6:	d42b      	bmi.n	8007d00 <_printf_common+0xb0>
 8007ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cac:	4649      	mov	r1, r9
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d01e      	beq.n	8007cf4 <_printf_common+0xa4>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	68e5      	ldr	r5, [r4, #12]
 8007cba:	6832      	ldr	r2, [r6, #0]
 8007cbc:	f003 0306 	and.w	r3, r3, #6
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	bf08      	it	eq
 8007cc4:	1aad      	subeq	r5, r5, r2
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	6922      	ldr	r2, [r4, #16]
 8007cca:	bf0c      	ite	eq
 8007ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd0:	2500      	movne	r5, #0
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	bfc4      	itt	gt
 8007cd6:	1a9b      	subgt	r3, r3, r2
 8007cd8:	18ed      	addgt	r5, r5, r3
 8007cda:	2600      	movs	r6, #0
 8007cdc:	341a      	adds	r4, #26
 8007cde:	42b5      	cmp	r5, r6
 8007ce0:	d11a      	bne.n	8007d18 <_printf_common+0xc8>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	e008      	b.n	8007cf8 <_printf_common+0xa8>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4652      	mov	r2, sl
 8007cea:	4649      	mov	r1, r9
 8007cec:	4638      	mov	r0, r7
 8007cee:	47c0      	blx	r8
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d103      	bne.n	8007cfc <_printf_common+0xac>
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e7c6      	b.n	8007c8e <_printf_common+0x3e>
 8007d00:	18e1      	adds	r1, r4, r3
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	2030      	movs	r0, #48	; 0x30
 8007d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d0a:	4422      	add	r2, r4
 8007d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d14:	3302      	adds	r3, #2
 8007d16:	e7c7      	b.n	8007ca8 <_printf_common+0x58>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	3001      	adds	r0, #1
 8007d24:	d0e6      	beq.n	8007cf4 <_printf_common+0xa4>
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7d9      	b.n	8007cde <_printf_common+0x8e>
	...

08007d2c <_printf_i>:
 8007d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	460c      	mov	r4, r1
 8007d32:	4691      	mov	r9, r2
 8007d34:	7e27      	ldrb	r7, [r4, #24]
 8007d36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d38:	2f78      	cmp	r7, #120	; 0x78
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d42:	d807      	bhi.n	8007d54 <_printf_i+0x28>
 8007d44:	2f62      	cmp	r7, #98	; 0x62
 8007d46:	d80a      	bhi.n	8007d5e <_printf_i+0x32>
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	f000 80d8 	beq.w	8007efe <_printf_i+0x1d2>
 8007d4e:	2f58      	cmp	r7, #88	; 0x58
 8007d50:	f000 80a3 	beq.w	8007e9a <_printf_i+0x16e>
 8007d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d5c:	e03a      	b.n	8007dd4 <_printf_i+0xa8>
 8007d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d62:	2b15      	cmp	r3, #21
 8007d64:	d8f6      	bhi.n	8007d54 <_printf_i+0x28>
 8007d66:	a001      	add	r0, pc, #4	; (adr r0, 8007d6c <_printf_i+0x40>)
 8007d68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d6c:	08007dc5 	.word	0x08007dc5
 8007d70:	08007dd9 	.word	0x08007dd9
 8007d74:	08007d55 	.word	0x08007d55
 8007d78:	08007d55 	.word	0x08007d55
 8007d7c:	08007d55 	.word	0x08007d55
 8007d80:	08007d55 	.word	0x08007d55
 8007d84:	08007dd9 	.word	0x08007dd9
 8007d88:	08007d55 	.word	0x08007d55
 8007d8c:	08007d55 	.word	0x08007d55
 8007d90:	08007d55 	.word	0x08007d55
 8007d94:	08007d55 	.word	0x08007d55
 8007d98:	08007ee5 	.word	0x08007ee5
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007ec7 	.word	0x08007ec7
 8007da4:	08007d55 	.word	0x08007d55
 8007da8:	08007d55 	.word	0x08007d55
 8007dac:	08007f07 	.word	0x08007f07
 8007db0:	08007d55 	.word	0x08007d55
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007d55 	.word	0x08007d55
 8007dbc:	08007d55 	.word	0x08007d55
 8007dc0:	08007ecf 	.word	0x08007ecf
 8007dc4:	680b      	ldr	r3, [r1, #0]
 8007dc6:	1d1a      	adds	r2, r3, #4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	600a      	str	r2, [r1, #0]
 8007dcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0a3      	b.n	8007f20 <_printf_i+0x1f4>
 8007dd8:	6825      	ldr	r5, [r4, #0]
 8007dda:	6808      	ldr	r0, [r1, #0]
 8007ddc:	062e      	lsls	r6, r5, #24
 8007dde:	f100 0304 	add.w	r3, r0, #4
 8007de2:	d50a      	bpl.n	8007dfa <_printf_i+0xce>
 8007de4:	6805      	ldr	r5, [r0, #0]
 8007de6:	600b      	str	r3, [r1, #0]
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	da03      	bge.n	8007df4 <_printf_i+0xc8>
 8007dec:	232d      	movs	r3, #45	; 0x2d
 8007dee:	426d      	negs	r5, r5
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df4:	485e      	ldr	r0, [pc, #376]	; (8007f70 <_printf_i+0x244>)
 8007df6:	230a      	movs	r3, #10
 8007df8:	e019      	b.n	8007e2e <_printf_i+0x102>
 8007dfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dfe:	6805      	ldr	r5, [r0, #0]
 8007e00:	600b      	str	r3, [r1, #0]
 8007e02:	bf18      	it	ne
 8007e04:	b22d      	sxthne	r5, r5
 8007e06:	e7ef      	b.n	8007de8 <_printf_i+0xbc>
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	6825      	ldr	r5, [r4, #0]
 8007e0c:	1d18      	adds	r0, r3, #4
 8007e0e:	6008      	str	r0, [r1, #0]
 8007e10:	0628      	lsls	r0, r5, #24
 8007e12:	d501      	bpl.n	8007e18 <_printf_i+0xec>
 8007e14:	681d      	ldr	r5, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <_printf_i+0xf2>
 8007e18:	0669      	lsls	r1, r5, #25
 8007e1a:	d5fb      	bpl.n	8007e14 <_printf_i+0xe8>
 8007e1c:	881d      	ldrh	r5, [r3, #0]
 8007e1e:	4854      	ldr	r0, [pc, #336]	; (8007f70 <_printf_i+0x244>)
 8007e20:	2f6f      	cmp	r7, #111	; 0x6f
 8007e22:	bf0c      	ite	eq
 8007e24:	2308      	moveq	r3, #8
 8007e26:	230a      	movne	r3, #10
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e2e:	6866      	ldr	r6, [r4, #4]
 8007e30:	60a6      	str	r6, [r4, #8]
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	bfa2      	ittt	ge
 8007e36:	6821      	ldrge	r1, [r4, #0]
 8007e38:	f021 0104 	bicge.w	r1, r1, #4
 8007e3c:	6021      	strge	r1, [r4, #0]
 8007e3e:	b90d      	cbnz	r5, 8007e44 <_printf_i+0x118>
 8007e40:	2e00      	cmp	r6, #0
 8007e42:	d04d      	beq.n	8007ee0 <_printf_i+0x1b4>
 8007e44:	4616      	mov	r6, r2
 8007e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e4e:	5dc7      	ldrb	r7, [r0, r7]
 8007e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e54:	462f      	mov	r7, r5
 8007e56:	42bb      	cmp	r3, r7
 8007e58:	460d      	mov	r5, r1
 8007e5a:	d9f4      	bls.n	8007e46 <_printf_i+0x11a>
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d10b      	bne.n	8007e78 <_printf_i+0x14c>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	07df      	lsls	r7, r3, #31
 8007e64:	d508      	bpl.n	8007e78 <_printf_i+0x14c>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	bfde      	ittt	le
 8007e6e:	2330      	movle	r3, #48	; 0x30
 8007e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e78:	1b92      	subs	r2, r2, r6
 8007e7a:	6122      	str	r2, [r4, #16]
 8007e7c:	f8cd a000 	str.w	sl, [sp]
 8007e80:	464b      	mov	r3, r9
 8007e82:	aa03      	add	r2, sp, #12
 8007e84:	4621      	mov	r1, r4
 8007e86:	4640      	mov	r0, r8
 8007e88:	f7ff fee2 	bl	8007c50 <_printf_common>
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d14c      	bne.n	8007f2a <_printf_i+0x1fe>
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	b004      	add	sp, #16
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	4835      	ldr	r0, [pc, #212]	; (8007f70 <_printf_i+0x244>)
 8007e9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	680e      	ldr	r6, [r1, #0]
 8007ea4:	061f      	lsls	r7, r3, #24
 8007ea6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eaa:	600e      	str	r6, [r1, #0]
 8007eac:	d514      	bpl.n	8007ed8 <_printf_i+0x1ac>
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	bf44      	itt	mi
 8007eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007eb6:	6023      	strmi	r3, [r4, #0]
 8007eb8:	b91d      	cbnz	r5, 8007ec2 <_printf_i+0x196>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f023 0320 	bic.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	e7b0      	b.n	8007e28 <_printf_i+0xfc>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	f043 0320 	orr.w	r3, r3, #32
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	2378      	movs	r3, #120	; 0x78
 8007ed0:	4828      	ldr	r0, [pc, #160]	; (8007f74 <_printf_i+0x248>)
 8007ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ed6:	e7e3      	b.n	8007ea0 <_printf_i+0x174>
 8007ed8:	065e      	lsls	r6, r3, #25
 8007eda:	bf48      	it	mi
 8007edc:	b2ad      	uxthmi	r5, r5
 8007ede:	e7e6      	b.n	8007eae <_printf_i+0x182>
 8007ee0:	4616      	mov	r6, r2
 8007ee2:	e7bb      	b.n	8007e5c <_printf_i+0x130>
 8007ee4:	680b      	ldr	r3, [r1, #0]
 8007ee6:	6826      	ldr	r6, [r4, #0]
 8007ee8:	6960      	ldr	r0, [r4, #20]
 8007eea:	1d1d      	adds	r5, r3, #4
 8007eec:	600d      	str	r5, [r1, #0]
 8007eee:	0635      	lsls	r5, r6, #24
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	d501      	bpl.n	8007ef8 <_printf_i+0x1cc>
 8007ef4:	6018      	str	r0, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <_printf_i+0x1d2>
 8007ef8:	0671      	lsls	r1, r6, #25
 8007efa:	d5fb      	bpl.n	8007ef4 <_printf_i+0x1c8>
 8007efc:	8018      	strh	r0, [r3, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	6123      	str	r3, [r4, #16]
 8007f02:	4616      	mov	r6, r2
 8007f04:	e7ba      	b.n	8007e7c <_printf_i+0x150>
 8007f06:	680b      	ldr	r3, [r1, #0]
 8007f08:	1d1a      	adds	r2, r3, #4
 8007f0a:	600a      	str	r2, [r1, #0]
 8007f0c:	681e      	ldr	r6, [r3, #0]
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	2100      	movs	r1, #0
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7f8 f964 	bl	80001e0 <memchr>
 8007f18:	b108      	cbz	r0, 8007f1e <_printf_i+0x1f2>
 8007f1a:	1b80      	subs	r0, r0, r6
 8007f1c:	6060      	str	r0, [r4, #4]
 8007f1e:	6863      	ldr	r3, [r4, #4]
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	2300      	movs	r3, #0
 8007f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f28:	e7a8      	b.n	8007e7c <_printf_i+0x150>
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4640      	mov	r0, r8
 8007f32:	47d0      	blx	sl
 8007f34:	3001      	adds	r0, #1
 8007f36:	d0ab      	beq.n	8007e90 <_printf_i+0x164>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	079b      	lsls	r3, r3, #30
 8007f3c:	d413      	bmi.n	8007f66 <_printf_i+0x23a>
 8007f3e:	68e0      	ldr	r0, [r4, #12]
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	4298      	cmp	r0, r3
 8007f44:	bfb8      	it	lt
 8007f46:	4618      	movlt	r0, r3
 8007f48:	e7a4      	b.n	8007e94 <_printf_i+0x168>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d09b      	beq.n	8007e90 <_printf_i+0x164>
 8007f58:	3501      	adds	r5, #1
 8007f5a:	68e3      	ldr	r3, [r4, #12]
 8007f5c:	9903      	ldr	r1, [sp, #12]
 8007f5e:	1a5b      	subs	r3, r3, r1
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dcf2      	bgt.n	8007f4a <_printf_i+0x21e>
 8007f64:	e7eb      	b.n	8007f3e <_printf_i+0x212>
 8007f66:	2500      	movs	r5, #0
 8007f68:	f104 0619 	add.w	r6, r4, #25
 8007f6c:	e7f5      	b.n	8007f5a <_printf_i+0x22e>
 8007f6e:	bf00      	nop
 8007f70:	0800a7ee 	.word	0x0800a7ee
 8007f74:	0800a7ff 	.word	0x0800a7ff

08007f78 <siprintf>:
 8007f78:	b40e      	push	{r1, r2, r3}
 8007f7a:	b500      	push	{lr}
 8007f7c:	b09c      	sub	sp, #112	; 0x70
 8007f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f80:	9002      	str	r0, [sp, #8]
 8007f82:	9006      	str	r0, [sp, #24]
 8007f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f88:	4809      	ldr	r0, [pc, #36]	; (8007fb0 <siprintf+0x38>)
 8007f8a:	9107      	str	r1, [sp, #28]
 8007f8c:	9104      	str	r1, [sp, #16]
 8007f8e:	4909      	ldr	r1, [pc, #36]	; (8007fb4 <siprintf+0x3c>)
 8007f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f94:	9105      	str	r1, [sp, #20]
 8007f96:	6800      	ldr	r0, [r0, #0]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	a902      	add	r1, sp, #8
 8007f9c:	f001 fb6e 	bl	800967c <_svfiprintf_r>
 8007fa0:	9b02      	ldr	r3, [sp, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	b01c      	add	sp, #112	; 0x70
 8007fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fac:	b003      	add	sp, #12
 8007fae:	4770      	bx	lr
 8007fb0:	20000024 	.word	0x20000024
 8007fb4:	ffff0208 	.word	0xffff0208

08007fb8 <_vsniprintf_r>:
 8007fb8:	b530      	push	{r4, r5, lr}
 8007fba:	1e14      	subs	r4, r2, #0
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b09b      	sub	sp, #108	; 0x6c
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	da05      	bge.n	8007fd0 <_vsniprintf_r+0x18>
 8007fc4:	238b      	movs	r3, #139	; 0x8b
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	b01b      	add	sp, #108	; 0x6c
 8007fce:	bd30      	pop	{r4, r5, pc}
 8007fd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007fd4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007fd8:	bf14      	ite	ne
 8007fda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fde:	4623      	moveq	r3, r4
 8007fe0:	9302      	str	r3, [sp, #8]
 8007fe2:	9305      	str	r3, [sp, #20]
 8007fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fe8:	9100      	str	r1, [sp, #0]
 8007fea:	9104      	str	r1, [sp, #16]
 8007fec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ff4:	4669      	mov	r1, sp
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f001 fb40 	bl	800967c <_svfiprintf_r>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	bfbc      	itt	lt
 8008000:	238b      	movlt	r3, #139	; 0x8b
 8008002:	602b      	strlt	r3, [r5, #0]
 8008004:	2c00      	cmp	r4, #0
 8008006:	d0e1      	beq.n	8007fcc <_vsniprintf_r+0x14>
 8008008:	9b00      	ldr	r3, [sp, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	e7dd      	b.n	8007fcc <_vsniprintf_r+0x14>

08008010 <vsniprintf>:
 8008010:	b507      	push	{r0, r1, r2, lr}
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	4613      	mov	r3, r2
 8008016:	460a      	mov	r2, r1
 8008018:	4601      	mov	r1, r0
 800801a:	4803      	ldr	r0, [pc, #12]	; (8008028 <vsniprintf+0x18>)
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f7ff ffcb 	bl	8007fb8 <_vsniprintf_r>
 8008022:	b003      	add	sp, #12
 8008024:	f85d fb04 	ldr.w	pc, [sp], #4
 8008028:	20000024 	.word	0x20000024

0800802c <quorem>:
 800802c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	6903      	ldr	r3, [r0, #16]
 8008032:	690c      	ldr	r4, [r1, #16]
 8008034:	42a3      	cmp	r3, r4
 8008036:	4607      	mov	r7, r0
 8008038:	f2c0 8081 	blt.w	800813e <quorem+0x112>
 800803c:	3c01      	subs	r4, #1
 800803e:	f101 0814 	add.w	r8, r1, #20
 8008042:	f100 0514 	add.w	r5, r0, #20
 8008046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008054:	3301      	adds	r3, #1
 8008056:	429a      	cmp	r2, r3
 8008058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800805c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008060:	fbb2 f6f3 	udiv	r6, r2, r3
 8008064:	d331      	bcc.n	80080ca <quorem+0x9e>
 8008066:	f04f 0e00 	mov.w	lr, #0
 800806a:	4640      	mov	r0, r8
 800806c:	46ac      	mov	ip, r5
 800806e:	46f2      	mov	sl, lr
 8008070:	f850 2b04 	ldr.w	r2, [r0], #4
 8008074:	b293      	uxth	r3, r2
 8008076:	fb06 e303 	mla	r3, r6, r3, lr
 800807a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800807e:	b29b      	uxth	r3, r3
 8008080:	ebaa 0303 	sub.w	r3, sl, r3
 8008084:	0c12      	lsrs	r2, r2, #16
 8008086:	f8dc a000 	ldr.w	sl, [ip]
 800808a:	fb06 e202 	mla	r2, r6, r2, lr
 800808e:	fa13 f38a 	uxtah	r3, r3, sl
 8008092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008096:	fa1f fa82 	uxth.w	sl, r2
 800809a:	f8dc 2000 	ldr.w	r2, [ip]
 800809e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ac:	4581      	cmp	r9, r0
 80080ae:	f84c 3b04 	str.w	r3, [ip], #4
 80080b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080b6:	d2db      	bcs.n	8008070 <quorem+0x44>
 80080b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80080bc:	b92b      	cbnz	r3, 80080ca <quorem+0x9e>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	3b04      	subs	r3, #4
 80080c2:	429d      	cmp	r5, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	d32e      	bcc.n	8008126 <quorem+0xfa>
 80080c8:	613c      	str	r4, [r7, #16]
 80080ca:	4638      	mov	r0, r7
 80080cc:	f001 f8c0 	bl	8009250 <__mcmp>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	db24      	blt.n	800811e <quorem+0xf2>
 80080d4:	3601      	adds	r6, #1
 80080d6:	4628      	mov	r0, r5
 80080d8:	f04f 0c00 	mov.w	ip, #0
 80080dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80080e0:	f8d0 e000 	ldr.w	lr, [r0]
 80080e4:	b293      	uxth	r3, r2
 80080e6:	ebac 0303 	sub.w	r3, ip, r3
 80080ea:	0c12      	lsrs	r2, r2, #16
 80080ec:	fa13 f38e 	uxtah	r3, r3, lr
 80080f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080fe:	45c1      	cmp	r9, r8
 8008100:	f840 3b04 	str.w	r3, [r0], #4
 8008104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008108:	d2e8      	bcs.n	80080dc <quorem+0xb0>
 800810a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800810e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008112:	b922      	cbnz	r2, 800811e <quorem+0xf2>
 8008114:	3b04      	subs	r3, #4
 8008116:	429d      	cmp	r5, r3
 8008118:	461a      	mov	r2, r3
 800811a:	d30a      	bcc.n	8008132 <quorem+0x106>
 800811c:	613c      	str	r4, [r7, #16]
 800811e:	4630      	mov	r0, r6
 8008120:	b003      	add	sp, #12
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	6812      	ldr	r2, [r2, #0]
 8008128:	3b04      	subs	r3, #4
 800812a:	2a00      	cmp	r2, #0
 800812c:	d1cc      	bne.n	80080c8 <quorem+0x9c>
 800812e:	3c01      	subs	r4, #1
 8008130:	e7c7      	b.n	80080c2 <quorem+0x96>
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	3b04      	subs	r3, #4
 8008136:	2a00      	cmp	r2, #0
 8008138:	d1f0      	bne.n	800811c <quorem+0xf0>
 800813a:	3c01      	subs	r4, #1
 800813c:	e7eb      	b.n	8008116 <quorem+0xea>
 800813e:	2000      	movs	r0, #0
 8008140:	e7ee      	b.n	8008120 <quorem+0xf4>
 8008142:	0000      	movs	r0, r0
 8008144:	0000      	movs	r0, r0
	...

08008148 <_dtoa_r>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	ed2d 8b02 	vpush	{d8}
 8008150:	ec57 6b10 	vmov	r6, r7, d0
 8008154:	b095      	sub	sp, #84	; 0x54
 8008156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800815c:	9105      	str	r1, [sp, #20]
 800815e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008162:	4604      	mov	r4, r0
 8008164:	9209      	str	r2, [sp, #36]	; 0x24
 8008166:	930f      	str	r3, [sp, #60]	; 0x3c
 8008168:	b975      	cbnz	r5, 8008188 <_dtoa_r+0x40>
 800816a:	2010      	movs	r0, #16
 800816c:	f000 fddc 	bl	8008d28 <malloc>
 8008170:	4602      	mov	r2, r0
 8008172:	6260      	str	r0, [r4, #36]	; 0x24
 8008174:	b920      	cbnz	r0, 8008180 <_dtoa_r+0x38>
 8008176:	4bb2      	ldr	r3, [pc, #712]	; (8008440 <_dtoa_r+0x2f8>)
 8008178:	21ea      	movs	r1, #234	; 0xea
 800817a:	48b2      	ldr	r0, [pc, #712]	; (8008444 <_dtoa_r+0x2fc>)
 800817c:	f001 fb8e 	bl	800989c <__assert_func>
 8008180:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008184:	6005      	str	r5, [r0, #0]
 8008186:	60c5      	str	r5, [r0, #12]
 8008188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800818a:	6819      	ldr	r1, [r3, #0]
 800818c:	b151      	cbz	r1, 80081a4 <_dtoa_r+0x5c>
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	604a      	str	r2, [r1, #4]
 8008192:	2301      	movs	r3, #1
 8008194:	4093      	lsls	r3, r2
 8008196:	608b      	str	r3, [r1, #8]
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fe1b 	bl	8008dd4 <_Bfree>
 800819e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	1e3b      	subs	r3, r7, #0
 80081a6:	bfb9      	ittee	lt
 80081a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081ac:	9303      	strlt	r3, [sp, #12]
 80081ae:	2300      	movge	r3, #0
 80081b0:	f8c8 3000 	strge.w	r3, [r8]
 80081b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80081b8:	4ba3      	ldr	r3, [pc, #652]	; (8008448 <_dtoa_r+0x300>)
 80081ba:	bfbc      	itt	lt
 80081bc:	2201      	movlt	r2, #1
 80081be:	f8c8 2000 	strlt.w	r2, [r8]
 80081c2:	ea33 0309 	bics.w	r3, r3, r9
 80081c6:	d11b      	bne.n	8008200 <_dtoa_r+0xb8>
 80081c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081d4:	4333      	orrs	r3, r6
 80081d6:	f000 857a 	beq.w	8008cce <_dtoa_r+0xb86>
 80081da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081dc:	b963      	cbnz	r3, 80081f8 <_dtoa_r+0xb0>
 80081de:	4b9b      	ldr	r3, [pc, #620]	; (800844c <_dtoa_r+0x304>)
 80081e0:	e024      	b.n	800822c <_dtoa_r+0xe4>
 80081e2:	4b9b      	ldr	r3, [pc, #620]	; (8008450 <_dtoa_r+0x308>)
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	9800      	ldr	r0, [sp, #0]
 80081ee:	b015      	add	sp, #84	; 0x54
 80081f0:	ecbd 8b02 	vpop	{d8}
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	4b94      	ldr	r3, [pc, #592]	; (800844c <_dtoa_r+0x304>)
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	3303      	adds	r3, #3
 80081fe:	e7f3      	b.n	80081e8 <_dtoa_r+0xa0>
 8008200:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	ec51 0b17 	vmov	r0, r1, d7
 800820a:	2300      	movs	r3, #0
 800820c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008210:	f7f8 fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008214:	4680      	mov	r8, r0
 8008216:	b158      	cbz	r0, 8008230 <_dtoa_r+0xe8>
 8008218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800821a:	2301      	movs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8551 	beq.w	8008cc8 <_dtoa_r+0xb80>
 8008226:	488b      	ldr	r0, [pc, #556]	; (8008454 <_dtoa_r+0x30c>)
 8008228:	6018      	str	r0, [r3, #0]
 800822a:	1e43      	subs	r3, r0, #1
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	e7dd      	b.n	80081ec <_dtoa_r+0xa4>
 8008230:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008234:	aa12      	add	r2, sp, #72	; 0x48
 8008236:	a913      	add	r1, sp, #76	; 0x4c
 8008238:	4620      	mov	r0, r4
 800823a:	f001 f8ad 	bl	8009398 <__d2b>
 800823e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008242:	4683      	mov	fp, r0
 8008244:	2d00      	cmp	r5, #0
 8008246:	d07c      	beq.n	8008342 <_dtoa_r+0x1fa>
 8008248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800824e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008252:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008256:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800825a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800825e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008262:	4b7d      	ldr	r3, [pc, #500]	; (8008458 <_dtoa_r+0x310>)
 8008264:	2200      	movs	r2, #0
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f80d 	bl	8000288 <__aeabi_dsub>
 800826e:	a36e      	add	r3, pc, #440	; (adr r3, 8008428 <_dtoa_r+0x2e0>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f8 f9c0 	bl	80005f8 <__aeabi_dmul>
 8008278:	a36d      	add	r3, pc, #436	; (adr r3, 8008430 <_dtoa_r+0x2e8>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f7f8 f805 	bl	800028c <__adddf3>
 8008282:	4606      	mov	r6, r0
 8008284:	4628      	mov	r0, r5
 8008286:	460f      	mov	r7, r1
 8008288:	f7f8 f94c 	bl	8000524 <__aeabi_i2d>
 800828c:	a36a      	add	r3, pc, #424	; (adr r3, 8008438 <_dtoa_r+0x2f0>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f8 f9b1 	bl	80005f8 <__aeabi_dmul>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4630      	mov	r0, r6
 800829c:	4639      	mov	r1, r7
 800829e:	f7f7 fff5 	bl	800028c <__adddf3>
 80082a2:	4606      	mov	r6, r0
 80082a4:	460f      	mov	r7, r1
 80082a6:	f7f8 fc57 	bl	8000b58 <__aeabi_d2iz>
 80082aa:	2200      	movs	r2, #0
 80082ac:	4682      	mov	sl, r0
 80082ae:	2300      	movs	r3, #0
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f8 fc12 	bl	8000adc <__aeabi_dcmplt>
 80082b8:	b148      	cbz	r0, 80082ce <_dtoa_r+0x186>
 80082ba:	4650      	mov	r0, sl
 80082bc:	f7f8 f932 	bl	8000524 <__aeabi_i2d>
 80082c0:	4632      	mov	r2, r6
 80082c2:	463b      	mov	r3, r7
 80082c4:	f7f8 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c8:	b908      	cbnz	r0, 80082ce <_dtoa_r+0x186>
 80082ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ce:	f1ba 0f16 	cmp.w	sl, #22
 80082d2:	d854      	bhi.n	800837e <_dtoa_r+0x236>
 80082d4:	4b61      	ldr	r3, [pc, #388]	; (800845c <_dtoa_r+0x314>)
 80082d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082e2:	f7f8 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d04b      	beq.n	8008382 <_dtoa_r+0x23a>
 80082ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ee:	2300      	movs	r3, #0
 80082f0:	930e      	str	r3, [sp, #56]	; 0x38
 80082f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082f4:	1b5d      	subs	r5, r3, r5
 80082f6:	1e6b      	subs	r3, r5, #1
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	bf43      	ittte	mi
 80082fc:	2300      	movmi	r3, #0
 80082fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8008302:	9304      	strmi	r3, [sp, #16]
 8008304:	f04f 0800 	movpl.w	r8, #0
 8008308:	f1ba 0f00 	cmp.w	sl, #0
 800830c:	db3b      	blt.n	8008386 <_dtoa_r+0x23e>
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008314:	4453      	add	r3, sl
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	2300      	movs	r3, #0
 800831a:	9306      	str	r3, [sp, #24]
 800831c:	9b05      	ldr	r3, [sp, #20]
 800831e:	2b09      	cmp	r3, #9
 8008320:	d869      	bhi.n	80083f6 <_dtoa_r+0x2ae>
 8008322:	2b05      	cmp	r3, #5
 8008324:	bfc4      	itt	gt
 8008326:	3b04      	subgt	r3, #4
 8008328:	9305      	strgt	r3, [sp, #20]
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	f1a3 0302 	sub.w	r3, r3, #2
 8008330:	bfcc      	ite	gt
 8008332:	2500      	movgt	r5, #0
 8008334:	2501      	movle	r5, #1
 8008336:	2b03      	cmp	r3, #3
 8008338:	d869      	bhi.n	800840e <_dtoa_r+0x2c6>
 800833a:	e8df f003 	tbb	[pc, r3]
 800833e:	4e2c      	.short	0x4e2c
 8008340:	5a4c      	.short	0x5a4c
 8008342:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008346:	441d      	add	r5, r3
 8008348:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800834c:	2b20      	cmp	r3, #32
 800834e:	bfc1      	itttt	gt
 8008350:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008354:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008358:	fa09 f303 	lslgt.w	r3, r9, r3
 800835c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008360:	bfda      	itte	le
 8008362:	f1c3 0320 	rsble	r3, r3, #32
 8008366:	fa06 f003 	lslle.w	r0, r6, r3
 800836a:	4318      	orrgt	r0, r3
 800836c:	f7f8 f8ca 	bl	8000504 <__aeabi_ui2d>
 8008370:	2301      	movs	r3, #1
 8008372:	4606      	mov	r6, r0
 8008374:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008378:	3d01      	subs	r5, #1
 800837a:	9310      	str	r3, [sp, #64]	; 0x40
 800837c:	e771      	b.n	8008262 <_dtoa_r+0x11a>
 800837e:	2301      	movs	r3, #1
 8008380:	e7b6      	b.n	80082f0 <_dtoa_r+0x1a8>
 8008382:	900e      	str	r0, [sp, #56]	; 0x38
 8008384:	e7b5      	b.n	80082f2 <_dtoa_r+0x1aa>
 8008386:	f1ca 0300 	rsb	r3, sl, #0
 800838a:	9306      	str	r3, [sp, #24]
 800838c:	2300      	movs	r3, #0
 800838e:	eba8 080a 	sub.w	r8, r8, sl
 8008392:	930d      	str	r3, [sp, #52]	; 0x34
 8008394:	e7c2      	b.n	800831c <_dtoa_r+0x1d4>
 8008396:	2300      	movs	r3, #0
 8008398:	9308      	str	r3, [sp, #32]
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	dc39      	bgt.n	8008414 <_dtoa_r+0x2cc>
 80083a0:	f04f 0901 	mov.w	r9, #1
 80083a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80083a8:	464b      	mov	r3, r9
 80083aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80083ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083b0:	2200      	movs	r2, #0
 80083b2:	6042      	str	r2, [r0, #4]
 80083b4:	2204      	movs	r2, #4
 80083b6:	f102 0614 	add.w	r6, r2, #20
 80083ba:	429e      	cmp	r6, r3
 80083bc:	6841      	ldr	r1, [r0, #4]
 80083be:	d92f      	bls.n	8008420 <_dtoa_r+0x2d8>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fcc7 	bl	8008d54 <_Balloc>
 80083c6:	9000      	str	r0, [sp, #0]
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d14b      	bne.n	8008464 <_dtoa_r+0x31c>
 80083cc:	4b24      	ldr	r3, [pc, #144]	; (8008460 <_dtoa_r+0x318>)
 80083ce:	4602      	mov	r2, r0
 80083d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083d4:	e6d1      	b.n	800817a <_dtoa_r+0x32>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e7de      	b.n	8008398 <_dtoa_r+0x250>
 80083da:	2300      	movs	r3, #0
 80083dc:	9308      	str	r3, [sp, #32]
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	eb0a 0903 	add.w	r9, sl, r3
 80083e4:	f109 0301 	add.w	r3, r9, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	bfb8      	it	lt
 80083ee:	2301      	movlt	r3, #1
 80083f0:	e7dd      	b.n	80083ae <_dtoa_r+0x266>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e7f2      	b.n	80083dc <_dtoa_r+0x294>
 80083f6:	2501      	movs	r5, #1
 80083f8:	2300      	movs	r3, #0
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	9508      	str	r5, [sp, #32]
 80083fe:	f04f 39ff 	mov.w	r9, #4294967295
 8008402:	2200      	movs	r2, #0
 8008404:	f8cd 9004 	str.w	r9, [sp, #4]
 8008408:	2312      	movs	r3, #18
 800840a:	9209      	str	r2, [sp, #36]	; 0x24
 800840c:	e7cf      	b.n	80083ae <_dtoa_r+0x266>
 800840e:	2301      	movs	r3, #1
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	e7f4      	b.n	80083fe <_dtoa_r+0x2b6>
 8008414:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008418:	f8cd 9004 	str.w	r9, [sp, #4]
 800841c:	464b      	mov	r3, r9
 800841e:	e7c6      	b.n	80083ae <_dtoa_r+0x266>
 8008420:	3101      	adds	r1, #1
 8008422:	6041      	str	r1, [r0, #4]
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	e7c6      	b.n	80083b6 <_dtoa_r+0x26e>
 8008428:	636f4361 	.word	0x636f4361
 800842c:	3fd287a7 	.word	0x3fd287a7
 8008430:	8b60c8b3 	.word	0x8b60c8b3
 8008434:	3fc68a28 	.word	0x3fc68a28
 8008438:	509f79fb 	.word	0x509f79fb
 800843c:	3fd34413 	.word	0x3fd34413
 8008440:	0800a81d 	.word	0x0800a81d
 8008444:	0800a834 	.word	0x0800a834
 8008448:	7ff00000 	.word	0x7ff00000
 800844c:	0800a819 	.word	0x0800a819
 8008450:	0800a810 	.word	0x0800a810
 8008454:	0800a7ed 	.word	0x0800a7ed
 8008458:	3ff80000 	.word	0x3ff80000
 800845c:	0800a930 	.word	0x0800a930
 8008460:	0800a893 	.word	0x0800a893
 8008464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008466:	9a00      	ldr	r2, [sp, #0]
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	2b0e      	cmp	r3, #14
 800846e:	f200 80ad 	bhi.w	80085cc <_dtoa_r+0x484>
 8008472:	2d00      	cmp	r5, #0
 8008474:	f000 80aa 	beq.w	80085cc <_dtoa_r+0x484>
 8008478:	f1ba 0f00 	cmp.w	sl, #0
 800847c:	dd36      	ble.n	80084ec <_dtoa_r+0x3a4>
 800847e:	4ac3      	ldr	r2, [pc, #780]	; (800878c <_dtoa_r+0x644>)
 8008480:	f00a 030f 	and.w	r3, sl, #15
 8008484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008488:	ed93 7b00 	vldr	d7, [r3]
 800848c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008490:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008494:	eeb0 8a47 	vmov.f32	s16, s14
 8008498:	eef0 8a67 	vmov.f32	s17, s15
 800849c:	d016      	beq.n	80084cc <_dtoa_r+0x384>
 800849e:	4bbc      	ldr	r3, [pc, #752]	; (8008790 <_dtoa_r+0x648>)
 80084a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084a8:	f7f8 f9d0 	bl	800084c <__aeabi_ddiv>
 80084ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b0:	f007 070f 	and.w	r7, r7, #15
 80084b4:	2503      	movs	r5, #3
 80084b6:	4eb6      	ldr	r6, [pc, #728]	; (8008790 <_dtoa_r+0x648>)
 80084b8:	b957      	cbnz	r7, 80084d0 <_dtoa_r+0x388>
 80084ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084be:	ec53 2b18 	vmov	r2, r3, d8
 80084c2:	f7f8 f9c3 	bl	800084c <__aeabi_ddiv>
 80084c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084ca:	e029      	b.n	8008520 <_dtoa_r+0x3d8>
 80084cc:	2502      	movs	r5, #2
 80084ce:	e7f2      	b.n	80084b6 <_dtoa_r+0x36e>
 80084d0:	07f9      	lsls	r1, r7, #31
 80084d2:	d508      	bpl.n	80084e6 <_dtoa_r+0x39e>
 80084d4:	ec51 0b18 	vmov	r0, r1, d8
 80084d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	ec41 0b18 	vmov	d8, r0, r1
 80084e4:	3501      	adds	r5, #1
 80084e6:	107f      	asrs	r7, r7, #1
 80084e8:	3608      	adds	r6, #8
 80084ea:	e7e5      	b.n	80084b8 <_dtoa_r+0x370>
 80084ec:	f000 80a6 	beq.w	800863c <_dtoa_r+0x4f4>
 80084f0:	f1ca 0600 	rsb	r6, sl, #0
 80084f4:	4ba5      	ldr	r3, [pc, #660]	; (800878c <_dtoa_r+0x644>)
 80084f6:	4fa6      	ldr	r7, [pc, #664]	; (8008790 <_dtoa_r+0x648>)
 80084f8:	f006 020f 	and.w	r2, r6, #15
 80084fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008508:	f7f8 f876 	bl	80005f8 <__aeabi_dmul>
 800850c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008510:	1136      	asrs	r6, r6, #4
 8008512:	2300      	movs	r3, #0
 8008514:	2502      	movs	r5, #2
 8008516:	2e00      	cmp	r6, #0
 8008518:	f040 8085 	bne.w	8008626 <_dtoa_r+0x4de>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1d2      	bne.n	80084c6 <_dtoa_r+0x37e>
 8008520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 808c 	beq.w	8008640 <_dtoa_r+0x4f8>
 8008528:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800852c:	4b99      	ldr	r3, [pc, #612]	; (8008794 <_dtoa_r+0x64c>)
 800852e:	2200      	movs	r2, #0
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f8 fad2 	bl	8000adc <__aeabi_dcmplt>
 8008538:	2800      	cmp	r0, #0
 800853a:	f000 8081 	beq.w	8008640 <_dtoa_r+0x4f8>
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d07d      	beq.n	8008640 <_dtoa_r+0x4f8>
 8008544:	f1b9 0f00 	cmp.w	r9, #0
 8008548:	dd3c      	ble.n	80085c4 <_dtoa_r+0x47c>
 800854a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	2200      	movs	r2, #0
 8008552:	4b91      	ldr	r3, [pc, #580]	; (8008798 <_dtoa_r+0x650>)
 8008554:	4630      	mov	r0, r6
 8008556:	4639      	mov	r1, r7
 8008558:	f7f8 f84e 	bl	80005f8 <__aeabi_dmul>
 800855c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008560:	3501      	adds	r5, #1
 8008562:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008566:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800856a:	4628      	mov	r0, r5
 800856c:	f7f7 ffda 	bl	8000524 <__aeabi_i2d>
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	f7f8 f840 	bl	80005f8 <__aeabi_dmul>
 8008578:	4b88      	ldr	r3, [pc, #544]	; (800879c <_dtoa_r+0x654>)
 800857a:	2200      	movs	r2, #0
 800857c:	f7f7 fe86 	bl	800028c <__adddf3>
 8008580:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008588:	9303      	str	r3, [sp, #12]
 800858a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858c:	2b00      	cmp	r3, #0
 800858e:	d15c      	bne.n	800864a <_dtoa_r+0x502>
 8008590:	4b83      	ldr	r3, [pc, #524]	; (80087a0 <_dtoa_r+0x658>)
 8008592:	2200      	movs	r2, #0
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f7f7 fe76 	bl	8000288 <__aeabi_dsub>
 800859c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a0:	4606      	mov	r6, r0
 80085a2:	460f      	mov	r7, r1
 80085a4:	f7f8 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	f040 8296 	bne.w	8008ada <_dtoa_r+0x992>
 80085ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085b2:	4630      	mov	r0, r6
 80085b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f8 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f040 8288 	bne.w	8008ad4 <_dtoa_r+0x98c>
 80085c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f2c0 8158 	blt.w	8008884 <_dtoa_r+0x73c>
 80085d4:	f1ba 0f0e 	cmp.w	sl, #14
 80085d8:	f300 8154 	bgt.w	8008884 <_dtoa_r+0x73c>
 80085dc:	4b6b      	ldr	r3, [pc, #428]	; (800878c <_dtoa_r+0x644>)
 80085de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f280 80e3 	bge.w	80087b4 <_dtoa_r+0x66c>
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f300 80df 	bgt.w	80087b4 <_dtoa_r+0x66c>
 80085f6:	f040 826d 	bne.w	8008ad4 <_dtoa_r+0x98c>
 80085fa:	4b69      	ldr	r3, [pc, #420]	; (80087a0 <_dtoa_r+0x658>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	f7f7 fff9 	bl	80005f8 <__aeabi_dmul>
 8008606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800860a:	f7f8 fa7b 	bl	8000b04 <__aeabi_dcmpge>
 800860e:	9e01      	ldr	r6, [sp, #4]
 8008610:	4637      	mov	r7, r6
 8008612:	2800      	cmp	r0, #0
 8008614:	f040 8243 	bne.w	8008a9e <_dtoa_r+0x956>
 8008618:	9d00      	ldr	r5, [sp, #0]
 800861a:	2331      	movs	r3, #49	; 0x31
 800861c:	f805 3b01 	strb.w	r3, [r5], #1
 8008620:	f10a 0a01 	add.w	sl, sl, #1
 8008624:	e23f      	b.n	8008aa6 <_dtoa_r+0x95e>
 8008626:	07f2      	lsls	r2, r6, #31
 8008628:	d505      	bpl.n	8008636 <_dtoa_r+0x4ee>
 800862a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	3501      	adds	r5, #1
 8008634:	2301      	movs	r3, #1
 8008636:	1076      	asrs	r6, r6, #1
 8008638:	3708      	adds	r7, #8
 800863a:	e76c      	b.n	8008516 <_dtoa_r+0x3ce>
 800863c:	2502      	movs	r5, #2
 800863e:	e76f      	b.n	8008520 <_dtoa_r+0x3d8>
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	f8cd a01c 	str.w	sl, [sp, #28]
 8008646:	930c      	str	r3, [sp, #48]	; 0x30
 8008648:	e78d      	b.n	8008566 <_dtoa_r+0x41e>
 800864a:	9900      	ldr	r1, [sp, #0]
 800864c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800864e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008650:	4b4e      	ldr	r3, [pc, #312]	; (800878c <_dtoa_r+0x644>)
 8008652:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008656:	4401      	add	r1, r0
 8008658:	9102      	str	r1, [sp, #8]
 800865a:	9908      	ldr	r1, [sp, #32]
 800865c:	eeb0 8a47 	vmov.f32	s16, s14
 8008660:	eef0 8a67 	vmov.f32	s17, s15
 8008664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800866c:	2900      	cmp	r1, #0
 800866e:	d045      	beq.n	80086fc <_dtoa_r+0x5b4>
 8008670:	494c      	ldr	r1, [pc, #304]	; (80087a4 <_dtoa_r+0x65c>)
 8008672:	2000      	movs	r0, #0
 8008674:	f7f8 f8ea 	bl	800084c <__aeabi_ddiv>
 8008678:	ec53 2b18 	vmov	r2, r3, d8
 800867c:	f7f7 fe04 	bl	8000288 <__aeabi_dsub>
 8008680:	9d00      	ldr	r5, [sp, #0]
 8008682:	ec41 0b18 	vmov	d8, r0, r1
 8008686:	4639      	mov	r1, r7
 8008688:	4630      	mov	r0, r6
 800868a:	f7f8 fa65 	bl	8000b58 <__aeabi_d2iz>
 800868e:	900c      	str	r0, [sp, #48]	; 0x30
 8008690:	f7f7 ff48 	bl	8000524 <__aeabi_i2d>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f7 fdf4 	bl	8000288 <__aeabi_dsub>
 80086a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a2:	3330      	adds	r3, #48	; 0x30
 80086a4:	f805 3b01 	strb.w	r3, [r5], #1
 80086a8:	ec53 2b18 	vmov	r2, r3, d8
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	f7f8 fa14 	bl	8000adc <__aeabi_dcmplt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d165      	bne.n	8008784 <_dtoa_r+0x63c>
 80086b8:	4632      	mov	r2, r6
 80086ba:	463b      	mov	r3, r7
 80086bc:	4935      	ldr	r1, [pc, #212]	; (8008794 <_dtoa_r+0x64c>)
 80086be:	2000      	movs	r0, #0
 80086c0:	f7f7 fde2 	bl	8000288 <__aeabi_dsub>
 80086c4:	ec53 2b18 	vmov	r2, r3, d8
 80086c8:	f7f8 fa08 	bl	8000adc <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f040 80b9 	bne.w	8008844 <_dtoa_r+0x6fc>
 80086d2:	9b02      	ldr	r3, [sp, #8]
 80086d4:	429d      	cmp	r5, r3
 80086d6:	f43f af75 	beq.w	80085c4 <_dtoa_r+0x47c>
 80086da:	4b2f      	ldr	r3, [pc, #188]	; (8008798 <_dtoa_r+0x650>)
 80086dc:	ec51 0b18 	vmov	r0, r1, d8
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 ff89 	bl	80005f8 <__aeabi_dmul>
 80086e6:	4b2c      	ldr	r3, [pc, #176]	; (8008798 <_dtoa_r+0x650>)
 80086e8:	ec41 0b18 	vmov	d8, r0, r1
 80086ec:	2200      	movs	r2, #0
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f7 ff81 	bl	80005f8 <__aeabi_dmul>
 80086f6:	4606      	mov	r6, r0
 80086f8:	460f      	mov	r7, r1
 80086fa:	e7c4      	b.n	8008686 <_dtoa_r+0x53e>
 80086fc:	ec51 0b17 	vmov	r0, r1, d7
 8008700:	f7f7 ff7a 	bl	80005f8 <__aeabi_dmul>
 8008704:	9b02      	ldr	r3, [sp, #8]
 8008706:	9d00      	ldr	r5, [sp, #0]
 8008708:	930c      	str	r3, [sp, #48]	; 0x30
 800870a:	ec41 0b18 	vmov	d8, r0, r1
 800870e:	4639      	mov	r1, r7
 8008710:	4630      	mov	r0, r6
 8008712:	f7f8 fa21 	bl	8000b58 <__aeabi_d2iz>
 8008716:	9011      	str	r0, [sp, #68]	; 0x44
 8008718:	f7f7 ff04 	bl	8000524 <__aeabi_i2d>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	f7f7 fdb0 	bl	8000288 <__aeabi_dsub>
 8008728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800872a:	3330      	adds	r3, #48	; 0x30
 800872c:	f805 3b01 	strb.w	r3, [r5], #1
 8008730:	9b02      	ldr	r3, [sp, #8]
 8008732:	429d      	cmp	r5, r3
 8008734:	4606      	mov	r6, r0
 8008736:	460f      	mov	r7, r1
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	d134      	bne.n	80087a8 <_dtoa_r+0x660>
 800873e:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <_dtoa_r+0x65c>)
 8008740:	ec51 0b18 	vmov	r0, r1, d8
 8008744:	f7f7 fda2 	bl	800028c <__adddf3>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4630      	mov	r0, r6
 800874e:	4639      	mov	r1, r7
 8008750:	f7f8 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 8008754:	2800      	cmp	r0, #0
 8008756:	d175      	bne.n	8008844 <_dtoa_r+0x6fc>
 8008758:	ec53 2b18 	vmov	r2, r3, d8
 800875c:	4911      	ldr	r1, [pc, #68]	; (80087a4 <_dtoa_r+0x65c>)
 800875e:	2000      	movs	r0, #0
 8008760:	f7f7 fd92 	bl	8000288 <__aeabi_dsub>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f8 f9b6 	bl	8000adc <__aeabi_dcmplt>
 8008770:	2800      	cmp	r0, #0
 8008772:	f43f af27 	beq.w	80085c4 <_dtoa_r+0x47c>
 8008776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008778:	1e6b      	subs	r3, r5, #1
 800877a:	930c      	str	r3, [sp, #48]	; 0x30
 800877c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008780:	2b30      	cmp	r3, #48	; 0x30
 8008782:	d0f8      	beq.n	8008776 <_dtoa_r+0x62e>
 8008784:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008788:	e04a      	b.n	8008820 <_dtoa_r+0x6d8>
 800878a:	bf00      	nop
 800878c:	0800a930 	.word	0x0800a930
 8008790:	0800a908 	.word	0x0800a908
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	40240000 	.word	0x40240000
 800879c:	401c0000 	.word	0x401c0000
 80087a0:	40140000 	.word	0x40140000
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	4baf      	ldr	r3, [pc, #700]	; (8008a68 <_dtoa_r+0x920>)
 80087aa:	f7f7 ff25 	bl	80005f8 <__aeabi_dmul>
 80087ae:	4606      	mov	r6, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	e7ac      	b.n	800870e <_dtoa_r+0x5c6>
 80087b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087b8:	9d00      	ldr	r5, [sp, #0]
 80087ba:	4642      	mov	r2, r8
 80087bc:	464b      	mov	r3, r9
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f8 f843 	bl	800084c <__aeabi_ddiv>
 80087c6:	f7f8 f9c7 	bl	8000b58 <__aeabi_d2iz>
 80087ca:	9002      	str	r0, [sp, #8]
 80087cc:	f7f7 feaa 	bl	8000524 <__aeabi_i2d>
 80087d0:	4642      	mov	r2, r8
 80087d2:	464b      	mov	r3, r9
 80087d4:	f7f7 ff10 	bl	80005f8 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd52 	bl	8000288 <__aeabi_dsub>
 80087e4:	9e02      	ldr	r6, [sp, #8]
 80087e6:	9f01      	ldr	r7, [sp, #4]
 80087e8:	3630      	adds	r6, #48	; 0x30
 80087ea:	f805 6b01 	strb.w	r6, [r5], #1
 80087ee:	9e00      	ldr	r6, [sp, #0]
 80087f0:	1bae      	subs	r6, r5, r6
 80087f2:	42b7      	cmp	r7, r6
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	d137      	bne.n	800886a <_dtoa_r+0x722>
 80087fa:	f7f7 fd47 	bl	800028c <__adddf3>
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	4606      	mov	r6, r0
 8008804:	460f      	mov	r7, r1
 8008806:	f7f8 f987 	bl	8000b18 <__aeabi_dcmpgt>
 800880a:	b9c8      	cbnz	r0, 8008840 <_dtoa_r+0x6f8>
 800880c:	4642      	mov	r2, r8
 800880e:	464b      	mov	r3, r9
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f8 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8008818:	b110      	cbz	r0, 8008820 <_dtoa_r+0x6d8>
 800881a:	9b02      	ldr	r3, [sp, #8]
 800881c:	07d9      	lsls	r1, r3, #31
 800881e:	d40f      	bmi.n	8008840 <_dtoa_r+0x6f8>
 8008820:	4620      	mov	r0, r4
 8008822:	4659      	mov	r1, fp
 8008824:	f000 fad6 	bl	8008dd4 <_Bfree>
 8008828:	2300      	movs	r3, #0
 800882a:	702b      	strb	r3, [r5, #0]
 800882c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800882e:	f10a 0001 	add.w	r0, sl, #1
 8008832:	6018      	str	r0, [r3, #0]
 8008834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008836:	2b00      	cmp	r3, #0
 8008838:	f43f acd8 	beq.w	80081ec <_dtoa_r+0xa4>
 800883c:	601d      	str	r5, [r3, #0]
 800883e:	e4d5      	b.n	80081ec <_dtoa_r+0xa4>
 8008840:	f8cd a01c 	str.w	sl, [sp, #28]
 8008844:	462b      	mov	r3, r5
 8008846:	461d      	mov	r5, r3
 8008848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800884c:	2a39      	cmp	r2, #57	; 0x39
 800884e:	d108      	bne.n	8008862 <_dtoa_r+0x71a>
 8008850:	9a00      	ldr	r2, [sp, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d1f7      	bne.n	8008846 <_dtoa_r+0x6fe>
 8008856:	9a07      	ldr	r2, [sp, #28]
 8008858:	9900      	ldr	r1, [sp, #0]
 800885a:	3201      	adds	r2, #1
 800885c:	9207      	str	r2, [sp, #28]
 800885e:	2230      	movs	r2, #48	; 0x30
 8008860:	700a      	strb	r2, [r1, #0]
 8008862:	781a      	ldrb	r2, [r3, #0]
 8008864:	3201      	adds	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e78c      	b.n	8008784 <_dtoa_r+0x63c>
 800886a:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <_dtoa_r+0x920>)
 800886c:	2200      	movs	r2, #0
 800886e:	f7f7 fec3 	bl	80005f8 <__aeabi_dmul>
 8008872:	2200      	movs	r2, #0
 8008874:	2300      	movs	r3, #0
 8008876:	4606      	mov	r6, r0
 8008878:	460f      	mov	r7, r1
 800887a:	f7f8 f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800887e:	2800      	cmp	r0, #0
 8008880:	d09b      	beq.n	80087ba <_dtoa_r+0x672>
 8008882:	e7cd      	b.n	8008820 <_dtoa_r+0x6d8>
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	2a00      	cmp	r2, #0
 8008888:	f000 80c4 	beq.w	8008a14 <_dtoa_r+0x8cc>
 800888c:	9a05      	ldr	r2, [sp, #20]
 800888e:	2a01      	cmp	r2, #1
 8008890:	f300 80a8 	bgt.w	80089e4 <_dtoa_r+0x89c>
 8008894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008896:	2a00      	cmp	r2, #0
 8008898:	f000 80a0 	beq.w	80089dc <_dtoa_r+0x894>
 800889c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088a0:	9e06      	ldr	r6, [sp, #24]
 80088a2:	4645      	mov	r5, r8
 80088a4:	9a04      	ldr	r2, [sp, #16]
 80088a6:	2101      	movs	r1, #1
 80088a8:	441a      	add	r2, r3
 80088aa:	4620      	mov	r0, r4
 80088ac:	4498      	add	r8, r3
 80088ae:	9204      	str	r2, [sp, #16]
 80088b0:	f000 fb4c 	bl	8008f4c <__i2b>
 80088b4:	4607      	mov	r7, r0
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	dd0b      	ble.n	80088d2 <_dtoa_r+0x78a>
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd08      	ble.n	80088d2 <_dtoa_r+0x78a>
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	9a04      	ldr	r2, [sp, #16]
 80088c4:	bfa8      	it	ge
 80088c6:	462b      	movge	r3, r5
 80088c8:	eba8 0803 	sub.w	r8, r8, r3
 80088cc:	1aed      	subs	r5, r5, r3
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	9b06      	ldr	r3, [sp, #24]
 80088d4:	b1fb      	cbz	r3, 8008916 <_dtoa_r+0x7ce>
 80088d6:	9b08      	ldr	r3, [sp, #32]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 809f 	beq.w	8008a1c <_dtoa_r+0x8d4>
 80088de:	2e00      	cmp	r6, #0
 80088e0:	dd11      	ble.n	8008906 <_dtoa_r+0x7be>
 80088e2:	4639      	mov	r1, r7
 80088e4:	4632      	mov	r2, r6
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fbec 	bl	80090c4 <__pow5mult>
 80088ec:	465a      	mov	r2, fp
 80088ee:	4601      	mov	r1, r0
 80088f0:	4607      	mov	r7, r0
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 fb40 	bl	8008f78 <__multiply>
 80088f8:	4659      	mov	r1, fp
 80088fa:	9007      	str	r0, [sp, #28]
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa69 	bl	8008dd4 <_Bfree>
 8008902:	9b07      	ldr	r3, [sp, #28]
 8008904:	469b      	mov	fp, r3
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	1b9a      	subs	r2, r3, r6
 800890a:	d004      	beq.n	8008916 <_dtoa_r+0x7ce>
 800890c:	4659      	mov	r1, fp
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fbd8 	bl	80090c4 <__pow5mult>
 8008914:	4683      	mov	fp, r0
 8008916:	2101      	movs	r1, #1
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fb17 	bl	8008f4c <__i2b>
 800891e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008920:	2b00      	cmp	r3, #0
 8008922:	4606      	mov	r6, r0
 8008924:	dd7c      	ble.n	8008a20 <_dtoa_r+0x8d8>
 8008926:	461a      	mov	r2, r3
 8008928:	4601      	mov	r1, r0
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fbca 	bl	80090c4 <__pow5mult>
 8008930:	9b05      	ldr	r3, [sp, #20]
 8008932:	2b01      	cmp	r3, #1
 8008934:	4606      	mov	r6, r0
 8008936:	dd76      	ble.n	8008a26 <_dtoa_r+0x8de>
 8008938:	2300      	movs	r3, #0
 800893a:	9306      	str	r3, [sp, #24]
 800893c:	6933      	ldr	r3, [r6, #16]
 800893e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008942:	6918      	ldr	r0, [r3, #16]
 8008944:	f000 fab2 	bl	8008eac <__hi0bits>
 8008948:	f1c0 0020 	rsb	r0, r0, #32
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	4418      	add	r0, r3
 8008950:	f010 001f 	ands.w	r0, r0, #31
 8008954:	f000 8086 	beq.w	8008a64 <_dtoa_r+0x91c>
 8008958:	f1c0 0320 	rsb	r3, r0, #32
 800895c:	2b04      	cmp	r3, #4
 800895e:	dd7f      	ble.n	8008a60 <_dtoa_r+0x918>
 8008960:	f1c0 001c 	rsb	r0, r0, #28
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	4403      	add	r3, r0
 8008968:	4480      	add	r8, r0
 800896a:	4405      	add	r5, r0
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	f1b8 0f00 	cmp.w	r8, #0
 8008972:	dd05      	ble.n	8008980 <_dtoa_r+0x838>
 8008974:	4659      	mov	r1, fp
 8008976:	4642      	mov	r2, r8
 8008978:	4620      	mov	r0, r4
 800897a:	f000 fbfd 	bl	8009178 <__lshift>
 800897e:	4683      	mov	fp, r0
 8008980:	9b04      	ldr	r3, [sp, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	dd05      	ble.n	8008992 <_dtoa_r+0x84a>
 8008986:	4631      	mov	r1, r6
 8008988:	461a      	mov	r2, r3
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fbf4 	bl	8009178 <__lshift>
 8008990:	4606      	mov	r6, r0
 8008992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d069      	beq.n	8008a6c <_dtoa_r+0x924>
 8008998:	4631      	mov	r1, r6
 800899a:	4658      	mov	r0, fp
 800899c:	f000 fc58 	bl	8009250 <__mcmp>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	da63      	bge.n	8008a6c <_dtoa_r+0x924>
 80089a4:	2300      	movs	r3, #0
 80089a6:	4659      	mov	r1, fp
 80089a8:	220a      	movs	r2, #10
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fa34 	bl	8008e18 <__multadd>
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089b6:	4683      	mov	fp, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 818f 	beq.w	8008cdc <_dtoa_r+0xb94>
 80089be:	4639      	mov	r1, r7
 80089c0:	2300      	movs	r3, #0
 80089c2:	220a      	movs	r2, #10
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fa27 	bl	8008e18 <__multadd>
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	4607      	mov	r7, r0
 80089d0:	f300 808e 	bgt.w	8008af0 <_dtoa_r+0x9a8>
 80089d4:	9b05      	ldr	r3, [sp, #20]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	dc50      	bgt.n	8008a7c <_dtoa_r+0x934>
 80089da:	e089      	b.n	8008af0 <_dtoa_r+0x9a8>
 80089dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089e2:	e75d      	b.n	80088a0 <_dtoa_r+0x758>
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	1e5e      	subs	r6, r3, #1
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	42b3      	cmp	r3, r6
 80089ec:	bfbf      	itttt	lt
 80089ee:	9b06      	ldrlt	r3, [sp, #24]
 80089f0:	9606      	strlt	r6, [sp, #24]
 80089f2:	1af2      	sublt	r2, r6, r3
 80089f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80089f6:	bfb6      	itet	lt
 80089f8:	189b      	addlt	r3, r3, r2
 80089fa:	1b9e      	subge	r6, r3, r6
 80089fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	bfb8      	it	lt
 8008a02:	2600      	movlt	r6, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bfb5      	itete	lt
 8008a08:	eba8 0503 	sublt.w	r5, r8, r3
 8008a0c:	9b01      	ldrge	r3, [sp, #4]
 8008a0e:	2300      	movlt	r3, #0
 8008a10:	4645      	movge	r5, r8
 8008a12:	e747      	b.n	80088a4 <_dtoa_r+0x75c>
 8008a14:	9e06      	ldr	r6, [sp, #24]
 8008a16:	9f08      	ldr	r7, [sp, #32]
 8008a18:	4645      	mov	r5, r8
 8008a1a:	e74c      	b.n	80088b6 <_dtoa_r+0x76e>
 8008a1c:	9a06      	ldr	r2, [sp, #24]
 8008a1e:	e775      	b.n	800890c <_dtoa_r+0x7c4>
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	dc18      	bgt.n	8008a58 <_dtoa_r+0x910>
 8008a26:	9b02      	ldr	r3, [sp, #8]
 8008a28:	b9b3      	cbnz	r3, 8008a58 <_dtoa_r+0x910>
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a30:	b9a3      	cbnz	r3, 8008a5c <_dtoa_r+0x914>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a38:	0d1b      	lsrs	r3, r3, #20
 8008a3a:	051b      	lsls	r3, r3, #20
 8008a3c:	b12b      	cbz	r3, 8008a4a <_dtoa_r+0x902>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	f108 0801 	add.w	r8, r8, #1
 8008a48:	2301      	movs	r3, #1
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f47f af74 	bne.w	800893c <_dtoa_r+0x7f4>
 8008a54:	2001      	movs	r0, #1
 8008a56:	e779      	b.n	800894c <_dtoa_r+0x804>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e7f6      	b.n	8008a4a <_dtoa_r+0x902>
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	e7f4      	b.n	8008a4a <_dtoa_r+0x902>
 8008a60:	d085      	beq.n	800896e <_dtoa_r+0x826>
 8008a62:	4618      	mov	r0, r3
 8008a64:	301c      	adds	r0, #28
 8008a66:	e77d      	b.n	8008964 <_dtoa_r+0x81c>
 8008a68:	40240000 	.word	0x40240000
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dc38      	bgt.n	8008ae4 <_dtoa_r+0x99c>
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	dd35      	ble.n	8008ae4 <_dtoa_r+0x99c>
 8008a78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a7c:	f1b9 0f00 	cmp.w	r9, #0
 8008a80:	d10d      	bne.n	8008a9e <_dtoa_r+0x956>
 8008a82:	4631      	mov	r1, r6
 8008a84:	464b      	mov	r3, r9
 8008a86:	2205      	movs	r2, #5
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 f9c5 	bl	8008e18 <__multadd>
 8008a8e:	4601      	mov	r1, r0
 8008a90:	4606      	mov	r6, r0
 8008a92:	4658      	mov	r0, fp
 8008a94:	f000 fbdc 	bl	8009250 <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f73f adbd 	bgt.w	8008618 <_dtoa_r+0x4d0>
 8008a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa0:	9d00      	ldr	r5, [sp, #0]
 8008aa2:	ea6f 0a03 	mvn.w	sl, r3
 8008aa6:	f04f 0800 	mov.w	r8, #0
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 f991 	bl	8008dd4 <_Bfree>
 8008ab2:	2f00      	cmp	r7, #0
 8008ab4:	f43f aeb4 	beq.w	8008820 <_dtoa_r+0x6d8>
 8008ab8:	f1b8 0f00 	cmp.w	r8, #0
 8008abc:	d005      	beq.n	8008aca <_dtoa_r+0x982>
 8008abe:	45b8      	cmp	r8, r7
 8008ac0:	d003      	beq.n	8008aca <_dtoa_r+0x982>
 8008ac2:	4641      	mov	r1, r8
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 f985 	bl	8008dd4 <_Bfree>
 8008aca:	4639      	mov	r1, r7
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f981 	bl	8008dd4 <_Bfree>
 8008ad2:	e6a5      	b.n	8008820 <_dtoa_r+0x6d8>
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	4637      	mov	r7, r6
 8008ad8:	e7e1      	b.n	8008a9e <_dtoa_r+0x956>
 8008ada:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008adc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ae0:	4637      	mov	r7, r6
 8008ae2:	e599      	b.n	8008618 <_dtoa_r+0x4d0>
 8008ae4:	9b08      	ldr	r3, [sp, #32]
 8008ae6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80fd 	beq.w	8008cea <_dtoa_r+0xba2>
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	dd05      	ble.n	8008b00 <_dtoa_r+0x9b8>
 8008af4:	4639      	mov	r1, r7
 8008af6:	462a      	mov	r2, r5
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fb3d 	bl	8009178 <__lshift>
 8008afe:	4607      	mov	r7, r0
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d05c      	beq.n	8008bc0 <_dtoa_r+0xa78>
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f923 	bl	8008d54 <_Balloc>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	b928      	cbnz	r0, 8008b1e <_dtoa_r+0x9d6>
 8008b12:	4b80      	ldr	r3, [pc, #512]	; (8008d14 <_dtoa_r+0xbcc>)
 8008b14:	4602      	mov	r2, r0
 8008b16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b1a:	f7ff bb2e 	b.w	800817a <_dtoa_r+0x32>
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	3202      	adds	r2, #2
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	f107 010c 	add.w	r1, r7, #12
 8008b28:	300c      	adds	r0, #12
 8008b2a:	f000 f905 	bl	8008d38 <memcpy>
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4629      	mov	r1, r5
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 fb20 	bl	8009178 <__lshift>
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	9b00      	ldr	r3, [sp, #0]
 8008b40:	444b      	add	r3, r9
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	9b02      	ldr	r3, [sp, #8]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	46b8      	mov	r8, r7
 8008b4c:	9306      	str	r3, [sp, #24]
 8008b4e:	4607      	mov	r7, r0
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	4631      	mov	r1, r6
 8008b54:	3b01      	subs	r3, #1
 8008b56:	4658      	mov	r0, fp
 8008b58:	9302      	str	r3, [sp, #8]
 8008b5a:	f7ff fa67 	bl	800802c <quorem>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	3330      	adds	r3, #48	; 0x30
 8008b62:	9004      	str	r0, [sp, #16]
 8008b64:	4641      	mov	r1, r8
 8008b66:	4658      	mov	r0, fp
 8008b68:	9308      	str	r3, [sp, #32]
 8008b6a:	f000 fb71 	bl	8009250 <__mcmp>
 8008b6e:	463a      	mov	r2, r7
 8008b70:	4681      	mov	r9, r0
 8008b72:	4631      	mov	r1, r6
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fb87 	bl	8009288 <__mdiff>
 8008b7a:	68c2      	ldr	r2, [r0, #12]
 8008b7c:	9b08      	ldr	r3, [sp, #32]
 8008b7e:	4605      	mov	r5, r0
 8008b80:	bb02      	cbnz	r2, 8008bc4 <_dtoa_r+0xa7c>
 8008b82:	4601      	mov	r1, r0
 8008b84:	4658      	mov	r0, fp
 8008b86:	f000 fb63 	bl	8009250 <__mcmp>
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4620      	mov	r0, r4
 8008b92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008b96:	f000 f91d 	bl	8008dd4 <_Bfree>
 8008b9a:	9b05      	ldr	r3, [sp, #20]
 8008b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b9e:	9d01      	ldr	r5, [sp, #4]
 8008ba0:	ea43 0102 	orr.w	r1, r3, r2
 8008ba4:	9b06      	ldr	r3, [sp, #24]
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	9b08      	ldr	r3, [sp, #32]
 8008baa:	d10d      	bne.n	8008bc8 <_dtoa_r+0xa80>
 8008bac:	2b39      	cmp	r3, #57	; 0x39
 8008bae:	d029      	beq.n	8008c04 <_dtoa_r+0xabc>
 8008bb0:	f1b9 0f00 	cmp.w	r9, #0
 8008bb4:	dd01      	ble.n	8008bba <_dtoa_r+0xa72>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	3331      	adds	r3, #49	; 0x31
 8008bba:	9a02      	ldr	r2, [sp, #8]
 8008bbc:	7013      	strb	r3, [r2, #0]
 8008bbe:	e774      	b.n	8008aaa <_dtoa_r+0x962>
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	e7b9      	b.n	8008b38 <_dtoa_r+0x9f0>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	e7e2      	b.n	8008b8e <_dtoa_r+0xa46>
 8008bc8:	f1b9 0f00 	cmp.w	r9, #0
 8008bcc:	db06      	blt.n	8008bdc <_dtoa_r+0xa94>
 8008bce:	9905      	ldr	r1, [sp, #20]
 8008bd0:	ea41 0909 	orr.w	r9, r1, r9
 8008bd4:	9906      	ldr	r1, [sp, #24]
 8008bd6:	ea59 0101 	orrs.w	r1, r9, r1
 8008bda:	d120      	bne.n	8008c1e <_dtoa_r+0xad6>
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	ddec      	ble.n	8008bba <_dtoa_r+0xa72>
 8008be0:	4659      	mov	r1, fp
 8008be2:	2201      	movs	r2, #1
 8008be4:	4620      	mov	r0, r4
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	f000 fac6 	bl	8009178 <__lshift>
 8008bec:	4631      	mov	r1, r6
 8008bee:	4683      	mov	fp, r0
 8008bf0:	f000 fb2e 	bl	8009250 <__mcmp>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	dc02      	bgt.n	8008c00 <_dtoa_r+0xab8>
 8008bfa:	d1de      	bne.n	8008bba <_dtoa_r+0xa72>
 8008bfc:	07da      	lsls	r2, r3, #31
 8008bfe:	d5dc      	bpl.n	8008bba <_dtoa_r+0xa72>
 8008c00:	2b39      	cmp	r3, #57	; 0x39
 8008c02:	d1d8      	bne.n	8008bb6 <_dtoa_r+0xa6e>
 8008c04:	9a02      	ldr	r2, [sp, #8]
 8008c06:	2339      	movs	r3, #57	; 0x39
 8008c08:	7013      	strb	r3, [r2, #0]
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	461d      	mov	r5, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c14:	2a39      	cmp	r2, #57	; 0x39
 8008c16:	d050      	beq.n	8008cba <_dtoa_r+0xb72>
 8008c18:	3201      	adds	r2, #1
 8008c1a:	701a      	strb	r2, [r3, #0]
 8008c1c:	e745      	b.n	8008aaa <_dtoa_r+0x962>
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	dd03      	ble.n	8008c2a <_dtoa_r+0xae2>
 8008c22:	2b39      	cmp	r3, #57	; 0x39
 8008c24:	d0ee      	beq.n	8008c04 <_dtoa_r+0xabc>
 8008c26:	3301      	adds	r3, #1
 8008c28:	e7c7      	b.n	8008bba <_dtoa_r+0xa72>
 8008c2a:	9a01      	ldr	r2, [sp, #4]
 8008c2c:	9907      	ldr	r1, [sp, #28]
 8008c2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c32:	428a      	cmp	r2, r1
 8008c34:	d02a      	beq.n	8008c8c <_dtoa_r+0xb44>
 8008c36:	4659      	mov	r1, fp
 8008c38:	2300      	movs	r3, #0
 8008c3a:	220a      	movs	r2, #10
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 f8eb 	bl	8008e18 <__multadd>
 8008c42:	45b8      	cmp	r8, r7
 8008c44:	4683      	mov	fp, r0
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	f04f 020a 	mov.w	r2, #10
 8008c4e:	4641      	mov	r1, r8
 8008c50:	4620      	mov	r0, r4
 8008c52:	d107      	bne.n	8008c64 <_dtoa_r+0xb1c>
 8008c54:	f000 f8e0 	bl	8008e18 <__multadd>
 8008c58:	4680      	mov	r8, r0
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	e775      	b.n	8008b50 <_dtoa_r+0xa08>
 8008c64:	f000 f8d8 	bl	8008e18 <__multadd>
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	220a      	movs	r2, #10
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f8d1 	bl	8008e18 <__multadd>
 8008c76:	4607      	mov	r7, r0
 8008c78:	e7f0      	b.n	8008c5c <_dtoa_r+0xb14>
 8008c7a:	f1b9 0f00 	cmp.w	r9, #0
 8008c7e:	9a00      	ldr	r2, [sp, #0]
 8008c80:	bfcc      	ite	gt
 8008c82:	464d      	movgt	r5, r9
 8008c84:	2501      	movle	r5, #1
 8008c86:	4415      	add	r5, r2
 8008c88:	f04f 0800 	mov.w	r8, #0
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4620      	mov	r0, r4
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	f000 fa70 	bl	8009178 <__lshift>
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4683      	mov	fp, r0
 8008c9c:	f000 fad8 	bl	8009250 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dcb2      	bgt.n	8008c0a <_dtoa_r+0xac2>
 8008ca4:	d102      	bne.n	8008cac <_dtoa_r+0xb64>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	07db      	lsls	r3, r3, #31
 8008caa:	d4ae      	bmi.n	8008c0a <_dtoa_r+0xac2>
 8008cac:	462b      	mov	r3, r5
 8008cae:	461d      	mov	r5, r3
 8008cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb4:	2a30      	cmp	r2, #48	; 0x30
 8008cb6:	d0fa      	beq.n	8008cae <_dtoa_r+0xb66>
 8008cb8:	e6f7      	b.n	8008aaa <_dtoa_r+0x962>
 8008cba:	9a00      	ldr	r2, [sp, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d1a5      	bne.n	8008c0c <_dtoa_r+0xac4>
 8008cc0:	f10a 0a01 	add.w	sl, sl, #1
 8008cc4:	2331      	movs	r3, #49	; 0x31
 8008cc6:	e779      	b.n	8008bbc <_dtoa_r+0xa74>
 8008cc8:	4b13      	ldr	r3, [pc, #76]	; (8008d18 <_dtoa_r+0xbd0>)
 8008cca:	f7ff baaf 	b.w	800822c <_dtoa_r+0xe4>
 8008cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f47f aa86 	bne.w	80081e2 <_dtoa_r+0x9a>
 8008cd6:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <_dtoa_r+0xbd4>)
 8008cd8:	f7ff baa8 	b.w	800822c <_dtoa_r+0xe4>
 8008cdc:	f1b9 0f00 	cmp.w	r9, #0
 8008ce0:	dc03      	bgt.n	8008cea <_dtoa_r+0xba2>
 8008ce2:	9b05      	ldr	r3, [sp, #20]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f73f aec9 	bgt.w	8008a7c <_dtoa_r+0x934>
 8008cea:	9d00      	ldr	r5, [sp, #0]
 8008cec:	4631      	mov	r1, r6
 8008cee:	4658      	mov	r0, fp
 8008cf0:	f7ff f99c 	bl	800802c <quorem>
 8008cf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8008cfc:	9a00      	ldr	r2, [sp, #0]
 8008cfe:	1aaa      	subs	r2, r5, r2
 8008d00:	4591      	cmp	r9, r2
 8008d02:	ddba      	ble.n	8008c7a <_dtoa_r+0xb32>
 8008d04:	4659      	mov	r1, fp
 8008d06:	2300      	movs	r3, #0
 8008d08:	220a      	movs	r2, #10
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 f884 	bl	8008e18 <__multadd>
 8008d10:	4683      	mov	fp, r0
 8008d12:	e7eb      	b.n	8008cec <_dtoa_r+0xba4>
 8008d14:	0800a893 	.word	0x0800a893
 8008d18:	0800a7ec 	.word	0x0800a7ec
 8008d1c:	0800a810 	.word	0x0800a810

08008d20 <_localeconv_r>:
 8008d20:	4800      	ldr	r0, [pc, #0]	; (8008d24 <_localeconv_r+0x4>)
 8008d22:	4770      	bx	lr
 8008d24:	20000178 	.word	0x20000178

08008d28 <malloc>:
 8008d28:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <malloc+0xc>)
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	f000 bbef 	b.w	8009510 <_malloc_r>
 8008d32:	bf00      	nop
 8008d34:	20000024 	.word	0x20000024

08008d38 <memcpy>:
 8008d38:	440a      	add	r2, r1
 8008d3a:	4291      	cmp	r1, r2
 8008d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d40:	d100      	bne.n	8008d44 <memcpy+0xc>
 8008d42:	4770      	bx	lr
 8008d44:	b510      	push	{r4, lr}
 8008d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	d1f9      	bne.n	8008d46 <memcpy+0xe>
 8008d52:	bd10      	pop	{r4, pc}

08008d54 <_Balloc>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d58:	4604      	mov	r4, r0
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	b976      	cbnz	r6, 8008d7c <_Balloc+0x28>
 8008d5e:	2010      	movs	r0, #16
 8008d60:	f7ff ffe2 	bl	8008d28 <malloc>
 8008d64:	4602      	mov	r2, r0
 8008d66:	6260      	str	r0, [r4, #36]	; 0x24
 8008d68:	b920      	cbnz	r0, 8008d74 <_Balloc+0x20>
 8008d6a:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <_Balloc+0x78>)
 8008d6c:	4818      	ldr	r0, [pc, #96]	; (8008dd0 <_Balloc+0x7c>)
 8008d6e:	2166      	movs	r1, #102	; 0x66
 8008d70:	f000 fd94 	bl	800989c <__assert_func>
 8008d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d78:	6006      	str	r6, [r0, #0]
 8008d7a:	60c6      	str	r6, [r0, #12]
 8008d7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d7e:	68f3      	ldr	r3, [r6, #12]
 8008d80:	b183      	cbz	r3, 8008da4 <_Balloc+0x50>
 8008d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d8a:	b9b8      	cbnz	r0, 8008dbc <_Balloc+0x68>
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d92:	1d72      	adds	r2, r6, #5
 8008d94:	0092      	lsls	r2, r2, #2
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 fb5a 	bl	8009450 <_calloc_r>
 8008d9c:	b160      	cbz	r0, 8008db8 <_Balloc+0x64>
 8008d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008da2:	e00e      	b.n	8008dc2 <_Balloc+0x6e>
 8008da4:	2221      	movs	r2, #33	; 0x21
 8008da6:	2104      	movs	r1, #4
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fb51 	bl	8009450 <_calloc_r>
 8008dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db0:	60f0      	str	r0, [r6, #12]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e4      	bne.n	8008d82 <_Balloc+0x2e>
 8008db8:	2000      	movs	r0, #0
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	6802      	ldr	r2, [r0, #0]
 8008dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dc8:	e7f7      	b.n	8008dba <_Balloc+0x66>
 8008dca:	bf00      	nop
 8008dcc:	0800a81d 	.word	0x0800a81d
 8008dd0:	0800a8a4 	.word	0x0800a8a4

08008dd4 <_Bfree>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dd8:	4605      	mov	r5, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b976      	cbnz	r6, 8008dfc <_Bfree+0x28>
 8008dde:	2010      	movs	r0, #16
 8008de0:	f7ff ffa2 	bl	8008d28 <malloc>
 8008de4:	4602      	mov	r2, r0
 8008de6:	6268      	str	r0, [r5, #36]	; 0x24
 8008de8:	b920      	cbnz	r0, 8008df4 <_Bfree+0x20>
 8008dea:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <_Bfree+0x3c>)
 8008dec:	4809      	ldr	r0, [pc, #36]	; (8008e14 <_Bfree+0x40>)
 8008dee:	218a      	movs	r1, #138	; 0x8a
 8008df0:	f000 fd54 	bl	800989c <__assert_func>
 8008df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df8:	6006      	str	r6, [r0, #0]
 8008dfa:	60c6      	str	r6, [r0, #12]
 8008dfc:	b13c      	cbz	r4, 8008e0e <_Bfree+0x3a>
 8008dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e00:	6862      	ldr	r2, [r4, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e08:	6021      	str	r1, [r4, #0]
 8008e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	0800a81d 	.word	0x0800a81d
 8008e14:	0800a8a4 	.word	0x0800a8a4

08008e18 <__multadd>:
 8008e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	690e      	ldr	r6, [r1, #16]
 8008e1e:	4607      	mov	r7, r0
 8008e20:	4698      	mov	r8, r3
 8008e22:	460c      	mov	r4, r1
 8008e24:	f101 0014 	add.w	r0, r1, #20
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6805      	ldr	r5, [r0, #0]
 8008e2c:	b2a9      	uxth	r1, r5
 8008e2e:	fb02 8101 	mla	r1, r2, r1, r8
 8008e32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e36:	0c2d      	lsrs	r5, r5, #16
 8008e38:	fb02 c505 	mla	r5, r2, r5, ip
 8008e3c:	b289      	uxth	r1, r1
 8008e3e:	3301      	adds	r3, #1
 8008e40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e44:	429e      	cmp	r6, r3
 8008e46:	f840 1b04 	str.w	r1, [r0], #4
 8008e4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e4e:	dcec      	bgt.n	8008e2a <__multadd+0x12>
 8008e50:	f1b8 0f00 	cmp.w	r8, #0
 8008e54:	d022      	beq.n	8008e9c <__multadd+0x84>
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	42b3      	cmp	r3, r6
 8008e5a:	dc19      	bgt.n	8008e90 <__multadd+0x78>
 8008e5c:	6861      	ldr	r1, [r4, #4]
 8008e5e:	4638      	mov	r0, r7
 8008e60:	3101      	adds	r1, #1
 8008e62:	f7ff ff77 	bl	8008d54 <_Balloc>
 8008e66:	4605      	mov	r5, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <__multadd+0x5e>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <__multadd+0x8c>)
 8008e6e:	480e      	ldr	r0, [pc, #56]	; (8008ea8 <__multadd+0x90>)
 8008e70:	21b5      	movs	r1, #181	; 0xb5
 8008e72:	f000 fd13 	bl	800989c <__assert_func>
 8008e76:	6922      	ldr	r2, [r4, #16]
 8008e78:	3202      	adds	r2, #2
 8008e7a:	f104 010c 	add.w	r1, r4, #12
 8008e7e:	0092      	lsls	r2, r2, #2
 8008e80:	300c      	adds	r0, #12
 8008e82:	f7ff ff59 	bl	8008d38 <memcpy>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff ffa3 	bl	8008dd4 <_Bfree>
 8008e8e:	462c      	mov	r4, r5
 8008e90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e94:	3601      	adds	r6, #1
 8008e96:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e9a:	6126      	str	r6, [r4, #16]
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea2:	bf00      	nop
 8008ea4:	0800a893 	.word	0x0800a893
 8008ea8:	0800a8a4 	.word	0x0800a8a4

08008eac <__hi0bits>:
 8008eac:	0c03      	lsrs	r3, r0, #16
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	b9d3      	cbnz	r3, 8008ee8 <__hi0bits+0x3c>
 8008eb2:	0400      	lsls	r0, r0, #16
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008eba:	bf04      	itt	eq
 8008ebc:	0200      	lsleq	r0, r0, #8
 8008ebe:	3308      	addeq	r3, #8
 8008ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ec4:	bf04      	itt	eq
 8008ec6:	0100      	lsleq	r0, r0, #4
 8008ec8:	3304      	addeq	r3, #4
 8008eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ece:	bf04      	itt	eq
 8008ed0:	0080      	lsleq	r0, r0, #2
 8008ed2:	3302      	addeq	r3, #2
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	db05      	blt.n	8008ee4 <__hi0bits+0x38>
 8008ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008edc:	f103 0301 	add.w	r3, r3, #1
 8008ee0:	bf08      	it	eq
 8008ee2:	2320      	moveq	r3, #32
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	4770      	bx	lr
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e7e4      	b.n	8008eb6 <__hi0bits+0xa>

08008eec <__lo0bits>:
 8008eec:	6803      	ldr	r3, [r0, #0]
 8008eee:	f013 0207 	ands.w	r2, r3, #7
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	d00b      	beq.n	8008f0e <__lo0bits+0x22>
 8008ef6:	07da      	lsls	r2, r3, #31
 8008ef8:	d424      	bmi.n	8008f44 <__lo0bits+0x58>
 8008efa:	0798      	lsls	r0, r3, #30
 8008efc:	bf49      	itett	mi
 8008efe:	085b      	lsrmi	r3, r3, #1
 8008f00:	089b      	lsrpl	r3, r3, #2
 8008f02:	2001      	movmi	r0, #1
 8008f04:	600b      	strmi	r3, [r1, #0]
 8008f06:	bf5c      	itt	pl
 8008f08:	600b      	strpl	r3, [r1, #0]
 8008f0a:	2002      	movpl	r0, #2
 8008f0c:	4770      	bx	lr
 8008f0e:	b298      	uxth	r0, r3
 8008f10:	b9b0      	cbnz	r0, 8008f40 <__lo0bits+0x54>
 8008f12:	0c1b      	lsrs	r3, r3, #16
 8008f14:	2010      	movs	r0, #16
 8008f16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f1a:	bf04      	itt	eq
 8008f1c:	0a1b      	lsreq	r3, r3, #8
 8008f1e:	3008      	addeq	r0, #8
 8008f20:	071a      	lsls	r2, r3, #28
 8008f22:	bf04      	itt	eq
 8008f24:	091b      	lsreq	r3, r3, #4
 8008f26:	3004      	addeq	r0, #4
 8008f28:	079a      	lsls	r2, r3, #30
 8008f2a:	bf04      	itt	eq
 8008f2c:	089b      	lsreq	r3, r3, #2
 8008f2e:	3002      	addeq	r0, #2
 8008f30:	07da      	lsls	r2, r3, #31
 8008f32:	d403      	bmi.n	8008f3c <__lo0bits+0x50>
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	f100 0001 	add.w	r0, r0, #1
 8008f3a:	d005      	beq.n	8008f48 <__lo0bits+0x5c>
 8008f3c:	600b      	str	r3, [r1, #0]
 8008f3e:	4770      	bx	lr
 8008f40:	4610      	mov	r0, r2
 8008f42:	e7e8      	b.n	8008f16 <__lo0bits+0x2a>
 8008f44:	2000      	movs	r0, #0
 8008f46:	4770      	bx	lr
 8008f48:	2020      	movs	r0, #32
 8008f4a:	4770      	bx	lr

08008f4c <__i2b>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	460c      	mov	r4, r1
 8008f50:	2101      	movs	r1, #1
 8008f52:	f7ff feff 	bl	8008d54 <_Balloc>
 8008f56:	4602      	mov	r2, r0
 8008f58:	b928      	cbnz	r0, 8008f66 <__i2b+0x1a>
 8008f5a:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <__i2b+0x24>)
 8008f5c:	4805      	ldr	r0, [pc, #20]	; (8008f74 <__i2b+0x28>)
 8008f5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f62:	f000 fc9b 	bl	800989c <__assert_func>
 8008f66:	2301      	movs	r3, #1
 8008f68:	6144      	str	r4, [r0, #20]
 8008f6a:	6103      	str	r3, [r0, #16]
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	bf00      	nop
 8008f70:	0800a893 	.word	0x0800a893
 8008f74:	0800a8a4 	.word	0x0800a8a4

08008f78 <__multiply>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	690a      	ldr	r2, [r1, #16]
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	bfb8      	it	lt
 8008f86:	460b      	movlt	r3, r1
 8008f88:	460d      	mov	r5, r1
 8008f8a:	bfbc      	itt	lt
 8008f8c:	4625      	movlt	r5, r4
 8008f8e:	461c      	movlt	r4, r3
 8008f90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f98:	68ab      	ldr	r3, [r5, #8]
 8008f9a:	6869      	ldr	r1, [r5, #4]
 8008f9c:	eb0a 0709 	add.w	r7, sl, r9
 8008fa0:	42bb      	cmp	r3, r7
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	bfb8      	it	lt
 8008fa6:	3101      	addlt	r1, #1
 8008fa8:	f7ff fed4 	bl	8008d54 <_Balloc>
 8008fac:	b930      	cbnz	r0, 8008fbc <__multiply+0x44>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	4b42      	ldr	r3, [pc, #264]	; (80090bc <__multiply+0x144>)
 8008fb2:	4843      	ldr	r0, [pc, #268]	; (80090c0 <__multiply+0x148>)
 8008fb4:	f240 115d 	movw	r1, #349	; 0x15d
 8008fb8:	f000 fc70 	bl	800989c <__assert_func>
 8008fbc:	f100 0614 	add.w	r6, r0, #20
 8008fc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fc4:	4633      	mov	r3, r6
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	4543      	cmp	r3, r8
 8008fca:	d31e      	bcc.n	800900a <__multiply+0x92>
 8008fcc:	f105 0c14 	add.w	ip, r5, #20
 8008fd0:	f104 0314 	add.w	r3, r4, #20
 8008fd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fdc:	9202      	str	r2, [sp, #8]
 8008fde:	ebac 0205 	sub.w	r2, ip, r5
 8008fe2:	3a15      	subs	r2, #21
 8008fe4:	f022 0203 	bic.w	r2, r2, #3
 8008fe8:	3204      	adds	r2, #4
 8008fea:	f105 0115 	add.w	r1, r5, #21
 8008fee:	458c      	cmp	ip, r1
 8008ff0:	bf38      	it	cc
 8008ff2:	2204      	movcc	r2, #4
 8008ff4:	9201      	str	r2, [sp, #4]
 8008ff6:	9a02      	ldr	r2, [sp, #8]
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d808      	bhi.n	8009010 <__multiply+0x98>
 8008ffe:	2f00      	cmp	r7, #0
 8009000:	dc55      	bgt.n	80090ae <__multiply+0x136>
 8009002:	6107      	str	r7, [r0, #16]
 8009004:	b005      	add	sp, #20
 8009006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900a:	f843 2b04 	str.w	r2, [r3], #4
 800900e:	e7db      	b.n	8008fc8 <__multiply+0x50>
 8009010:	f8b3 a000 	ldrh.w	sl, [r3]
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	d020      	beq.n	800905c <__multiply+0xe4>
 800901a:	f105 0e14 	add.w	lr, r5, #20
 800901e:	46b1      	mov	r9, r6
 8009020:	2200      	movs	r2, #0
 8009022:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009026:	f8d9 b000 	ldr.w	fp, [r9]
 800902a:	b2a1      	uxth	r1, r4
 800902c:	fa1f fb8b 	uxth.w	fp, fp
 8009030:	fb0a b101 	mla	r1, sl, r1, fp
 8009034:	4411      	add	r1, r2
 8009036:	f8d9 2000 	ldr.w	r2, [r9]
 800903a:	0c24      	lsrs	r4, r4, #16
 800903c:	0c12      	lsrs	r2, r2, #16
 800903e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009042:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009046:	b289      	uxth	r1, r1
 8009048:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800904c:	45f4      	cmp	ip, lr
 800904e:	f849 1b04 	str.w	r1, [r9], #4
 8009052:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009056:	d8e4      	bhi.n	8009022 <__multiply+0xaa>
 8009058:	9901      	ldr	r1, [sp, #4]
 800905a:	5072      	str	r2, [r6, r1]
 800905c:	9a03      	ldr	r2, [sp, #12]
 800905e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009062:	3304      	adds	r3, #4
 8009064:	f1b9 0f00 	cmp.w	r9, #0
 8009068:	d01f      	beq.n	80090aa <__multiply+0x132>
 800906a:	6834      	ldr	r4, [r6, #0]
 800906c:	f105 0114 	add.w	r1, r5, #20
 8009070:	46b6      	mov	lr, r6
 8009072:	f04f 0a00 	mov.w	sl, #0
 8009076:	880a      	ldrh	r2, [r1, #0]
 8009078:	f8be b002 	ldrh.w	fp, [lr, #2]
 800907c:	fb09 b202 	mla	r2, r9, r2, fp
 8009080:	4492      	add	sl, r2
 8009082:	b2a4      	uxth	r4, r4
 8009084:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009088:	f84e 4b04 	str.w	r4, [lr], #4
 800908c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009090:	f8be 2000 	ldrh.w	r2, [lr]
 8009094:	0c24      	lsrs	r4, r4, #16
 8009096:	fb09 2404 	mla	r4, r9, r4, r2
 800909a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800909e:	458c      	cmp	ip, r1
 80090a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090a4:	d8e7      	bhi.n	8009076 <__multiply+0xfe>
 80090a6:	9a01      	ldr	r2, [sp, #4]
 80090a8:	50b4      	str	r4, [r6, r2]
 80090aa:	3604      	adds	r6, #4
 80090ac:	e7a3      	b.n	8008ff6 <__multiply+0x7e>
 80090ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1a5      	bne.n	8009002 <__multiply+0x8a>
 80090b6:	3f01      	subs	r7, #1
 80090b8:	e7a1      	b.n	8008ffe <__multiply+0x86>
 80090ba:	bf00      	nop
 80090bc:	0800a893 	.word	0x0800a893
 80090c0:	0800a8a4 	.word	0x0800a8a4

080090c4 <__pow5mult>:
 80090c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	4615      	mov	r5, r2
 80090ca:	f012 0203 	ands.w	r2, r2, #3
 80090ce:	4606      	mov	r6, r0
 80090d0:	460f      	mov	r7, r1
 80090d2:	d007      	beq.n	80090e4 <__pow5mult+0x20>
 80090d4:	4c25      	ldr	r4, [pc, #148]	; (800916c <__pow5mult+0xa8>)
 80090d6:	3a01      	subs	r2, #1
 80090d8:	2300      	movs	r3, #0
 80090da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090de:	f7ff fe9b 	bl	8008e18 <__multadd>
 80090e2:	4607      	mov	r7, r0
 80090e4:	10ad      	asrs	r5, r5, #2
 80090e6:	d03d      	beq.n	8009164 <__pow5mult+0xa0>
 80090e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090ea:	b97c      	cbnz	r4, 800910c <__pow5mult+0x48>
 80090ec:	2010      	movs	r0, #16
 80090ee:	f7ff fe1b 	bl	8008d28 <malloc>
 80090f2:	4602      	mov	r2, r0
 80090f4:	6270      	str	r0, [r6, #36]	; 0x24
 80090f6:	b928      	cbnz	r0, 8009104 <__pow5mult+0x40>
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <__pow5mult+0xac>)
 80090fa:	481e      	ldr	r0, [pc, #120]	; (8009174 <__pow5mult+0xb0>)
 80090fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009100:	f000 fbcc 	bl	800989c <__assert_func>
 8009104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009108:	6004      	str	r4, [r0, #0]
 800910a:	60c4      	str	r4, [r0, #12]
 800910c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009114:	b94c      	cbnz	r4, 800912a <__pow5mult+0x66>
 8009116:	f240 2171 	movw	r1, #625	; 0x271
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff ff16 	bl	8008f4c <__i2b>
 8009120:	2300      	movs	r3, #0
 8009122:	f8c8 0008 	str.w	r0, [r8, #8]
 8009126:	4604      	mov	r4, r0
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	f04f 0900 	mov.w	r9, #0
 800912e:	07eb      	lsls	r3, r5, #31
 8009130:	d50a      	bpl.n	8009148 <__pow5mult+0x84>
 8009132:	4639      	mov	r1, r7
 8009134:	4622      	mov	r2, r4
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ff1e 	bl	8008f78 <__multiply>
 800913c:	4639      	mov	r1, r7
 800913e:	4680      	mov	r8, r0
 8009140:	4630      	mov	r0, r6
 8009142:	f7ff fe47 	bl	8008dd4 <_Bfree>
 8009146:	4647      	mov	r7, r8
 8009148:	106d      	asrs	r5, r5, #1
 800914a:	d00b      	beq.n	8009164 <__pow5mult+0xa0>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	b938      	cbnz	r0, 8009160 <__pow5mult+0x9c>
 8009150:	4622      	mov	r2, r4
 8009152:	4621      	mov	r1, r4
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff ff0f 	bl	8008f78 <__multiply>
 800915a:	6020      	str	r0, [r4, #0]
 800915c:	f8c0 9000 	str.w	r9, [r0]
 8009160:	4604      	mov	r4, r0
 8009162:	e7e4      	b.n	800912e <__pow5mult+0x6a>
 8009164:	4638      	mov	r0, r7
 8009166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916a:	bf00      	nop
 800916c:	0800a9f8 	.word	0x0800a9f8
 8009170:	0800a81d 	.word	0x0800a81d
 8009174:	0800a8a4 	.word	0x0800a8a4

08009178 <__lshift>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	460c      	mov	r4, r1
 800917e:	6849      	ldr	r1, [r1, #4]
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	4607      	mov	r7, r0
 800918a:	4691      	mov	r9, r2
 800918c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009190:	f108 0601 	add.w	r6, r8, #1
 8009194:	42b3      	cmp	r3, r6
 8009196:	db0b      	blt.n	80091b0 <__lshift+0x38>
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff fddb 	bl	8008d54 <_Balloc>
 800919e:	4605      	mov	r5, r0
 80091a0:	b948      	cbnz	r0, 80091b6 <__lshift+0x3e>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b28      	ldr	r3, [pc, #160]	; (8009248 <__lshift+0xd0>)
 80091a6:	4829      	ldr	r0, [pc, #164]	; (800924c <__lshift+0xd4>)
 80091a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091ac:	f000 fb76 	bl	800989c <__assert_func>
 80091b0:	3101      	adds	r1, #1
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	e7ee      	b.n	8009194 <__lshift+0x1c>
 80091b6:	2300      	movs	r3, #0
 80091b8:	f100 0114 	add.w	r1, r0, #20
 80091bc:	f100 0210 	add.w	r2, r0, #16
 80091c0:	4618      	mov	r0, r3
 80091c2:	4553      	cmp	r3, sl
 80091c4:	db33      	blt.n	800922e <__lshift+0xb6>
 80091c6:	6920      	ldr	r0, [r4, #16]
 80091c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091cc:	f104 0314 	add.w	r3, r4, #20
 80091d0:	f019 091f 	ands.w	r9, r9, #31
 80091d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091dc:	d02b      	beq.n	8009236 <__lshift+0xbe>
 80091de:	f1c9 0e20 	rsb	lr, r9, #32
 80091e2:	468a      	mov	sl, r1
 80091e4:	2200      	movs	r2, #0
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	fa00 f009 	lsl.w	r0, r0, r9
 80091ec:	4302      	orrs	r2, r0
 80091ee:	f84a 2b04 	str.w	r2, [sl], #4
 80091f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f6:	459c      	cmp	ip, r3
 80091f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091fc:	d8f3      	bhi.n	80091e6 <__lshift+0x6e>
 80091fe:	ebac 0304 	sub.w	r3, ip, r4
 8009202:	3b15      	subs	r3, #21
 8009204:	f023 0303 	bic.w	r3, r3, #3
 8009208:	3304      	adds	r3, #4
 800920a:	f104 0015 	add.w	r0, r4, #21
 800920e:	4584      	cmp	ip, r0
 8009210:	bf38      	it	cc
 8009212:	2304      	movcc	r3, #4
 8009214:	50ca      	str	r2, [r1, r3]
 8009216:	b10a      	cbz	r2, 800921c <__lshift+0xa4>
 8009218:	f108 0602 	add.w	r6, r8, #2
 800921c:	3e01      	subs	r6, #1
 800921e:	4638      	mov	r0, r7
 8009220:	612e      	str	r6, [r5, #16]
 8009222:	4621      	mov	r1, r4
 8009224:	f7ff fdd6 	bl	8008dd4 <_Bfree>
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009232:	3301      	adds	r3, #1
 8009234:	e7c5      	b.n	80091c2 <__lshift+0x4a>
 8009236:	3904      	subs	r1, #4
 8009238:	f853 2b04 	ldr.w	r2, [r3], #4
 800923c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009240:	459c      	cmp	ip, r3
 8009242:	d8f9      	bhi.n	8009238 <__lshift+0xc0>
 8009244:	e7ea      	b.n	800921c <__lshift+0xa4>
 8009246:	bf00      	nop
 8009248:	0800a893 	.word	0x0800a893
 800924c:	0800a8a4 	.word	0x0800a8a4

08009250 <__mcmp>:
 8009250:	b530      	push	{r4, r5, lr}
 8009252:	6902      	ldr	r2, [r0, #16]
 8009254:	690c      	ldr	r4, [r1, #16]
 8009256:	1b12      	subs	r2, r2, r4
 8009258:	d10e      	bne.n	8009278 <__mcmp+0x28>
 800925a:	f100 0314 	add.w	r3, r0, #20
 800925e:	3114      	adds	r1, #20
 8009260:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009264:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009268:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800926c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009270:	42a5      	cmp	r5, r4
 8009272:	d003      	beq.n	800927c <__mcmp+0x2c>
 8009274:	d305      	bcc.n	8009282 <__mcmp+0x32>
 8009276:	2201      	movs	r2, #1
 8009278:	4610      	mov	r0, r2
 800927a:	bd30      	pop	{r4, r5, pc}
 800927c:	4283      	cmp	r3, r0
 800927e:	d3f3      	bcc.n	8009268 <__mcmp+0x18>
 8009280:	e7fa      	b.n	8009278 <__mcmp+0x28>
 8009282:	f04f 32ff 	mov.w	r2, #4294967295
 8009286:	e7f7      	b.n	8009278 <__mcmp+0x28>

08009288 <__mdiff>:
 8009288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	460c      	mov	r4, r1
 800928e:	4606      	mov	r6, r0
 8009290:	4611      	mov	r1, r2
 8009292:	4620      	mov	r0, r4
 8009294:	4617      	mov	r7, r2
 8009296:	f7ff ffdb 	bl	8009250 <__mcmp>
 800929a:	1e05      	subs	r5, r0, #0
 800929c:	d110      	bne.n	80092c0 <__mdiff+0x38>
 800929e:	4629      	mov	r1, r5
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff fd57 	bl	8008d54 <_Balloc>
 80092a6:	b930      	cbnz	r0, 80092b6 <__mdiff+0x2e>
 80092a8:	4b39      	ldr	r3, [pc, #228]	; (8009390 <__mdiff+0x108>)
 80092aa:	4602      	mov	r2, r0
 80092ac:	f240 2132 	movw	r1, #562	; 0x232
 80092b0:	4838      	ldr	r0, [pc, #224]	; (8009394 <__mdiff+0x10c>)
 80092b2:	f000 faf3 	bl	800989c <__assert_func>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	bfa4      	itt	ge
 80092c2:	463b      	movge	r3, r7
 80092c4:	4627      	movge	r7, r4
 80092c6:	4630      	mov	r0, r6
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	bfa6      	itte	ge
 80092cc:	461c      	movge	r4, r3
 80092ce:	2500      	movge	r5, #0
 80092d0:	2501      	movlt	r5, #1
 80092d2:	f7ff fd3f 	bl	8008d54 <_Balloc>
 80092d6:	b920      	cbnz	r0, 80092e2 <__mdiff+0x5a>
 80092d8:	4b2d      	ldr	r3, [pc, #180]	; (8009390 <__mdiff+0x108>)
 80092da:	4602      	mov	r2, r0
 80092dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092e0:	e7e6      	b.n	80092b0 <__mdiff+0x28>
 80092e2:	693e      	ldr	r6, [r7, #16]
 80092e4:	60c5      	str	r5, [r0, #12]
 80092e6:	6925      	ldr	r5, [r4, #16]
 80092e8:	f107 0114 	add.w	r1, r7, #20
 80092ec:	f104 0914 	add.w	r9, r4, #20
 80092f0:	f100 0e14 	add.w	lr, r0, #20
 80092f4:	f107 0210 	add.w	r2, r7, #16
 80092f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009300:	46f2      	mov	sl, lr
 8009302:	2700      	movs	r7, #0
 8009304:	f859 3b04 	ldr.w	r3, [r9], #4
 8009308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800930c:	fa1f f883 	uxth.w	r8, r3
 8009310:	fa17 f78b 	uxtah	r7, r7, fp
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	eba7 0808 	sub.w	r8, r7, r8
 800931a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800931e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009322:	fa1f f888 	uxth.w	r8, r8
 8009326:	141f      	asrs	r7, r3, #16
 8009328:	454d      	cmp	r5, r9
 800932a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800932e:	f84a 3b04 	str.w	r3, [sl], #4
 8009332:	d8e7      	bhi.n	8009304 <__mdiff+0x7c>
 8009334:	1b2b      	subs	r3, r5, r4
 8009336:	3b15      	subs	r3, #21
 8009338:	f023 0303 	bic.w	r3, r3, #3
 800933c:	3304      	adds	r3, #4
 800933e:	3415      	adds	r4, #21
 8009340:	42a5      	cmp	r5, r4
 8009342:	bf38      	it	cc
 8009344:	2304      	movcc	r3, #4
 8009346:	4419      	add	r1, r3
 8009348:	4473      	add	r3, lr
 800934a:	469e      	mov	lr, r3
 800934c:	460d      	mov	r5, r1
 800934e:	4565      	cmp	r5, ip
 8009350:	d30e      	bcc.n	8009370 <__mdiff+0xe8>
 8009352:	f10c 0203 	add.w	r2, ip, #3
 8009356:	1a52      	subs	r2, r2, r1
 8009358:	f022 0203 	bic.w	r2, r2, #3
 800935c:	3903      	subs	r1, #3
 800935e:	458c      	cmp	ip, r1
 8009360:	bf38      	it	cc
 8009362:	2200      	movcc	r2, #0
 8009364:	441a      	add	r2, r3
 8009366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800936a:	b17b      	cbz	r3, 800938c <__mdiff+0x104>
 800936c:	6106      	str	r6, [r0, #16]
 800936e:	e7a5      	b.n	80092bc <__mdiff+0x34>
 8009370:	f855 8b04 	ldr.w	r8, [r5], #4
 8009374:	fa17 f488 	uxtah	r4, r7, r8
 8009378:	1422      	asrs	r2, r4, #16
 800937a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800937e:	b2a4      	uxth	r4, r4
 8009380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009384:	f84e 4b04 	str.w	r4, [lr], #4
 8009388:	1417      	asrs	r7, r2, #16
 800938a:	e7e0      	b.n	800934e <__mdiff+0xc6>
 800938c:	3e01      	subs	r6, #1
 800938e:	e7ea      	b.n	8009366 <__mdiff+0xde>
 8009390:	0800a893 	.word	0x0800a893
 8009394:	0800a8a4 	.word	0x0800a8a4

08009398 <__d2b>:
 8009398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800939c:	4689      	mov	r9, r1
 800939e:	2101      	movs	r1, #1
 80093a0:	ec57 6b10 	vmov	r6, r7, d0
 80093a4:	4690      	mov	r8, r2
 80093a6:	f7ff fcd5 	bl	8008d54 <_Balloc>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b930      	cbnz	r0, 80093bc <__d2b+0x24>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <__d2b+0xb0>)
 80093b2:	4826      	ldr	r0, [pc, #152]	; (800944c <__d2b+0xb4>)
 80093b4:	f240 310a 	movw	r1, #778	; 0x30a
 80093b8:	f000 fa70 	bl	800989c <__assert_func>
 80093bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093c4:	bb35      	cbnz	r5, 8009414 <__d2b+0x7c>
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	d028      	beq.n	800941e <__d2b+0x86>
 80093cc:	4668      	mov	r0, sp
 80093ce:	9600      	str	r6, [sp, #0]
 80093d0:	f7ff fd8c 	bl	8008eec <__lo0bits>
 80093d4:	9900      	ldr	r1, [sp, #0]
 80093d6:	b300      	cbz	r0, 800941a <__d2b+0x82>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	f1c0 0320 	rsb	r3, r0, #32
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	430b      	orrs	r3, r1
 80093e4:	40c2      	lsrs	r2, r0
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	9201      	str	r2, [sp, #4]
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	61a3      	str	r3, [r4, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2202      	movne	r2, #2
 80093f4:	2201      	moveq	r2, #1
 80093f6:	6122      	str	r2, [r4, #16]
 80093f8:	b1d5      	cbz	r5, 8009430 <__d2b+0x98>
 80093fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093fe:	4405      	add	r5, r0
 8009400:	f8c9 5000 	str.w	r5, [r9]
 8009404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009408:	f8c8 0000 	str.w	r0, [r8]
 800940c:	4620      	mov	r0, r4
 800940e:	b003      	add	sp, #12
 8009410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009418:	e7d5      	b.n	80093c6 <__d2b+0x2e>
 800941a:	6161      	str	r1, [r4, #20]
 800941c:	e7e5      	b.n	80093ea <__d2b+0x52>
 800941e:	a801      	add	r0, sp, #4
 8009420:	f7ff fd64 	bl	8008eec <__lo0bits>
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	2201      	movs	r2, #1
 800942a:	6122      	str	r2, [r4, #16]
 800942c:	3020      	adds	r0, #32
 800942e:	e7e3      	b.n	80093f8 <__d2b+0x60>
 8009430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009438:	f8c9 0000 	str.w	r0, [r9]
 800943c:	6918      	ldr	r0, [r3, #16]
 800943e:	f7ff fd35 	bl	8008eac <__hi0bits>
 8009442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009446:	e7df      	b.n	8009408 <__d2b+0x70>
 8009448:	0800a893 	.word	0x0800a893
 800944c:	0800a8a4 	.word	0x0800a8a4

08009450 <_calloc_r>:
 8009450:	b513      	push	{r0, r1, r4, lr}
 8009452:	434a      	muls	r2, r1
 8009454:	4611      	mov	r1, r2
 8009456:	9201      	str	r2, [sp, #4]
 8009458:	f000 f85a 	bl	8009510 <_malloc_r>
 800945c:	4604      	mov	r4, r0
 800945e:	b118      	cbz	r0, 8009468 <_calloc_r+0x18>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	2100      	movs	r1, #0
 8009464:	f7fe f916 	bl	8007694 <memset>
 8009468:	4620      	mov	r0, r4
 800946a:	b002      	add	sp, #8
 800946c:	bd10      	pop	{r4, pc}
	...

08009470 <_free_r>:
 8009470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009472:	2900      	cmp	r1, #0
 8009474:	d048      	beq.n	8009508 <_free_r+0x98>
 8009476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947a:	9001      	str	r0, [sp, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f1a1 0404 	sub.w	r4, r1, #4
 8009482:	bfb8      	it	lt
 8009484:	18e4      	addlt	r4, r4, r3
 8009486:	f000 fa65 	bl	8009954 <__malloc_lock>
 800948a:	4a20      	ldr	r2, [pc, #128]	; (800950c <_free_r+0x9c>)
 800948c:	9801      	ldr	r0, [sp, #4]
 800948e:	6813      	ldr	r3, [r2, #0]
 8009490:	4615      	mov	r5, r2
 8009492:	b933      	cbnz	r3, 80094a2 <_free_r+0x32>
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	6014      	str	r4, [r2, #0]
 8009498:	b003      	add	sp, #12
 800949a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949e:	f000 ba5f 	b.w	8009960 <__malloc_unlock>
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	d90b      	bls.n	80094be <_free_r+0x4e>
 80094a6:	6821      	ldr	r1, [r4, #0]
 80094a8:	1862      	adds	r2, r4, r1
 80094aa:	4293      	cmp	r3, r2
 80094ac:	bf04      	itt	eq
 80094ae:	681a      	ldreq	r2, [r3, #0]
 80094b0:	685b      	ldreq	r3, [r3, #4]
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	bf04      	itt	eq
 80094b6:	1852      	addeq	r2, r2, r1
 80094b8:	6022      	streq	r2, [r4, #0]
 80094ba:	602c      	str	r4, [r5, #0]
 80094bc:	e7ec      	b.n	8009498 <_free_r+0x28>
 80094be:	461a      	mov	r2, r3
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b10b      	cbz	r3, 80094c8 <_free_r+0x58>
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d9fa      	bls.n	80094be <_free_r+0x4e>
 80094c8:	6811      	ldr	r1, [r2, #0]
 80094ca:	1855      	adds	r5, r2, r1
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d10b      	bne.n	80094e8 <_free_r+0x78>
 80094d0:	6824      	ldr	r4, [r4, #0]
 80094d2:	4421      	add	r1, r4
 80094d4:	1854      	adds	r4, r2, r1
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	6011      	str	r1, [r2, #0]
 80094da:	d1dd      	bne.n	8009498 <_free_r+0x28>
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	6053      	str	r3, [r2, #4]
 80094e2:	4421      	add	r1, r4
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	e7d7      	b.n	8009498 <_free_r+0x28>
 80094e8:	d902      	bls.n	80094f0 <_free_r+0x80>
 80094ea:	230c      	movs	r3, #12
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	e7d3      	b.n	8009498 <_free_r+0x28>
 80094f0:	6825      	ldr	r5, [r4, #0]
 80094f2:	1961      	adds	r1, r4, r5
 80094f4:	428b      	cmp	r3, r1
 80094f6:	bf04      	itt	eq
 80094f8:	6819      	ldreq	r1, [r3, #0]
 80094fa:	685b      	ldreq	r3, [r3, #4]
 80094fc:	6063      	str	r3, [r4, #4]
 80094fe:	bf04      	itt	eq
 8009500:	1949      	addeq	r1, r1, r5
 8009502:	6021      	streq	r1, [r4, #0]
 8009504:	6054      	str	r4, [r2, #4]
 8009506:	e7c7      	b.n	8009498 <_free_r+0x28>
 8009508:	b003      	add	sp, #12
 800950a:	bd30      	pop	{r4, r5, pc}
 800950c:	20000350 	.word	0x20000350

08009510 <_malloc_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	1ccd      	adds	r5, r1, #3
 8009514:	f025 0503 	bic.w	r5, r5, #3
 8009518:	3508      	adds	r5, #8
 800951a:	2d0c      	cmp	r5, #12
 800951c:	bf38      	it	cc
 800951e:	250c      	movcc	r5, #12
 8009520:	2d00      	cmp	r5, #0
 8009522:	4606      	mov	r6, r0
 8009524:	db01      	blt.n	800952a <_malloc_r+0x1a>
 8009526:	42a9      	cmp	r1, r5
 8009528:	d903      	bls.n	8009532 <_malloc_r+0x22>
 800952a:	230c      	movs	r3, #12
 800952c:	6033      	str	r3, [r6, #0]
 800952e:	2000      	movs	r0, #0
 8009530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009532:	f000 fa0f 	bl	8009954 <__malloc_lock>
 8009536:	4921      	ldr	r1, [pc, #132]	; (80095bc <_malloc_r+0xac>)
 8009538:	680a      	ldr	r2, [r1, #0]
 800953a:	4614      	mov	r4, r2
 800953c:	b99c      	cbnz	r4, 8009566 <_malloc_r+0x56>
 800953e:	4f20      	ldr	r7, [pc, #128]	; (80095c0 <_malloc_r+0xb0>)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	b923      	cbnz	r3, 800954e <_malloc_r+0x3e>
 8009544:	4621      	mov	r1, r4
 8009546:	4630      	mov	r0, r6
 8009548:	f000 f998 	bl	800987c <_sbrk_r>
 800954c:	6038      	str	r0, [r7, #0]
 800954e:	4629      	mov	r1, r5
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f993 	bl	800987c <_sbrk_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d123      	bne.n	80095a2 <_malloc_r+0x92>
 800955a:	230c      	movs	r3, #12
 800955c:	6033      	str	r3, [r6, #0]
 800955e:	4630      	mov	r0, r6
 8009560:	f000 f9fe 	bl	8009960 <__malloc_unlock>
 8009564:	e7e3      	b.n	800952e <_malloc_r+0x1e>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	1b5b      	subs	r3, r3, r5
 800956a:	d417      	bmi.n	800959c <_malloc_r+0x8c>
 800956c:	2b0b      	cmp	r3, #11
 800956e:	d903      	bls.n	8009578 <_malloc_r+0x68>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	441c      	add	r4, r3
 8009574:	6025      	str	r5, [r4, #0]
 8009576:	e004      	b.n	8009582 <_malloc_r+0x72>
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	42a2      	cmp	r2, r4
 800957c:	bf0c      	ite	eq
 800957e:	600b      	streq	r3, [r1, #0]
 8009580:	6053      	strne	r3, [r2, #4]
 8009582:	4630      	mov	r0, r6
 8009584:	f000 f9ec 	bl	8009960 <__malloc_unlock>
 8009588:	f104 000b 	add.w	r0, r4, #11
 800958c:	1d23      	adds	r3, r4, #4
 800958e:	f020 0007 	bic.w	r0, r0, #7
 8009592:	1ac2      	subs	r2, r0, r3
 8009594:	d0cc      	beq.n	8009530 <_malloc_r+0x20>
 8009596:	1a1b      	subs	r3, r3, r0
 8009598:	50a3      	str	r3, [r4, r2]
 800959a:	e7c9      	b.n	8009530 <_malloc_r+0x20>
 800959c:	4622      	mov	r2, r4
 800959e:	6864      	ldr	r4, [r4, #4]
 80095a0:	e7cc      	b.n	800953c <_malloc_r+0x2c>
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0e3      	beq.n	8009574 <_malloc_r+0x64>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f964 	bl	800987c <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1dd      	bne.n	8009574 <_malloc_r+0x64>
 80095b8:	e7cf      	b.n	800955a <_malloc_r+0x4a>
 80095ba:	bf00      	nop
 80095bc:	20000350 	.word	0x20000350
 80095c0:	20000354 	.word	0x20000354

080095c4 <__ssputs_r>:
 80095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	688e      	ldr	r6, [r1, #8]
 80095ca:	429e      	cmp	r6, r3
 80095cc:	4682      	mov	sl, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	4690      	mov	r8, r2
 80095d2:	461f      	mov	r7, r3
 80095d4:	d838      	bhi.n	8009648 <__ssputs_r+0x84>
 80095d6:	898a      	ldrh	r2, [r1, #12]
 80095d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095dc:	d032      	beq.n	8009644 <__ssputs_r+0x80>
 80095de:	6825      	ldr	r5, [r4, #0]
 80095e0:	6909      	ldr	r1, [r1, #16]
 80095e2:	eba5 0901 	sub.w	r9, r5, r1
 80095e6:	6965      	ldr	r5, [r4, #20]
 80095e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f0:	3301      	adds	r3, #1
 80095f2:	444b      	add	r3, r9
 80095f4:	106d      	asrs	r5, r5, #1
 80095f6:	429d      	cmp	r5, r3
 80095f8:	bf38      	it	cc
 80095fa:	461d      	movcc	r5, r3
 80095fc:	0553      	lsls	r3, r2, #21
 80095fe:	d531      	bpl.n	8009664 <__ssputs_r+0xa0>
 8009600:	4629      	mov	r1, r5
 8009602:	f7ff ff85 	bl	8009510 <_malloc_r>
 8009606:	4606      	mov	r6, r0
 8009608:	b950      	cbnz	r0, 8009620 <__ssputs_r+0x5c>
 800960a:	230c      	movs	r3, #12
 800960c:	f8ca 3000 	str.w	r3, [sl]
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	f04f 30ff 	mov.w	r0, #4294967295
 800961c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009620:	6921      	ldr	r1, [r4, #16]
 8009622:	464a      	mov	r2, r9
 8009624:	f7ff fb88 	bl	8008d38 <memcpy>
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800962e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	6126      	str	r6, [r4, #16]
 8009636:	6165      	str	r5, [r4, #20]
 8009638:	444e      	add	r6, r9
 800963a:	eba5 0509 	sub.w	r5, r5, r9
 800963e:	6026      	str	r6, [r4, #0]
 8009640:	60a5      	str	r5, [r4, #8]
 8009642:	463e      	mov	r6, r7
 8009644:	42be      	cmp	r6, r7
 8009646:	d900      	bls.n	800964a <__ssputs_r+0x86>
 8009648:	463e      	mov	r6, r7
 800964a:	4632      	mov	r2, r6
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	4641      	mov	r1, r8
 8009650:	f000 f966 	bl	8009920 <memmove>
 8009654:	68a3      	ldr	r3, [r4, #8]
 8009656:	6822      	ldr	r2, [r4, #0]
 8009658:	1b9b      	subs	r3, r3, r6
 800965a:	4432      	add	r2, r6
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	6022      	str	r2, [r4, #0]
 8009660:	2000      	movs	r0, #0
 8009662:	e7db      	b.n	800961c <__ssputs_r+0x58>
 8009664:	462a      	mov	r2, r5
 8009666:	f000 f981 	bl	800996c <_realloc_r>
 800966a:	4606      	mov	r6, r0
 800966c:	2800      	cmp	r0, #0
 800966e:	d1e1      	bne.n	8009634 <__ssputs_r+0x70>
 8009670:	6921      	ldr	r1, [r4, #16]
 8009672:	4650      	mov	r0, sl
 8009674:	f7ff fefc 	bl	8009470 <_free_r>
 8009678:	e7c7      	b.n	800960a <__ssputs_r+0x46>
	...

0800967c <_svfiprintf_r>:
 800967c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009680:	4698      	mov	r8, r3
 8009682:	898b      	ldrh	r3, [r1, #12]
 8009684:	061b      	lsls	r3, r3, #24
 8009686:	b09d      	sub	sp, #116	; 0x74
 8009688:	4607      	mov	r7, r0
 800968a:	460d      	mov	r5, r1
 800968c:	4614      	mov	r4, r2
 800968e:	d50e      	bpl.n	80096ae <_svfiprintf_r+0x32>
 8009690:	690b      	ldr	r3, [r1, #16]
 8009692:	b963      	cbnz	r3, 80096ae <_svfiprintf_r+0x32>
 8009694:	2140      	movs	r1, #64	; 0x40
 8009696:	f7ff ff3b 	bl	8009510 <_malloc_r>
 800969a:	6028      	str	r0, [r5, #0]
 800969c:	6128      	str	r0, [r5, #16]
 800969e:	b920      	cbnz	r0, 80096aa <_svfiprintf_r+0x2e>
 80096a0:	230c      	movs	r3, #12
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	e0d1      	b.n	800984e <_svfiprintf_r+0x1d2>
 80096aa:	2340      	movs	r3, #64	; 0x40
 80096ac:	616b      	str	r3, [r5, #20]
 80096ae:	2300      	movs	r3, #0
 80096b0:	9309      	str	r3, [sp, #36]	; 0x24
 80096b2:	2320      	movs	r3, #32
 80096b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096bc:	2330      	movs	r3, #48	; 0x30
 80096be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009868 <_svfiprintf_r+0x1ec>
 80096c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096c6:	f04f 0901 	mov.w	r9, #1
 80096ca:	4623      	mov	r3, r4
 80096cc:	469a      	mov	sl, r3
 80096ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d2:	b10a      	cbz	r2, 80096d8 <_svfiprintf_r+0x5c>
 80096d4:	2a25      	cmp	r2, #37	; 0x25
 80096d6:	d1f9      	bne.n	80096cc <_svfiprintf_r+0x50>
 80096d8:	ebba 0b04 	subs.w	fp, sl, r4
 80096dc:	d00b      	beq.n	80096f6 <_svfiprintf_r+0x7a>
 80096de:	465b      	mov	r3, fp
 80096e0:	4622      	mov	r2, r4
 80096e2:	4629      	mov	r1, r5
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff ff6d 	bl	80095c4 <__ssputs_r>
 80096ea:	3001      	adds	r0, #1
 80096ec:	f000 80aa 	beq.w	8009844 <_svfiprintf_r+0x1c8>
 80096f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f2:	445a      	add	r2, fp
 80096f4:	9209      	str	r2, [sp, #36]	; 0x24
 80096f6:	f89a 3000 	ldrb.w	r3, [sl]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 80a2 	beq.w	8009844 <_svfiprintf_r+0x1c8>
 8009700:	2300      	movs	r3, #0
 8009702:	f04f 32ff 	mov.w	r2, #4294967295
 8009706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800970a:	f10a 0a01 	add.w	sl, sl, #1
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	9307      	str	r3, [sp, #28]
 8009712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009716:	931a      	str	r3, [sp, #104]	; 0x68
 8009718:	4654      	mov	r4, sl
 800971a:	2205      	movs	r2, #5
 800971c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009720:	4851      	ldr	r0, [pc, #324]	; (8009868 <_svfiprintf_r+0x1ec>)
 8009722:	f7f6 fd5d 	bl	80001e0 <memchr>
 8009726:	9a04      	ldr	r2, [sp, #16]
 8009728:	b9d8      	cbnz	r0, 8009762 <_svfiprintf_r+0xe6>
 800972a:	06d0      	lsls	r0, r2, #27
 800972c:	bf44      	itt	mi
 800972e:	2320      	movmi	r3, #32
 8009730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009734:	0711      	lsls	r1, r2, #28
 8009736:	bf44      	itt	mi
 8009738:	232b      	movmi	r3, #43	; 0x2b
 800973a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973e:	f89a 3000 	ldrb.w	r3, [sl]
 8009742:	2b2a      	cmp	r3, #42	; 0x2a
 8009744:	d015      	beq.n	8009772 <_svfiprintf_r+0xf6>
 8009746:	9a07      	ldr	r2, [sp, #28]
 8009748:	4654      	mov	r4, sl
 800974a:	2000      	movs	r0, #0
 800974c:	f04f 0c0a 	mov.w	ip, #10
 8009750:	4621      	mov	r1, r4
 8009752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009756:	3b30      	subs	r3, #48	; 0x30
 8009758:	2b09      	cmp	r3, #9
 800975a:	d94e      	bls.n	80097fa <_svfiprintf_r+0x17e>
 800975c:	b1b0      	cbz	r0, 800978c <_svfiprintf_r+0x110>
 800975e:	9207      	str	r2, [sp, #28]
 8009760:	e014      	b.n	800978c <_svfiprintf_r+0x110>
 8009762:	eba0 0308 	sub.w	r3, r0, r8
 8009766:	fa09 f303 	lsl.w	r3, r9, r3
 800976a:	4313      	orrs	r3, r2
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	46a2      	mov	sl, r4
 8009770:	e7d2      	b.n	8009718 <_svfiprintf_r+0x9c>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	1d19      	adds	r1, r3, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	9103      	str	r1, [sp, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbb      	ittet	lt
 800977e:	425b      	neglt	r3, r3
 8009780:	f042 0202 	orrlt.w	r2, r2, #2
 8009784:	9307      	strge	r3, [sp, #28]
 8009786:	9307      	strlt	r3, [sp, #28]
 8009788:	bfb8      	it	lt
 800978a:	9204      	strlt	r2, [sp, #16]
 800978c:	7823      	ldrb	r3, [r4, #0]
 800978e:	2b2e      	cmp	r3, #46	; 0x2e
 8009790:	d10c      	bne.n	80097ac <_svfiprintf_r+0x130>
 8009792:	7863      	ldrb	r3, [r4, #1]
 8009794:	2b2a      	cmp	r3, #42	; 0x2a
 8009796:	d135      	bne.n	8009804 <_svfiprintf_r+0x188>
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	1d1a      	adds	r2, r3, #4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	9203      	str	r2, [sp, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bfb8      	it	lt
 80097a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097a8:	3402      	adds	r4, #2
 80097aa:	9305      	str	r3, [sp, #20]
 80097ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009878 <_svfiprintf_r+0x1fc>
 80097b0:	7821      	ldrb	r1, [r4, #0]
 80097b2:	2203      	movs	r2, #3
 80097b4:	4650      	mov	r0, sl
 80097b6:	f7f6 fd13 	bl	80001e0 <memchr>
 80097ba:	b140      	cbz	r0, 80097ce <_svfiprintf_r+0x152>
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	eba0 000a 	sub.w	r0, r0, sl
 80097c2:	fa03 f000 	lsl.w	r0, r3, r0
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	4303      	orrs	r3, r0
 80097ca:	3401      	adds	r4, #1
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d2:	4826      	ldr	r0, [pc, #152]	; (800986c <_svfiprintf_r+0x1f0>)
 80097d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097d8:	2206      	movs	r2, #6
 80097da:	f7f6 fd01 	bl	80001e0 <memchr>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d038      	beq.n	8009854 <_svfiprintf_r+0x1d8>
 80097e2:	4b23      	ldr	r3, [pc, #140]	; (8009870 <_svfiprintf_r+0x1f4>)
 80097e4:	bb1b      	cbnz	r3, 800982e <_svfiprintf_r+0x1b2>
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	3307      	adds	r3, #7
 80097ea:	f023 0307 	bic.w	r3, r3, #7
 80097ee:	3308      	adds	r3, #8
 80097f0:	9303      	str	r3, [sp, #12]
 80097f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f4:	4433      	add	r3, r6
 80097f6:	9309      	str	r3, [sp, #36]	; 0x24
 80097f8:	e767      	b.n	80096ca <_svfiprintf_r+0x4e>
 80097fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80097fe:	460c      	mov	r4, r1
 8009800:	2001      	movs	r0, #1
 8009802:	e7a5      	b.n	8009750 <_svfiprintf_r+0xd4>
 8009804:	2300      	movs	r3, #0
 8009806:	3401      	adds	r4, #1
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	4619      	mov	r1, r3
 800980c:	f04f 0c0a 	mov.w	ip, #10
 8009810:	4620      	mov	r0, r4
 8009812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009816:	3a30      	subs	r2, #48	; 0x30
 8009818:	2a09      	cmp	r2, #9
 800981a:	d903      	bls.n	8009824 <_svfiprintf_r+0x1a8>
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0c5      	beq.n	80097ac <_svfiprintf_r+0x130>
 8009820:	9105      	str	r1, [sp, #20]
 8009822:	e7c3      	b.n	80097ac <_svfiprintf_r+0x130>
 8009824:	fb0c 2101 	mla	r1, ip, r1, r2
 8009828:	4604      	mov	r4, r0
 800982a:	2301      	movs	r3, #1
 800982c:	e7f0      	b.n	8009810 <_svfiprintf_r+0x194>
 800982e:	ab03      	add	r3, sp, #12
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	462a      	mov	r2, r5
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <_svfiprintf_r+0x1f8>)
 8009836:	a904      	add	r1, sp, #16
 8009838:	4638      	mov	r0, r7
 800983a:	f7fd ffd3 	bl	80077e4 <_printf_float>
 800983e:	1c42      	adds	r2, r0, #1
 8009840:	4606      	mov	r6, r0
 8009842:	d1d6      	bne.n	80097f2 <_svfiprintf_r+0x176>
 8009844:	89ab      	ldrh	r3, [r5, #12]
 8009846:	065b      	lsls	r3, r3, #25
 8009848:	f53f af2c 	bmi.w	80096a4 <_svfiprintf_r+0x28>
 800984c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800984e:	b01d      	add	sp, #116	; 0x74
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	ab03      	add	r3, sp, #12
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	462a      	mov	r2, r5
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <_svfiprintf_r+0x1f8>)
 800985c:	a904      	add	r1, sp, #16
 800985e:	4638      	mov	r0, r7
 8009860:	f7fe fa64 	bl	8007d2c <_printf_i>
 8009864:	e7eb      	b.n	800983e <_svfiprintf_r+0x1c2>
 8009866:	bf00      	nop
 8009868:	0800aa04 	.word	0x0800aa04
 800986c:	0800aa0e 	.word	0x0800aa0e
 8009870:	080077e5 	.word	0x080077e5
 8009874:	080095c5 	.word	0x080095c5
 8009878:	0800aa0a 	.word	0x0800aa0a

0800987c <_sbrk_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d06      	ldr	r5, [pc, #24]	; (8009898 <_sbrk_r+0x1c>)
 8009880:	2300      	movs	r3, #0
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	602b      	str	r3, [r5, #0]
 8009888:	f7f8 fac6 	bl	8001e18 <_sbrk>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_sbrk_r+0x1a>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_sbrk_r+0x1a>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20000904 	.word	0x20000904

0800989c <__assert_func>:
 800989c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800989e:	4614      	mov	r4, r2
 80098a0:	461a      	mov	r2, r3
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <__assert_func+0x2c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4605      	mov	r5, r0
 80098a8:	68d8      	ldr	r0, [r3, #12]
 80098aa:	b14c      	cbz	r4, 80098c0 <__assert_func+0x24>
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <__assert_func+0x30>)
 80098ae:	9100      	str	r1, [sp, #0]
 80098b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098b4:	4906      	ldr	r1, [pc, #24]	; (80098d0 <__assert_func+0x34>)
 80098b6:	462b      	mov	r3, r5
 80098b8:	f000 f80e 	bl	80098d8 <fiprintf>
 80098bc:	f000 faa4 	bl	8009e08 <abort>
 80098c0:	4b04      	ldr	r3, [pc, #16]	; (80098d4 <__assert_func+0x38>)
 80098c2:	461c      	mov	r4, r3
 80098c4:	e7f3      	b.n	80098ae <__assert_func+0x12>
 80098c6:	bf00      	nop
 80098c8:	20000024 	.word	0x20000024
 80098cc:	0800aa15 	.word	0x0800aa15
 80098d0:	0800aa22 	.word	0x0800aa22
 80098d4:	0800aa50 	.word	0x0800aa50

080098d8 <fiprintf>:
 80098d8:	b40e      	push	{r1, r2, r3}
 80098da:	b503      	push	{r0, r1, lr}
 80098dc:	4601      	mov	r1, r0
 80098de:	ab03      	add	r3, sp, #12
 80098e0:	4805      	ldr	r0, [pc, #20]	; (80098f8 <fiprintf+0x20>)
 80098e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e6:	6800      	ldr	r0, [r0, #0]
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	f000 f88f 	bl	8009a0c <_vfiprintf_r>
 80098ee:	b002      	add	sp, #8
 80098f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f4:	b003      	add	sp, #12
 80098f6:	4770      	bx	lr
 80098f8:	20000024 	.word	0x20000024

080098fc <__ascii_mbtowc>:
 80098fc:	b082      	sub	sp, #8
 80098fe:	b901      	cbnz	r1, 8009902 <__ascii_mbtowc+0x6>
 8009900:	a901      	add	r1, sp, #4
 8009902:	b142      	cbz	r2, 8009916 <__ascii_mbtowc+0x1a>
 8009904:	b14b      	cbz	r3, 800991a <__ascii_mbtowc+0x1e>
 8009906:	7813      	ldrb	r3, [r2, #0]
 8009908:	600b      	str	r3, [r1, #0]
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	1e10      	subs	r0, r2, #0
 800990e:	bf18      	it	ne
 8009910:	2001      	movne	r0, #1
 8009912:	b002      	add	sp, #8
 8009914:	4770      	bx	lr
 8009916:	4610      	mov	r0, r2
 8009918:	e7fb      	b.n	8009912 <__ascii_mbtowc+0x16>
 800991a:	f06f 0001 	mvn.w	r0, #1
 800991e:	e7f8      	b.n	8009912 <__ascii_mbtowc+0x16>

08009920 <memmove>:
 8009920:	4288      	cmp	r0, r1
 8009922:	b510      	push	{r4, lr}
 8009924:	eb01 0402 	add.w	r4, r1, r2
 8009928:	d902      	bls.n	8009930 <memmove+0x10>
 800992a:	4284      	cmp	r4, r0
 800992c:	4623      	mov	r3, r4
 800992e:	d807      	bhi.n	8009940 <memmove+0x20>
 8009930:	1e43      	subs	r3, r0, #1
 8009932:	42a1      	cmp	r1, r4
 8009934:	d008      	beq.n	8009948 <memmove+0x28>
 8009936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800993a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800993e:	e7f8      	b.n	8009932 <memmove+0x12>
 8009940:	4402      	add	r2, r0
 8009942:	4601      	mov	r1, r0
 8009944:	428a      	cmp	r2, r1
 8009946:	d100      	bne.n	800994a <memmove+0x2a>
 8009948:	bd10      	pop	{r4, pc}
 800994a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800994e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009952:	e7f7      	b.n	8009944 <memmove+0x24>

08009954 <__malloc_lock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__malloc_lock+0x8>)
 8009956:	f000 bc17 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800995a:	bf00      	nop
 800995c:	2000090c 	.word	0x2000090c

08009960 <__malloc_unlock>:
 8009960:	4801      	ldr	r0, [pc, #4]	; (8009968 <__malloc_unlock+0x8>)
 8009962:	f000 bc12 	b.w	800a18a <__retarget_lock_release_recursive>
 8009966:	bf00      	nop
 8009968:	2000090c 	.word	0x2000090c

0800996c <_realloc_r>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	4607      	mov	r7, r0
 8009970:	4614      	mov	r4, r2
 8009972:	460e      	mov	r6, r1
 8009974:	b921      	cbnz	r1, 8009980 <_realloc_r+0x14>
 8009976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800997a:	4611      	mov	r1, r2
 800997c:	f7ff bdc8 	b.w	8009510 <_malloc_r>
 8009980:	b922      	cbnz	r2, 800998c <_realloc_r+0x20>
 8009982:	f7ff fd75 	bl	8009470 <_free_r>
 8009986:	4625      	mov	r5, r4
 8009988:	4628      	mov	r0, r5
 800998a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800998c:	f000 fc62 	bl	800a254 <_malloc_usable_size_r>
 8009990:	42a0      	cmp	r0, r4
 8009992:	d20f      	bcs.n	80099b4 <_realloc_r+0x48>
 8009994:	4621      	mov	r1, r4
 8009996:	4638      	mov	r0, r7
 8009998:	f7ff fdba 	bl	8009510 <_malloc_r>
 800999c:	4605      	mov	r5, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d0f2      	beq.n	8009988 <_realloc_r+0x1c>
 80099a2:	4631      	mov	r1, r6
 80099a4:	4622      	mov	r2, r4
 80099a6:	f7ff f9c7 	bl	8008d38 <memcpy>
 80099aa:	4631      	mov	r1, r6
 80099ac:	4638      	mov	r0, r7
 80099ae:	f7ff fd5f 	bl	8009470 <_free_r>
 80099b2:	e7e9      	b.n	8009988 <_realloc_r+0x1c>
 80099b4:	4635      	mov	r5, r6
 80099b6:	e7e7      	b.n	8009988 <_realloc_r+0x1c>

080099b8 <__sfputc_r>:
 80099b8:	6893      	ldr	r3, [r2, #8]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	b410      	push	{r4}
 80099c0:	6093      	str	r3, [r2, #8]
 80099c2:	da08      	bge.n	80099d6 <__sfputc_r+0x1e>
 80099c4:	6994      	ldr	r4, [r2, #24]
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	db01      	blt.n	80099ce <__sfputc_r+0x16>
 80099ca:	290a      	cmp	r1, #10
 80099cc:	d103      	bne.n	80099d6 <__sfputc_r+0x1e>
 80099ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d2:	f000 b94b 	b.w	8009c6c <__swbuf_r>
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	1c58      	adds	r0, r3, #1
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	7019      	strb	r1, [r3, #0]
 80099de:	4608      	mov	r0, r1
 80099e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <__sfputs_r>:
 80099e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	18d5      	adds	r5, r2, r3
 80099f0:	42ac      	cmp	r4, r5
 80099f2:	d101      	bne.n	80099f8 <__sfputs_r+0x12>
 80099f4:	2000      	movs	r0, #0
 80099f6:	e007      	b.n	8009a08 <__sfputs_r+0x22>
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	463a      	mov	r2, r7
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ffda 	bl	80099b8 <__sfputc_r>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d1f3      	bne.n	80099f0 <__sfputs_r+0xa>
 8009a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a0c <_vfiprintf_r>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	460d      	mov	r5, r1
 8009a12:	b09d      	sub	sp, #116	; 0x74
 8009a14:	4614      	mov	r4, r2
 8009a16:	4698      	mov	r8, r3
 8009a18:	4606      	mov	r6, r0
 8009a1a:	b118      	cbz	r0, 8009a24 <_vfiprintf_r+0x18>
 8009a1c:	6983      	ldr	r3, [r0, #24]
 8009a1e:	b90b      	cbnz	r3, 8009a24 <_vfiprintf_r+0x18>
 8009a20:	f000 fb14 	bl	800a04c <__sinit>
 8009a24:	4b89      	ldr	r3, [pc, #548]	; (8009c4c <_vfiprintf_r+0x240>)
 8009a26:	429d      	cmp	r5, r3
 8009a28:	d11b      	bne.n	8009a62 <_vfiprintf_r+0x56>
 8009a2a:	6875      	ldr	r5, [r6, #4]
 8009a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a2e:	07d9      	lsls	r1, r3, #31
 8009a30:	d405      	bmi.n	8009a3e <_vfiprintf_r+0x32>
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	059a      	lsls	r2, r3, #22
 8009a36:	d402      	bmi.n	8009a3e <_vfiprintf_r+0x32>
 8009a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3a:	f000 fba5 	bl	800a188 <__retarget_lock_acquire_recursive>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	071b      	lsls	r3, r3, #28
 8009a42:	d501      	bpl.n	8009a48 <_vfiprintf_r+0x3c>
 8009a44:	692b      	ldr	r3, [r5, #16]
 8009a46:	b9eb      	cbnz	r3, 8009a84 <_vfiprintf_r+0x78>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f000 f96e 	bl	8009d2c <__swsetup_r>
 8009a50:	b1c0      	cbz	r0, 8009a84 <_vfiprintf_r+0x78>
 8009a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a54:	07dc      	lsls	r4, r3, #31
 8009a56:	d50e      	bpl.n	8009a76 <_vfiprintf_r+0x6a>
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	b01d      	add	sp, #116	; 0x74
 8009a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a62:	4b7b      	ldr	r3, [pc, #492]	; (8009c50 <_vfiprintf_r+0x244>)
 8009a64:	429d      	cmp	r5, r3
 8009a66:	d101      	bne.n	8009a6c <_vfiprintf_r+0x60>
 8009a68:	68b5      	ldr	r5, [r6, #8]
 8009a6a:	e7df      	b.n	8009a2c <_vfiprintf_r+0x20>
 8009a6c:	4b79      	ldr	r3, [pc, #484]	; (8009c54 <_vfiprintf_r+0x248>)
 8009a6e:	429d      	cmp	r5, r3
 8009a70:	bf08      	it	eq
 8009a72:	68f5      	ldreq	r5, [r6, #12]
 8009a74:	e7da      	b.n	8009a2c <_vfiprintf_r+0x20>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	0598      	lsls	r0, r3, #22
 8009a7a:	d4ed      	bmi.n	8009a58 <_vfiprintf_r+0x4c>
 8009a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7e:	f000 fb84 	bl	800a18a <__retarget_lock_release_recursive>
 8009a82:	e7e9      	b.n	8009a58 <_vfiprintf_r+0x4c>
 8009a84:	2300      	movs	r3, #0
 8009a86:	9309      	str	r3, [sp, #36]	; 0x24
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a92:	2330      	movs	r3, #48	; 0x30
 8009a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c58 <_vfiprintf_r+0x24c>
 8009a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a9c:	f04f 0901 	mov.w	r9, #1
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	469a      	mov	sl, r3
 8009aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa8:	b10a      	cbz	r2, 8009aae <_vfiprintf_r+0xa2>
 8009aaa:	2a25      	cmp	r2, #37	; 0x25
 8009aac:	d1f9      	bne.n	8009aa2 <_vfiprintf_r+0x96>
 8009aae:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab2:	d00b      	beq.n	8009acc <_vfiprintf_r+0xc0>
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7ff ff93 	bl	80099e6 <__sfputs_r>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f000 80aa 	beq.w	8009c1a <_vfiprintf_r+0x20e>
 8009ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac8:	445a      	add	r2, fp
 8009aca:	9209      	str	r2, [sp, #36]	; 0x24
 8009acc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80a2 	beq.w	8009c1a <_vfiprintf_r+0x20e>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8009adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae0:	f10a 0a01 	add.w	sl, sl, #1
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aec:	931a      	str	r3, [sp, #104]	; 0x68
 8009aee:	4654      	mov	r4, sl
 8009af0:	2205      	movs	r2, #5
 8009af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af6:	4858      	ldr	r0, [pc, #352]	; (8009c58 <_vfiprintf_r+0x24c>)
 8009af8:	f7f6 fb72 	bl	80001e0 <memchr>
 8009afc:	9a04      	ldr	r2, [sp, #16]
 8009afe:	b9d8      	cbnz	r0, 8009b38 <_vfiprintf_r+0x12c>
 8009b00:	06d1      	lsls	r1, r2, #27
 8009b02:	bf44      	itt	mi
 8009b04:	2320      	movmi	r3, #32
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0a:	0713      	lsls	r3, r2, #28
 8009b0c:	bf44      	itt	mi
 8009b0e:	232b      	movmi	r3, #43	; 0x2b
 8009b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b14:	f89a 3000 	ldrb.w	r3, [sl]
 8009b18:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1a:	d015      	beq.n	8009b48 <_vfiprintf_r+0x13c>
 8009b1c:	9a07      	ldr	r2, [sp, #28]
 8009b1e:	4654      	mov	r4, sl
 8009b20:	2000      	movs	r0, #0
 8009b22:	f04f 0c0a 	mov.w	ip, #10
 8009b26:	4621      	mov	r1, r4
 8009b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b2c:	3b30      	subs	r3, #48	; 0x30
 8009b2e:	2b09      	cmp	r3, #9
 8009b30:	d94e      	bls.n	8009bd0 <_vfiprintf_r+0x1c4>
 8009b32:	b1b0      	cbz	r0, 8009b62 <_vfiprintf_r+0x156>
 8009b34:	9207      	str	r2, [sp, #28]
 8009b36:	e014      	b.n	8009b62 <_vfiprintf_r+0x156>
 8009b38:	eba0 0308 	sub.w	r3, r0, r8
 8009b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b40:	4313      	orrs	r3, r2
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	46a2      	mov	sl, r4
 8009b46:	e7d2      	b.n	8009aee <_vfiprintf_r+0xe2>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	1d19      	adds	r1, r3, #4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	9103      	str	r1, [sp, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bfbb      	ittet	lt
 8009b54:	425b      	neglt	r3, r3
 8009b56:	f042 0202 	orrlt.w	r2, r2, #2
 8009b5a:	9307      	strge	r3, [sp, #28]
 8009b5c:	9307      	strlt	r3, [sp, #28]
 8009b5e:	bfb8      	it	lt
 8009b60:	9204      	strlt	r2, [sp, #16]
 8009b62:	7823      	ldrb	r3, [r4, #0]
 8009b64:	2b2e      	cmp	r3, #46	; 0x2e
 8009b66:	d10c      	bne.n	8009b82 <_vfiprintf_r+0x176>
 8009b68:	7863      	ldrb	r3, [r4, #1]
 8009b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b6c:	d135      	bne.n	8009bda <_vfiprintf_r+0x1ce>
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	1d1a      	adds	r2, r3, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	9203      	str	r2, [sp, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfb8      	it	lt
 8009b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b7e:	3402      	adds	r4, #2
 8009b80:	9305      	str	r3, [sp, #20]
 8009b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c68 <_vfiprintf_r+0x25c>
 8009b86:	7821      	ldrb	r1, [r4, #0]
 8009b88:	2203      	movs	r2, #3
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	f7f6 fb28 	bl	80001e0 <memchr>
 8009b90:	b140      	cbz	r0, 8009ba4 <_vfiprintf_r+0x198>
 8009b92:	2340      	movs	r3, #64	; 0x40
 8009b94:	eba0 000a 	sub.w	r0, r0, sl
 8009b98:	fa03 f000 	lsl.w	r0, r3, r0
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4303      	orrs	r3, r0
 8009ba0:	3401      	adds	r4, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba8:	482c      	ldr	r0, [pc, #176]	; (8009c5c <_vfiprintf_r+0x250>)
 8009baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bae:	2206      	movs	r2, #6
 8009bb0:	f7f6 fb16 	bl	80001e0 <memchr>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d03f      	beq.n	8009c38 <_vfiprintf_r+0x22c>
 8009bb8:	4b29      	ldr	r3, [pc, #164]	; (8009c60 <_vfiprintf_r+0x254>)
 8009bba:	bb1b      	cbnz	r3, 8009c04 <_vfiprintf_r+0x1f8>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	443b      	add	r3, r7
 8009bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bce:	e767      	b.n	8009aa0 <_vfiprintf_r+0x94>
 8009bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	e7a5      	b.n	8009b26 <_vfiprintf_r+0x11a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	4619      	mov	r1, r3
 8009be2:	f04f 0c0a 	mov.w	ip, #10
 8009be6:	4620      	mov	r0, r4
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	; 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_vfiprintf_r+0x1ee>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c5      	beq.n	8009b82 <_vfiprintf_r+0x176>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c3      	b.n	8009b82 <_vfiprintf_r+0x176>
 8009bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfe:	4604      	mov	r4, r0
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f0      	b.n	8009be6 <_vfiprintf_r+0x1da>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4b16      	ldr	r3, [pc, #88]	; (8009c64 <_vfiprintf_r+0x258>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7fd fde8 	bl	80077e4 <_printf_float>
 8009c14:	4607      	mov	r7, r0
 8009c16:	1c78      	adds	r0, r7, #1
 8009c18:	d1d6      	bne.n	8009bc8 <_vfiprintf_r+0x1bc>
 8009c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c1c:	07d9      	lsls	r1, r3, #31
 8009c1e:	d405      	bmi.n	8009c2c <_vfiprintf_r+0x220>
 8009c20:	89ab      	ldrh	r3, [r5, #12]
 8009c22:	059a      	lsls	r2, r3, #22
 8009c24:	d402      	bmi.n	8009c2c <_vfiprintf_r+0x220>
 8009c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c28:	f000 faaf 	bl	800a18a <__retarget_lock_release_recursive>
 8009c2c:	89ab      	ldrh	r3, [r5, #12]
 8009c2e:	065b      	lsls	r3, r3, #25
 8009c30:	f53f af12 	bmi.w	8009a58 <_vfiprintf_r+0x4c>
 8009c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c36:	e711      	b.n	8009a5c <_vfiprintf_r+0x50>
 8009c38:	ab03      	add	r3, sp, #12
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <_vfiprintf_r+0x258>)
 8009c40:	a904      	add	r1, sp, #16
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7fe f872 	bl	8007d2c <_printf_i>
 8009c48:	e7e4      	b.n	8009c14 <_vfiprintf_r+0x208>
 8009c4a:	bf00      	nop
 8009c4c:	0800ab7c 	.word	0x0800ab7c
 8009c50:	0800ab9c 	.word	0x0800ab9c
 8009c54:	0800ab5c 	.word	0x0800ab5c
 8009c58:	0800aa04 	.word	0x0800aa04
 8009c5c:	0800aa0e 	.word	0x0800aa0e
 8009c60:	080077e5 	.word	0x080077e5
 8009c64:	080099e7 	.word	0x080099e7
 8009c68:	0800aa0a 	.word	0x0800aa0a

08009c6c <__swbuf_r>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	460e      	mov	r6, r1
 8009c70:	4614      	mov	r4, r2
 8009c72:	4605      	mov	r5, r0
 8009c74:	b118      	cbz	r0, 8009c7e <__swbuf_r+0x12>
 8009c76:	6983      	ldr	r3, [r0, #24]
 8009c78:	b90b      	cbnz	r3, 8009c7e <__swbuf_r+0x12>
 8009c7a:	f000 f9e7 	bl	800a04c <__sinit>
 8009c7e:	4b21      	ldr	r3, [pc, #132]	; (8009d04 <__swbuf_r+0x98>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	d12b      	bne.n	8009cdc <__swbuf_r+0x70>
 8009c84:	686c      	ldr	r4, [r5, #4]
 8009c86:	69a3      	ldr	r3, [r4, #24]
 8009c88:	60a3      	str	r3, [r4, #8]
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	071a      	lsls	r2, r3, #28
 8009c8e:	d52f      	bpl.n	8009cf0 <__swbuf_r+0x84>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	b36b      	cbz	r3, 8009cf0 <__swbuf_r+0x84>
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	1ac0      	subs	r0, r0, r3
 8009c9a:	6963      	ldr	r3, [r4, #20]
 8009c9c:	b2f6      	uxtb	r6, r6
 8009c9e:	4283      	cmp	r3, r0
 8009ca0:	4637      	mov	r7, r6
 8009ca2:	dc04      	bgt.n	8009cae <__swbuf_r+0x42>
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 f93c 	bl	8009f24 <_fflush_r>
 8009cac:	bb30      	cbnz	r0, 8009cfc <__swbuf_r+0x90>
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	6022      	str	r2, [r4, #0]
 8009cba:	701e      	strb	r6, [r3, #0]
 8009cbc:	6963      	ldr	r3, [r4, #20]
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	4283      	cmp	r3, r0
 8009cc2:	d004      	beq.n	8009cce <__swbuf_r+0x62>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	07db      	lsls	r3, r3, #31
 8009cc8:	d506      	bpl.n	8009cd8 <__swbuf_r+0x6c>
 8009cca:	2e0a      	cmp	r6, #10
 8009ccc:	d104      	bne.n	8009cd8 <__swbuf_r+0x6c>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f927 	bl	8009f24 <_fflush_r>
 8009cd6:	b988      	cbnz	r0, 8009cfc <__swbuf_r+0x90>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <__swbuf_r+0x9c>)
 8009cde:	429c      	cmp	r4, r3
 8009ce0:	d101      	bne.n	8009ce6 <__swbuf_r+0x7a>
 8009ce2:	68ac      	ldr	r4, [r5, #8]
 8009ce4:	e7cf      	b.n	8009c86 <__swbuf_r+0x1a>
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <__swbuf_r+0xa0>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	bf08      	it	eq
 8009cec:	68ec      	ldreq	r4, [r5, #12]
 8009cee:	e7ca      	b.n	8009c86 <__swbuf_r+0x1a>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f81a 	bl	8009d2c <__swsetup_r>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d0cb      	beq.n	8009c94 <__swbuf_r+0x28>
 8009cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8009d00:	e7ea      	b.n	8009cd8 <__swbuf_r+0x6c>
 8009d02:	bf00      	nop
 8009d04:	0800ab7c 	.word	0x0800ab7c
 8009d08:	0800ab9c 	.word	0x0800ab9c
 8009d0c:	0800ab5c 	.word	0x0800ab5c

08009d10 <__ascii_wctomb>:
 8009d10:	b149      	cbz	r1, 8009d26 <__ascii_wctomb+0x16>
 8009d12:	2aff      	cmp	r2, #255	; 0xff
 8009d14:	bf85      	ittet	hi
 8009d16:	238a      	movhi	r3, #138	; 0x8a
 8009d18:	6003      	strhi	r3, [r0, #0]
 8009d1a:	700a      	strbls	r2, [r1, #0]
 8009d1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d20:	bf98      	it	ls
 8009d22:	2001      	movls	r0, #1
 8009d24:	4770      	bx	lr
 8009d26:	4608      	mov	r0, r1
 8009d28:	4770      	bx	lr
	...

08009d2c <__swsetup_r>:
 8009d2c:	4b32      	ldr	r3, [pc, #200]	; (8009df8 <__swsetup_r+0xcc>)
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	b125      	cbz	r5, 8009d42 <__swsetup_r+0x16>
 8009d38:	69ab      	ldr	r3, [r5, #24]
 8009d3a:	b913      	cbnz	r3, 8009d42 <__swsetup_r+0x16>
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f000 f985 	bl	800a04c <__sinit>
 8009d42:	4b2e      	ldr	r3, [pc, #184]	; (8009dfc <__swsetup_r+0xd0>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d10f      	bne.n	8009d68 <__swsetup_r+0x3c>
 8009d48:	686c      	ldr	r4, [r5, #4]
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d50:	0719      	lsls	r1, r3, #28
 8009d52:	d42c      	bmi.n	8009dae <__swsetup_r+0x82>
 8009d54:	06dd      	lsls	r5, r3, #27
 8009d56:	d411      	bmi.n	8009d7c <__swsetup_r+0x50>
 8009d58:	2309      	movs	r3, #9
 8009d5a:	6033      	str	r3, [r6, #0]
 8009d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295
 8009d66:	e03e      	b.n	8009de6 <__swsetup_r+0xba>
 8009d68:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <__swsetup_r+0xd4>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d101      	bne.n	8009d72 <__swsetup_r+0x46>
 8009d6e:	68ac      	ldr	r4, [r5, #8]
 8009d70:	e7eb      	b.n	8009d4a <__swsetup_r+0x1e>
 8009d72:	4b24      	ldr	r3, [pc, #144]	; (8009e04 <__swsetup_r+0xd8>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	bf08      	it	eq
 8009d78:	68ec      	ldreq	r4, [r5, #12]
 8009d7a:	e7e6      	b.n	8009d4a <__swsetup_r+0x1e>
 8009d7c:	0758      	lsls	r0, r3, #29
 8009d7e:	d512      	bpl.n	8009da6 <__swsetup_r+0x7a>
 8009d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d82:	b141      	cbz	r1, 8009d96 <__swsetup_r+0x6a>
 8009d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d002      	beq.n	8009d92 <__swsetup_r+0x66>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff fb6f 	bl	8009470 <_free_r>
 8009d92:	2300      	movs	r3, #0
 8009d94:	6363      	str	r3, [r4, #52]	; 0x34
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f043 0308 	orr.w	r3, r3, #8
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	b94b      	cbnz	r3, 8009dc6 <__swsetup_r+0x9a>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dbc:	d003      	beq.n	8009dc6 <__swsetup_r+0x9a>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f000 fa07 	bl	800a1d4 <__smakebuf_r>
 8009dc6:	89a0      	ldrh	r0, [r4, #12]
 8009dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dcc:	f010 0301 	ands.w	r3, r0, #1
 8009dd0:	d00a      	beq.n	8009de8 <__swsetup_r+0xbc>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	6963      	ldr	r3, [r4, #20]
 8009dd8:	425b      	negs	r3, r3
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	b943      	cbnz	r3, 8009df2 <__swsetup_r+0xc6>
 8009de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009de4:	d1ba      	bne.n	8009d5c <__swsetup_r+0x30>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	0781      	lsls	r1, r0, #30
 8009dea:	bf58      	it	pl
 8009dec:	6963      	ldrpl	r3, [r4, #20]
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	e7f4      	b.n	8009ddc <__swsetup_r+0xb0>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e7f7      	b.n	8009de6 <__swsetup_r+0xba>
 8009df6:	bf00      	nop
 8009df8:	20000024 	.word	0x20000024
 8009dfc:	0800ab7c 	.word	0x0800ab7c
 8009e00:	0800ab9c 	.word	0x0800ab9c
 8009e04:	0800ab5c 	.word	0x0800ab5c

08009e08 <abort>:
 8009e08:	b508      	push	{r3, lr}
 8009e0a:	2006      	movs	r0, #6
 8009e0c:	f000 fa52 	bl	800a2b4 <raise>
 8009e10:	2001      	movs	r0, #1
 8009e12:	f7f7 ff89 	bl	8001d28 <_exit>
	...

08009e18 <__sflush_r>:
 8009e18:	898a      	ldrh	r2, [r1, #12]
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	4605      	mov	r5, r0
 8009e20:	0710      	lsls	r0, r2, #28
 8009e22:	460c      	mov	r4, r1
 8009e24:	d458      	bmi.n	8009ed8 <__sflush_r+0xc0>
 8009e26:	684b      	ldr	r3, [r1, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc05      	bgt.n	8009e38 <__sflush_r+0x20>
 8009e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dc02      	bgt.n	8009e38 <__sflush_r+0x20>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d0f9      	beq.n	8009e32 <__sflush_r+0x1a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e44:	682f      	ldr	r7, [r5, #0]
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	d032      	beq.n	8009eb0 <__sflush_r+0x98>
 8009e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	075a      	lsls	r2, r3, #29
 8009e50:	d505      	bpl.n	8009e5e <__sflush_r+0x46>
 8009e52:	6863      	ldr	r3, [r4, #4]
 8009e54:	1ac0      	subs	r0, r0, r3
 8009e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e58:	b10b      	cbz	r3, 8009e5e <__sflush_r+0x46>
 8009e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4602      	mov	r2, r0
 8009e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e64:	6a21      	ldr	r1, [r4, #32]
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b0      	blx	r6
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	d106      	bne.n	8009e7e <__sflush_r+0x66>
 8009e70:	6829      	ldr	r1, [r5, #0]
 8009e72:	291d      	cmp	r1, #29
 8009e74:	d82c      	bhi.n	8009ed0 <__sflush_r+0xb8>
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <__sflush_r+0x108>)
 8009e78:	40ca      	lsrs	r2, r1
 8009e7a:	07d6      	lsls	r6, r2, #31
 8009e7c:	d528      	bpl.n	8009ed0 <__sflush_r+0xb8>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	6062      	str	r2, [r4, #4]
 8009e82:	04d9      	lsls	r1, r3, #19
 8009e84:	6922      	ldr	r2, [r4, #16]
 8009e86:	6022      	str	r2, [r4, #0]
 8009e88:	d504      	bpl.n	8009e94 <__sflush_r+0x7c>
 8009e8a:	1c42      	adds	r2, r0, #1
 8009e8c:	d101      	bne.n	8009e92 <__sflush_r+0x7a>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	b903      	cbnz	r3, 8009e94 <__sflush_r+0x7c>
 8009e92:	6560      	str	r0, [r4, #84]	; 0x54
 8009e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e96:	602f      	str	r7, [r5, #0]
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d0ca      	beq.n	8009e32 <__sflush_r+0x1a>
 8009e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d002      	beq.n	8009eaa <__sflush_r+0x92>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f7ff fae3 	bl	8009470 <_free_r>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	6360      	str	r0, [r4, #52]	; 0x34
 8009eae:	e7c1      	b.n	8009e34 <__sflush_r+0x1c>
 8009eb0:	6a21      	ldr	r1, [r4, #32]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b0      	blx	r6
 8009eb8:	1c41      	adds	r1, r0, #1
 8009eba:	d1c7      	bne.n	8009e4c <__sflush_r+0x34>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0c4      	beq.n	8009e4c <__sflush_r+0x34>
 8009ec2:	2b1d      	cmp	r3, #29
 8009ec4:	d001      	beq.n	8009eca <__sflush_r+0xb2>
 8009ec6:	2b16      	cmp	r3, #22
 8009ec8:	d101      	bne.n	8009ece <__sflush_r+0xb6>
 8009eca:	602f      	str	r7, [r5, #0]
 8009ecc:	e7b1      	b.n	8009e32 <__sflush_r+0x1a>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	e7ad      	b.n	8009e34 <__sflush_r+0x1c>
 8009ed8:	690f      	ldr	r7, [r1, #16]
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	d0a9      	beq.n	8009e32 <__sflush_r+0x1a>
 8009ede:	0793      	lsls	r3, r2, #30
 8009ee0:	680e      	ldr	r6, [r1, #0]
 8009ee2:	bf08      	it	eq
 8009ee4:	694b      	ldreq	r3, [r1, #20]
 8009ee6:	600f      	str	r7, [r1, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	2300      	movne	r3, #0
 8009eec:	eba6 0807 	sub.w	r8, r6, r7
 8009ef0:	608b      	str	r3, [r1, #8]
 8009ef2:	f1b8 0f00 	cmp.w	r8, #0
 8009ef6:	dd9c      	ble.n	8009e32 <__sflush_r+0x1a>
 8009ef8:	6a21      	ldr	r1, [r4, #32]
 8009efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009efc:	4643      	mov	r3, r8
 8009efe:	463a      	mov	r2, r7
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b0      	blx	r6
 8009f04:	2800      	cmp	r0, #0
 8009f06:	dc06      	bgt.n	8009f16 <__sflush_r+0xfe>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	e78e      	b.n	8009e34 <__sflush_r+0x1c>
 8009f16:	4407      	add	r7, r0
 8009f18:	eba8 0800 	sub.w	r8, r8, r0
 8009f1c:	e7e9      	b.n	8009ef2 <__sflush_r+0xda>
 8009f1e:	bf00      	nop
 8009f20:	20400001 	.word	0x20400001

08009f24 <_fflush_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	690b      	ldr	r3, [r1, #16]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	b913      	cbnz	r3, 8009f34 <_fflush_r+0x10>
 8009f2e:	2500      	movs	r5, #0
 8009f30:	4628      	mov	r0, r5
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	b118      	cbz	r0, 8009f3e <_fflush_r+0x1a>
 8009f36:	6983      	ldr	r3, [r0, #24]
 8009f38:	b90b      	cbnz	r3, 8009f3e <_fflush_r+0x1a>
 8009f3a:	f000 f887 	bl	800a04c <__sinit>
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <_fflush_r+0x6c>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	d11b      	bne.n	8009f7c <_fflush_r+0x58>
 8009f44:	686c      	ldr	r4, [r5, #4]
 8009f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ef      	beq.n	8009f2e <_fflush_r+0xa>
 8009f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f50:	07d0      	lsls	r0, r2, #31
 8009f52:	d404      	bmi.n	8009f5e <_fflush_r+0x3a>
 8009f54:	0599      	lsls	r1, r3, #22
 8009f56:	d402      	bmi.n	8009f5e <_fflush_r+0x3a>
 8009f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f5a:	f000 f915 	bl	800a188 <__retarget_lock_acquire_recursive>
 8009f5e:	4628      	mov	r0, r5
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7ff ff59 	bl	8009e18 <__sflush_r>
 8009f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f68:	07da      	lsls	r2, r3, #31
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	d4e0      	bmi.n	8009f30 <_fflush_r+0xc>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	059b      	lsls	r3, r3, #22
 8009f72:	d4dd      	bmi.n	8009f30 <_fflush_r+0xc>
 8009f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f76:	f000 f908 	bl	800a18a <__retarget_lock_release_recursive>
 8009f7a:	e7d9      	b.n	8009f30 <_fflush_r+0xc>
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <_fflush_r+0x70>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <_fflush_r+0x62>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7df      	b.n	8009f46 <_fflush_r+0x22>
 8009f86:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <_fflush_r+0x74>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7da      	b.n	8009f46 <_fflush_r+0x22>
 8009f90:	0800ab7c 	.word	0x0800ab7c
 8009f94:	0800ab9c 	.word	0x0800ab9c
 8009f98:	0800ab5c 	.word	0x0800ab5c

08009f9c <std>:
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009faa:	6083      	str	r3, [r0, #8]
 8009fac:	8181      	strh	r1, [r0, #12]
 8009fae:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb0:	81c2      	strh	r2, [r0, #14]
 8009fb2:	6183      	str	r3, [r0, #24]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	305c      	adds	r0, #92	; 0x5c
 8009fba:	f7fd fb6b 	bl	8007694 <memset>
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <std+0x38>)
 8009fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8009fc2:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <std+0x3c>)
 8009fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fc6:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <std+0x40>)
 8009fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <std+0x44>)
 8009fcc:	6224      	str	r4, [r4, #32]
 8009fce:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0800a2ed 	.word	0x0800a2ed
 8009fd8:	0800a30f 	.word	0x0800a30f
 8009fdc:	0800a347 	.word	0x0800a347
 8009fe0:	0800a36b 	.word	0x0800a36b

08009fe4 <_cleanup_r>:
 8009fe4:	4901      	ldr	r1, [pc, #4]	; (8009fec <_cleanup_r+0x8>)
 8009fe6:	f000 b8af 	b.w	800a148 <_fwalk_reent>
 8009fea:	bf00      	nop
 8009fec:	08009f25 	.word	0x08009f25

08009ff0 <__sfmoreglue>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	1e4a      	subs	r2, r1, #1
 8009ff4:	2568      	movs	r5, #104	; 0x68
 8009ff6:	4355      	muls	r5, r2
 8009ff8:	460e      	mov	r6, r1
 8009ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ffe:	f7ff fa87 	bl	8009510 <_malloc_r>
 800a002:	4604      	mov	r4, r0
 800a004:	b140      	cbz	r0, 800a018 <__sfmoreglue+0x28>
 800a006:	2100      	movs	r1, #0
 800a008:	e9c0 1600 	strd	r1, r6, [r0]
 800a00c:	300c      	adds	r0, #12
 800a00e:	60a0      	str	r0, [r4, #8]
 800a010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a014:	f7fd fb3e 	bl	8007694 <memset>
 800a018:	4620      	mov	r0, r4
 800a01a:	bd70      	pop	{r4, r5, r6, pc}

0800a01c <__sfp_lock_acquire>:
 800a01c:	4801      	ldr	r0, [pc, #4]	; (800a024 <__sfp_lock_acquire+0x8>)
 800a01e:	f000 b8b3 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800a022:	bf00      	nop
 800a024:	20000910 	.word	0x20000910

0800a028 <__sfp_lock_release>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__sfp_lock_release+0x8>)
 800a02a:	f000 b8ae 	b.w	800a18a <__retarget_lock_release_recursive>
 800a02e:	bf00      	nop
 800a030:	20000910 	.word	0x20000910

0800a034 <__sinit_lock_acquire>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__sinit_lock_acquire+0x8>)
 800a036:	f000 b8a7 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800a03a:	bf00      	nop
 800a03c:	2000090b 	.word	0x2000090b

0800a040 <__sinit_lock_release>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__sinit_lock_release+0x8>)
 800a042:	f000 b8a2 	b.w	800a18a <__retarget_lock_release_recursive>
 800a046:	bf00      	nop
 800a048:	2000090b 	.word	0x2000090b

0800a04c <__sinit>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	f7ff fff0 	bl	800a034 <__sinit_lock_acquire>
 800a054:	69a3      	ldr	r3, [r4, #24]
 800a056:	b11b      	cbz	r3, 800a060 <__sinit+0x14>
 800a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a05c:	f7ff bff0 	b.w	800a040 <__sinit_lock_release>
 800a060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a064:	6523      	str	r3, [r4, #80]	; 0x50
 800a066:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <__sinit+0x68>)
 800a068:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <__sinit+0x6c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a06e:	42a3      	cmp	r3, r4
 800a070:	bf04      	itt	eq
 800a072:	2301      	moveq	r3, #1
 800a074:	61a3      	streq	r3, [r4, #24]
 800a076:	4620      	mov	r0, r4
 800a078:	f000 f820 	bl	800a0bc <__sfp>
 800a07c:	6060      	str	r0, [r4, #4]
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 f81c 	bl	800a0bc <__sfp>
 800a084:	60a0      	str	r0, [r4, #8]
 800a086:	4620      	mov	r0, r4
 800a088:	f000 f818 	bl	800a0bc <__sfp>
 800a08c:	2200      	movs	r2, #0
 800a08e:	60e0      	str	r0, [r4, #12]
 800a090:	2104      	movs	r1, #4
 800a092:	6860      	ldr	r0, [r4, #4]
 800a094:	f7ff ff82 	bl	8009f9c <std>
 800a098:	68a0      	ldr	r0, [r4, #8]
 800a09a:	2201      	movs	r2, #1
 800a09c:	2109      	movs	r1, #9
 800a09e:	f7ff ff7d 	bl	8009f9c <std>
 800a0a2:	68e0      	ldr	r0, [r4, #12]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	2112      	movs	r1, #18
 800a0a8:	f7ff ff78 	bl	8009f9c <std>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	61a3      	str	r3, [r4, #24]
 800a0b0:	e7d2      	b.n	800a058 <__sinit+0xc>
 800a0b2:	bf00      	nop
 800a0b4:	0800a7d8 	.word	0x0800a7d8
 800a0b8:	08009fe5 	.word	0x08009fe5

0800a0bc <__sfp>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	4607      	mov	r7, r0
 800a0c0:	f7ff ffac 	bl	800a01c <__sfp_lock_acquire>
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <__sfp+0x84>)
 800a0c6:	681e      	ldr	r6, [r3, #0]
 800a0c8:	69b3      	ldr	r3, [r6, #24]
 800a0ca:	b913      	cbnz	r3, 800a0d2 <__sfp+0x16>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7ff ffbd 	bl	800a04c <__sinit>
 800a0d2:	3648      	adds	r6, #72	; 0x48
 800a0d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	d503      	bpl.n	800a0e4 <__sfp+0x28>
 800a0dc:	6833      	ldr	r3, [r6, #0]
 800a0de:	b30b      	cbz	r3, 800a124 <__sfp+0x68>
 800a0e0:	6836      	ldr	r6, [r6, #0]
 800a0e2:	e7f7      	b.n	800a0d4 <__sfp+0x18>
 800a0e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0e8:	b9d5      	cbnz	r5, 800a120 <__sfp+0x64>
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <__sfp+0x88>)
 800a0ec:	60e3      	str	r3, [r4, #12]
 800a0ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0f4:	f000 f847 	bl	800a186 <__retarget_lock_init_recursive>
 800a0f8:	f7ff ff96 	bl	800a028 <__sfp_lock_release>
 800a0fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a104:	6025      	str	r5, [r4, #0]
 800a106:	61a5      	str	r5, [r4, #24]
 800a108:	2208      	movs	r2, #8
 800a10a:	4629      	mov	r1, r5
 800a10c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a110:	f7fd fac0 	bl	8007694 <memset>
 800a114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a11c:	4620      	mov	r0, r4
 800a11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a120:	3468      	adds	r4, #104	; 0x68
 800a122:	e7d9      	b.n	800a0d8 <__sfp+0x1c>
 800a124:	2104      	movs	r1, #4
 800a126:	4638      	mov	r0, r7
 800a128:	f7ff ff62 	bl	8009ff0 <__sfmoreglue>
 800a12c:	4604      	mov	r4, r0
 800a12e:	6030      	str	r0, [r6, #0]
 800a130:	2800      	cmp	r0, #0
 800a132:	d1d5      	bne.n	800a0e0 <__sfp+0x24>
 800a134:	f7ff ff78 	bl	800a028 <__sfp_lock_release>
 800a138:	230c      	movs	r3, #12
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	e7ee      	b.n	800a11c <__sfp+0x60>
 800a13e:	bf00      	nop
 800a140:	0800a7d8 	.word	0x0800a7d8
 800a144:	ffff0001 	.word	0xffff0001

0800a148 <_fwalk_reent>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	4606      	mov	r6, r0
 800a14e:	4688      	mov	r8, r1
 800a150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a154:	2700      	movs	r7, #0
 800a156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a15a:	f1b9 0901 	subs.w	r9, r9, #1
 800a15e:	d505      	bpl.n	800a16c <_fwalk_reent+0x24>
 800a160:	6824      	ldr	r4, [r4, #0]
 800a162:	2c00      	cmp	r4, #0
 800a164:	d1f7      	bne.n	800a156 <_fwalk_reent+0xe>
 800a166:	4638      	mov	r0, r7
 800a168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16c:	89ab      	ldrh	r3, [r5, #12]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d907      	bls.n	800a182 <_fwalk_reent+0x3a>
 800a172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a176:	3301      	adds	r3, #1
 800a178:	d003      	beq.n	800a182 <_fwalk_reent+0x3a>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	47c0      	blx	r8
 800a180:	4307      	orrs	r7, r0
 800a182:	3568      	adds	r5, #104	; 0x68
 800a184:	e7e9      	b.n	800a15a <_fwalk_reent+0x12>

0800a186 <__retarget_lock_init_recursive>:
 800a186:	4770      	bx	lr

0800a188 <__retarget_lock_acquire_recursive>:
 800a188:	4770      	bx	lr

0800a18a <__retarget_lock_release_recursive>:
 800a18a:	4770      	bx	lr

0800a18c <__swhatbuf_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	460e      	mov	r6, r1
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	2900      	cmp	r1, #0
 800a196:	b096      	sub	sp, #88	; 0x58
 800a198:	4614      	mov	r4, r2
 800a19a:	461d      	mov	r5, r3
 800a19c:	da07      	bge.n	800a1ae <__swhatbuf_r+0x22>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	89b3      	ldrh	r3, [r6, #12]
 800a1a4:	061a      	lsls	r2, r3, #24
 800a1a6:	d410      	bmi.n	800a1ca <__swhatbuf_r+0x3e>
 800a1a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ac:	e00e      	b.n	800a1cc <__swhatbuf_r+0x40>
 800a1ae:	466a      	mov	r2, sp
 800a1b0:	f000 f902 	bl	800a3b8 <_fstat_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	dbf2      	blt.n	800a19e <__swhatbuf_r+0x12>
 800a1b8:	9a01      	ldr	r2, [sp, #4]
 800a1ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1c2:	425a      	negs	r2, r3
 800a1c4:	415a      	adcs	r2, r3
 800a1c6:	602a      	str	r2, [r5, #0]
 800a1c8:	e7ee      	b.n	800a1a8 <__swhatbuf_r+0x1c>
 800a1ca:	2340      	movs	r3, #64	; 0x40
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	b016      	add	sp, #88	; 0x58
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}

0800a1d4 <__smakebuf_r>:
 800a1d4:	898b      	ldrh	r3, [r1, #12]
 800a1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d8:	079d      	lsls	r5, r3, #30
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	d507      	bpl.n	800a1f0 <__smakebuf_r+0x1c>
 800a1e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	6163      	str	r3, [r4, #20]
 800a1ec:	b002      	add	sp, #8
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	ab01      	add	r3, sp, #4
 800a1f2:	466a      	mov	r2, sp
 800a1f4:	f7ff ffca 	bl	800a18c <__swhatbuf_r>
 800a1f8:	9900      	ldr	r1, [sp, #0]
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	f7ff f987 	bl	8009510 <_malloc_r>
 800a202:	b948      	cbnz	r0, 800a218 <__smakebuf_r+0x44>
 800a204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a208:	059a      	lsls	r2, r3, #22
 800a20a:	d4ef      	bmi.n	800a1ec <__smakebuf_r+0x18>
 800a20c:	f023 0303 	bic.w	r3, r3, #3
 800a210:	f043 0302 	orr.w	r3, r3, #2
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	e7e3      	b.n	800a1e0 <__smakebuf_r+0xc>
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <__smakebuf_r+0x7c>)
 800a21a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	6020      	str	r0, [r4, #0]
 800a220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a224:	81a3      	strh	r3, [r4, #12]
 800a226:	9b00      	ldr	r3, [sp, #0]
 800a228:	6163      	str	r3, [r4, #20]
 800a22a:	9b01      	ldr	r3, [sp, #4]
 800a22c:	6120      	str	r0, [r4, #16]
 800a22e:	b15b      	cbz	r3, 800a248 <__smakebuf_r+0x74>
 800a230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a234:	4630      	mov	r0, r6
 800a236:	f000 f8d1 	bl	800a3dc <_isatty_r>
 800a23a:	b128      	cbz	r0, 800a248 <__smakebuf_r+0x74>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	89a0      	ldrh	r0, [r4, #12]
 800a24a:	4305      	orrs	r5, r0
 800a24c:	81a5      	strh	r5, [r4, #12]
 800a24e:	e7cd      	b.n	800a1ec <__smakebuf_r+0x18>
 800a250:	08009fe5 	.word	0x08009fe5

0800a254 <_malloc_usable_size_r>:
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f18      	subs	r0, r3, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfbc      	itt	lt
 800a25e:	580b      	ldrlt	r3, [r1, r0]
 800a260:	18c0      	addlt	r0, r0, r3
 800a262:	4770      	bx	lr

0800a264 <_raise_r>:
 800a264:	291f      	cmp	r1, #31
 800a266:	b538      	push	{r3, r4, r5, lr}
 800a268:	4604      	mov	r4, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	d904      	bls.n	800a278 <_raise_r+0x14>
 800a26e:	2316      	movs	r3, #22
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	f04f 30ff 	mov.w	r0, #4294967295
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a27a:	b112      	cbz	r2, 800a282 <_raise_r+0x1e>
 800a27c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a280:	b94b      	cbnz	r3, 800a296 <_raise_r+0x32>
 800a282:	4620      	mov	r0, r4
 800a284:	f000 f830 	bl	800a2e8 <_getpid_r>
 800a288:	462a      	mov	r2, r5
 800a28a:	4601      	mov	r1, r0
 800a28c:	4620      	mov	r0, r4
 800a28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a292:	f000 b817 	b.w	800a2c4 <_kill_r>
 800a296:	2b01      	cmp	r3, #1
 800a298:	d00a      	beq.n	800a2b0 <_raise_r+0x4c>
 800a29a:	1c59      	adds	r1, r3, #1
 800a29c:	d103      	bne.n	800a2a6 <_raise_r+0x42>
 800a29e:	2316      	movs	r3, #22
 800a2a0:	6003      	str	r3, [r0, #0]
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	e7e7      	b.n	800a276 <_raise_r+0x12>
 800a2a6:	2400      	movs	r4, #0
 800a2a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	4798      	blx	r3
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e7e0      	b.n	800a276 <_raise_r+0x12>

0800a2b4 <raise>:
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <raise+0xc>)
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f7ff bfd3 	b.w	800a264 <_raise_r>
 800a2be:	bf00      	nop
 800a2c0:	20000024 	.word	0x20000024

0800a2c4 <_kill_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d07      	ldr	r5, [pc, #28]	; (800a2e4 <_kill_r+0x20>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	f7f7 fd19 	bl	8001d08 <_kill>
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	d102      	bne.n	800a2e0 <_kill_r+0x1c>
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	b103      	cbz	r3, 800a2e0 <_kill_r+0x1c>
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000904 	.word	0x20000904

0800a2e8 <_getpid_r>:
 800a2e8:	f7f7 bd06 	b.w	8001cf8 <_getpid>

0800a2ec <__sread>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f4:	f000 f894 	bl	800a420 <_read_r>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	bfab      	itete	ge
 800a2fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a300:	181b      	addge	r3, r3, r0
 800a302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a306:	bfac      	ite	ge
 800a308:	6563      	strge	r3, [r4, #84]	; 0x54
 800a30a:	81a3      	strhlt	r3, [r4, #12]
 800a30c:	bd10      	pop	{r4, pc}

0800a30e <__swrite>:
 800a30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a312:	461f      	mov	r7, r3
 800a314:	898b      	ldrh	r3, [r1, #12]
 800a316:	05db      	lsls	r3, r3, #23
 800a318:	4605      	mov	r5, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	4616      	mov	r6, r2
 800a31e:	d505      	bpl.n	800a32c <__swrite+0x1e>
 800a320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a324:	2302      	movs	r3, #2
 800a326:	2200      	movs	r2, #0
 800a328:	f000 f868 	bl	800a3fc <_lseek_r>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	4632      	mov	r2, r6
 800a33a:	463b      	mov	r3, r7
 800a33c:	4628      	mov	r0, r5
 800a33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a342:	f000 b817 	b.w	800a374 <_write_r>

0800a346 <__sseek>:
 800a346:	b510      	push	{r4, lr}
 800a348:	460c      	mov	r4, r1
 800a34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34e:	f000 f855 	bl	800a3fc <_lseek_r>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	bf15      	itete	ne
 800a358:	6560      	strne	r0, [r4, #84]	; 0x54
 800a35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a362:	81a3      	strheq	r3, [r4, #12]
 800a364:	bf18      	it	ne
 800a366:	81a3      	strhne	r3, [r4, #12]
 800a368:	bd10      	pop	{r4, pc}

0800a36a <__sclose>:
 800a36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36e:	f000 b813 	b.w	800a398 <_close_r>
	...

0800a374 <_write_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d07      	ldr	r5, [pc, #28]	; (800a394 <_write_r+0x20>)
 800a378:	4604      	mov	r4, r0
 800a37a:	4608      	mov	r0, r1
 800a37c:	4611      	mov	r1, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	602a      	str	r2, [r5, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	f7f7 fcf7 	bl	8001d76 <_write>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_write_r+0x1e>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_write_r+0x1e>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	20000904 	.word	0x20000904

0800a398 <_close_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_close_r+0x1c>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7f7 fd03 	bl	8001dae <_close>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_close_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_close_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20000904 	.word	0x20000904

0800a3b8 <_fstat_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	; (800a3d8 <_fstat_r+0x20>)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	f7f7 fcfe 	bl	8001dc6 <_fstat>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	d102      	bne.n	800a3d4 <_fstat_r+0x1c>
 800a3ce:	682b      	ldr	r3, [r5, #0]
 800a3d0:	b103      	cbz	r3, 800a3d4 <_fstat_r+0x1c>
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000904 	.word	0x20000904

0800a3dc <_isatty_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d06      	ldr	r5, [pc, #24]	; (800a3f8 <_isatty_r+0x1c>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	f7f7 fcfd 	bl	8001de6 <_isatty>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_isatty_r+0x1a>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_isatty_r+0x1a>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	20000904 	.word	0x20000904

0800a3fc <_lseek_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d07      	ldr	r5, [pc, #28]	; (800a41c <_lseek_r+0x20>)
 800a400:	4604      	mov	r4, r0
 800a402:	4608      	mov	r0, r1
 800a404:	4611      	mov	r1, r2
 800a406:	2200      	movs	r2, #0
 800a408:	602a      	str	r2, [r5, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	f7f7 fcf6 	bl	8001dfc <_lseek>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_lseek_r+0x1e>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_lseek_r+0x1e>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20000904 	.word	0x20000904

0800a420 <_read_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d07      	ldr	r5, [pc, #28]	; (800a440 <_read_r+0x20>)
 800a424:	4604      	mov	r4, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f7 fc84 	bl	8001d3c <_read>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_read_r+0x1e>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_read_r+0x1e>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20000904 	.word	0x20000904

0800a444 <_init>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	bf00      	nop
 800a448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44a:	bc08      	pop	{r3}
 800a44c:	469e      	mov	lr, r3
 800a44e:	4770      	bx	lr

0800a450 <_fini>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr
