
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007224  08007224  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800722c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000006fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000784  20000784  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172c0  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031de  00000000  00000000  00037378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0003a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  0003b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e52  00000000  00000000  0003c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d3e  00000000  00000000  00040fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc99f  00000000  00000000  00055d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012269f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f48  00000000  00000000  001226f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e6c 	.word	0x08006e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006e6c 	.word	0x08006e6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <INA_init>:
 *      Author: bobox
 */

#include "ina239.h"

void INA_init(SPI_HandleTypeDef* spi){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	// format data bytes
	uint8_t data[3];
	data[0] = (CONFIG >> 2) | INA_WRITE;								// write to config reg
 8000580:	2300      	movs	r3, #0
 8000582:	733b      	strb	r3, [r7, #12]
	data[1] = 0x80;														// reset device
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);	// pull CS low
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <INA_init+0x50>)
 8000594:	f001 f8c6 	bl	8001724 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &data[0], sizeof(data), 100);					// send 3 bytes
 8000598:	f107 010c 	add.w	r1, r7, #12
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	2203      	movs	r2, #3
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 f9f0 	bl	8002986 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80005a6:	bf00      	nop
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f002 fcca 	bl	8002f42 <HAL_SPI_GetState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d1f9      	bne.n	80005a8 <INA_init+0x30>
	HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_SET);		// pull CS high
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <INA_init+0x50>)
 80005bc:	f001 f8b2 	bl	8001724 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020c00 	.word	0x40020c00

080005cc <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005cc:	b40f      	push	{r0, r1, r2, r3}
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <myprintf+0x44>)
 80005e4:	f006 f826 	bl	8006634 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <myprintf+0x44>)
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4905      	ldr	r1, [pc, #20]	; (8000610 <myprintf+0x44>)
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <myprintf+0x48>)
 80005fe:	f002 fdc6 	bl	800318e <HAL_UART_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr
 8000610:	200000a8 	.word	0x200000a8
 8000614:	200002bc 	.word	0x200002bc

08000618 <todo_on_alarm>:

void todo_on_alarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef* time){    
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800061e:	af02      	add	r7, sp, #8
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	6018      	str	r0, [r3, #0]
 8000624:	463b      	mov	r3, r7
 8000626:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    SD_mount(&FatFs);
 8000628:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fb03 	bl	8000c38 <SD_mount>
    char buf[256] = "%02d:%02d:%02d\n";
 8000632:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <todo_on_alarm+0x8c>)
 8000638:	4625      	mov	r5, r4
 800063a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800063c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000640:	f104 0310 	add.w	r3, r4, #16
 8000644:	22f0      	movs	r2, #240	; 0xf0
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f005 ff9f 	bl	800658c <memset>
    char buf2[256];
    sprintf(buf2, buf, time->Hours, time->Minutes, time->Seconds);
 800064e:	463b      	mov	r3, r7
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	463b      	mov	r3, r7
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	785b      	ldrb	r3, [r3, #1]
 800065c:	461c      	mov	r4, r3
 800065e:	463b      	mov	r3, r7
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000668:	f107 000c 	add.w	r0, r7, #12
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4623      	mov	r3, r4
 8000670:	f005 ff94 	bl	800659c <siprintf>
    int btw = strlen(buf2);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
    SD_write("write.csv", FA_READ | FA_WRITE | FA_OPEN_APPEND, buf2, btw);
 8000684:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8000688:	f107 020c 	add.w	r2, r7, #12
 800068c:	2133      	movs	r1, #51	; 0x33
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <todo_on_alarm+0x90>)
 8000690:	f000 fb04 	bl	8000c9c <SD_write>
    SD_unmount();
 8000694:	f000 fb54 	bl	8000d40 <SD_unmount>
}
 8000698:	bf00      	nop
 800069a:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 800069e:	46bd      	mov	sp, r7
 80006a0:	bdb0      	pop	{r4, r5, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08006e90 	.word	0x08006e90
 80006a8:	08006e84 	.word	0x08006e84

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fd06 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f870 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f9c6 	bl	8000a4c <MX_GPIO_Init>
  MX_FATFS_Init();
 80006c0:	f003 f82e 	bl	8003720 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 f998 	bl	80009f8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80006c8:	f000 f960 	bl	800098c <MX_SPI3_Init>
  MX_RTC_Init();
 80006cc:	f000 f8c6 	bl	800085c <MX_RTC_Init>
  MX_SPI2_Init();
 80006d0:	f000 f924 	bl	800091c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  INA_init(&hspi3);
 80006d4:	482b      	ldr	r0, [pc, #172]	; (8000784 <main+0xd8>)
 80006d6:	f7ff ff4f 	bl	8000578 <INA_init>

  FATFS FatFs;
  SD_mount(&FatFs);
 80006da:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 faaa 	bl	8000c38 <SD_mount>

  // Write header
  char buf[256] = "Time, Angle\n";
 80006e4:	f107 051c 	add.w	r5, r7, #28
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <main+0xdc>)
 80006ea:	462c      	mov	r4, r5
 80006ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ee:	c407      	stmia	r4!, {r0, r1, r2}
 80006f0:	7023      	strb	r3, [r4, #0]
 80006f2:	f105 030d 	add.w	r3, r5, #13
 80006f6:	22f3      	movs	r2, #243	; 0xf3
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 ff46 	bl	800658c <memset>
  int btw = strlen(buf);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd63 	bl	80001d0 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
  UINT bytesWrote;
  bytesWrote = SD_write("write.csv", FA_READ | FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS, buf, btw);
 8000710:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000714:	f107 021c 	add.w	r2, r7, #28
 8000718:	211b      	movs	r1, #27
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <main+0xe0>)
 800071c:	f000 fabe 	bl	8000c9c <SD_write>
 8000720:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350
  myprintf("Wrote %i bytes to 'write.csv'!\r\n", bytesWrote);
 8000724:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <main+0xe4>)
 800072a:	f7ff ff4f 	bl	80005cc <myprintf>

  SD_unmount();
 800072e:	f000 fb07 	bl	8000d40 <SD_unmount>

  // reset timer to 0
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x0000){
 8000732:	2101      	movs	r1, #1
 8000734:	4817      	ldr	r0, [pc, #92]	; (8000794 <main+0xe8>)
 8000736:	f002 f885 	bl	8002844 <HAL_RTCEx_BKUPRead>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <main+0x9a>
    rtc_set_time(&hrtc);
 8000740:	4814      	ldr	r0, [pc, #80]	; (8000794 <main+0xe8>)
 8000742:	f000 fa2e 	bl	8000ba2 <rtc_set_time>
    // myprintf("%x %x %x %x | ", buf[0], buf[1], buf[2], buf[3]);
    // HAL_Delay(500);

    RTC_TimeTypeDef myTime;
    RTC_DateTypeDef myDate;
    rtc_get_time(&hrtc, &myDate, &myTime);
 8000746:	f107 0208 	add.w	r2, r7, #8
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0xe8>)
 8000750:	f000 fa5e 	bl	8000c10 <rtc_get_time>
    uint32_t current_second = HAL_GetTick();
 8000754:	f000 fd1c 	bl	8001190 <HAL_GetTick>
 8000758:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
    if (current_second - last_second > 1000)
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <main+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800076a:	d9ec      	bls.n	8000746 <main+0x9a>
    {
        // 1 second has elapsed, log time
        todo_on_alarm(&hrtc, &myTime);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4619      	mov	r1, r3
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <main+0xe8>)
 8000774:	f7ff ff50 	bl	8000618 <todo_on_alarm>
        last_second = current_second;
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <main+0xec>)
 800077a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800077e:	6013      	str	r3, [r2, #0]
  {
 8000780:	e7e1      	b.n	8000746 <main+0x9a>
 8000782:	bf00      	nop
 8000784:	20000244 	.word	0x20000244
 8000788:	08006fb4 	.word	0x08006fb4
 800078c:	08006e84 	.word	0x08006e84
 8000790:	08006f90 	.word	0x08006f90
 8000794:	2000029c 	.word	0x2000029c
 8000798:	200000a4 	.word	0x200000a4

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 feee 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xb8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <SystemClock_Config+0xb8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <SystemClock_Config+0xb8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <SystemClock_Config+0xbc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <SystemClock_Config+0xbc>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <SystemClock_Config+0xbc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007f8:	230a      	movs	r3, #10
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f000 ffa1 	bl	8001758 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800081c:	f000 f9bc 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fa04 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000846:	f000 f9a7 	bl	8000b98 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	; 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_RTC_Init+0xb8>)
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_RTC_Init+0xbc>)
 8000878:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_RTC_Init+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_RTC_Init+0xb8>)
 8000882:	227f      	movs	r2, #127	; 0x7f
 8000884:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_RTC_Init+0xb8>)
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_RTC_Init+0xb8>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_RTC_Init+0xb8>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_RTC_Init+0xb8>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_RTC_Init+0xb8>)
 80008a0:	f001 fc84 	bl	80021ac <HAL_RTC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f975 	bl	8000b98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2201      	movs	r2, #1
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_RTC_Init+0xb8>)
 80008ca:	f001 fd00 	bl	80022ce <HAL_RTC_SetTime>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f960 	bl	8000b98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008d8:	2301      	movs	r3, #1
 80008da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008dc:	2301      	movs	r3, #1
 80008de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_RTC_Init+0xb8>)
 80008f0:	f001 fe08 	bl	8002504 <HAL_RTC_SetDate>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008fa:	f000 f94d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register 
 80008fe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000902:	2101      	movs	r1, #1
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <MX_RTC_Init+0xb8>)
 8000906:	f001 ff83 	bl	8002810 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000029c 	.word	0x2000029c
 8000918:	40002800 	.word	0x40002800

0800091c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_SPI2_Init+0x68>)
 8000922:	4a19      	ldr	r2, [pc, #100]	; (8000988 <MX_SPI2_Init+0x6c>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_SPI2_Init+0x68>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_SPI2_Init+0x68>)
 8000930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000934:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_SPI2_Init+0x68>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_SPI2_Init+0x68>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_SPI2_Init+0x68>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SPI2_Init+0x68>)
 800094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI2_Init+0x68>)
 8000952:	2238      	movs	r2, #56	; 0x38
 8000954:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_SPI2_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI2_Init+0x68>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_SPI2_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI2_Init+0x68>)
 800096a:	220a      	movs	r2, #10
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_SPI2_Init+0x68>)
 8000970:	f001 ff80 	bl	8002874 <HAL_SPI_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800097a:	f000 f90d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200001ec 	.word	0x200001ec
 8000988:	40003800 	.word	0x40003800

0800098c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_SPI3_Init+0x64>)
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_SPI3_Init+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI3_Init+0x64>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009c0:	2238      	movs	r2, #56	; 0x38
 80009c2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009d8:	220a      	movs	r2, #10
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_SPI3_Init+0x64>)
 80009de:	f001 ff49 	bl	8002874 <HAL_SPI_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 f8d6 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000244 	.word	0x20000244
 80009f4:	40003c00 	.word	0x40003c00

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f002 fb60 	bl	80030f4 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f8ad 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002bc 	.word	0x200002bc
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a40      	ldr	r2, [pc, #256]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af4:	4825      	ldr	r0, [pc, #148]	; (8000b8c <MX_GPIO_Init+0x140>)
 8000af6:	f000 fe15 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000b02:	f000 fe0f 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4822      	ldr	r0, [pc, #136]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b0c:	f000 fe0a 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000b10:	2308      	movs	r3, #8
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b24:	f000 fc4a 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_CS_Pin */
  GPIO_InitStruct.Pin = INA_CS_Pin;
 8000b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INA_CS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <MX_GPIO_Init+0x140>)
 8000b42:	f000 fc3b 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 8000b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000b60:	f000 fc2c 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b7c:	f000 fc1e 	bl	80013bc <HAL_GPIO_Init>

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40021000 	.word	0x40021000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>

08000ba2 <rtc_set_time>:
 *      Author: bobox
 */

#include "rtc.h"

void rtc_set_time(RTC_HandleTypeDef* hrtc) {
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b088      	sub	sp, #32
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    sTime.Hours = 0x00;    // set hours
 8000baa:	2300      	movs	r3, #0
 8000bac:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0x00;  // set minutes
 8000bae:	2300      	movs	r3, #0
 8000bb0:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0x00;  // set seconds
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f001 fb81 	bl	80022ce <HAL_RTC_SetTime>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <rtc_set_time+0x34>
        Error_Handler();
 8000bd2:	f7ff ffe1 	bl	8000b98 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;  // day
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;     // month
 8000bda:	2301      	movs	r3, #1
 8000bdc:	727b      	strb	r3, [r7, #9]
    sDate.Date = 0x00;                   // date
 8000bde:	2300      	movs	r3, #0
 8000be0:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 0x00;                   // year
 8000be2:	2300      	movs	r3, #0
 8000be4:	72fb      	strb	r3, [r7, #11]
    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2201      	movs	r2, #1
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f001 fc88 	bl	8002504 <HAL_RTC_SetDate>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <rtc_set_time+0x5c>
        Error_Handler();
 8000bfa:	f7ff ffcd 	bl	8000b98 <Error_Handler>
    }
    HAL_RTCEx_BKUPWrite(hrtc, RTC_BKP_DR1, 0x0000);  // backup register
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f001 fe04 	bl	8002810 <HAL_RTCEx_BKUPWrite>
}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <rtc_get_time>:

void rtc_get_time(RTC_HandleTypeDef* hrtc, RTC_DateTypeDef* date, RTC_TimeTypeDef* time) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
    /* Get the RTC current Time */
    HAL_RTC_GetTime(hrtc, time, RTC_FORMAT_BIN);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f001 fc11 	bl	8002448 <HAL_RTC_GetTime>
    /* Get the RTC current Date */
    HAL_RTC_GetDate(hrtc, date, RTC_FORMAT_BIN);   
 8000c26:	2200      	movs	r2, #0
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f001 fd11 	bl	8002652 <HAL_RTC_GetDate>
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SD_mount>:
 *      Author: bobox
 */

#include "sd.h"

void SD_mount(FATFS* FatFs) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    FRESULT fres;  // result after operations

    // loop until SD card detected
    while (HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin) != GPIO_PIN_SET) {
 8000c40:	e006      	b.n	8000c50 <SD_mount+0x18>
        myprintf("waiting to init");
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <SD_mount+0x54>)
 8000c44:	f7ff fcc2 	bl	80005cc <myprintf>
        HAL_Delay(1000);
 8000c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4c:	f000 faac 	bl	80011a8 <HAL_Delay>
    while (HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin) != GPIO_PIN_SET) {
 8000c50:	2108      	movs	r1, #8
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <SD_mount+0x58>)
 8000c54:	f000 fd4e 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d1f1      	bne.n	8000c42 <SD_mount+0xa>
    }
    HAL_Delay(200);  // short delay to let SD card mount
 8000c5e:	20c8      	movs	r0, #200	; 0xc8
 8000c60:	f000 faa2 	bl	80011a8 <HAL_Delay>

    // Open the file system
    fres = f_mount(FatFs, "", 1);  // 1=mount now
 8000c64:	2201      	movs	r2, #1
 8000c66:	490b      	ldr	r1, [pc, #44]	; (8000c94 <SD_mount+0x5c>)
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f004 ffe7 	bl	8005c3c <f_mount>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	73fb      	strb	r3, [r7, #15]
    if (fres != FR_OK) {
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <SD_mount+0x4c>
        myprintf("f_mount error (%i)\r\n", fres);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <SD_mount+0x60>)
 8000c7e:	f7ff fca5 	bl	80005cc <myprintf>
        while (1);
 8000c82:	e7fe      	b.n	8000c82 <SD_mount+0x4a>
    }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	080070b4 	.word	0x080070b4
 8000c90:	40021000 	.word	0x40021000
 8000c94:	080070c4 	.word	0x080070c4
 8000c98:	080070c8 	.word	0x080070c8

08000c9c <SD_write>:

UINT SD_write(const TCHAR* path, BYTE mode, const char* buf, UINT btw) {
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	f107 040c 	add.w	r4, r7, #12
 8000ca8:	6020      	str	r0, [r4, #0]
 8000caa:	4608      	mov	r0, r1
 8000cac:	1d39      	adds	r1, r7, #4
 8000cae:	600a      	str	r2, [r1, #0]
 8000cb0:	463a      	mov	r2, r7
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	f107 030b 	add.w	r3, r7, #11
 8000cb8:	4602      	mov	r2, r0
 8000cba:	701a      	strb	r2, [r3, #0]
    FIL fil;       // file handle
    FRESULT fres;  // result after operations
    UINT bytesWrote;

    fres = f_open(&fil, path, mode);
 8000cbc:	f107 030b 	add.w	r3, r7, #11
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	f107 0014 	add.w	r0, r7, #20
 8000cca:	6819      	ldr	r1, [r3, #0]
 8000ccc:	f004 fffc 	bl	8005cc8 <f_open>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    if (fres != FR_OK) {
 8000cd6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <SD_write+0x50>
        myprintf("f_open error (%i)\r\n", fres);
 8000cde:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <SD_write+0x9c>)
 8000ce6:	f7ff fc71 	bl	80005cc <myprintf>
        while (1);
 8000cea:	e7fe      	b.n	8000cea <SD_write+0x4e>
    }

    fres = f_write(&fil, buf, btw, &bytesWrote);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	1d39      	adds	r1, r7, #4
 8000cf4:	f107 0014 	add.w	r0, r7, #20
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	6809      	ldr	r1, [r1, #0]
 8000cfc:	f005 f9a2 	bl	8006044 <f_write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    if (fres != FR_OK) {
 8000d06:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <SD_write+0x80>
        myprintf("f_write error (%i)\r\n", fres);
 8000d0e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <SD_write+0xa0>)
 8000d16:	f7ff fc59 	bl	80005cc <myprintf>
        while (1);
 8000d1a:	e7fe      	b.n	8000d1a <SD_write+0x7e>
    }
    f_close(&fil);  // close file
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4618      	mov	r0, r3
 8000d22:	f005 fb82 	bl	800642a <f_close>
    return bytesWrote;
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	080070e0 	.word	0x080070e0
 8000d3c:	080070f4 	.word	0x080070f4

08000d40 <SD_unmount>:

void SD_unmount() { 
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    f_mount(NULL, "", 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	4903      	ldr	r1, [pc, #12]	; (8000d54 <SD_unmount+0x14>)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f004 ff77 	bl	8005c3c <f_mount>
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	080070c4 	.word	0x080070c4

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <HAL_RTC_MspInit+0x4c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d111      	bne.n	8000dec <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f906 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000de2:	f7ff fed9 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_RTC_MspInit+0x50>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40002800 	.word	0x40002800
 8000df8:	42470e3c 	.word	0x42470e3c

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <HAL_SPI_MspInit+0xec>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12d      	bne.n	8000e7a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e56:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e68:	2305      	movs	r3, #5
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <HAL_SPI_MspInit+0xf4>)
 8000e74:	f000 faa2 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e78:	e031      	b.n	8000ede <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_SPI_MspInit+0xf8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d12c      	bne.n	8000ede <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_SPI_MspInit+0xf0>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ece:	2306      	movs	r3, #6
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <HAL_SPI_MspInit+0xfc>)
 8000eda:	f000 fa6f 	bl	80013bc <HAL_GPIO_Init>
}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	; 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40003800 	.word	0x40003800
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40003c00 	.word	0x40003c00
 8000ef8:	40020800 	.word	0x40020800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f56:	230c      	movs	r3, #12
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_UART_MspInit+0x8c>)
 8000f72:	f000 fa23 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f8c6 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f005 fa92 	bl	8006538 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200001a8 	.word	0x200001a8
 8001048:	20000788 	.word	0x20000788

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f005 fa51 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb03 	bl	80006ac <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010b4:	0800722c 	.word	0x0800722c
  ldr r2, =_sbss
 80010b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010bc:	20000784 	.word	0x20000784

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f931 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe2e 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f93b 	bl	80013a2 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f911 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	20000300 	.word	0x20000300

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000300 	.word	0x20000300

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff47 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff5c 	bl	8001238 <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb0 	bl	8001310 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e16b      	b.n	80016b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 815a 	bne.w	80016aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d005      	beq.n	800140e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	2b02      	cmp	r3, #2
 800140c:	d130      	bne.n	8001470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 0201 	and.w	r2, r3, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b03      	cmp	r3, #3
 800147a:	d017      	beq.n	80014ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80b4 	beq.w	80016aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <HAL_GPIO_Init+0x30c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a5f      	ldr	r2, [pc, #380]	; (80016c8 <HAL_GPIO_Init+0x30c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <HAL_GPIO_Init+0x30c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155e:	4a5b      	ldr	r2, [pc, #364]	; (80016cc <HAL_GPIO_Init+0x310>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_GPIO_Init+0x314>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d02b      	beq.n	80015e2 <HAL_GPIO_Init+0x226>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_GPIO_Init+0x318>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d025      	beq.n	80015de <HAL_GPIO_Init+0x222>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a50      	ldr	r2, [pc, #320]	; (80016d8 <HAL_GPIO_Init+0x31c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d01f      	beq.n	80015da <HAL_GPIO_Init+0x21e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <HAL_GPIO_Init+0x320>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d019      	beq.n	80015d6 <HAL_GPIO_Init+0x21a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4e      	ldr	r2, [pc, #312]	; (80016e0 <HAL_GPIO_Init+0x324>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x216>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4d      	ldr	r2, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x328>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x212>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <HAL_GPIO_Init+0x32c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x20e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4b      	ldr	r2, [pc, #300]	; (80016ec <HAL_GPIO_Init+0x330>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x20a>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e00e      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015c6:	2308      	movs	r3, #8
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x228>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x310>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_GPIO_Init+0x334>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_GPIO_Init+0x334>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_GPIO_Init+0x334>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_GPIO_Init+0x334>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x334>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_GPIO_Init+0x334>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x334>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <HAL_GPIO_Init+0x334>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f ae90 	bls.w	80013d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40021c00 	.word	0x40021c00
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e264      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d075      	beq.n	8001862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	4ba3      	ldr	r3, [pc, #652]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d00c      	beq.n	800179c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178a:	2b08      	cmp	r3, #8
 800178c:	d112      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d157      	bne.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e23f      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d106      	bne.n	80017cc <HAL_RCC_OscConfig+0x74>
 80017be:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a90      	ldr	r2, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x98>
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a8a      	ldr	r2, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a87      	ldr	r2, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fcbe 	bl	8001190 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fcba 	bl	8001190 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e204      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xc0>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fcaa 	bl	8001190 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fca6 	bl	8001190 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1f0      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c4      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4952      	ldr	r1, [pc, #328]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_RCC_OscConfig+0x2b0>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fc5f 	bl	8001190 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc5b 	bl	8001190 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a5      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4940      	ldr	r1, [pc, #256]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x2b0>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc3e 	bl	8001190 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fc3a 	bl	8001190 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e184      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d030      	beq.n	80019a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x2b4>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fc1e 	bl	8001190 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc1a 	bl	8001190 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e164      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x200>
 8001976:	e015      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x2b4>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fc07 	bl	8001190 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fc03 	bl	8001190 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e14d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a0 	beq.w	8001af2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fbc9 	bl	8001190 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e011      	b.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470000 	.word	0x42470000
 8001a0c:	42470e80 	.word	0x42470e80
 8001a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff fbbc 	bl	8001190 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e106      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x4e4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
 8001a3a:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a80      	ldr	r2, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x32a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x312>
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x32a>
 8001a6a:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a74      	ldr	r2, [pc, #464]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	4a71      	ldr	r2, [pc, #452]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fb81 	bl	8001190 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fb7d 	bl	8001190 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0c5      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x33a>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb6b 	bl	8001190 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fb67 	bl	8001190 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0af      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 809b 	beq.w	8001c32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d05c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d141      	bne.n	8001b94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fb3b 	bl	8001190 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fb37 	bl	8001190 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e081      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fb10 	bl	8001190 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fb0c 	bl	8001190 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e056      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x41c>
 8001b92:	e04e      	b.n	8001c32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff faf9 	bl	8001190 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff faf5 	bl	8001190 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e03f      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x44a>
 8001bc0:	e037      	b.n	8001c32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e032      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d028      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d121      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d11a      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bfe:	4013      	ands	r3, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d111      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470060 	.word	0x42470060

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff fa2a 	bl	8001190 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fa26 	bl	8001190 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f98a 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08007150 	.word	0x08007150
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6079      	str	r1, [r7, #4]
 8001e1e:	2100      	movs	r1, #0
 8001e20:	60f9      	str	r1, [r7, #12]
 8001e22:	2100      	movs	r1, #0
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e26:	2100      	movs	r1, #0
 8001e28:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2a:	4952      	ldr	r1, [pc, #328]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e2c:	6889      	ldr	r1, [r1, #8]
 8001e2e:	f001 010c 	and.w	r1, r1, #12
 8001e32:	2908      	cmp	r1, #8
 8001e34:	d00d      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x3e>
 8001e36:	2908      	cmp	r1, #8
 8001e38:	f200 8094 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x150>
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x32>
 8001e40:	2904      	cmp	r1, #4
 8001e42:	d003      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x38>
 8001e44:	e08e      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e48:	60bb      	str	r3, [r7, #8]
       break;
 8001e4a:	e08e      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e4e:	60bb      	str	r3, [r7, #8]
      break;
 8001e50:	e08b      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e52:	4948      	ldr	r1, [pc, #288]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e54:	6849      	ldr	r1, [r1, #4]
 8001e56:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e5a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5c:	4945      	ldr	r1, [pc, #276]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e5e:	6849      	ldr	r1, [r1, #4]
 8001e60:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e64:	2900      	cmp	r1, #0
 8001e66:	d024      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e68:	4942      	ldr	r1, [pc, #264]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e6a:	6849      	ldr	r1, [r1, #4]
 8001e6c:	0989      	lsrs	r1, r1, #6
 8001e6e:	4608      	mov	r0, r1
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e78:	f04f 0500 	mov.w	r5, #0
 8001e7c:	ea00 0204 	and.w	r2, r0, r4
 8001e80:	ea01 0305 	and.w	r3, r1, r5
 8001e84:	493d      	ldr	r1, [pc, #244]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e86:	fb01 f003 	mul.w	r0, r1, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	fb01 f102 	mul.w	r1, r1, r2
 8001e90:	1844      	adds	r4, r0, r1
 8001e92:	493a      	ldr	r1, [pc, #232]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e94:	fba2 0101 	umull	r0, r1, r2, r1
 8001e98:	1863      	adds	r3, r4, r1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f7fe f9ec 	bl	8000280 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e04a      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	ea02 0400 	and.w	r4, r2, r0
 8001eca:	ea03 0501 	and.w	r5, r3, r1
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	014b      	lsls	r3, r1, #5
 8001edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ee0:	0142      	lsls	r2, r0, #5
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	1b00      	subs	r0, r0, r4
 8001ee8:	eb61 0105 	sbc.w	r1, r1, r5
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	018b      	lsls	r3, r1, #6
 8001ef6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001efa:	0182      	lsls	r2, r0, #6
 8001efc:	1a12      	subs	r2, r2, r0
 8001efe:	eb63 0301 	sbc.w	r3, r3, r1
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	00d9      	lsls	r1, r3, #3
 8001f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f10:	00d0      	lsls	r0, r2, #3
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	1912      	adds	r2, r2, r4
 8001f18:	eb45 0303 	adc.w	r3, r5, r3
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0299      	lsls	r1, r3, #10
 8001f26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f2a:	0290      	lsls	r0, r2, #10
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe f9a0 	bl	8000280 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	60bb      	str	r3, [r7, #8]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f66:	60bb      	str	r3, [r7, #8]
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	017d7840 	.word	0x017d7840

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f9c:	f7ff fff0 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	0a9b      	lsrs	r3, r3, #10
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	08007160 	.word	0x08007160

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	f7ff ffdc 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0b5b      	lsrs	r3, r3, #13
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	08007160 	.word	0x08007160

08001fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d035      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002010:	4b62      	ldr	r3, [pc, #392]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002016:	f7ff f8bb 	bl	8001190 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800201e:	f7ff f8b7 	bl	8001190 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0b0      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002030:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	019a      	lsls	r2, r3, #6
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	071b      	lsls	r3, r3, #28
 8002048:	4955      	ldr	r1, [pc, #340]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002050:	4b52      	ldr	r3, [pc, #328]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002056:	f7ff f89b 	bl	8001190 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800205e:	f7ff f897 	bl	8001190 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e090      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002070:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8083 	beq.w	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020b2:	f7ff f86d 	bl	8001190 <HAL_GetTick>
 80020b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff f869 	bl	8001190 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e062      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02f      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d028      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002106:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d114      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff f837 	bl	8001190 <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff f833 	bl	8001190 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e02a      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ee      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002154:	d10d      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216a:	490d      	ldr	r1, [pc, #52]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
 8002170:	e005      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002178:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800217c:	6093      	str	r3, [r2, #8]
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218a:	4905      	ldr	r1, [pc, #20]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800218c:	4313      	orrs	r3, r2
 800218e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	42470068 	.word	0x42470068
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40007000 	.word	0x40007000
 80021a8:	42470e40 	.word	0x42470e40

080021ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e083      	b.n	80022c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7f5b      	ldrb	r3, [r3, #29]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fdea 	bl	8000da8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22ca      	movs	r2, #202	; 0xca
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2253      	movs	r2, #83	; 0x53
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 faa8 	bl	8002740 <RTC_EnterInitMode>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2204      	movs	r2, #4
 8002202:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e05e      	b.n	80022c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800221a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6919      	ldr	r1, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	041a      	lsls	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002266:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa3a 	bl	80026f0 <HAL_RTC_WaitForSynchro>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e018      	b.n	80022c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	7f1b      	ldrb	r3, [r3, #28]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_RTC_SetTime+0x1c>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e0aa      	b.n	8002440 <HAL_RTC_SetTime+0x172>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2202      	movs	r2, #2
 80022f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d126      	bne.n	800234a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2200      	movs	r2, #0
 800230e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fa3f 	bl	8002798 <RTC_ByteToBcd2>
 800231a:	4603      	mov	r3, r0
 800231c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fa38 	bl	8002798 <RTC_ByteToBcd2>
 8002328:	4603      	mov	r3, r0
 800232a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800232c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	789b      	ldrb	r3, [r3, #2]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fa30 	bl	8002798 <RTC_ByteToBcd2>
 8002338:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800233a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	78db      	ldrb	r3, [r3, #3]
 8002342:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e018      	b.n	800237c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2200      	movs	r2, #0
 800235c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	785b      	ldrb	r3, [r3, #1]
 8002368:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800236a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002370:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	78db      	ldrb	r3, [r3, #3]
 8002376:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	22ca      	movs	r2, #202	; 0xca
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2253      	movs	r2, #83	; 0x53
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f9d7 	bl	8002740 <RTC_EnterInitMode>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2204      	movs	r2, #4
 80023a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e047      	b.n	8002440 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80023ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023be:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023ce:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	431a      	orrs	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d111      	bne.n	800242a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f972 	bl	80026f0 <HAL_RTC_WaitForSynchro>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2204      	movs	r2, #4
 800241e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00a      	b.n	8002440 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	22ff      	movs	r2, #255	; 0xff
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800243e:	2300      	movs	r3, #0
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}

08002448 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800247a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800247e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11a      	bne.n	80024fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f983 	bl	80027d4 <RTC_Bcd2ToByte>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f97a 	bl	80027d4 <RTC_Bcd2ToByte>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	789b      	ldrb	r3, [r3, #2]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f971 	bl	80027d4 <RTC_Bcd2ToByte>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	7f1b      	ldrb	r3, [r3, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_RTC_SetDate+0x1c>
 800251c:	2302      	movs	r3, #2
 800251e:	e094      	b.n	800264a <HAL_RTC_SetDate+0x146>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2202      	movs	r2, #2
 800252a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <HAL_RTC_SetDate+0x4c>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	f023 0310 	bic.w	r3, r3, #16
 8002546:	b2db      	uxtb	r3, r3
 8002548:	330a      	adds	r3, #10
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11c      	bne.n	8002590 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	78db      	ldrb	r3, [r3, #3]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f91c 	bl	8002798 <RTC_ByteToBcd2>
 8002560:	4603      	mov	r3, r0
 8002562:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f915 	bl	8002798 <RTC_ByteToBcd2>
 800256e:	4603      	mov	r3, r0
 8002570:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002572:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f90d 	bl	8002798 <RTC_ByteToBcd2>
 800257e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002580:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e00e      	b.n	80025ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	78db      	ldrb	r3, [r3, #3]
 8002594:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800259c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80025a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	22ca      	movs	r2, #202	; 0xca
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2253      	movs	r2, #83	; 0x53
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f8be 	bl	8002740 <RTC_EnterInitMode>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	22ff      	movs	r2, #255	; 0xff
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2204      	movs	r2, #4
 80025d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e033      	b.n	800264a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002600:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d111      	bne.n	8002634 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f86d 	bl	80026f0 <HAL_RTC_WaitForSynchro>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	22ff      	movs	r2, #255	; 0xff
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2204      	movs	r2, #4
 8002628:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e00a      	b.n	800264a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}

08002652 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800266c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002670:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	0b5b      	lsrs	r3, r3, #13
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11a      	bne.n	80026e6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	78db      	ldrb	r3, [r3, #3]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f88d 	bl	80027d4 <RTC_Bcd2ToByte>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f884 	bl	80027d4 <RTC_Bcd2ToByte>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f87b 	bl	80027d4 <RTC_Bcd2ToByte>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800270a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fd40 	bl	8001190 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002712:	e009      	b.n	8002728 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002714:	f7fe fd3c 	bl	8001190 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002722:	d901      	bls.n	8002728 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e007      	b.n	8002738 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f04f 32ff 	mov.w	r2, #4294967295
 8002762:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe fd14 	bl	8001190 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800276a:	e009      	b.n	8002780 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800276c:	f7fe fd10 	bl	8001190 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277a:	d901      	bls.n	8002780 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e007      	b.n	8002790 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ee      	beq.n	800276c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80027a6:	e005      	b.n	80027b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	3b0a      	subs	r3, #10
 80027b2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d8f6      	bhi.n	80027a8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4413      	add	r3, r2
 8002802:	b2db      	uxtb	r3, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3350      	adds	r3, #80	; 0x50
 8002826:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3350      	adds	r3, #80	; 0x50
 8002858:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07b      	b.n	800297e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002896:	d009      	beq.n	80028ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
 800289e:	e005      	b.n	80028ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fa98 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	ea42 0103 	orr.w	r1, r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f003 0104 	and.w	r1, r3, #4
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f003 0210 	and.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b088      	sub	sp, #32
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_SPI_Transmit+0x22>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e126      	b.n	8002bf6 <HAL_SPI_Transmit+0x270>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029b0:	f7fe fbee 	bl	8001190 <HAL_GetTick>
 80029b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ca:	e10b      	b.n	8002be4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_SPI_Transmit+0x52>
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029dc:	e102      	b.n	8002be4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2203      	movs	r2, #3
 80029e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	d10f      	bne.n	8002a46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d007      	beq.n	8002a64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6c:	d14b      	bne.n	8002b06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_SPI_Transmit+0xf6>
 8002a76:	8afb      	ldrh	r3, [r7, #22]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d13e      	bne.n	8002afa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	1c9a      	adds	r2, r3, #2
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002aa0:	e02b      	b.n	8002afa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d112      	bne.n	8002ad6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ad4:	e011      	b.n	8002afa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad6:	f7fe fb5b 	bl	8001190 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d803      	bhi.n	8002aee <HAL_SPI_Transmit+0x168>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d102      	bne.n	8002af4 <HAL_SPI_Transmit+0x16e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002af8:	e074      	b.n	8002be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ce      	bne.n	8002aa2 <HAL_SPI_Transmit+0x11c>
 8002b04:	e04c      	b.n	8002ba0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_SPI_Transmit+0x18e>
 8002b0e:	8afb      	ldrh	r3, [r7, #22]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d140      	bne.n	8002b96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	7812      	ldrb	r2, [r2, #0]
 8002b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b3a:	e02c      	b.n	8002b96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d113      	bne.n	8002b72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b70:	e011      	b.n	8002b96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b72:	f7fe fb0d 	bl	8001190 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d803      	bhi.n	8002b8a <HAL_SPI_Transmit+0x204>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d102      	bne.n	8002b90 <HAL_SPI_Transmit+0x20a>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b94:	e026      	b.n	8002be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1cd      	bne.n	8002b3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fa63 	bl	8003070 <SPI_EndRxTxTransaction>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e000      	b.n	8002be4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08c      	sub	sp, #48	; 0x30
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x26>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e18a      	b.n	8002f3a <HAL_SPI_TransmitReceive+0x33c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c2c:	f7fe fab0 	bl	8001190 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d00f      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x70>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c54:	d107      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x68>
 8002c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c6c:	e15b      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0x82>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0x82>
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c86:	e14e      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d003      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2205      	movs	r2, #5
 8002c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	887a      	ldrh	r2, [r7, #2]
 8002cbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf8:	d178      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x10a>
 8002d02:	8b7b      	ldrh	r3, [r7, #26]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d166      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2c:	e053      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x176>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x176>
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d113      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	1c9a      	adds	r2, r3, #2
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d119      	bne.n	8002db6 <HAL_SPI_TransmitReceive+0x1b8>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d014      	beq.n	8002db6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	b292      	uxth	r2, r2
 8002d98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db2:	2301      	movs	r3, #1
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db6:	f7fe f9eb 	bl	8001190 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d807      	bhi.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d8>
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d003      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dd4:	e0a7      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1a6      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x130>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1a1      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x130>
 8002dea:	e07c      	b.n	8002ee6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x1fc>
 8002df4:	8b7b      	ldrh	r3, [r7, #26]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d16b      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e20:	e057      	b.n	8002ed2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d11c      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x26c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x26c>
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d114      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d119      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x2ae>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002eac:	f7fe f970 	bl	8001190 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d803      	bhi.n	8002ec4 <HAL_SPI_TransmitReceive+0x2c6>
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d102      	bne.n	8002eca <HAL_SPI_TransmitReceive+0x2cc>
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ed0:	e029      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1a2      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x224>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d19d      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8c0 	bl	8003070 <SPI_EndRxTxTransaction>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f02:	e010      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	e000      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3730      	adds	r7, #48	; 0x30
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f50:	b2db      	uxtb	r3, r3
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f70:	f7fe f90e 	bl	8001190 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f80:	f7fe f906 	bl	8001190 <HAL_GetTick>
 8002f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	015b      	lsls	r3, r3, #5
 8002f8c:	0d1b      	lsrs	r3, r3, #20
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f96:	e054      	b.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d050      	beq.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fa0:	f7fe f8f6 	bl	8001190 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d902      	bls.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13d      	bne.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fce:	d111      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd8:	d004      	beq.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d107      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d10f      	bne.n	800301e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800301c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e017      	b.n	8003062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3b01      	subs	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d19b      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000000 	.word	0x20000000

08003070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <SPI_EndRxTxTransaction+0x7c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <SPI_EndRxTxTransaction+0x80>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0d5b      	lsrs	r3, r3, #21
 8003088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309a:	d112      	bne.n	80030c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff ff5a 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e00f      	b.n	80030e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d0f2      	beq.n	80030c2 <SPI_EndRxTxTransaction+0x52>
 80030dc:	e000      	b.n	80030e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80030de:	bf00      	nop
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000
 80030f0:	165e9f81 	.word	0x165e9f81

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e03f      	b.n	8003186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd feee 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f929 	bl	8003390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	; 0x28
 8003192:	af02      	add	r7, sp, #8
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d17c      	bne.n	80032a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_UART_Transmit+0x2c>
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e075      	b.n	80032aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Transmit+0x3e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e06e      	b.n	80032aa <HAL_UART_Transmit+0x11c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	; 0x21
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e2:	f7fd ffd5 	bl	8001190 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	d108      	bne.n	8003210 <HAL_UART_Transmit+0x82>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e003      	b.n	8003218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003220:	e02a      	b.n	8003278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f840 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e036      	b.n	80032aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3302      	adds	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e007      	b.n	800326a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cf      	bne.n	8003222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f810 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e006      	b.n	80032aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b090      	sub	sp, #64	; 0x40
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e050      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d04c      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	f7fd ff5d 	bl	8001190 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	429a      	cmp	r2, r3
 80032e0:	d241      	bcs.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003302:	637a      	str	r2, [r7, #52]	; 0x34
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e5      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	613b      	str	r3, [r7, #16]
   return(result);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003336:	623a      	str	r2, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	61bb      	str	r3, [r7, #24]
   return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d09f      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	b09f      	sub	sp, #124	; 0x7c
 8003396:	af00      	add	r7, sp, #0
 8003398:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	ea40 0301 	orr.w	r3, r0, r1
 80033b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d4:	f021 010c 	bic.w	r1, r1, #12
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033de:	430b      	orrs	r3, r1
 80033e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	6999      	ldr	r1, [r3, #24]
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	ea40 0301 	orr.w	r3, r0, r1
 80033f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4bc5      	ldr	r3, [pc, #788]	; (8003714 <UART_SetConfig+0x384>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d004      	beq.n	800340e <UART_SetConfig+0x7e>
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4bc3      	ldr	r3, [pc, #780]	; (8003718 <UART_SetConfig+0x388>)
 800340a:	429a      	cmp	r2, r3
 800340c:	d103      	bne.n	8003416 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800340e:	f7fe fdd7 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8003412:	6778      	str	r0, [r7, #116]	; 0x74
 8003414:	e002      	b.n	800341c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fdbf 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 800341a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	f040 80b6 	bne.w	8003594 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342a:	461c      	mov	r4, r3
 800342c:	f04f 0500 	mov.w	r5, #0
 8003430:	4622      	mov	r2, r4
 8003432:	462b      	mov	r3, r5
 8003434:	1891      	adds	r1, r2, r2
 8003436:	6439      	str	r1, [r7, #64]	; 0x40
 8003438:	415b      	adcs	r3, r3
 800343a:	647b      	str	r3, [r7, #68]	; 0x44
 800343c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003440:	1912      	adds	r2, r2, r4
 8003442:	eb45 0303 	adc.w	r3, r5, r3
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	00d9      	lsls	r1, r3, #3
 8003450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003454:	00d0      	lsls	r0, r2, #3
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	1911      	adds	r1, r2, r4
 800345c:	6639      	str	r1, [r7, #96]	; 0x60
 800345e:	416b      	adcs	r3, r5
 8003460:	667b      	str	r3, [r7, #100]	; 0x64
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	461a      	mov	r2, r3
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	1891      	adds	r1, r2, r2
 800346e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003470:	415b      	adcs	r3, r3
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003478:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800347c:	f7fc ff00 	bl	8000280 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4ba5      	ldr	r3, [pc, #660]	; (800371c <UART_SetConfig+0x38c>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011e      	lsls	r6, r3, #4
 800348e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003490:	461c      	mov	r4, r3
 8003492:	f04f 0500 	mov.w	r5, #0
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	1891      	adds	r1, r2, r2
 800349c:	6339      	str	r1, [r7, #48]	; 0x30
 800349e:	415b      	adcs	r3, r3
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034a6:	1912      	adds	r2, r2, r4
 80034a8:	eb45 0303 	adc.w	r3, r5, r3
 80034ac:	f04f 0000 	mov.w	r0, #0
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	00d9      	lsls	r1, r3, #3
 80034b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ba:	00d0      	lsls	r0, r2, #3
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	1911      	adds	r1, r2, r4
 80034c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80034c4:	416b      	adcs	r3, r5
 80034c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80034d6:	415b      	adcs	r3, r3
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034e2:	f7fc fecd 	bl	8000280 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b8c      	ldr	r3, [pc, #560]	; (800371c <UART_SetConfig+0x38c>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a87      	ldr	r2, [pc, #540]	; (800371c <UART_SetConfig+0x38c>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441e      	add	r6, r3
 800350e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003510:	4618      	mov	r0, r3
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	1894      	adds	r4, r2, r2
 800351c:	623c      	str	r4, [r7, #32]
 800351e:	415b      	adcs	r3, r3
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003526:	1812      	adds	r2, r2, r0
 8003528:	eb41 0303 	adc.w	r3, r1, r3
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	f04f 0500 	mov.w	r5, #0
 8003534:	00dd      	lsls	r5, r3, #3
 8003536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800353a:	00d4      	lsls	r4, r2, #3
 800353c:	4622      	mov	r2, r4
 800353e:	462b      	mov	r3, r5
 8003540:	1814      	adds	r4, r2, r0
 8003542:	653c      	str	r4, [r7, #80]	; 0x50
 8003544:	414b      	adcs	r3, r1
 8003546:	657b      	str	r3, [r7, #84]	; 0x54
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	1891      	adds	r1, r2, r2
 8003554:	61b9      	str	r1, [r7, #24]
 8003556:	415b      	adcs	r3, r3
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003562:	f7fc fe8d 	bl	8000280 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4b6c      	ldr	r3, [pc, #432]	; (800371c <UART_SetConfig+0x38c>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a67      	ldr	r2, [pc, #412]	; (800371c <UART_SetConfig+0x38c>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 0207 	and.w	r2, r3, #7
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4432      	add	r2, r6
 8003590:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003592:	e0b9      	b.n	8003708 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003596:	461c      	mov	r4, r3
 8003598:	f04f 0500 	mov.w	r5, #0
 800359c:	4622      	mov	r2, r4
 800359e:	462b      	mov	r3, r5
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	6139      	str	r1, [r7, #16]
 80035a4:	415b      	adcs	r3, r3
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035ac:	1912      	adds	r2, r2, r4
 80035ae:	eb45 0303 	adc.w	r3, r5, r3
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	00d9      	lsls	r1, r3, #3
 80035bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c0:	00d0      	lsls	r0, r2, #3
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	eb12 0804 	adds.w	r8, r2, r4
 80035ca:	eb43 0905 	adc.w	r9, r3, r5
 80035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	008b      	lsls	r3, r1, #2
 80035e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035e6:	0082      	lsls	r2, r0, #2
 80035e8:	4640      	mov	r0, r8
 80035ea:	4649      	mov	r1, r9
 80035ec:	f7fc fe48 	bl	8000280 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4b49      	ldr	r3, [pc, #292]	; (800371c <UART_SetConfig+0x38c>)
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	011e      	lsls	r6, r3, #4
 80035fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003600:	4618      	mov	r0, r3
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	1894      	adds	r4, r2, r2
 800360c:	60bc      	str	r4, [r7, #8]
 800360e:	415b      	adcs	r3, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003616:	1812      	adds	r2, r2, r0
 8003618:	eb41 0303 	adc.w	r3, r1, r3
 800361c:	f04f 0400 	mov.w	r4, #0
 8003620:	f04f 0500 	mov.w	r5, #0
 8003624:	00dd      	lsls	r5, r3, #3
 8003626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800362a:	00d4      	lsls	r4, r2, #3
 800362c:	4622      	mov	r2, r4
 800362e:	462b      	mov	r3, r5
 8003630:	1814      	adds	r4, r2, r0
 8003632:	64bc      	str	r4, [r7, #72]	; 0x48
 8003634:	414b      	adcs	r3, r1
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003650:	0082      	lsls	r2, r0, #2
 8003652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003656:	f7fc fe13 	bl	8000280 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <UART_SetConfig+0x38c>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	; 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a2a      	ldr	r2, [pc, #168]	; (800371c <UART_SetConfig+0x38c>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367e:	441e      	add	r6, r3
 8003680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003682:	4618      	mov	r0, r3
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	1894      	adds	r4, r2, r2
 800368e:	603c      	str	r4, [r7, #0]
 8003690:	415b      	adcs	r3, r3
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003698:	1812      	adds	r2, r2, r0
 800369a:	eb41 0303 	adc.w	r3, r1, r3
 800369e:	f04f 0400 	mov.w	r4, #0
 80036a2:	f04f 0500 	mov.w	r5, #0
 80036a6:	00dd      	lsls	r5, r3, #3
 80036a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036ac:	00d4      	lsls	r4, r2, #3
 80036ae:	4622      	mov	r2, r4
 80036b0:	462b      	mov	r3, r5
 80036b2:	eb12 0a00 	adds.w	sl, r2, r0
 80036b6:	eb43 0b01 	adc.w	fp, r3, r1
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	008b      	lsls	r3, r1, #2
 80036ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036d2:	0082      	lsls	r2, r0, #2
 80036d4:	4650      	mov	r0, sl
 80036d6:	4659      	mov	r1, fp
 80036d8:	f7fc fdd2 	bl	8000280 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <UART_SetConfig+0x38c>)
 80036e2:	fba3 1302 	umull	r1, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2164      	movs	r1, #100	; 0x64
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	3332      	adds	r3, #50	; 0x32
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <UART_SetConfig+0x38c>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	f003 020f 	and.w	r2, r3, #15
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4432      	add	r2, r6
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	377c      	adds	r7, #124	; 0x7c
 800370c:	46bd      	mov	sp, r7
 800370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003712:	bf00      	nop
 8003714:	40011000 	.word	0x40011000
 8003718:	40011400 	.word	0x40011400
 800371c:	51eb851f 	.word	0x51eb851f

08003720 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003724:	4904      	ldr	r1, [pc, #16]	; (8003738 <MX_FATFS_Init+0x18>)
 8003726:	4805      	ldr	r0, [pc, #20]	; (800373c <MX_FATFS_Init+0x1c>)
 8003728:	f002 fef6 	bl	8006518 <FATFS_LinkDriver>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <MX_FATFS_Init+0x20>)
 8003732:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000304 	.word	0x20000304
 800373c:	2000000c 	.word	0x2000000c
 8003740:	20000308 	.word	0x20000308

08003744 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003748:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f9d9 	bl	8003b18 <USER_SPI_initialize>
 8003766:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fab7 	bl	8003cf0 <USER_SPI_status>
 8003782:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800379c:	7bf8      	ldrb	r0, [r7, #15]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	f000 faba 	bl	8003d1c <USER_SPI_read>
 80037a8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4603      	mov	r3, r0
 80037c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80037c2:	7bf8      	ldrb	r0, [r7, #15]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	f000 fb0d 	bl	8003de8 <USER_SPI_write>
 80037ce:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	603a      	str	r2, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
 80037e4:	460b      	mov	r3, r1
 80037e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80037e8:	79b9      	ldrb	r1, [r7, #6]
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fb76 	bl	8003ee0 <USER_SPI_ioctl>
 80037f4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003808:	f7fd fcc2 	bl	8001190 <HAL_GetTick>
 800380c:	4603      	mov	r3, r0
 800380e:	4a04      	ldr	r2, [pc, #16]	; (8003820 <SPI_Timer_On+0x20>)
 8003810:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <SPI_Timer_On+0x24>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000076c 	.word	0x2000076c
 8003824:	20000770 	.word	0x20000770

08003828 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800382c:	f7fd fcb0 	bl	8001190 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <SPI_Timer_Status+0x24>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1ad2      	subs	r2, r2, r3
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SPI_Timer_Status+0x28>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	bf34      	ite	cc
 8003840:	2301      	movcc	r3, #1
 8003842:	2300      	movcs	r3, #0
 8003844:	b2db      	uxtb	r3, r3
}
 8003846:	4618      	mov	r0, r3
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2000076c 	.word	0x2000076c
 8003850:	20000770 	.word	0x20000770

08003854 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af02      	add	r7, sp, #8
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800385e:	f107 020f 	add.w	r2, r7, #15
 8003862:	1df9      	adds	r1, r7, #7
 8003864:	2332      	movs	r3, #50	; 0x32
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2301      	movs	r3, #1
 800386a:	4804      	ldr	r0, [pc, #16]	; (800387c <xchg_spi+0x28>)
 800386c:	f7ff f9c7 	bl	8002bfe <HAL_SPI_TransmitReceive>
    return rxDat;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000244 	.word	0x20000244

08003880 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e00a      	b.n	80038a6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	18d4      	adds	r4, r2, r3
 8003896:	20ff      	movs	r0, #255	; 0xff
 8003898:	f7ff ffdc 	bl	8003854 <xchg_spi>
 800389c:	4603      	mov	r3, r0
 800389e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3f0      	bcc.n	8003890 <rcvr_spi_multi+0x10>
	}
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e009      	b.n	80038dc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ffbf 	bl	8003854 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3f1      	bcc.n	80038c8 <xmit_spi_multi+0x10>
	}
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80038f6:	f7fd fc4b 	bl	8001190 <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003900:	20ff      	movs	r0, #255	; 0xff
 8003902:	f7ff ffa7 	bl	8003854 <xchg_spi>
 8003906:	4603      	mov	r3, r0
 8003908:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2bff      	cmp	r3, #255	; 0xff
 800390e:	d007      	beq.n	8003920 <wait_ready+0x32>
 8003910:	f7fd fc3e 	bl	8001190 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d8ef      	bhi.n	8003900 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2bff      	cmp	r3, #255	; 0xff
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003938:	2201      	movs	r2, #1
 800393a:	2102      	movs	r1, #2
 800393c:	4803      	ldr	r0, [pc, #12]	; (800394c <despiselect+0x18>)
 800393e:	f7fd fef1 	bl	8001724 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003942:	20ff      	movs	r0, #255	; 0xff
 8003944:	f7ff ff86 	bl	8003854 <xchg_spi>

}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000

08003950 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003954:	2200      	movs	r2, #0
 8003956:	2102      	movs	r1, #2
 8003958:	4809      	ldr	r0, [pc, #36]	; (8003980 <spiselect+0x30>)
 800395a:	f7fd fee3 	bl	8001724 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800395e:	20ff      	movs	r0, #255	; 0xff
 8003960:	f7ff ff78 	bl	8003854 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003968:	f7ff ffc1 	bl	80038ee <wait_ready>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <spiselect+0x26>
 8003972:	2301      	movs	r3, #1
 8003974:	e002      	b.n	800397c <spiselect+0x2c>

	despiselect();
 8003976:	f7ff ffdd 	bl	8003934 <despiselect>
	return 0;	/* Timeout */
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000

08003984 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800398e:	20c8      	movs	r0, #200	; 0xc8
 8003990:	f7ff ff36 	bl	8003800 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003994:	20ff      	movs	r0, #255	; 0xff
 8003996:	f7ff ff5d 	bl	8003854 <xchg_spi>
 800399a:	4603      	mov	r3, r0
 800399c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	2bff      	cmp	r3, #255	; 0xff
 80039a2:	d104      	bne.n	80039ae <rcvr_datablock+0x2a>
 80039a4:	f7ff ff40 	bl	8003828 <SPI_Timer_Status>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f2      	bne.n	8003994 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2bfe      	cmp	r3, #254	; 0xfe
 80039b2:	d001      	beq.n	80039b8 <rcvr_datablock+0x34>
 80039b4:	2300      	movs	r3, #0
 80039b6:	e00a      	b.n	80039ce <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff60 	bl	8003880 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80039c0:	20ff      	movs	r0, #255	; 0xff
 80039c2:	f7ff ff47 	bl	8003854 <xchg_spi>
 80039c6:	20ff      	movs	r0, #255	; 0xff
 80039c8:	f7ff ff44 	bl	8003854 <xchg_spi>

	return 1;						/* Function succeeded */
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80039e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039e6:	f7ff ff82 	bl	80038ee <wait_ready>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <xmit_datablock+0x1e>
 80039f0:	2300      	movs	r3, #0
 80039f2:	e01e      	b.n	8003a32 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff2c 	bl	8003854 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	2bfd      	cmp	r3, #253	; 0xfd
 8003a00:	d016      	beq.n	8003a30 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff56 	bl	80038b8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003a0c:	20ff      	movs	r0, #255	; 0xff
 8003a0e:	f7ff ff21 	bl	8003854 <xchg_spi>
 8003a12:	20ff      	movs	r0, #255	; 0xff
 8003a14:	f7ff ff1e 	bl	8003854 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003a18:	20ff      	movs	r0, #255	; 0xff
 8003a1a:	f7ff ff1b 	bl	8003854 <xchg_spi>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d001      	beq.n	8003a30 <xmit_datablock+0x5a>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <xmit_datablock+0x5c>
	}
	return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	6039      	str	r1, [r7, #0]
 8003a44:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0e      	bge.n	8003a6c <send_cmd+0x32>
		cmd &= 0x7F;
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a54:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003a56:	2100      	movs	r1, #0
 8003a58:	2037      	movs	r0, #55	; 0x37
 8003a5a:	f7ff ffee 	bl	8003a3a <send_cmd>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003a62:	7bbb      	ldrb	r3, [r7, #14]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d901      	bls.n	8003a6c <send_cmd+0x32>
 8003a68:	7bbb      	ldrb	r3, [r7, #14]
 8003a6a:	e051      	b.n	8003b10 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d008      	beq.n	8003a84 <send_cmd+0x4a>
		despiselect();
 8003a72:	f7ff ff5f 	bl	8003934 <despiselect>
		if (!spiselect()) return 0xFF;
 8003a76:	f7ff ff6b 	bl	8003950 <spiselect>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <send_cmd+0x4a>
 8003a80:	23ff      	movs	r3, #255	; 0xff
 8003a82:	e045      	b.n	8003b10 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fee1 	bl	8003854 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fedb 	bl	8003854 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fed5 	bl	8003854 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fecf 	bl	8003854 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff feca 	bl	8003854 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <send_cmd+0x94>
 8003aca:	2395      	movs	r3, #149	; 0x95
 8003acc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d101      	bne.n	8003ad8 <send_cmd+0x9e>
 8003ad4:	2387      	movs	r3, #135	; 0x87
 8003ad6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff feba 	bl	8003854 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d102      	bne.n	8003aec <send_cmd+0xb2>
 8003ae6:	20ff      	movs	r0, #255	; 0xff
 8003ae8:	f7ff feb4 	bl	8003854 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003aec:	230a      	movs	r3, #10
 8003aee:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003af0:	20ff      	movs	r0, #255	; 0xff
 8003af2:	f7ff feaf 	bl	8003854 <xchg_spi>
 8003af6:	4603      	mov	r3, r0
 8003af8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003afa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	da05      	bge.n	8003b0e <send_cmd+0xd4>
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <USER_SPI_initialize+0x14>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0d6      	b.n	8003cda <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003b2c:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <USER_SPI_initialize+0x1cc>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <USER_SPI_initialize+0x2a>
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <USER_SPI_initialize+0x1cc>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	e0cb      	b.n	8003cda <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003b42:	4b69      	ldr	r3, [pc, #420]	; (8003ce8 <USER_SPI_initialize+0x1d0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b4c:	4b66      	ldr	r3, [pc, #408]	; (8003ce8 <USER_SPI_initialize+0x1d0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003b54:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003b56:	230a      	movs	r3, #10
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e005      	b.n	8003b68 <USER_SPI_initialize+0x50>
 8003b5c:	20ff      	movs	r0, #255	; 0xff
 8003b5e:	f7ff fe79 	bl	8003854 <xchg_spi>
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f6      	bne.n	8003b5c <USER_SPI_initialize+0x44>

	ty = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003b72:	2100      	movs	r1, #0
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7ff ff60 	bl	8003a3a <send_cmd>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 808b 	bne.w	8003c98 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b86:	f7ff fe3b 	bl	8003800 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003b8a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003b8e:	2008      	movs	r0, #8
 8003b90:	f7ff ff53 	bl	8003a3a <send_cmd>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d151      	bne.n	8003c3e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
 8003b9e:	e00d      	b.n	8003bbc <USER_SPI_initialize+0xa4>
 8003ba0:	7bfc      	ldrb	r4, [r7, #15]
 8003ba2:	20ff      	movs	r0, #255	; 0xff
 8003ba4:	f7ff fe56 	bl	8003854 <xchg_spi>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	f107 0310 	add.w	r3, r7, #16
 8003bb0:	4423      	add	r3, r4
 8003bb2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d9ee      	bls.n	8003ba0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003bc2:	7abb      	ldrb	r3, [r7, #10]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d167      	bne.n	8003c98 <USER_SPI_initialize+0x180>
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	2baa      	cmp	r3, #170	; 0xaa
 8003bcc:	d164      	bne.n	8003c98 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003bce:	bf00      	nop
 8003bd0:	f7ff fe2a 	bl	8003828 <SPI_Timer_Status>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <USER_SPI_initialize+0xd2>
 8003bda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003bde:	20a9      	movs	r0, #169	; 0xa9
 8003be0:	f7ff ff2b 	bl	8003a3a <send_cmd>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f2      	bne.n	8003bd0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003bea:	f7ff fe1d 	bl	8003828 <SPI_Timer_Status>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d051      	beq.n	8003c98 <USER_SPI_initialize+0x180>
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	203a      	movs	r0, #58	; 0x3a
 8003bf8:	f7ff ff1f 	bl	8003a3a <send_cmd>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d14a      	bne.n	8003c98 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e00d      	b.n	8003c24 <USER_SPI_initialize+0x10c>
 8003c08:	7bfc      	ldrb	r4, [r7, #15]
 8003c0a:	20ff      	movs	r0, #255	; 0xff
 8003c0c:	f7ff fe22 	bl	8003854 <xchg_spi>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	4423      	add	r3, r4
 8003c1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3301      	adds	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d9ee      	bls.n	8003c08 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003c2a:	7a3b      	ldrb	r3, [r7, #8]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <USER_SPI_initialize+0x120>
 8003c34:	230c      	movs	r3, #12
 8003c36:	e000      	b.n	8003c3a <USER_SPI_initialize+0x122>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	737b      	strb	r3, [r7, #13]
 8003c3c:	e02c      	b.n	8003c98 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003c3e:	2100      	movs	r1, #0
 8003c40:	20a9      	movs	r0, #169	; 0xa9
 8003c42:	f7ff fefa 	bl	8003a3a <send_cmd>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d804      	bhi.n	8003c56 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	737b      	strb	r3, [r7, #13]
 8003c50:	23a9      	movs	r3, #169	; 0xa9
 8003c52:	73bb      	strb	r3, [r7, #14]
 8003c54:	e003      	b.n	8003c5e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003c56:	2301      	movs	r3, #1
 8003c58:	737b      	strb	r3, [r7, #13]
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003c5e:	bf00      	nop
 8003c60:	f7ff fde2 	bl	8003828 <SPI_Timer_Status>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <USER_SPI_initialize+0x162>
 8003c6a:	7bbb      	ldrb	r3, [r7, #14]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fee3 	bl	8003a3a <send_cmd>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f2      	bne.n	8003c60 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003c7a:	f7ff fdd5 	bl	8003828 <SPI_Timer_Status>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <USER_SPI_initialize+0x17c>
 8003c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c88:	2010      	movs	r0, #16
 8003c8a:	f7ff fed6 	bl	8003a3a <send_cmd>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <USER_SPI_initialize+0x180>
				ty = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <USER_SPI_initialize+0x1d4>)
 8003c9a:	7b7b      	ldrb	r3, [r7, #13]
 8003c9c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003c9e:	f7ff fe49 	bl	8003934 <despiselect>

	if (ty) {			/* OK */
 8003ca2:	7b7b      	ldrb	r3, [r7, #13]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <USER_SPI_initialize+0x1d0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <USER_SPI_initialize+0x1d0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0208 	orr.w	r2, r2, #8
 8003cba:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <USER_SPI_initialize+0x1cc>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <USER_SPI_initialize+0x1cc>)
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e002      	b.n	8003cd4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <USER_SPI_initialize+0x1cc>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <USER_SPI_initialize+0x1cc>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000020 	.word	0x20000020
 8003ce8:	20000244 	.word	0x20000244
 8003cec:	200001ac 	.word	0x200001ac

08003cf0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <USER_SPI_status+0x14>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e002      	b.n	8003d0a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <USER_SPI_status+0x28>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b2db      	uxtb	r3, r3
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000020 	.word	0x20000020

08003d1c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <USER_SPI_read+0x1c>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <USER_SPI_read+0x20>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e04d      	b.n	8003dd8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <USER_SPI_read+0xc4>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <USER_SPI_read+0x32>
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e044      	b.n	8003dd8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <USER_SPI_read+0xc8>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <USER_SPI_read+0x44>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	025b      	lsls	r3, r3, #9
 8003d5e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d111      	bne.n	8003d8a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	2011      	movs	r0, #17
 8003d6a:	f7ff fe66 	bl	8003a3a <send_cmd>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d129      	bne.n	8003dc8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d78:	68b8      	ldr	r0, [r7, #8]
 8003d7a:	f7ff fe03 	bl	8003984 <rcvr_datablock>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d021      	beq.n	8003dc8 <USER_SPI_read+0xac>
			count = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	e01e      	b.n	8003dc8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	2012      	movs	r0, #18
 8003d8e:	f7ff fe54 	bl	8003a3a <send_cmd>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d117      	bne.n	8003dc8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d9c:	68b8      	ldr	r0, [r7, #8]
 8003d9e:	f7ff fdf1 	bl	8003984 <rcvr_datablock>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <USER_SPI_read+0xa2>
				buff += 512;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003dae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ed      	bne.n	8003d98 <USER_SPI_read+0x7c>
 8003dbc:	e000      	b.n	8003dc0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003dbe:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	200c      	movs	r0, #12
 8003dc4:	f7ff fe39 	bl	8003a3a <send_cmd>
		}
	}
	despiselect();
 8003dc8:	f7ff fdb4 	bl	8003934 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000020 	.word	0x20000020
 8003de4:	200001ac 	.word	0x200001ac

08003de8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4603      	mov	r3, r0
 8003df6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <USER_SPI_write+0x1c>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <USER_SPI_write+0x20>
 8003e04:	2304      	movs	r3, #4
 8003e06:	e063      	b.n	8003ed0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <USER_SPI_write+0xf0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <USER_SPI_write+0x32>
 8003e16:	2303      	movs	r3, #3
 8003e18:	e05a      	b.n	8003ed0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <USER_SPI_write+0xf0>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <USER_SPI_write+0x44>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e051      	b.n	8003ed0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <USER_SPI_write+0xf4>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <USER_SPI_write+0x56>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	025b      	lsls	r3, r3, #9
 8003e3c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d110      	bne.n	8003e66 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	2018      	movs	r0, #24
 8003e48:	f7ff fdf7 	bl	8003a3a <send_cmd>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d136      	bne.n	8003ec0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003e52:	21fe      	movs	r1, #254	; 0xfe
 8003e54:	68b8      	ldr	r0, [r7, #8]
 8003e56:	f7ff fdbe 	bl	80039d6 <xmit_datablock>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02f      	beq.n	8003ec0 <USER_SPI_write+0xd8>
			count = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	e02c      	b.n	8003ec0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <USER_SPI_write+0xf4>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	f003 0306 	and.w	r3, r3, #6
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <USER_SPI_write+0x92>
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	2097      	movs	r0, #151	; 0x97
 8003e76:	f7ff fde0 	bl	8003a3a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	2019      	movs	r0, #25
 8003e7e:	f7ff fddc 	bl	8003a3a <send_cmd>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11b      	bne.n	8003ec0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003e88:	21fc      	movs	r1, #252	; 0xfc
 8003e8a:	68b8      	ldr	r0, [r7, #8]
 8003e8c:	f7ff fda3 	bl	80039d6 <xmit_datablock>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <USER_SPI_write+0xc4>
				buff += 512;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e9c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ee      	bne.n	8003e88 <USER_SPI_write+0xa0>
 8003eaa:	e000      	b.n	8003eae <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003eac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003eae:	21fd      	movs	r1, #253	; 0xfd
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7ff fd90 	bl	80039d6 <xmit_datablock>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <USER_SPI_write+0xd8>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003ec0:	f7ff fd38 	bl	8003934 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000020 	.word	0x20000020
 8003edc:	200001ac 	.word	0x200001ac

08003ee0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	603a      	str	r2, [r7, #0]
 8003eea:	71fb      	strb	r3, [r7, #7]
 8003eec:	460b      	mov	r3, r1
 8003eee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <USER_SPI_ioctl+0x1a>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	e15a      	b.n	80041b0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003efa:	4baf      	ldr	r3, [pc, #700]	; (80041b8 <USER_SPI_ioctl+0x2d8>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <USER_SPI_ioctl+0x2c>
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e151      	b.n	80041b0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003f12:	79bb      	ldrb	r3, [r7, #6]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	f200 8136 	bhi.w	8004186 <USER_SPI_ioctl+0x2a6>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <USER_SPI_ioctl+0x40>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f35 	.word	0x08003f35
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08004187 	.word	0x08004187
 8003f2c:	08003ff5 	.word	0x08003ff5
 8003f30:	080040eb 	.word	0x080040eb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003f34:	f7ff fd0c 	bl	8003950 <spiselect>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8127 	beq.w	800418e <USER_SPI_ioctl+0x2ae>
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003f46:	e122      	b.n	800418e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2009      	movs	r0, #9
 8003f4c:	f7ff fd75 	bl	8003a3a <send_cmd>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 811d 	bne.w	8004192 <USER_SPI_ioctl+0x2b2>
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fd10 	bl	8003984 <rcvr_datablock>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8113 	beq.w	8004192 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003f6c:	7b3b      	ldrb	r3, [r7, #12]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d111      	bne.n	8003f9a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003f76:	7d7b      	ldrb	r3, [r7, #21]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	7d3b      	ldrb	r3, [r7, #20]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	4413      	add	r3, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	029a      	lsls	r2, r3, #10
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e028      	b.n	8003fec <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003f9a:	7c7b      	ldrb	r3, [r7, #17]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	7dbb      	ldrb	r3, [r7, #22]
 8003fa4:	09db      	lsrs	r3, r3, #7
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	7d7b      	ldrb	r3, [r7, #21]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0306 	and.w	r3, r3, #6
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003fc2:	7d3b      	ldrb	r3, [r7, #20]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	7cbb      	ldrb	r3, [r7, #18]
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fd8:	4413      	add	r3, r2
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003fde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003fe2:	3b09      	subs	r3, #9
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003ff2:	e0ce      	b.n	8004192 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003ff4:	4b71      	ldr	r3, [pc, #452]	; (80041bc <USER_SPI_ioctl+0x2dc>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d031      	beq.n	8004064 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004000:	2100      	movs	r1, #0
 8004002:	208d      	movs	r0, #141	; 0x8d
 8004004:	f7ff fd19 	bl	8003a3a <send_cmd>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 80c3 	bne.w	8004196 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004010:	20ff      	movs	r0, #255	; 0xff
 8004012:	f7ff fc1f 	bl	8003854 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004016:	f107 030c 	add.w	r3, r7, #12
 800401a:	2110      	movs	r1, #16
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fcb1 	bl	8003984 <rcvr_datablock>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80b6 	beq.w	8004196 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800402a:	2330      	movs	r3, #48	; 0x30
 800402c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004030:	e007      	b.n	8004042 <USER_SPI_ioctl+0x162>
 8004032:	20ff      	movs	r0, #255	; 0xff
 8004034:	f7ff fc0e 	bl	8003854 <xchg_spi>
 8004038:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800403c:	3b01      	subs	r3, #1
 800403e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004042:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f3      	bne.n	8004032 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800404a:	7dbb      	ldrb	r3, [r7, #22]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	2310      	movs	r3, #16
 8004054:	fa03 f202 	lsl.w	r2, r3, r2
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004062:	e098      	b.n	8004196 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004064:	2100      	movs	r1, #0
 8004066:	2009      	movs	r0, #9
 8004068:	f7ff fce7 	bl	8003a3a <send_cmd>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 8091 	bne.w	8004196 <USER_SPI_ioctl+0x2b6>
 8004074:	f107 030c 	add.w	r3, r7, #12
 8004078:	2110      	movs	r1, #16
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fc82 	bl	8003984 <rcvr_datablock>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8087 	beq.w	8004196 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004088:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <USER_SPI_ioctl+0x2dc>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004094:	7dbb      	ldrb	r3, [r7, #22]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800409c:	7dfa      	ldrb	r2, [r7, #23]
 800409e:	09d2      	lsrs	r2, r2, #7
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	4413      	add	r3, r2
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	7e7b      	ldrb	r3, [r7, #25]
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e013      	b.n	80040e2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80040ba:	7dbb      	ldrb	r3, [r7, #22]
 80040bc:	109b      	asrs	r3, r3, #2
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	3301      	adds	r3, #1
 80040c6:	7dfa      	ldrb	r2, [r7, #23]
 80040c8:	00d2      	lsls	r2, r2, #3
 80040ca:	f002 0218 	and.w	r2, r2, #24
 80040ce:	7df9      	ldrb	r1, [r7, #23]
 80040d0:	0949      	lsrs	r1, r1, #5
 80040d2:	b2c9      	uxtb	r1, r1
 80040d4:	440a      	add	r2, r1
 80040d6:	3201      	adds	r2, #1
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80040e8:	e055      	b.n	8004196 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80040ea:	4b34      	ldr	r3, [pc, #208]	; (80041bc <USER_SPI_ioctl+0x2dc>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d051      	beq.n	800419a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80040f6:	f107 020c 	add.w	r2, r7, #12
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	210b      	movs	r1, #11
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff feee 	bl	8003ee0 <USER_SPI_ioctl>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d149      	bne.n	800419e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800410a:	7b3b      	ldrb	r3, [r7, #12]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <USER_SPI_ioctl+0x23e>
 8004114:	7dbb      	ldrb	r3, [r7, #22]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d041      	beq.n	80041a2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <USER_SPI_ioctl+0x2dc>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	025b      	lsls	r3, r3, #9
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004148:	2020      	movs	r0, #32
 800414a:	f7ff fc76 	bl	8003a3a <send_cmd>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d128      	bne.n	80041a6 <USER_SPI_ioctl+0x2c6>
 8004154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004156:	2021      	movs	r0, #33	; 0x21
 8004158:	f7ff fc6f 	bl	8003a3a <send_cmd>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d121      	bne.n	80041a6 <USER_SPI_ioctl+0x2c6>
 8004162:	2100      	movs	r1, #0
 8004164:	2026      	movs	r0, #38	; 0x26
 8004166:	f7ff fc68 	bl	8003a3a <send_cmd>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11a      	bne.n	80041a6 <USER_SPI_ioctl+0x2c6>
 8004170:	f247 5030 	movw	r0, #30000	; 0x7530
 8004174:	f7ff fbbb 	bl	80038ee <wait_ready>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d013      	beq.n	80041a6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800417e:	2300      	movs	r3, #0
 8004180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004184:	e00f      	b.n	80041a6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004186:	2304      	movs	r3, #4
 8004188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800418c:	e00c      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		break;
 800418e:	bf00      	nop
 8004190:	e00a      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		break;
 8004192:	bf00      	nop
 8004194:	e008      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		break;
 8004196:	bf00      	nop
 8004198:	e006      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800419a:	bf00      	nop
 800419c:	e004      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <USER_SPI_ioctl+0x2c8>
		break;
 80041a6:	bf00      	nop
	}

	despiselect();
 80041a8:	f7ff fbc4 	bl	8003934 <despiselect>

	return res;
 80041ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3730      	adds	r7, #48	; 0x30
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000020 	.word	0x20000020
 80041bc:	200001ac 	.word	0x200001ac

080041c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <disk_status+0x30>)
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	79fa      	ldrb	r2, [r7, #7]
 80041d8:	4905      	ldr	r1, [pc, #20]	; (80041f0 <disk_status+0x30>)
 80041da:	440a      	add	r2, r1
 80041dc:	7a12      	ldrb	r2, [r2, #8]
 80041de:	4610      	mov	r0, r2
 80041e0:	4798      	blx	r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200001d8 	.word	0x200001d8

080041f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <disk_initialize+0x48>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d111      	bne.n	8004230 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <disk_initialize+0x48>)
 8004210:	2101      	movs	r1, #1
 8004212:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <disk_initialize+0x48>)
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	79fa      	ldrb	r2, [r7, #7]
 8004222:	4906      	ldr	r1, [pc, #24]	; (800423c <disk_initialize+0x48>)
 8004224:	440a      	add	r2, r1
 8004226:	7a12      	ldrb	r2, [r2, #8]
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200001d8 	.word	0x200001d8

08004240 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <disk_read+0x3c>)
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	689c      	ldr	r4, [r3, #8]
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <disk_read+0x3c>)
 8004260:	4413      	add	r3, r2
 8004262:	7a18      	ldrb	r0, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	47a0      	blx	r4
 800426c:	4603      	mov	r3, r0
 800426e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	200001d8 	.word	0x200001d8

08004280 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <disk_write+0x3c>)
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68dc      	ldr	r4, [r3, #12]
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4a07      	ldr	r2, [pc, #28]	; (80042bc <disk_write+0x3c>)
 80042a0:	4413      	add	r3, r2
 80042a2:	7a18      	ldrb	r0, [r3, #8]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	47a0      	blx	r4
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd90      	pop	{r4, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200001d8 	.word	0x200001d8

080042c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	603a      	str	r2, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	460b      	mov	r3, r1
 80042ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <disk_ioctl+0x38>)
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	79fa      	ldrb	r2, [r7, #7]
 80042de:	4906      	ldr	r1, [pc, #24]	; (80042f8 <disk_ioctl+0x38>)
 80042e0:	440a      	add	r2, r1
 80042e2:	7a10      	ldrb	r0, [r2, #8]
 80042e4:	79b9      	ldrb	r1, [r7, #6]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4798      	blx	r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	200001d8 	.word	0x200001d8

080042fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	b21a      	sxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b21b      	sxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b21b      	sxth	r3, r3
 800431c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800431e:	89fb      	ldrh	r3, [r7, #14]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3303      	adds	r3, #3
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	3202      	adds	r2, #2
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	3201      	adds	r2, #1
 8004352:	7812      	ldrb	r2, [r2, #0]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	7812      	ldrb	r2, [r2, #0]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
	return rv;
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	887a      	ldrh	r2, [r7, #2]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	887b      	ldrh	r3, [r7, #2]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00d      	beq.n	8004436 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	1c53      	adds	r3, r2, #1
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1c59      	adds	r1, r3, #1
 8004424:	6179      	str	r1, [r7, #20]
 8004426:	7812      	ldrb	r2, [r2, #0]
 8004428:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3b01      	subs	r3, #1
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f1      	bne.n	800441a <mem_cpy+0x1a>
	}
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	617a      	str	r2, [r7, #20]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3b01      	subs	r3, #1
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f3      	bne.n	8004452 <mem_set+0x10>
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	4619      	mov	r1, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	61ba      	str	r2, [r7, #24]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	1acb      	subs	r3, r1, r3
 80044a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <mem_cmp+0x40>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0eb      	beq.n	8004490 <mem_cmp+0x18>

	return r;
 80044b8:	697b      	ldr	r3, [r7, #20]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80044d0:	e002      	b.n	80044d8 <chk_chr+0x12>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3301      	adds	r3, #1
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <chk_chr+0x26>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d1f2      	bne.n	80044d2 <chk_chr+0xc>
	return *str;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	781b      	ldrb	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e029      	b.n	8004564 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004510:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <chk_lock+0xb4>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01d      	beq.n	800455a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800451e:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <chk_lock+0xb4>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4413      	add	r3, r2
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d116      	bne.n	800455e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <chk_lock+0xb4>)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004540:	429a      	cmp	r2, r3
 8004542:	d10c      	bne.n	800455e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004544:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <chk_lock+0xb4>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4413      	add	r3, r2
 800454c:	3308      	adds	r3, #8
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004554:	429a      	cmp	r2, r3
 8004556:	d102      	bne.n	800455e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004558:	e007      	b.n	800456a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800455a:	2301      	movs	r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d9d2      	bls.n	8004510 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d109      	bne.n	8004584 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <chk_lock+0x80>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d101      	bne.n	8004580 <chk_lock+0x84>
 800457c:	2300      	movs	r3, #0
 800457e:	e010      	b.n	80045a2 <chk_lock+0xa6>
 8004580:	2312      	movs	r3, #18
 8004582:	e00e      	b.n	80045a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <chk_lock+0xa0>
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <chk_lock+0xb4>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	4413      	add	r3, r2
 8004592:	330c      	adds	r3, #12
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459a:	d101      	bne.n	80045a0 <chk_lock+0xa4>
 800459c:	2310      	movs	r3, #16
 800459e:	e000      	b.n	80045a2 <chk_lock+0xa6>
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	200001b8 	.word	0x200001b8

080045b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e002      	b.n	80045c6 <enq_lock+0x12>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3301      	adds	r3, #1
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d806      	bhi.n	80045da <enq_lock+0x26>
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <enq_lock+0x40>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	4413      	add	r3, r2
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f2      	bne.n	80045c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	200001b8 	.word	0x200001b8

080045f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e01f      	b.n	8004648 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004608:	4a41      	ldr	r2, [pc, #260]	; (8004710 <inc_lock+0x118>)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4413      	add	r3, r2
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d113      	bne.n	8004642 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800461a:	4a3d      	ldr	r2, [pc, #244]	; (8004710 <inc_lock+0x118>)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	4413      	add	r3, r2
 8004622:	3304      	adds	r3, #4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800462a:	429a      	cmp	r2, r3
 800462c:	d109      	bne.n	8004642 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800462e:	4a38      	ldr	r2, [pc, #224]	; (8004710 <inc_lock+0x118>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	3308      	adds	r3, #8
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800463e:	429a      	cmp	r2, r3
 8004640:	d006      	beq.n	8004650 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3301      	adds	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d9dc      	bls.n	8004608 <inc_lock+0x10>
 800464e:	e000      	b.n	8004652 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004650:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d132      	bne.n	80046be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e002      	b.n	8004664 <inc_lock+0x6c>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d806      	bhi.n	8004678 <inc_lock+0x80>
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <inc_lock+0x118>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	4413      	add	r3, r2
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f2      	bne.n	800465e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d101      	bne.n	8004682 <inc_lock+0x8a>
 800467e:	2300      	movs	r3, #0
 8004680:	e040      	b.n	8004704 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4922      	ldr	r1, [pc, #136]	; (8004710 <inc_lock+0x118>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	440b      	add	r3, r1
 800468e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	491e      	ldr	r1, [pc, #120]	; (8004710 <inc_lock+0x118>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	440b      	add	r3, r1
 800469c:	3304      	adds	r3, #4
 800469e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	491a      	ldr	r1, [pc, #104]	; (8004710 <inc_lock+0x118>)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	440b      	add	r3, r1
 80046ac:	3308      	adds	r3, #8
 80046ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <inc_lock+0x118>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4413      	add	r3, r2
 80046b8:	330c      	adds	r3, #12
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <inc_lock+0xe0>
 80046c4:	4a12      	ldr	r2, [pc, #72]	; (8004710 <inc_lock+0x118>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	4413      	add	r3, r2
 80046cc:	330c      	adds	r3, #12
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <inc_lock+0xe0>
 80046d4:	2300      	movs	r3, #0
 80046d6:	e015      	b.n	8004704 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <inc_lock+0xf8>
 80046de:	4a0c      	ldr	r2, [pc, #48]	; (8004710 <inc_lock+0x118>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4413      	add	r3, r2
 80046e6:	330c      	adds	r3, #12
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	e001      	b.n	80046f4 <inc_lock+0xfc>
 80046f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f4:	4906      	ldr	r1, [pc, #24]	; (8004710 <inc_lock+0x118>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	440b      	add	r3, r1
 80046fc:	330c      	adds	r3, #12
 80046fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3301      	adds	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	200001b8 	.word	0x200001b8

08004714 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d825      	bhi.n	8004774 <dec_lock+0x60>
		n = Files[i].ctr;
 8004728:	4a17      	ldr	r2, [pc, #92]	; (8004788 <dec_lock+0x74>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	4413      	add	r3, r2
 8004730:	330c      	adds	r3, #12
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473c:	d101      	bne.n	8004742 <dec_lock+0x2e>
 800473e:	2300      	movs	r3, #0
 8004740:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <dec_lock+0x3a>
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	3b01      	subs	r3, #1
 800474c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <dec_lock+0x74>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	4413      	add	r3, r2
 8004756:	330c      	adds	r3, #12
 8004758:	89fa      	ldrh	r2, [r7, #14]
 800475a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <dec_lock+0x5a>
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <dec_lock+0x74>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	4413      	add	r3, r2
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	737b      	strb	r3, [r7, #13]
 8004772:	e001      	b.n	8004778 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004774:	2302      	movs	r3, #2
 8004776:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004778:	7b7b      	ldrb	r3, [r7, #13]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	200001b8 	.word	0x200001b8

0800478c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e010      	b.n	80047bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800479a:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <clear_lock+0x44>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	4413      	add	r3, r2
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d105      	bne.n	80047b6 <clear_lock+0x2a>
 80047aa:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <clear_lock+0x44>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4413      	add	r3, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d9eb      	bls.n	800479a <clear_lock+0xe>
	}
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	200001b8 	.word	0x200001b8

080047d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d034      	beq.n	8004852 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7858      	ldrb	r0, [r3, #1]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047f8:	2301      	movs	r3, #1
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	f7ff fd40 	bl	8004280 <disk_write>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e022      	b.n	8004852 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d217      	bcs.n	8004852 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	789b      	ldrb	r3, [r3, #2]
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e010      	b.n	800484c <sync_window+0x78>
					wsect += fs->fsize;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7858      	ldrb	r0, [r3, #1]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800483e:	2301      	movs	r3, #1
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	f7ff fd1d 	bl	8004280 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3b01      	subs	r3, #1
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d8eb      	bhi.n	800482a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d01b      	beq.n	80048ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ffad 	bl	80047d4 <sync_window>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d113      	bne.n	80048ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7858      	ldrb	r0, [r3, #1]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800488e:	2301      	movs	r3, #1
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	f7ff fcd5 	bl	8004240 <disk_read>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff87 	bl	80047d4 <sync_window>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d158      	bne.n	8004982 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d148      	bne.n	800496a <sync_fs+0xb2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	791b      	ldrb	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d144      	bne.n	800496a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3330      	adds	r3, #48	; 0x30
 80048e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fda9 	bl	8004442 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3330      	adds	r3, #48	; 0x30
 80048f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80048f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fd38 	bl	8004372 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3330      	adds	r3, #48	; 0x30
 8004906:	4921      	ldr	r1, [pc, #132]	; (800498c <sync_fs+0xd4>)
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fd4d 	bl	80043a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3330      	adds	r3, #48	; 0x30
 8004912:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004916:	491e      	ldr	r1, [pc, #120]	; (8004990 <sync_fs+0xd8>)
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fd45 	bl	80043a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3330      	adds	r3, #48	; 0x30
 8004922:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f7ff fd3b 	bl	80043a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3330      	adds	r3, #48	; 0x30
 8004936:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7ff fd31 	bl	80043a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7858      	ldrb	r0, [r3, #1]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	2301      	movs	r3, #1
 8004960:	f7ff fc8e 	bl	8004280 <disk_write>
			fs->fsi_flag = 0;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	2200      	movs	r2, #0
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fca4 	bl	80042c0 <disk_ioctl>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <sync_fs+0xca>
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	41615252 	.word	0x41615252
 8004990:	61417272 	.word	0x61417272

08004994 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3b02      	subs	r3, #2
 80049a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	3b02      	subs	r3, #2
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d301      	bcc.n	80049b4 <clust2sect+0x20>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e008      	b.n	80049c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	895b      	ldrh	r3, [r3, #10]
 80049b8:	461a      	mov	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	fb03 f202 	mul.w	r2, r3, r2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	4413      	add	r3, r2
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d904      	bls.n	80049f2 <get_fat+0x20>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e08f      	b.n	8004b18 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d062      	beq.n	8004acc <get_fat+0xfa>
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	dc7c      	bgt.n	8004b04 <get_fat+0x132>
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d002      	beq.n	8004a14 <get_fat+0x42>
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d042      	beq.n	8004a98 <get_fat+0xc6>
 8004a12:	e077      	b.n	8004b04 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6a1a      	ldr	r2, [r3, #32]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	0a5b      	lsrs	r3, r3, #9
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6938      	ldr	r0, [r7, #16]
 8004a30:	f7ff ff14 	bl	800485c <move_window>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d167      	bne.n	8004b0a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	60fa      	str	r2, [r7, #12]
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	0a5b      	lsrs	r3, r3, #9
 8004a56:	4413      	add	r3, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f7ff fefe 	bl	800485c <move_window>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d153      	bne.n	8004b0e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <get_fat+0xbc>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	e002      	b.n	8004a94 <get_fat+0xc2>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	617b      	str	r3, [r7, #20]
			break;
 8004a96:	e03f      	b.n	8004b18 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	6a1a      	ldr	r2, [r3, #32]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	4413      	add	r3, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6938      	ldr	r0, [r7, #16]
 8004aa6:	f7ff fed9 	bl	800485c <move_window>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d130      	bne.n	8004b12 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004abe:	4413      	add	r3, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fc1b 	bl	80042fc <ld_word>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	617b      	str	r3, [r7, #20]
			break;
 8004aca:	e025      	b.n	8004b18 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	09db      	lsrs	r3, r3, #7
 8004ad4:	4413      	add	r3, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6938      	ldr	r0, [r7, #16]
 8004ada:	f7ff febf 	bl	800485c <move_window>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d118      	bne.n	8004b16 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004af2:	4413      	add	r3, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fc19 	bl	800432c <ld_dword>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b00:	617b      	str	r3, [r7, #20]
			break;
 8004b02:	e009      	b.n	8004b18 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e006      	b.n	8004b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b0a:	bf00      	nop
 8004b0c:	e004      	b.n	8004b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b0e:	bf00      	nop
 8004b10:	e002      	b.n	8004b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b16:	bf00      	nop
		}
	}

	return val;
 8004b18:	697b      	ldr	r3, [r7, #20]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004b22:	b590      	push	{r4, r7, lr}
 8004b24:	b089      	sub	sp, #36	; 0x24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	f240 80d2 	bls.w	8004cde <put_fat+0x1bc>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f080 80cc 	bcs.w	8004cde <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	f000 8096 	beq.w	8004c7c <put_fat+0x15a>
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	f300 80cd 	bgt.w	8004cf0 <put_fat+0x1ce>
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d002      	beq.n	8004b60 <put_fat+0x3e>
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d06e      	beq.n	8004c3c <put_fat+0x11a>
 8004b5e:	e0c7      	b.n	8004cf0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	0a5b      	lsrs	r3, r3, #9
 8004b76:	4413      	add	r3, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fe6e 	bl	800485c <move_window>
 8004b80:	4603      	mov	r3, r0
 8004b82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b84:	7ffb      	ldrb	r3, [r7, #31]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 80ab 	bne.w	8004ce2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1c59      	adds	r1, r3, #1
 8004b96:	61b9      	str	r1, [r7, #24]
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	4413      	add	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <put_fat+0xa4>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b25b      	sxtb	r3, r3
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	b25a      	sxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	b25b      	sxtb	r3, r3
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e001      	b.n	8004bca <put_fat+0xa8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1a      	ldr	r2, [r3, #32]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	0a5b      	lsrs	r3, r3, #9
 8004bdc:	4413      	add	r3, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7ff fe3b 	bl	800485c <move_window>
 8004be6:	4603      	mov	r3, r0
 8004be8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d17a      	bne.n	8004ce6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <put_fat+0xf0>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	e00e      	b.n	8004c30 <put_fat+0x10e>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	f023 030f 	bic.w	r3, r3, #15
 8004c1c:	b25a      	sxtb	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	b25b      	sxtb	r3, r3
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	70da      	strb	r2, [r3, #3]
			break;
 8004c3a:	e059      	b.n	8004cf0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1a      	ldr	r2, [r3, #32]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	4413      	add	r3, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fe07 	bl	800485c <move_window>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d148      	bne.n	8004cea <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004c66:	4413      	add	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fb7f 	bl	8004372 <st_word>
			fs->wflag = 1;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	70da      	strb	r2, [r3, #3]
			break;
 8004c7a:	e039      	b.n	8004cf0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	09db      	lsrs	r3, r3, #7
 8004c84:	4413      	add	r3, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff fde7 	bl	800485c <move_window>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d12a      	bne.n	8004cee <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004cac:	4413      	add	r3, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fb3c 	bl	800432c <ld_dword>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004cba:	4323      	orrs	r3, r4
 8004cbc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004ccc:	4413      	add	r3, r2
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fb69 	bl	80043a8 <st_dword>
			fs->wflag = 1;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	70da      	strb	r2, [r3, #3]
			break;
 8004cdc:	e008      	b.n	8004cf0 <put_fat+0x1ce>
		}
	}
 8004cde:	bf00      	nop
 8004ce0:	e006      	b.n	8004cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004ce2:	bf00      	nop
 8004ce4:	e004      	b.n	8004cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004cee:	bf00      	nop
	return res;
 8004cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd90      	pop	{r4, r7, pc}

08004cfa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b088      	sub	sp, #32
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d904      	bls.n	8004d20 <remove_chain+0x26>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d301      	bcc.n	8004d24 <remove_chain+0x2a>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e04b      	b.n	8004dbc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	69b8      	ldr	r0, [r7, #24]
 8004d32:	f7ff fef6 	bl	8004b22 <put_fat>
 8004d36:	4603      	mov	r3, r0
 8004d38:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <remove_chain+0x4a>
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
 8004d42:	e03b      	b.n	8004dbc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff fe43 	bl	80049d2 <get_fat>
 8004d4c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d031      	beq.n	8004db8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <remove_chain+0x64>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e02e      	b.n	8004dbc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d101      	bne.n	8004d6a <remove_chain+0x70>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e028      	b.n	8004dbc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	69b8      	ldr	r0, [r7, #24]
 8004d70:	f7ff fed7 	bl	8004b22 <put_fat>
 8004d74:	4603      	mov	r3, r0
 8004d76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <remove_chain+0x88>
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	e01c      	b.n	8004dbc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	3b02      	subs	r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d20b      	bcs.n	8004da8 <remove_chain+0xae>
			fs->free_clst++;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3c6      	bcc.n	8004d44 <remove_chain+0x4a>
 8004db6:	e000      	b.n	8004dba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004db8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <create_chain+0x2c>
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d31b      	bcc.n	8004e28 <create_chain+0x64>
 8004df0:	2301      	movs	r3, #1
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e018      	b.n	8004e28 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fdea 	bl	80049d2 <get_fat>
 8004dfe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d801      	bhi.n	8004e0a <create_chain+0x46>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e070      	b.n	8004eec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d101      	bne.n	8004e16 <create_chain+0x52>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	e06a      	b.n	8004eec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d201      	bcs.n	8004e24 <create_chain+0x60>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	e063      	b.n	8004eec <create_chain+0x128>
		scl = clst;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d307      	bcc.n	8004e4c <create_chain+0x88>
				ncl = 2;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d901      	bls.n	8004e4c <create_chain+0x88>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e04f      	b.n	8004eec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fdbf 	bl	80049d2 <get_fat>
 8004e54:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d003      	beq.n	8004e6a <create_chain+0xa6>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d101      	bne.n	8004e6e <create_chain+0xaa>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	e03e      	b.n	8004eec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d1da      	bne.n	8004e2c <create_chain+0x68>
 8004e76:	2300      	movs	r3, #0
 8004e78:	e038      	b.n	8004eec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004e7a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	69f9      	ldr	r1, [r7, #28]
 8004e82:	6938      	ldr	r0, [r7, #16]
 8004e84:	f7ff fe4d 	bl	8004b22 <put_fat>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <create_chain+0xe2>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d006      	beq.n	8004ea6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6938      	ldr	r0, [r7, #16]
 8004e9e:	f7ff fe40 	bl	8004b22 <put_fat>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <create_chain+0x116>
		fs->last_clst = ncl;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	3b02      	subs	r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d804      	bhi.n	8004eca <create_chain+0x106>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	711a      	strb	r2, [r3, #4]
 8004ed8:	e007      	b.n	8004eea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d102      	bne.n	8004ee6 <create_chain+0x122>
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	e000      	b.n	8004ee8 <create_chain+0x124>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004eea:	69fb      	ldr	r3, [r7, #28]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	3304      	adds	r3, #4
 8004f0a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	0a5b      	lsrs	r3, r3, #9
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	8952      	ldrh	r2, [r2, #10]
 8004f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1d1a      	adds	r2, r3, #4
 8004f1e:	613a      	str	r2, [r7, #16]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <clmt_clust+0x3a>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e010      	b.n	8004f50 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d307      	bcc.n	8004f46 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	3304      	adds	r3, #4
 8004f42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f44:	e7e9      	b.n	8004f1a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004f46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f72:	d204      	bcs.n	8004f7e <dir_sdi+0x22>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e063      	b.n	800504a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <dir_sdi+0x46>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d902      	bls.n	8004fa2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10c      	bne.n	8004fc2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	8912      	ldrh	r2, [r2, #8]
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d301      	bcc.n	8004fb8 <dir_sdi+0x5c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e048      	b.n	800504a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	61da      	str	r2, [r3, #28]
 8004fc0:	e029      	b.n	8005016 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	025b      	lsls	r3, r3, #9
 8004fc8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004fca:	e019      	b.n	8005000 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fcfe 	bl	80049d2 <get_fat>
 8004fd6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d101      	bne.n	8004fe4 <dir_sdi+0x88>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e032      	b.n	800504a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d904      	bls.n	8004ff4 <dir_sdi+0x98>
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d301      	bcc.n	8004ff8 <dir_sdi+0x9c>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e028      	b.n	800504a <dir_sdi+0xee>
			ofs -= csz;
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	429a      	cmp	r2, r3
 8005006:	d2e1      	bcs.n	8004fcc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005008:	6979      	ldr	r1, [r7, #20]
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f7ff fcc2 	bl	8004994 <clust2sect>
 8005010:	4602      	mov	r2, r0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <dir_sdi+0xcc>
 8005024:	2302      	movs	r3, #2
 8005026:	e010      	b.n	800504a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	0a5b      	lsrs	r3, r3, #9
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	3320      	adds	r3, #32
 8005068:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <dir_next+0x28>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005078:	d301      	bcc.n	800507e <dir_next+0x2c>
 800507a:	2304      	movs	r3, #4
 800507c:	e0aa      	b.n	80051d4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 8098 	bne.w	80051ba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	8912      	ldrh	r2, [r2, #8]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	f0c0 8088 	bcc.w	80051ba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	61da      	str	r2, [r3, #28]
 80050b0:	2304      	movs	r3, #4
 80050b2:	e08f      	b.n	80051d4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	0a5b      	lsrs	r3, r3, #9
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	8952      	ldrh	r2, [r2, #10]
 80050bc:	3a01      	subs	r2, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d17a      	bne.n	80051ba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7ff fc80 	bl	80049d2 <get_fat>
 80050d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d801      	bhi.n	80050de <dir_next+0x8c>
 80050da:	2302      	movs	r3, #2
 80050dc:	e07a      	b.n	80051d4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d101      	bne.n	80050ea <dir_next+0x98>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e074      	b.n	80051d4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d358      	bcc.n	80051a6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	61da      	str	r2, [r3, #28]
 8005100:	2304      	movs	r3, #4
 8005102:	e067      	b.n	80051d4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7ff fe59 	bl	8004dc4 <create_chain>
 8005112:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <dir_next+0xcc>
 800511a:	2307      	movs	r3, #7
 800511c:	e05a      	b.n	80051d4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <dir_next+0xd6>
 8005124:	2302      	movs	r3, #2
 8005126:	e055      	b.n	80051d4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d101      	bne.n	8005134 <dir_next+0xe2>
 8005130:	2301      	movs	r3, #1
 8005132:	e04f      	b.n	80051d4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fb4d 	bl	80047d4 <sync_window>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <dir_next+0xf2>
 8005140:	2301      	movs	r3, #1
 8005142:	e047      	b.n	80051d4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3330      	adds	r3, #48	; 0x30
 8005148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f977 	bl	8004442 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	6979      	ldr	r1, [r7, #20]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fc1a 	bl	8004994 <clust2sect>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c
 8005166:	e012      	b.n	800518e <dir_next+0x13c>
						fs->wflag = 1;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff fb30 	bl	80047d4 <sync_window>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <dir_next+0x12c>
 800517a:	2301      	movs	r3, #1
 800517c:	e02a      	b.n	80051d4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	3301      	adds	r3, #1
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	62da      	str	r2, [r3, #44]	; 0x2c
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	895b      	ldrh	r3, [r3, #10]
 8005192:	461a      	mov	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4293      	cmp	r3, r2
 8005198:	d3e6      	bcc.n	8005168 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad2      	subs	r2, r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fbf0 	bl	8004994 <clust2sect>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80051ec:	2100      	movs	r1, #0
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff feb4 	bl	8004f5c <dir_sdi>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d12b      	bne.n	8005256 <dir_alloc+0x7a>
		n = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4619      	mov	r1, r3
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff fb27 	bl	800485c <move_window>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11d      	bne.n	8005254 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2be5      	cmp	r3, #229	; 0xe5
 8005220:	d004      	beq.n	800522c <dir_alloc+0x50>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3301      	adds	r3, #1
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d102      	bne.n	8005240 <dir_alloc+0x64>
 800523a:	e00c      	b.n	8005256 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005240:	2101      	movs	r1, #1
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ff05 	bl	8005052 <dir_next>
 8005248:	4603      	mov	r3, r0
 800524a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0d7      	beq.n	8005202 <dir_alloc+0x26>
 8005252:	e000      	b.n	8005256 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005254:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d101      	bne.n	8005260 <dir_alloc+0x84>
 800525c:	2307      	movs	r3, #7
 800525e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	331a      	adds	r3, #26
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff f83f 	bl	80042fc <ld_word>
 800527e:	4603      	mov	r3, r0
 8005280:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b03      	cmp	r3, #3
 8005288:	d109      	bne.n	800529e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f834 	bl	80042fc <ld_word>
 8005294:	4603      	mov	r3, r0
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	331a      	adds	r3, #26
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	b292      	uxth	r2, r2
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f857 	bl	8004372 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d109      	bne.n	80052e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f103 0214 	add.w	r2, r3, #20
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7ff f849 	bl	8004372 <st_word>
	}
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80052f6:	2100      	movs	r1, #0
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fe2f 	bl	8004f5c <dir_sdi>
 80052fe:	4603      	mov	r3, r0
 8005300:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <dir_find+0x24>
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	e03e      	b.n	800538a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	4619      	mov	r1, r3
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f7ff faa2 	bl	800485c <move_window>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d12f      	bne.n	8005382 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <dir_find+0x4e>
 8005330:	2304      	movs	r3, #4
 8005332:	75fb      	strb	r3, [r7, #23]
 8005334:	e028      	b.n	8005388 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	330b      	adds	r3, #11
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	330b      	adds	r3, #11
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <dir_find+0x86>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a18      	ldr	r0, [r3, #32]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	220b      	movs	r2, #11
 8005362:	4619      	mov	r1, r3
 8005364:	f7ff f888 	bl	8004478 <mem_cmp>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800536e:	2100      	movs	r1, #0
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fe6e 	bl	8005052 <dir_next>
 8005376:	4603      	mov	r3, r0
 8005378:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0c5      	beq.n	800530c <dir_find+0x24>
 8005380:	e002      	b.n	8005388 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005386:	bf00      	nop

	return res;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80053a0:	2101      	movs	r1, #1
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff ff1a 	bl	80051dc <dir_alloc>
 80053a8:	4603      	mov	r3, r0
 80053aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d11c      	bne.n	80053ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4619      	mov	r1, r3
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f7ff fa4f 	bl	800485c <move_window>
 80053be:	4603      	mov	r3, r0
 80053c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d111      	bne.n	80053ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	2220      	movs	r2, #32
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f836 	bl	8004442 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a18      	ldr	r0, [r3, #32]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3324      	adds	r3, #36	; 0x24
 80053de:	220b      	movs	r2, #11
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7ff f80d 	bl	8004400 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2201      	movs	r2, #1
 80053ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3324      	adds	r3, #36	; 0x24
 800540c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800540e:	220b      	movs	r2, #11
 8005410:	2120      	movs	r1, #32
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	f7ff f815 	bl	8004442 <mem_set>
	si = i = 0; ni = 8;
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	2308      	movs	r3, #8
 8005422:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	61fa      	str	r2, [r7, #28]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005432:	7efb      	ldrb	r3, [r7, #27]
 8005434:	2b20      	cmp	r3, #32
 8005436:	d94e      	bls.n	80054d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005438:	7efb      	ldrb	r3, [r7, #27]
 800543a:	2b2f      	cmp	r3, #47	; 0x2f
 800543c:	d006      	beq.n	800544c <create_name+0x54>
 800543e:	7efb      	ldrb	r3, [r7, #27]
 8005440:	2b5c      	cmp	r3, #92	; 0x5c
 8005442:	d110      	bne.n	8005466 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005444:	e002      	b.n	800544c <create_name+0x54>
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3301      	adds	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b2f      	cmp	r3, #47	; 0x2f
 8005456:	d0f6      	beq.n	8005446 <create_name+0x4e>
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b5c      	cmp	r3, #92	; 0x5c
 8005462:	d0f0      	beq.n	8005446 <create_name+0x4e>
			break;
 8005464:	e038      	b.n	80054d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005466:	7efb      	ldrb	r3, [r7, #27]
 8005468:	2b2e      	cmp	r3, #46	; 0x2e
 800546a:	d003      	beq.n	8005474 <create_name+0x7c>
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	429a      	cmp	r2, r3
 8005472:	d30c      	bcc.n	800548e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b0b      	cmp	r3, #11
 8005478:	d002      	beq.n	8005480 <create_name+0x88>
 800547a:	7efb      	ldrb	r3, [r7, #27]
 800547c:	2b2e      	cmp	r3, #46	; 0x2e
 800547e:	d001      	beq.n	8005484 <create_name+0x8c>
 8005480:	2306      	movs	r3, #6
 8005482:	e044      	b.n	800550e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005484:	2308      	movs	r3, #8
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	230b      	movs	r3, #11
 800548a:	617b      	str	r3, [r7, #20]
			continue;
 800548c:	e022      	b.n	80054d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800548e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da04      	bge.n	80054a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005496:	7efb      	ldrb	r3, [r7, #27]
 8005498:	3b80      	subs	r3, #128	; 0x80
 800549a:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <create_name+0x120>)
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80054a0:	7efb      	ldrb	r3, [r7, #27]
 80054a2:	4619      	mov	r1, r3
 80054a4:	481d      	ldr	r0, [pc, #116]	; (800551c <create_name+0x124>)
 80054a6:	f7ff f80e 	bl	80044c6 <chk_chr>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <create_name+0xbc>
 80054b0:	2306      	movs	r3, #6
 80054b2:	e02c      	b.n	800550e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80054b4:	7efb      	ldrb	r3, [r7, #27]
 80054b6:	2b60      	cmp	r3, #96	; 0x60
 80054b8:	d905      	bls.n	80054c6 <create_name+0xce>
 80054ba:	7efb      	ldrb	r3, [r7, #27]
 80054bc:	2b7a      	cmp	r3, #122	; 0x7a
 80054be:	d802      	bhi.n	80054c6 <create_name+0xce>
 80054c0:	7efb      	ldrb	r3, [r7, #27]
 80054c2:	3b20      	subs	r3, #32
 80054c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	613a      	str	r2, [r7, #16]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	4413      	add	r3, r2
 80054d0:	7efa      	ldrb	r2, [r7, #27]
 80054d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80054d4:	e7a6      	b.n	8005424 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80054d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	441a      	add	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <create_name+0xf4>
 80054e8:	2306      	movs	r3, #6
 80054ea:	e010      	b.n	800550e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2be5      	cmp	r3, #229	; 0xe5
 80054f2:	d102      	bne.n	80054fa <create_name+0x102>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2205      	movs	r2, #5
 80054f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80054fa:	7efb      	ldrb	r3, [r7, #27]
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d801      	bhi.n	8005504 <create_name+0x10c>
 8005500:	2204      	movs	r2, #4
 8005502:	e000      	b.n	8005506 <create_name+0x10e>
 8005504:	2200      	movs	r2, #0
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	330b      	adds	r3, #11
 800550a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800550c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	08007168 	.word	0x08007168
 800551c:	0800710c 	.word	0x0800710c

08005520 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005534:	e002      	b.n	800553c <follow_path+0x1c>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b2f      	cmp	r3, #47	; 0x2f
 8005542:	d0f8      	beq.n	8005536 <follow_path+0x16>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b5c      	cmp	r3, #92	; 0x5c
 800554a:	d0f4      	beq.n	8005536 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b1f      	cmp	r3, #31
 8005558:	d80a      	bhi.n	8005570 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005562:	2100      	movs	r1, #0
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fcf9 	bl	8004f5c <dir_sdi>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]
 800556e:	e043      	b.n	80055f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005570:	463b      	mov	r3, r7
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff3f 	bl	80053f8 <create_name>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d134      	bne.n	80055ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff feaf 	bl	80052e8 <dir_find>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005594:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d127      	bne.n	80055f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80055a2:	7afb      	ldrb	r3, [r7, #11]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d122      	bne.n	80055f2 <follow_path+0xd2>
 80055ac:	2305      	movs	r3, #5
 80055ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80055b0:	e01f      	b.n	80055f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055b2:	7afb      	ldrb	r3, [r7, #11]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11c      	bne.n	80055f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	799b      	ldrb	r3, [r3, #6]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80055c8:	2305      	movs	r3, #5
 80055ca:	75fb      	strb	r3, [r7, #23]
 80055cc:	e014      	b.n	80055f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055dc:	4413      	add	r3, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fe42 	bl	800526a <ld_clust>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80055ec:	e7c0      	b.n	8005570 <follow_path+0x50>
			if (res != FR_OK) break;
 80055ee:	bf00      	nop
 80055f0:	e002      	b.n	80055f8 <follow_path+0xd8>
				break;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055f6:	bf00      	nop
			}
		}
	}

	return res;
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005602:	b480      	push	{r7}
 8005604:	b087      	sub	sp, #28
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d031      	beq.n	800567c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e002      	b.n	8005626 <get_ldnumber+0x24>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	3301      	adds	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b20      	cmp	r3, #32
 800562c:	d903      	bls.n	8005636 <get_ldnumber+0x34>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b3a      	cmp	r3, #58	; 0x3a
 8005634:	d1f4      	bne.n	8005620 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b3a      	cmp	r3, #58	; 0x3a
 800563c:	d11c      	bne.n	8005678 <get_ldnumber+0x76>
			tp = *path;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	60fa      	str	r2, [r7, #12]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	3b30      	subs	r3, #48	; 0x30
 800564e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b09      	cmp	r3, #9
 8005654:	d80e      	bhi.n	8005674 <get_ldnumber+0x72>
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	429a      	cmp	r2, r3
 800565c:	d10a      	bne.n	8005674 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <get_ldnumber+0x72>
					vol = (int)i;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3301      	adds	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	e002      	b.n	800567e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800567c:	693b      	ldr	r3, [r7, #16]
}
 800567e:	4618      	mov	r0, r3
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	70da      	strb	r2, [r3, #3]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f04f 32ff 	mov.w	r2, #4294967295
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff f8d8 	bl	800485c <move_window>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <check_fs+0x2a>
 80056b2:	2304      	movs	r3, #4
 80056b4:	e038      	b.n	8005728 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3330      	adds	r3, #48	; 0x30
 80056ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fe1c 	bl	80042fc <ld_word>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <check_fs+0x48>
 80056d0:	2303      	movs	r3, #3
 80056d2:	e029      	b.n	8005728 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056da:	2be9      	cmp	r3, #233	; 0xe9
 80056dc:	d009      	beq.n	80056f2 <check_fs+0x66>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e4:	2beb      	cmp	r3, #235	; 0xeb
 80056e6:	d11e      	bne.n	8005726 <check_fs+0x9a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056ee:	2b90      	cmp	r3, #144	; 0x90
 80056f0:	d119      	bne.n	8005726 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3330      	adds	r3, #48	; 0x30
 80056f6:	3336      	adds	r3, #54	; 0x36
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe fe17 	bl	800432c <ld_dword>
 80056fe:	4603      	mov	r3, r0
 8005700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005704:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <check_fs+0xa4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d101      	bne.n	800570e <check_fs+0x82>
 800570a:	2300      	movs	r3, #0
 800570c:	e00c      	b.n	8005728 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3330      	adds	r3, #48	; 0x30
 8005712:	3352      	adds	r3, #82	; 0x52
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fe09 	bl	800432c <ld_dword>
 800571a:	4603      	mov	r3, r0
 800571c:	4a05      	ldr	r2, [pc, #20]	; (8005734 <check_fs+0xa8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <check_fs+0x9a>
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005726:	2302      	movs	r3, #2
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	00544146 	.word	0x00544146
 8005734:	33544146 	.word	0x33544146

08005738 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b096      	sub	sp, #88	; 0x58
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ff58 	bl	8005602 <get_ldnumber>
 8005752:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	da01      	bge.n	800575e <find_volume+0x26>
 800575a:	230b      	movs	r3, #11
 800575c:	e22e      	b.n	8005bbc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800575e:	4aa8      	ldr	r2, [pc, #672]	; (8005a00 <find_volume+0x2c8>)
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005766:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <find_volume+0x3a>
 800576e:	230c      	movs	r3, #12
 8005770:	e224      	b.n	8005bbc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005776:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01a      	beq.n	80057be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fd17 	bl	80041c0 <disk_status>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10c      	bne.n	80057be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <find_volume+0x82>
 80057aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80057b6:	230a      	movs	r3, #10
 80057b8:	e200      	b.n	8005bbc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80057ba:	2300      	movs	r3, #0
 80057bc:	e1fe      	b.n	8005bbc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe fd0f 	bl	80041f4 <disk_initialize>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80057dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1e7      	b.n	8005bbc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <find_volume+0xca>
 80057f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80057fe:	230a      	movs	r3, #10
 8005800:	e1dc      	b.n	8005bbc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800580a:	f7ff ff3f 	bl	800568c <check_fs>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005818:	2b02      	cmp	r3, #2
 800581a:	d14b      	bne.n	80058b4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800581c:	2300      	movs	r3, #0
 800581e:	643b      	str	r3, [r7, #64]	; 0x40
 8005820:	e01f      	b.n	8005862 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005830:	4413      	add	r3, r2
 8005832:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	3304      	adds	r3, #4
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <find_volume+0x114>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	3308      	adds	r3, #8
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fd72 	bl	800432c <ld_dword>
 8005848:	4602      	mov	r2, r0
 800584a:	e000      	b.n	800584e <find_volume+0x116>
 800584c:	2200      	movs	r2, #0
 800584e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005856:	440b      	add	r3, r1
 8005858:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	3301      	adds	r3, #1
 8005860:	643b      	str	r3, [r7, #64]	; 0x40
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	2b03      	cmp	r3, #3
 8005866:	d9dc      	bls.n	8005822 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005868:	2300      	movs	r3, #0
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800586c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <find_volume+0x140>
 8005872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005874:	3b01      	subs	r3, #1
 8005876:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005880:	4413      	add	r3, r2
 8005882:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005886:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <find_volume+0x162>
 800588e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005892:	f7ff fefb 	bl	800568c <check_fs>
 8005896:	4603      	mov	r3, r0
 8005898:	e000      	b.n	800589c <find_volume+0x164>
 800589a:	2303      	movs	r3, #3
 800589c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80058a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d905      	bls.n	80058b4 <find_volume+0x17c>
 80058a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058aa:	3301      	adds	r3, #1
 80058ac:	643b      	str	r3, [r7, #64]	; 0x40
 80058ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d9e1      	bls.n	8005878 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80058b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d101      	bne.n	80058c0 <find_volume+0x188>
 80058bc:	2301      	movs	r3, #1
 80058be:	e17d      	b.n	8005bbc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80058c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d901      	bls.n	80058cc <find_volume+0x194>
 80058c8:	230d      	movs	r3, #13
 80058ca:	e177      	b.n	8005bbc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	3330      	adds	r3, #48	; 0x30
 80058d0:	330b      	adds	r3, #11
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fd12 	bl	80042fc <ld_word>
 80058d8:	4603      	mov	r3, r0
 80058da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058de:	d001      	beq.n	80058e4 <find_volume+0x1ac>
 80058e0:	230d      	movs	r3, #13
 80058e2:	e16b      	b.n	8005bbc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	3330      	adds	r3, #48	; 0x30
 80058e8:	3316      	adds	r3, #22
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fd06 	bl	80042fc <ld_word>
 80058f0:	4603      	mov	r3, r0
 80058f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <find_volume+0x1d0>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	3330      	adds	r3, #48	; 0x30
 80058fe:	3324      	adds	r3, #36	; 0x24
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fd13 	bl	800432c <ld_dword>
 8005906:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	789b      	ldrb	r3, [r3, #2]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d005      	beq.n	800592c <find_volume+0x1f4>
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	789b      	ldrb	r3, [r3, #2]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d001      	beq.n	800592c <find_volume+0x1f4>
 8005928:	230d      	movs	r3, #13
 800592a:	e147      	b.n	8005bbc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	789b      	ldrb	r3, [r3, #2]
 8005930:	461a      	mov	r2, r3
 8005932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b29a      	uxth	r2, r3
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	895b      	ldrh	r3, [r3, #10]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <find_volume+0x228>
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	895b      	ldrh	r3, [r3, #10]
 8005952:	461a      	mov	r2, r3
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	895b      	ldrh	r3, [r3, #10]
 8005958:	3b01      	subs	r3, #1
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <find_volume+0x22c>
 8005960:	230d      	movs	r3, #13
 8005962:	e12b      	b.n	8005bbc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	3330      	adds	r3, #48	; 0x30
 8005968:	3311      	adds	r3, #17
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fcc6 	bl	80042fc <ld_word>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	891b      	ldrh	r3, [r3, #8]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <find_volume+0x252>
 8005986:	230d      	movs	r3, #13
 8005988:	e118      	b.n	8005bbc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	3330      	adds	r3, #48	; 0x30
 800598e:	3313      	adds	r3, #19
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fcb3 	bl	80042fc <ld_word>
 8005996:	4603      	mov	r3, r0
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800599a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <find_volume+0x276>
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	3330      	adds	r3, #48	; 0x30
 80059a4:	3320      	adds	r3, #32
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fcc0 	bl	800432c <ld_dword>
 80059ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	3330      	adds	r3, #48	; 0x30
 80059b2:	330e      	adds	r3, #14
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe fca1 	bl	80042fc <ld_word>
 80059ba:	4603      	mov	r3, r0
 80059bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80059be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <find_volume+0x290>
 80059c4:	230d      	movs	r3, #13
 80059c6:	e0f9      	b.n	8005bbc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80059c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80059ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059cc:	4413      	add	r3, r2
 80059ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059d0:	8912      	ldrh	r2, [r2, #8]
 80059d2:	0912      	lsrs	r2, r2, #4
 80059d4:	b292      	uxth	r2, r2
 80059d6:	4413      	add	r3, r2
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80059da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	429a      	cmp	r2, r3
 80059e0:	d201      	bcs.n	80059e6 <find_volume+0x2ae>
 80059e2:	230d      	movs	r3, #13
 80059e4:	e0ea      	b.n	8005bbc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80059e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ee:	8952      	ldrh	r2, [r2, #10]
 80059f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d103      	bne.n	8005a04 <find_volume+0x2cc>
 80059fc:	230d      	movs	r3, #13
 80059fe:	e0dd      	b.n	8005bbc <find_volume+0x484>
 8005a00:	200001b0 	.word	0x200001b0
		fmt = FS_FAT32;
 8005a04:	2303      	movs	r3, #3
 8005a06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d802      	bhi.n	8005a1a <find_volume+0x2e2>
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d802      	bhi.n	8005a2a <find_volume+0x2f2>
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a36:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a3c:	441a      	add	r2, r3
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	441a      	add	r2, r3
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d11e      	bne.n	8005a92 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	3330      	adds	r3, #48	; 0x30
 8005a58:	332a      	adds	r3, #42	; 0x2a
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fc4e 	bl	80042fc <ld_word>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <find_volume+0x332>
 8005a66:	230d      	movs	r3, #13
 8005a68:	e0a8      	b.n	8005bbc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	891b      	ldrh	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <find_volume+0x33e>
 8005a72:	230d      	movs	r3, #13
 8005a74:	e0a2      	b.n	8005bbc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	3330      	adds	r3, #48	; 0x30
 8005a7a:	332c      	adds	r3, #44	; 0x2c
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fc55 	bl	800432c <ld_dword>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a90:	e01f      	b.n	8005ad2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	891b      	ldrh	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <find_volume+0x366>
 8005a9a:	230d      	movs	r3, #13
 8005a9c:	e08e      	b.n	8005bbc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	441a      	add	r2, r3
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005aaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d103      	bne.n	8005aba <find_volume+0x382>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	e00a      	b.n	8005ad0 <find_volume+0x398>
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	085a      	lsrs	r2, r3, #1
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005adc:	0a5b      	lsrs	r3, r3, #9
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d201      	bcs.n	8005ae6 <find_volume+0x3ae>
 8005ae2:	230d      	movs	r3, #13
 8005ae4:	e06a      	b.n	8005bbc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	611a      	str	r2, [r3, #16]
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2280      	movs	r2, #128	; 0x80
 8005afa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d149      	bne.n	8005b98 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	3330      	adds	r3, #48	; 0x30
 8005b08:	3330      	adds	r3, #48	; 0x30
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fbf6 	bl	80042fc <ld_word>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d140      	bne.n	8005b98 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	3301      	adds	r3, #1
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b1e:	f7fe fe9d 	bl	800485c <move_window>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d137      	bne.n	8005b98 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	3330      	adds	r3, #48	; 0x30
 8005b32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fbe0 	bl	80042fc <ld_word>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d127      	bne.n	8005b98 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	3330      	adds	r3, #48	; 0x30
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe fbed 	bl	800432c <ld_dword>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <find_volume+0x48c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d11e      	bne.n	8005b98 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	3330      	adds	r3, #48	; 0x30
 8005b5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fbe2 	bl	800432c <ld_dword>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <find_volume+0x490>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d113      	bne.n	8005b98 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	3330      	adds	r3, #48	; 0x30
 8005b74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fbd7 	bl	800432c <ld_dword>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	3330      	adds	r3, #48	; 0x30
 8005b88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fbcd 	bl	800432c <ld_dword>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005b9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <find_volume+0x494>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <find_volume+0x494>)
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <find_volume+0x494>)
 8005bae:	881a      	ldrh	r2, [r3, #0]
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bb6:	f7fe fde9 	bl	800478c <clear_lock>
#endif
	return FR_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3758      	adds	r7, #88	; 0x58
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	41615252 	.word	0x41615252
 8005bc8:	61417272 	.word	0x61417272
 8005bcc:	200001b4 	.word	0x200001b4

08005bd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005bda:	2309      	movs	r3, #9
 8005bdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01c      	beq.n	8005c1e <validate+0x4e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d018      	beq.n	8005c1e <validate+0x4e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d013      	beq.n	8005c1e <validate+0x4e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	889a      	ldrh	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	88db      	ldrh	r3, [r3, #6]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d10c      	bne.n	8005c1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fad8 	bl	80041c0 <disk_status>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <validate+0x4e>
			res = FR_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <validate+0x5a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	e000      	b.n	8005c2c <validate+0x5c>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	6013      	str	r3, [r2, #0]
	return res;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005c4e:	f107 0310 	add.w	r3, r7, #16
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fcd5 	bl	8005602 <get_ldnumber>
 8005c58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da01      	bge.n	8005c64 <f_mount+0x28>
 8005c60:	230b      	movs	r3, #11
 8005c62:	e02b      	b.n	8005cbc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005c64:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <f_mount+0x88>)
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005c74:	69b8      	ldr	r0, [r7, #24]
 8005c76:	f7fe fd89 	bl	800478c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	490d      	ldr	r1, [pc, #52]	; (8005cc4 <f_mount+0x88>)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <f_mount+0x66>
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d001      	beq.n	8005ca6 <f_mount+0x6a>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e00a      	b.n	8005cbc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ca6:	f107 010c 	add.w	r1, r7, #12
 8005caa:	f107 0308 	add.w	r3, r7, #8
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fd41 	bl	8005738 <find_volume>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200001b0 	.word	0x200001b0

08005cc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b098      	sub	sp, #96	; 0x60
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <f_open+0x18>
 8005cdc:	2309      	movs	r3, #9
 8005cde:	e1ad      	b.n	800603c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005ce8:	79fa      	ldrb	r2, [r7, #7]
 8005cea:	f107 0110 	add.w	r1, r7, #16
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fd20 	bl	8005738 <find_volume>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 8191 	bne.w	800602a <f_open+0x362>
		dj.obj.fs = fs;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	f107 0314 	add.w	r3, r7, #20
 8005d12:	4611      	mov	r1, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fc03 	bl	8005520 <follow_path>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d11a      	bne.n	8005d5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d2c:	b25b      	sxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da03      	bge.n	8005d3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005d32:	2306      	movs	r3, #6
 8005d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d38:	e011      	b.n	8005d5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fbd2 	bl	80044fc <chk_lock>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	f003 031c 	and.w	r3, r3, #28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d07f      	beq.n	8005e68 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d017      	beq.n	8005da0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d10e      	bne.n	8005d96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005d78:	f7fe fc1c 	bl	80045b4 <enq_lock>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d006      	beq.n	8005d90 <f_open+0xc8>
 8005d82:	f107 0314 	add.w	r3, r7, #20
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fb03 	bl	8005392 <dir_register>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e000      	b.n	8005d92 <f_open+0xca>
 8005d90:	2312      	movs	r3, #18
 8005d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	f043 0308 	orr.w	r3, r3, #8
 8005d9c:	71fb      	strb	r3, [r7, #7]
 8005d9e:	e010      	b.n	8005dc2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005da0:	7ebb      	ldrb	r3, [r7, #26]
 8005da2:	f003 0311 	and.w	r3, r3, #17
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <f_open+0xea>
					res = FR_DENIED;
 8005daa:	2307      	movs	r3, #7
 8005dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005db0:	e007      	b.n	8005dc2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <f_open+0xfa>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d168      	bne.n	8005e9c <f_open+0x1d4>
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d063      	beq.n	8005e9c <f_open+0x1d4>
				dw = GET_FATTIME();
 8005dd4:	f7fd fcb6 	bl	8003744 <get_fattime>
 8005dd8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	330e      	adds	r3, #14
 8005dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fae1 	bl	80043a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	3316      	adds	r3, #22
 8005dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe fadb 	bl	80043a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	330b      	adds	r3, #11
 8005df6:	2220      	movs	r2, #32
 8005df8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fa32 	bl	800526a <ld_clust>
 8005e06:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fa4a 	bl	80052a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	331c      	adds	r3, #28
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fac4 	bl	80043a8 <st_dword>
					fs->wflag = 1;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2201      	movs	r2, #1
 8005e24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d037      	beq.n	8005e9c <f_open+0x1d4>
						dw = fs->winsect;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005e32:	f107 0314 	add.w	r3, r7, #20
 8005e36:	2200      	movs	r2, #0
 8005e38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe ff5d 	bl	8004cfa <remove_chain>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d126      	bne.n	8005e9c <f_open+0x1d4>
							res = move_window(fs, dw);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fd02 	bl	800485c <move_window>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e62:	3a01      	subs	r2, #1
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e019      	b.n	8005e9c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d115      	bne.n	8005e9c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005e70:	7ebb      	ldrb	r3, [r7, #26]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e80:	e00c      	b.n	8005e9c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <f_open+0x1d4>
 8005e8c:	7ebb      	ldrb	r3, [r7, #26]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <f_open+0x1d4>
						res = FR_DENIED;
 8005e96:	2307      	movs	r3, #7
 8005e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d128      	bne.n	8005ef6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f107 0314 	add.w	r3, r7, #20
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fb8b 	bl	80045f8 <inc_lock>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <f_open+0x22e>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 8095 	bne.w	800602a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f04:	4611      	mov	r1, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff f9af 	bl	800526a <ld_clust>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f14:	331c      	adds	r3, #28
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fa08 	bl	800432c <ld_dword>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	88da      	ldrh	r2, [r3, #6]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	79fa      	ldrb	r2, [r7, #7]
 8005f3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3330      	adds	r3, #48	; 0x30
 8005f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f56:	2100      	movs	r1, #0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fa72 	bl	8004442 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d060      	beq.n	800602a <f_open+0x362>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05c      	beq.n	800602a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	895b      	ldrh	r3, [r3, #10]
 8005f7c:	025b      	lsls	r3, r3, #9
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f8c:	e016      	b.n	8005fbc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fd1d 	bl	80049d2 <get_fat>
 8005f98:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d802      	bhi.n	8005fa6 <f_open+0x2de>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d102      	bne.n	8005fb4 <f_open+0x2ec>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	657b      	str	r3, [r7, #84]	; 0x54
 8005fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <f_open+0x304>
 8005fc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d8e0      	bhi.n	8005f8e <f_open+0x2c6>
				}
				fp->clust = clst;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d127      	bne.n	800602a <f_open+0x362>
 8005fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d022      	beq.n	800602a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fcd3 	bl	8004994 <clust2sect>
 8005fee:	6478      	str	r0, [r7, #68]	; 0x44
 8005ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <f_open+0x336>
						res = FR_INT_ERR;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ffc:	e015      	b.n	800602a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	0a5a      	lsrs	r2, r3, #9
 8006002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006004:	441a      	add	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	7858      	ldrb	r0, [r3, #1]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	2301      	movs	r3, #1
 800601a:	f7fe f911 	bl	8004240 <disk_read>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <f_open+0x362>
 8006024:	2301      	movs	r3, #1
 8006026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800602a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <f_open+0x370>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800603c:	4618      	mov	r0, r3
 800603e:	3760      	adds	r7, #96	; 0x60
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f107 0210 	add.w	r2, r7, #16
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fdb3 	bl	8005bd0 <validate>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <f_write+0x44>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	7d5b      	ldrb	r3, [r3, #21]
 800607c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <f_write+0x4a>
 8006088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800608c:	e14b      	b.n	8006326 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	7d1b      	ldrb	r3, [r3, #20]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <f_write+0x5a>
 800609a:	2307      	movs	r3, #7
 800609c:	e143      	b.n	8006326 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	f080 812d 	bcs.w	800630a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80060b8:	e127      	b.n	800630a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 80e3 	bne.w	800628e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	8952      	ldrh	r2, [r2, #10]
 80060d2:	3a01      	subs	r2, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d143      	bne.n	8006166 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11a      	bne.n	8006128 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fe64 	bl	8004dc4 <create_chain>
 80060fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80060fe:	e013      	b.n	8006128 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	4619      	mov	r1, r3
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7fe fef0 	bl	8004ef4 <clmt_clust>
 8006114:	62b8      	str	r0, [r7, #40]	; 0x28
 8006116:	e007      	b.n	8006128 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fe fe4f 	bl	8004dc4 <create_chain>
 8006126:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80f2 	beq.w	8006314 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	2b01      	cmp	r3, #1
 8006134:	d104      	bne.n	8006140 <f_write+0xfc>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2202      	movs	r2, #2
 800613a:	755a      	strb	r2, [r3, #21]
 800613c:	2302      	movs	r3, #2
 800613e:	e0f2      	b.n	8006326 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d104      	bne.n	8006152 <f_write+0x10e>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	755a      	strb	r2, [r3, #21]
 800614e:	2301      	movs	r3, #1
 8006150:	e0e9      	b.n	8006326 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006156:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <f_write+0x122>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006164:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	7d1b      	ldrb	r3, [r3, #20]
 800616a:	b25b      	sxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	da18      	bge.n	80061a2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	7858      	ldrb	r0, [r3, #1]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	2301      	movs	r3, #1
 8006180:	f7fe f87e 	bl	8004280 <disk_write>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <f_write+0x150>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	755a      	strb	r2, [r3, #21]
 8006190:	2301      	movs	r3, #1
 8006192:	e0c8      	b.n	8006326 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	7d1b      	ldrb	r3, [r3, #20]
 8006198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f7fe fbf2 	bl	8004994 <clust2sect>
 80061b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <f_write+0x17e>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2202      	movs	r2, #2
 80061bc:	755a      	strb	r2, [r3, #21]
 80061be:	2302      	movs	r3, #2
 80061c0:	e0b1      	b.n	8006326 <f_write+0x2e2>
			sect += csect;
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4413      	add	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	0a5b      	lsrs	r3, r3, #9
 80061ce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d03c      	beq.n	8006250 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	4413      	add	r3, r2
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	8952      	ldrh	r2, [r2, #10]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d905      	bls.n	80061f0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	461a      	mov	r2, r3
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	7858      	ldrb	r0, [r3, #1]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	69f9      	ldr	r1, [r7, #28]
 80061fa:	f7fe f841 	bl	8004280 <disk_write>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <f_write+0x1ca>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	755a      	strb	r2, [r3, #21]
 800620a:	2301      	movs	r3, #1
 800620c:	e08b      	b.n	8006326 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	429a      	cmp	r2, r3
 800621a:	d915      	bls.n	8006248 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1a      	ldr	r2, [r3, #32]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	025b      	lsls	r3, r3, #9
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006234:	4619      	mov	r1, r3
 8006236:	f7fe f8e3 	bl	8004400 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	7d1b      	ldrb	r3, [r3, #20]
 800623e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006242:	b2da      	uxtb	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	025b      	lsls	r3, r3, #9
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800624e:	e03f      	b.n	80062d0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	429a      	cmp	r2, r3
 8006258:	d016      	beq.n	8006288 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006262:	429a      	cmp	r2, r3
 8006264:	d210      	bcs.n	8006288 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	7858      	ldrb	r0, [r3, #1]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006270:	2301      	movs	r3, #1
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	f7fd ffe4 	bl	8004240 <disk_read>
 8006278:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	755a      	strb	r2, [r3, #21]
 8006284:	2301      	movs	r3, #1
 8006286:	e04e      	b.n	8006326 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006296:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800629c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d901      	bls.n	80062a8 <f_write+0x264>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	4413      	add	r3, r2
 80062b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ba:	69f9      	ldr	r1, [r7, #28]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe f89f 	bl	8004400 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	7d1b      	ldrb	r3, [r3, #20]
 80062c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	4413      	add	r3, r2
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	619a      	str	r2, [r3, #24]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	bf38      	it	cc
 80062f0:	461a      	movcc	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	441a      	add	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f aed4 	bne.w	80060ba <f_write+0x76>
 8006312:	e000      	b.n	8006316 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006314:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	7d1b      	ldrb	r3, [r3, #20]
 800631a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3730      	adds	r7, #48	; 0x30
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f107 0208 	add.w	r2, r7, #8
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fc46 	bl	8005bd0 <validate>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d168      	bne.n	8006420 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7d1b      	ldrb	r3, [r3, #20]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	d062      	beq.n	8006420 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	7d1b      	ldrb	r3, [r3, #20]
 800635e:	b25b      	sxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	da15      	bge.n	8006390 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	7858      	ldrb	r0, [r3, #1]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1a      	ldr	r2, [r3, #32]
 8006372:	2301      	movs	r3, #1
 8006374:	f7fd ff84 	bl	8004280 <disk_write>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <f_sync+0x54>
 800637e:	2301      	movs	r3, #1
 8006380:	e04f      	b.n	8006422 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7d1b      	ldrb	r3, [r3, #20]
 8006386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638a:	b2da      	uxtb	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006390:	f7fd f9d8 	bl	8003744 <get_fattime>
 8006394:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fe fa5c 	bl	800485c <move_window>
 80063a4:	4603      	mov	r3, r0
 80063a6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d138      	bne.n	8006420 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	330b      	adds	r3, #11
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	330b      	adds	r3, #11
 80063be:	f042 0220 	orr.w	r2, r2, #32
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	461a      	mov	r2, r3
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	f7fe ff69 	bl	80052a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f103 021c 	add.w	r2, r3, #28
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7fd ffe0 	bl	80043a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3316      	adds	r3, #22
 80063ec:	6939      	ldr	r1, [r7, #16]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fd ffda 	bl	80043a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3312      	adds	r3, #18
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd ffb9 	bl	8004372 <st_word>
					fs->wflag = 1;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2201      	movs	r2, #1
 8006404:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fa55 	bl	80048b8 <sync_fs>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7d1b      	ldrb	r3, [r3, #20]
 8006416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641a:	b2da      	uxtb	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006420:	7dfb      	ldrb	r3, [r7, #23]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff ff7b 	bl	800632e <f_sync>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d118      	bne.n	8006474 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f107 0208 	add.w	r2, r7, #8
 8006448:	4611      	mov	r1, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fbc0 	bl	8005bd0 <validate>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10c      	bne.n	8006474 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe f958 	bl	8004714 <dec_lock>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006496:	4b1f      	ldr	r3, [pc, #124]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 8006498:	7a5b      	ldrb	r3, [r3, #9]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d131      	bne.n	8006504 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80064a0:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064a2:	7a5b      	ldrb	r3, [r3, #9]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064aa:	2100      	movs	r1, #0
 80064ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80064ae:	4b19      	ldr	r3, [pc, #100]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064b0:	7a5b      	ldrb	r3, [r3, #9]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	4a17      	ldr	r2, [pc, #92]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80064be:	4b15      	ldr	r3, [pc, #84]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064c0:	7a5b      	ldrb	r3, [r3, #9]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064c8:	4413      	add	r3, r2
 80064ca:	79fa      	ldrb	r2, [r7, #7]
 80064cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064d0:	7a5b      	ldrb	r3, [r3, #9]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	b2d1      	uxtb	r1, r2
 80064d8:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <FATFS_LinkDriverEx+0x94>)
 80064da:	7251      	strb	r1, [r2, #9]
 80064dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	3330      	adds	r3, #48	; 0x30
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3301      	adds	r3, #1
 80064ec:	223a      	movs	r2, #58	; 0x3a
 80064ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3302      	adds	r3, #2
 80064f4:	222f      	movs	r2, #47	; 0x2f
 80064f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	3303      	adds	r3, #3
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200001d8 	.word	0x200001d8

08006518 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006522:	2200      	movs	r2, #0
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ffaa 	bl	8006480 <FATFS_LinkDriverEx>
 800652c:	4603      	mov	r3, r0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	; (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000024 	.word	0x20000024

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4d0d      	ldr	r5, [pc, #52]	; (800657c <__libc_init_array+0x38>)
 8006548:	4c0d      	ldr	r4, [pc, #52]	; (8006580 <__libc_init_array+0x3c>)
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	2600      	movs	r6, #0
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	4d0b      	ldr	r5, [pc, #44]	; (8006584 <__libc_init_array+0x40>)
 8006556:	4c0c      	ldr	r4, [pc, #48]	; (8006588 <__libc_init_array+0x44>)
 8006558:	f000 fc88 	bl	8006e6c <_init>
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	2600      	movs	r6, #0
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	f855 3b04 	ldr.w	r3, [r5], #4
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	f855 3b04 	ldr.w	r3, [r5], #4
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	08007224 	.word	0x08007224
 8006580:	08007224 	.word	0x08007224
 8006584:	08007224 	.word	0x08007224
 8006588:	08007228 	.word	0x08007228

0800658c <memset>:
 800658c:	4402      	add	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <siprintf>:
 800659c:	b40e      	push	{r1, r2, r3}
 800659e:	b500      	push	{lr}
 80065a0:	b09c      	sub	sp, #112	; 0x70
 80065a2:	ab1d      	add	r3, sp, #116	; 0x74
 80065a4:	9002      	str	r0, [sp, #8]
 80065a6:	9006      	str	r0, [sp, #24]
 80065a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065ac:	4809      	ldr	r0, [pc, #36]	; (80065d4 <siprintf+0x38>)
 80065ae:	9107      	str	r1, [sp, #28]
 80065b0:	9104      	str	r1, [sp, #16]
 80065b2:	4909      	ldr	r1, [pc, #36]	; (80065d8 <siprintf+0x3c>)
 80065b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b8:	9105      	str	r1, [sp, #20]
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	a902      	add	r1, sp, #8
 80065c0:	f000 f8a2 	bl	8006708 <_svfiprintf_r>
 80065c4:	9b02      	ldr	r3, [sp, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	b01c      	add	sp, #112	; 0x70
 80065cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d0:	b003      	add	sp, #12
 80065d2:	4770      	bx	lr
 80065d4:	20000024 	.word	0x20000024
 80065d8:	ffff0208 	.word	0xffff0208

080065dc <_vsniprintf_r>:
 80065dc:	b530      	push	{r4, r5, lr}
 80065de:	1e14      	subs	r4, r2, #0
 80065e0:	4605      	mov	r5, r0
 80065e2:	b09b      	sub	sp, #108	; 0x6c
 80065e4:	4618      	mov	r0, r3
 80065e6:	da05      	bge.n	80065f4 <_vsniprintf_r+0x18>
 80065e8:	238b      	movs	r3, #139	; 0x8b
 80065ea:	602b      	str	r3, [r5, #0]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	b01b      	add	sp, #108	; 0x6c
 80065f2:	bd30      	pop	{r4, r5, pc}
 80065f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80065f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80065fc:	bf14      	ite	ne
 80065fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006602:	4623      	moveq	r3, r4
 8006604:	9302      	str	r3, [sp, #8]
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800660c:	9100      	str	r1, [sp, #0]
 800660e:	9104      	str	r1, [sp, #16]
 8006610:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006614:	4602      	mov	r2, r0
 8006616:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006618:	4669      	mov	r1, sp
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f874 	bl	8006708 <_svfiprintf_r>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	bfbc      	itt	lt
 8006624:	238b      	movlt	r3, #139	; 0x8b
 8006626:	602b      	strlt	r3, [r5, #0]
 8006628:	2c00      	cmp	r4, #0
 800662a:	d0e1      	beq.n	80065f0 <_vsniprintf_r+0x14>
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e7dd      	b.n	80065f0 <_vsniprintf_r+0x14>

08006634 <vsniprintf>:
 8006634:	b507      	push	{r0, r1, r2, lr}
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	460a      	mov	r2, r1
 800663c:	4601      	mov	r1, r0
 800663e:	4803      	ldr	r0, [pc, #12]	; (800664c <vsniprintf+0x18>)
 8006640:	6800      	ldr	r0, [r0, #0]
 8006642:	f7ff ffcb 	bl	80065dc <_vsniprintf_r>
 8006646:	b003      	add	sp, #12
 8006648:	f85d fb04 	ldr.w	pc, [sp], #4
 800664c:	20000024 	.word	0x20000024

08006650 <__ssputs_r>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	688e      	ldr	r6, [r1, #8]
 8006656:	429e      	cmp	r6, r3
 8006658:	4682      	mov	sl, r0
 800665a:	460c      	mov	r4, r1
 800665c:	4690      	mov	r8, r2
 800665e:	461f      	mov	r7, r3
 8006660:	d838      	bhi.n	80066d4 <__ssputs_r+0x84>
 8006662:	898a      	ldrh	r2, [r1, #12]
 8006664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006668:	d032      	beq.n	80066d0 <__ssputs_r+0x80>
 800666a:	6825      	ldr	r5, [r4, #0]
 800666c:	6909      	ldr	r1, [r1, #16]
 800666e:	eba5 0901 	sub.w	r9, r5, r1
 8006672:	6965      	ldr	r5, [r4, #20]
 8006674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800667c:	3301      	adds	r3, #1
 800667e:	444b      	add	r3, r9
 8006680:	106d      	asrs	r5, r5, #1
 8006682:	429d      	cmp	r5, r3
 8006684:	bf38      	it	cc
 8006686:	461d      	movcc	r5, r3
 8006688:	0553      	lsls	r3, r2, #21
 800668a:	d531      	bpl.n	80066f0 <__ssputs_r+0xa0>
 800668c:	4629      	mov	r1, r5
 800668e:	f000 fb47 	bl	8006d20 <_malloc_r>
 8006692:	4606      	mov	r6, r0
 8006694:	b950      	cbnz	r0, 80066ac <__ssputs_r+0x5c>
 8006696:	230c      	movs	r3, #12
 8006698:	f8ca 3000 	str.w	r3, [sl]
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ac:	6921      	ldr	r1, [r4, #16]
 80066ae:	464a      	mov	r2, r9
 80066b0:	f000 fabe 	bl	8006c30 <memcpy>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	6126      	str	r6, [r4, #16]
 80066c2:	6165      	str	r5, [r4, #20]
 80066c4:	444e      	add	r6, r9
 80066c6:	eba5 0509 	sub.w	r5, r5, r9
 80066ca:	6026      	str	r6, [r4, #0]
 80066cc:	60a5      	str	r5, [r4, #8]
 80066ce:	463e      	mov	r6, r7
 80066d0:	42be      	cmp	r6, r7
 80066d2:	d900      	bls.n	80066d6 <__ssputs_r+0x86>
 80066d4:	463e      	mov	r6, r7
 80066d6:	4632      	mov	r2, r6
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	4641      	mov	r1, r8
 80066dc:	f000 fab6 	bl	8006c4c <memmove>
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	1b9b      	subs	r3, r3, r6
 80066e6:	4432      	add	r2, r6
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	6022      	str	r2, [r4, #0]
 80066ec:	2000      	movs	r0, #0
 80066ee:	e7db      	b.n	80066a8 <__ssputs_r+0x58>
 80066f0:	462a      	mov	r2, r5
 80066f2:	f000 fb6f 	bl	8006dd4 <_realloc_r>
 80066f6:	4606      	mov	r6, r0
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1e1      	bne.n	80066c0 <__ssputs_r+0x70>
 80066fc:	6921      	ldr	r1, [r4, #16]
 80066fe:	4650      	mov	r0, sl
 8006700:	f000 fabe 	bl	8006c80 <_free_r>
 8006704:	e7c7      	b.n	8006696 <__ssputs_r+0x46>
	...

08006708 <_svfiprintf_r>:
 8006708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	4698      	mov	r8, r3
 800670e:	898b      	ldrh	r3, [r1, #12]
 8006710:	061b      	lsls	r3, r3, #24
 8006712:	b09d      	sub	sp, #116	; 0x74
 8006714:	4607      	mov	r7, r0
 8006716:	460d      	mov	r5, r1
 8006718:	4614      	mov	r4, r2
 800671a:	d50e      	bpl.n	800673a <_svfiprintf_r+0x32>
 800671c:	690b      	ldr	r3, [r1, #16]
 800671e:	b963      	cbnz	r3, 800673a <_svfiprintf_r+0x32>
 8006720:	2140      	movs	r1, #64	; 0x40
 8006722:	f000 fafd 	bl	8006d20 <_malloc_r>
 8006726:	6028      	str	r0, [r5, #0]
 8006728:	6128      	str	r0, [r5, #16]
 800672a:	b920      	cbnz	r0, 8006736 <_svfiprintf_r+0x2e>
 800672c:	230c      	movs	r3, #12
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	e0d1      	b.n	80068da <_svfiprintf_r+0x1d2>
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	616b      	str	r3, [r5, #20]
 800673a:	2300      	movs	r3, #0
 800673c:	9309      	str	r3, [sp, #36]	; 0x24
 800673e:	2320      	movs	r3, #32
 8006740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006744:	f8cd 800c 	str.w	r8, [sp, #12]
 8006748:	2330      	movs	r3, #48	; 0x30
 800674a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068f4 <_svfiprintf_r+0x1ec>
 800674e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006752:	f04f 0901 	mov.w	r9, #1
 8006756:	4623      	mov	r3, r4
 8006758:	469a      	mov	sl, r3
 800675a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800675e:	b10a      	cbz	r2, 8006764 <_svfiprintf_r+0x5c>
 8006760:	2a25      	cmp	r2, #37	; 0x25
 8006762:	d1f9      	bne.n	8006758 <_svfiprintf_r+0x50>
 8006764:	ebba 0b04 	subs.w	fp, sl, r4
 8006768:	d00b      	beq.n	8006782 <_svfiprintf_r+0x7a>
 800676a:	465b      	mov	r3, fp
 800676c:	4622      	mov	r2, r4
 800676e:	4629      	mov	r1, r5
 8006770:	4638      	mov	r0, r7
 8006772:	f7ff ff6d 	bl	8006650 <__ssputs_r>
 8006776:	3001      	adds	r0, #1
 8006778:	f000 80aa 	beq.w	80068d0 <_svfiprintf_r+0x1c8>
 800677c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800677e:	445a      	add	r2, fp
 8006780:	9209      	str	r2, [sp, #36]	; 0x24
 8006782:	f89a 3000 	ldrb.w	r3, [sl]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80a2 	beq.w	80068d0 <_svfiprintf_r+0x1c8>
 800678c:	2300      	movs	r3, #0
 800678e:	f04f 32ff 	mov.w	r2, #4294967295
 8006792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006796:	f10a 0a01 	add.w	sl, sl, #1
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a2:	931a      	str	r3, [sp, #104]	; 0x68
 80067a4:	4654      	mov	r4, sl
 80067a6:	2205      	movs	r2, #5
 80067a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ac:	4851      	ldr	r0, [pc, #324]	; (80068f4 <_svfiprintf_r+0x1ec>)
 80067ae:	f7f9 fd17 	bl	80001e0 <memchr>
 80067b2:	9a04      	ldr	r2, [sp, #16]
 80067b4:	b9d8      	cbnz	r0, 80067ee <_svfiprintf_r+0xe6>
 80067b6:	06d0      	lsls	r0, r2, #27
 80067b8:	bf44      	itt	mi
 80067ba:	2320      	movmi	r3, #32
 80067bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c0:	0711      	lsls	r1, r2, #28
 80067c2:	bf44      	itt	mi
 80067c4:	232b      	movmi	r3, #43	; 0x2b
 80067c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ca:	f89a 3000 	ldrb.w	r3, [sl]
 80067ce:	2b2a      	cmp	r3, #42	; 0x2a
 80067d0:	d015      	beq.n	80067fe <_svfiprintf_r+0xf6>
 80067d2:	9a07      	ldr	r2, [sp, #28]
 80067d4:	4654      	mov	r4, sl
 80067d6:	2000      	movs	r0, #0
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	4621      	mov	r1, r4
 80067de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e2:	3b30      	subs	r3, #48	; 0x30
 80067e4:	2b09      	cmp	r3, #9
 80067e6:	d94e      	bls.n	8006886 <_svfiprintf_r+0x17e>
 80067e8:	b1b0      	cbz	r0, 8006818 <_svfiprintf_r+0x110>
 80067ea:	9207      	str	r2, [sp, #28]
 80067ec:	e014      	b.n	8006818 <_svfiprintf_r+0x110>
 80067ee:	eba0 0308 	sub.w	r3, r0, r8
 80067f2:	fa09 f303 	lsl.w	r3, r9, r3
 80067f6:	4313      	orrs	r3, r2
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	46a2      	mov	sl, r4
 80067fc:	e7d2      	b.n	80067a4 <_svfiprintf_r+0x9c>
 80067fe:	9b03      	ldr	r3, [sp, #12]
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	9103      	str	r1, [sp, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	bfbb      	ittet	lt
 800680a:	425b      	neglt	r3, r3
 800680c:	f042 0202 	orrlt.w	r2, r2, #2
 8006810:	9307      	strge	r3, [sp, #28]
 8006812:	9307      	strlt	r3, [sp, #28]
 8006814:	bfb8      	it	lt
 8006816:	9204      	strlt	r2, [sp, #16]
 8006818:	7823      	ldrb	r3, [r4, #0]
 800681a:	2b2e      	cmp	r3, #46	; 0x2e
 800681c:	d10c      	bne.n	8006838 <_svfiprintf_r+0x130>
 800681e:	7863      	ldrb	r3, [r4, #1]
 8006820:	2b2a      	cmp	r3, #42	; 0x2a
 8006822:	d135      	bne.n	8006890 <_svfiprintf_r+0x188>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	9203      	str	r2, [sp, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfb8      	it	lt
 8006830:	f04f 33ff 	movlt.w	r3, #4294967295
 8006834:	3402      	adds	r4, #2
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006904 <_svfiprintf_r+0x1fc>
 800683c:	7821      	ldrb	r1, [r4, #0]
 800683e:	2203      	movs	r2, #3
 8006840:	4650      	mov	r0, sl
 8006842:	f7f9 fccd 	bl	80001e0 <memchr>
 8006846:	b140      	cbz	r0, 800685a <_svfiprintf_r+0x152>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	eba0 000a 	sub.w	r0, r0, sl
 800684e:	fa03 f000 	lsl.w	r0, r3, r0
 8006852:	9b04      	ldr	r3, [sp, #16]
 8006854:	4303      	orrs	r3, r0
 8006856:	3401      	adds	r4, #1
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685e:	4826      	ldr	r0, [pc, #152]	; (80068f8 <_svfiprintf_r+0x1f0>)
 8006860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006864:	2206      	movs	r2, #6
 8006866:	f7f9 fcbb 	bl	80001e0 <memchr>
 800686a:	2800      	cmp	r0, #0
 800686c:	d038      	beq.n	80068e0 <_svfiprintf_r+0x1d8>
 800686e:	4b23      	ldr	r3, [pc, #140]	; (80068fc <_svfiprintf_r+0x1f4>)
 8006870:	bb1b      	cbnz	r3, 80068ba <_svfiprintf_r+0x1b2>
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	3307      	adds	r3, #7
 8006876:	f023 0307 	bic.w	r3, r3, #7
 800687a:	3308      	adds	r3, #8
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006880:	4433      	add	r3, r6
 8006882:	9309      	str	r3, [sp, #36]	; 0x24
 8006884:	e767      	b.n	8006756 <_svfiprintf_r+0x4e>
 8006886:	fb0c 3202 	mla	r2, ip, r2, r3
 800688a:	460c      	mov	r4, r1
 800688c:	2001      	movs	r0, #1
 800688e:	e7a5      	b.n	80067dc <_svfiprintf_r+0xd4>
 8006890:	2300      	movs	r3, #0
 8006892:	3401      	adds	r4, #1
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 0c0a 	mov.w	ip, #10
 800689c:	4620      	mov	r0, r4
 800689e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a2:	3a30      	subs	r2, #48	; 0x30
 80068a4:	2a09      	cmp	r2, #9
 80068a6:	d903      	bls.n	80068b0 <_svfiprintf_r+0x1a8>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0c5      	beq.n	8006838 <_svfiprintf_r+0x130>
 80068ac:	9105      	str	r1, [sp, #20]
 80068ae:	e7c3      	b.n	8006838 <_svfiprintf_r+0x130>
 80068b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80068b4:	4604      	mov	r4, r0
 80068b6:	2301      	movs	r3, #1
 80068b8:	e7f0      	b.n	800689c <_svfiprintf_r+0x194>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <_svfiprintf_r+0x1f8>)
 80068c2:	a904      	add	r1, sp, #16
 80068c4:	4638      	mov	r0, r7
 80068c6:	f3af 8000 	nop.w
 80068ca:	1c42      	adds	r2, r0, #1
 80068cc:	4606      	mov	r6, r0
 80068ce:	d1d6      	bne.n	800687e <_svfiprintf_r+0x176>
 80068d0:	89ab      	ldrh	r3, [r5, #12]
 80068d2:	065b      	lsls	r3, r3, #25
 80068d4:	f53f af2c 	bmi.w	8006730 <_svfiprintf_r+0x28>
 80068d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068da:	b01d      	add	sp, #116	; 0x74
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	ab03      	add	r3, sp, #12
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	462a      	mov	r2, r5
 80068e6:	4b06      	ldr	r3, [pc, #24]	; (8006900 <_svfiprintf_r+0x1f8>)
 80068e8:	a904      	add	r1, sp, #16
 80068ea:	4638      	mov	r0, r7
 80068ec:	f000 f87a 	bl	80069e4 <_printf_i>
 80068f0:	e7eb      	b.n	80068ca <_svfiprintf_r+0x1c2>
 80068f2:	bf00      	nop
 80068f4:	080071e8 	.word	0x080071e8
 80068f8:	080071f2 	.word	0x080071f2
 80068fc:	00000000 	.word	0x00000000
 8006900:	08006651 	.word	0x08006651
 8006904:	080071ee 	.word	0x080071ee

08006908 <_printf_common>:
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	4616      	mov	r6, r2
 800690e:	4699      	mov	r9, r3
 8006910:	688a      	ldr	r2, [r1, #8]
 8006912:	690b      	ldr	r3, [r1, #16]
 8006914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006918:	4293      	cmp	r3, r2
 800691a:	bfb8      	it	lt
 800691c:	4613      	movlt	r3, r2
 800691e:	6033      	str	r3, [r6, #0]
 8006920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006924:	4607      	mov	r7, r0
 8006926:	460c      	mov	r4, r1
 8006928:	b10a      	cbz	r2, 800692e <_printf_common+0x26>
 800692a:	3301      	adds	r3, #1
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	0699      	lsls	r1, r3, #26
 8006932:	bf42      	ittt	mi
 8006934:	6833      	ldrmi	r3, [r6, #0]
 8006936:	3302      	addmi	r3, #2
 8006938:	6033      	strmi	r3, [r6, #0]
 800693a:	6825      	ldr	r5, [r4, #0]
 800693c:	f015 0506 	ands.w	r5, r5, #6
 8006940:	d106      	bne.n	8006950 <_printf_common+0x48>
 8006942:	f104 0a19 	add.w	sl, r4, #25
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	6832      	ldr	r2, [r6, #0]
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	42ab      	cmp	r3, r5
 800694e:	dc26      	bgt.n	800699e <_printf_common+0x96>
 8006950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006954:	1e13      	subs	r3, r2, #0
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	bf18      	it	ne
 800695a:	2301      	movne	r3, #1
 800695c:	0692      	lsls	r2, r2, #26
 800695e:	d42b      	bmi.n	80069b8 <_printf_common+0xb0>
 8006960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006964:	4649      	mov	r1, r9
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	3001      	adds	r0, #1
 800696c:	d01e      	beq.n	80069ac <_printf_common+0xa4>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	68e5      	ldr	r5, [r4, #12]
 8006972:	6832      	ldr	r2, [r6, #0]
 8006974:	f003 0306 	and.w	r3, r3, #6
 8006978:	2b04      	cmp	r3, #4
 800697a:	bf08      	it	eq
 800697c:	1aad      	subeq	r5, r5, r2
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	bf0c      	ite	eq
 8006984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006988:	2500      	movne	r5, #0
 800698a:	4293      	cmp	r3, r2
 800698c:	bfc4      	itt	gt
 800698e:	1a9b      	subgt	r3, r3, r2
 8006990:	18ed      	addgt	r5, r5, r3
 8006992:	2600      	movs	r6, #0
 8006994:	341a      	adds	r4, #26
 8006996:	42b5      	cmp	r5, r6
 8006998:	d11a      	bne.n	80069d0 <_printf_common+0xc8>
 800699a:	2000      	movs	r0, #0
 800699c:	e008      	b.n	80069b0 <_printf_common+0xa8>
 800699e:	2301      	movs	r3, #1
 80069a0:	4652      	mov	r2, sl
 80069a2:	4649      	mov	r1, r9
 80069a4:	4638      	mov	r0, r7
 80069a6:	47c0      	blx	r8
 80069a8:	3001      	adds	r0, #1
 80069aa:	d103      	bne.n	80069b4 <_printf_common+0xac>
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	3501      	adds	r5, #1
 80069b6:	e7c6      	b.n	8006946 <_printf_common+0x3e>
 80069b8:	18e1      	adds	r1, r4, r3
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	2030      	movs	r0, #48	; 0x30
 80069be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069c2:	4422      	add	r2, r4
 80069c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069cc:	3302      	adds	r3, #2
 80069ce:	e7c7      	b.n	8006960 <_printf_common+0x58>
 80069d0:	2301      	movs	r3, #1
 80069d2:	4622      	mov	r2, r4
 80069d4:	4649      	mov	r1, r9
 80069d6:	4638      	mov	r0, r7
 80069d8:	47c0      	blx	r8
 80069da:	3001      	adds	r0, #1
 80069dc:	d0e6      	beq.n	80069ac <_printf_common+0xa4>
 80069de:	3601      	adds	r6, #1
 80069e0:	e7d9      	b.n	8006996 <_printf_common+0x8e>
	...

080069e4 <_printf_i>:
 80069e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	460c      	mov	r4, r1
 80069ea:	4691      	mov	r9, r2
 80069ec:	7e27      	ldrb	r7, [r4, #24]
 80069ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069f0:	2f78      	cmp	r7, #120	; 0x78
 80069f2:	4680      	mov	r8, r0
 80069f4:	469a      	mov	sl, r3
 80069f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069fa:	d807      	bhi.n	8006a0c <_printf_i+0x28>
 80069fc:	2f62      	cmp	r7, #98	; 0x62
 80069fe:	d80a      	bhi.n	8006a16 <_printf_i+0x32>
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	f000 80d8 	beq.w	8006bb6 <_printf_i+0x1d2>
 8006a06:	2f58      	cmp	r7, #88	; 0x58
 8006a08:	f000 80a3 	beq.w	8006b52 <_printf_i+0x16e>
 8006a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a14:	e03a      	b.n	8006a8c <_printf_i+0xa8>
 8006a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a1a:	2b15      	cmp	r3, #21
 8006a1c:	d8f6      	bhi.n	8006a0c <_printf_i+0x28>
 8006a1e:	a001      	add	r0, pc, #4	; (adr r0, 8006a24 <_printf_i+0x40>)
 8006a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a24:	08006a7d 	.word	0x08006a7d
 8006a28:	08006a91 	.word	0x08006a91
 8006a2c:	08006a0d 	.word	0x08006a0d
 8006a30:	08006a0d 	.word	0x08006a0d
 8006a34:	08006a0d 	.word	0x08006a0d
 8006a38:	08006a0d 	.word	0x08006a0d
 8006a3c:	08006a91 	.word	0x08006a91
 8006a40:	08006a0d 	.word	0x08006a0d
 8006a44:	08006a0d 	.word	0x08006a0d
 8006a48:	08006a0d 	.word	0x08006a0d
 8006a4c:	08006a0d 	.word	0x08006a0d
 8006a50:	08006b9d 	.word	0x08006b9d
 8006a54:	08006ac1 	.word	0x08006ac1
 8006a58:	08006b7f 	.word	0x08006b7f
 8006a5c:	08006a0d 	.word	0x08006a0d
 8006a60:	08006a0d 	.word	0x08006a0d
 8006a64:	08006bbf 	.word	0x08006bbf
 8006a68:	08006a0d 	.word	0x08006a0d
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006a0d 	.word	0x08006a0d
 8006a74:	08006a0d 	.word	0x08006a0d
 8006a78:	08006b87 	.word	0x08006b87
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	600a      	str	r2, [r1, #0]
 8006a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0a3      	b.n	8006bd8 <_printf_i+0x1f4>
 8006a90:	6825      	ldr	r5, [r4, #0]
 8006a92:	6808      	ldr	r0, [r1, #0]
 8006a94:	062e      	lsls	r6, r5, #24
 8006a96:	f100 0304 	add.w	r3, r0, #4
 8006a9a:	d50a      	bpl.n	8006ab2 <_printf_i+0xce>
 8006a9c:	6805      	ldr	r5, [r0, #0]
 8006a9e:	600b      	str	r3, [r1, #0]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	da03      	bge.n	8006aac <_printf_i+0xc8>
 8006aa4:	232d      	movs	r3, #45	; 0x2d
 8006aa6:	426d      	negs	r5, r5
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aac:	485e      	ldr	r0, [pc, #376]	; (8006c28 <_printf_i+0x244>)
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e019      	b.n	8006ae6 <_printf_i+0x102>
 8006ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ab6:	6805      	ldr	r5, [r0, #0]
 8006ab8:	600b      	str	r3, [r1, #0]
 8006aba:	bf18      	it	ne
 8006abc:	b22d      	sxthne	r5, r5
 8006abe:	e7ef      	b.n	8006aa0 <_printf_i+0xbc>
 8006ac0:	680b      	ldr	r3, [r1, #0]
 8006ac2:	6825      	ldr	r5, [r4, #0]
 8006ac4:	1d18      	adds	r0, r3, #4
 8006ac6:	6008      	str	r0, [r1, #0]
 8006ac8:	0628      	lsls	r0, r5, #24
 8006aca:	d501      	bpl.n	8006ad0 <_printf_i+0xec>
 8006acc:	681d      	ldr	r5, [r3, #0]
 8006ace:	e002      	b.n	8006ad6 <_printf_i+0xf2>
 8006ad0:	0669      	lsls	r1, r5, #25
 8006ad2:	d5fb      	bpl.n	8006acc <_printf_i+0xe8>
 8006ad4:	881d      	ldrh	r5, [r3, #0]
 8006ad6:	4854      	ldr	r0, [pc, #336]	; (8006c28 <_printf_i+0x244>)
 8006ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8006ada:	bf0c      	ite	eq
 8006adc:	2308      	moveq	r3, #8
 8006ade:	230a      	movne	r3, #10
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ae6:	6866      	ldr	r6, [r4, #4]
 8006ae8:	60a6      	str	r6, [r4, #8]
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	bfa2      	ittt	ge
 8006aee:	6821      	ldrge	r1, [r4, #0]
 8006af0:	f021 0104 	bicge.w	r1, r1, #4
 8006af4:	6021      	strge	r1, [r4, #0]
 8006af6:	b90d      	cbnz	r5, 8006afc <_printf_i+0x118>
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	d04d      	beq.n	8006b98 <_printf_i+0x1b4>
 8006afc:	4616      	mov	r6, r2
 8006afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b02:	fb03 5711 	mls	r7, r3, r1, r5
 8006b06:	5dc7      	ldrb	r7, [r0, r7]
 8006b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b0c:	462f      	mov	r7, r5
 8006b0e:	42bb      	cmp	r3, r7
 8006b10:	460d      	mov	r5, r1
 8006b12:	d9f4      	bls.n	8006afe <_printf_i+0x11a>
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d10b      	bne.n	8006b30 <_printf_i+0x14c>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	07df      	lsls	r7, r3, #31
 8006b1c:	d508      	bpl.n	8006b30 <_printf_i+0x14c>
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	6861      	ldr	r1, [r4, #4]
 8006b22:	4299      	cmp	r1, r3
 8006b24:	bfde      	ittt	le
 8006b26:	2330      	movle	r3, #48	; 0x30
 8006b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b30:	1b92      	subs	r2, r2, r6
 8006b32:	6122      	str	r2, [r4, #16]
 8006b34:	f8cd a000 	str.w	sl, [sp]
 8006b38:	464b      	mov	r3, r9
 8006b3a:	aa03      	add	r2, sp, #12
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4640      	mov	r0, r8
 8006b40:	f7ff fee2 	bl	8006908 <_printf_common>
 8006b44:	3001      	adds	r0, #1
 8006b46:	d14c      	bne.n	8006be2 <_printf_i+0x1fe>
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	b004      	add	sp, #16
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	4835      	ldr	r0, [pc, #212]	; (8006c28 <_printf_i+0x244>)
 8006b54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	680e      	ldr	r6, [r1, #0]
 8006b5c:	061f      	lsls	r7, r3, #24
 8006b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b62:	600e      	str	r6, [r1, #0]
 8006b64:	d514      	bpl.n	8006b90 <_printf_i+0x1ac>
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	bf44      	itt	mi
 8006b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b6e:	6023      	strmi	r3, [r4, #0]
 8006b70:	b91d      	cbnz	r5, 8006b7a <_printf_i+0x196>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	f023 0320 	bic.w	r3, r3, #32
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	e7b0      	b.n	8006ae0 <_printf_i+0xfc>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f043 0320 	orr.w	r3, r3, #32
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	2378      	movs	r3, #120	; 0x78
 8006b88:	4828      	ldr	r0, [pc, #160]	; (8006c2c <_printf_i+0x248>)
 8006b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b8e:	e7e3      	b.n	8006b58 <_printf_i+0x174>
 8006b90:	065e      	lsls	r6, r3, #25
 8006b92:	bf48      	it	mi
 8006b94:	b2ad      	uxthmi	r5, r5
 8006b96:	e7e6      	b.n	8006b66 <_printf_i+0x182>
 8006b98:	4616      	mov	r6, r2
 8006b9a:	e7bb      	b.n	8006b14 <_printf_i+0x130>
 8006b9c:	680b      	ldr	r3, [r1, #0]
 8006b9e:	6826      	ldr	r6, [r4, #0]
 8006ba0:	6960      	ldr	r0, [r4, #20]
 8006ba2:	1d1d      	adds	r5, r3, #4
 8006ba4:	600d      	str	r5, [r1, #0]
 8006ba6:	0635      	lsls	r5, r6, #24
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	d501      	bpl.n	8006bb0 <_printf_i+0x1cc>
 8006bac:	6018      	str	r0, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <_printf_i+0x1d2>
 8006bb0:	0671      	lsls	r1, r6, #25
 8006bb2:	d5fb      	bpl.n	8006bac <_printf_i+0x1c8>
 8006bb4:	8018      	strh	r0, [r3, #0]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	4616      	mov	r6, r2
 8006bbc:	e7ba      	b.n	8006b34 <_printf_i+0x150>
 8006bbe:	680b      	ldr	r3, [r1, #0]
 8006bc0:	1d1a      	adds	r2, r3, #4
 8006bc2:	600a      	str	r2, [r1, #0]
 8006bc4:	681e      	ldr	r6, [r3, #0]
 8006bc6:	6862      	ldr	r2, [r4, #4]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7f9 fb08 	bl	80001e0 <memchr>
 8006bd0:	b108      	cbz	r0, 8006bd6 <_printf_i+0x1f2>
 8006bd2:	1b80      	subs	r0, r0, r6
 8006bd4:	6060      	str	r0, [r4, #4]
 8006bd6:	6863      	ldr	r3, [r4, #4]
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be0:	e7a8      	b.n	8006b34 <_printf_i+0x150>
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	4632      	mov	r2, r6
 8006be6:	4649      	mov	r1, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	47d0      	blx	sl
 8006bec:	3001      	adds	r0, #1
 8006bee:	d0ab      	beq.n	8006b48 <_printf_i+0x164>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	079b      	lsls	r3, r3, #30
 8006bf4:	d413      	bmi.n	8006c1e <_printf_i+0x23a>
 8006bf6:	68e0      	ldr	r0, [r4, #12]
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	4298      	cmp	r0, r3
 8006bfc:	bfb8      	it	lt
 8006bfe:	4618      	movlt	r0, r3
 8006c00:	e7a4      	b.n	8006b4c <_printf_i+0x168>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4632      	mov	r2, r6
 8006c06:	4649      	mov	r1, r9
 8006c08:	4640      	mov	r0, r8
 8006c0a:	47d0      	blx	sl
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d09b      	beq.n	8006b48 <_printf_i+0x164>
 8006c10:	3501      	adds	r5, #1
 8006c12:	68e3      	ldr	r3, [r4, #12]
 8006c14:	9903      	ldr	r1, [sp, #12]
 8006c16:	1a5b      	subs	r3, r3, r1
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	dcf2      	bgt.n	8006c02 <_printf_i+0x21e>
 8006c1c:	e7eb      	b.n	8006bf6 <_printf_i+0x212>
 8006c1e:	2500      	movs	r5, #0
 8006c20:	f104 0619 	add.w	r6, r4, #25
 8006c24:	e7f5      	b.n	8006c12 <_printf_i+0x22e>
 8006c26:	bf00      	nop
 8006c28:	080071f9 	.word	0x080071f9
 8006c2c:	0800720a 	.word	0x0800720a

08006c30 <memcpy>:
 8006c30:	440a      	add	r2, r1
 8006c32:	4291      	cmp	r1, r2
 8006c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c38:	d100      	bne.n	8006c3c <memcpy+0xc>
 8006c3a:	4770      	bx	lr
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c46:	4291      	cmp	r1, r2
 8006c48:	d1f9      	bne.n	8006c3e <memcpy+0xe>
 8006c4a:	bd10      	pop	{r4, pc}

08006c4c <memmove>:
 8006c4c:	4288      	cmp	r0, r1
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	eb01 0402 	add.w	r4, r1, r2
 8006c54:	d902      	bls.n	8006c5c <memmove+0x10>
 8006c56:	4284      	cmp	r4, r0
 8006c58:	4623      	mov	r3, r4
 8006c5a:	d807      	bhi.n	8006c6c <memmove+0x20>
 8006c5c:	1e43      	subs	r3, r0, #1
 8006c5e:	42a1      	cmp	r1, r4
 8006c60:	d008      	beq.n	8006c74 <memmove+0x28>
 8006c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c6a:	e7f8      	b.n	8006c5e <memmove+0x12>
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4601      	mov	r1, r0
 8006c70:	428a      	cmp	r2, r1
 8006c72:	d100      	bne.n	8006c76 <memmove+0x2a>
 8006c74:	bd10      	pop	{r4, pc}
 8006c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c7e:	e7f7      	b.n	8006c70 <memmove+0x24>

08006c80 <_free_r>:
 8006c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d048      	beq.n	8006d18 <_free_r+0x98>
 8006c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c92:	bfb8      	it	lt
 8006c94:	18e4      	addlt	r4, r4, r3
 8006c96:	f000 f8d3 	bl	8006e40 <__malloc_lock>
 8006c9a:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <_free_r+0x9c>)
 8006c9c:	9801      	ldr	r0, [sp, #4]
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	b933      	cbnz	r3, 8006cb2 <_free_r+0x32>
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6014      	str	r4, [r2, #0]
 8006ca8:	b003      	add	sp, #12
 8006caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cae:	f000 b8cd 	b.w	8006e4c <__malloc_unlock>
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	d90b      	bls.n	8006cce <_free_r+0x4e>
 8006cb6:	6821      	ldr	r1, [r4, #0]
 8006cb8:	1862      	adds	r2, r4, r1
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bf04      	itt	eq
 8006cbe:	681a      	ldreq	r2, [r3, #0]
 8006cc0:	685b      	ldreq	r3, [r3, #4]
 8006cc2:	6063      	str	r3, [r4, #4]
 8006cc4:	bf04      	itt	eq
 8006cc6:	1852      	addeq	r2, r2, r1
 8006cc8:	6022      	streq	r2, [r4, #0]
 8006cca:	602c      	str	r4, [r5, #0]
 8006ccc:	e7ec      	b.n	8006ca8 <_free_r+0x28>
 8006cce:	461a      	mov	r2, r3
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b10b      	cbz	r3, 8006cd8 <_free_r+0x58>
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d9fa      	bls.n	8006cce <_free_r+0x4e>
 8006cd8:	6811      	ldr	r1, [r2, #0]
 8006cda:	1855      	adds	r5, r2, r1
 8006cdc:	42a5      	cmp	r5, r4
 8006cde:	d10b      	bne.n	8006cf8 <_free_r+0x78>
 8006ce0:	6824      	ldr	r4, [r4, #0]
 8006ce2:	4421      	add	r1, r4
 8006ce4:	1854      	adds	r4, r2, r1
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	6011      	str	r1, [r2, #0]
 8006cea:	d1dd      	bne.n	8006ca8 <_free_r+0x28>
 8006cec:	681c      	ldr	r4, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	6053      	str	r3, [r2, #4]
 8006cf2:	4421      	add	r1, r4
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	e7d7      	b.n	8006ca8 <_free_r+0x28>
 8006cf8:	d902      	bls.n	8006d00 <_free_r+0x80>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	6003      	str	r3, [r0, #0]
 8006cfe:	e7d3      	b.n	8006ca8 <_free_r+0x28>
 8006d00:	6825      	ldr	r5, [r4, #0]
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf04      	itt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	bf04      	itt	eq
 8006d10:	1949      	addeq	r1, r1, r5
 8006d12:	6021      	streq	r1, [r4, #0]
 8006d14:	6054      	str	r4, [r2, #4]
 8006d16:	e7c7      	b.n	8006ca8 <_free_r+0x28>
 8006d18:	b003      	add	sp, #12
 8006d1a:	bd30      	pop	{r4, r5, pc}
 8006d1c:	200001e4 	.word	0x200001e4

08006d20 <_malloc_r>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	1ccd      	adds	r5, r1, #3
 8006d24:	f025 0503 	bic.w	r5, r5, #3
 8006d28:	3508      	adds	r5, #8
 8006d2a:	2d0c      	cmp	r5, #12
 8006d2c:	bf38      	it	cc
 8006d2e:	250c      	movcc	r5, #12
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	db01      	blt.n	8006d3a <_malloc_r+0x1a>
 8006d36:	42a9      	cmp	r1, r5
 8006d38:	d903      	bls.n	8006d42 <_malloc_r+0x22>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	2000      	movs	r0, #0
 8006d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d42:	f000 f87d 	bl	8006e40 <__malloc_lock>
 8006d46:	4921      	ldr	r1, [pc, #132]	; (8006dcc <_malloc_r+0xac>)
 8006d48:	680a      	ldr	r2, [r1, #0]
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	b99c      	cbnz	r4, 8006d76 <_malloc_r+0x56>
 8006d4e:	4f20      	ldr	r7, [pc, #128]	; (8006dd0 <_malloc_r+0xb0>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	b923      	cbnz	r3, 8006d5e <_malloc_r+0x3e>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4630      	mov	r0, r6
 8006d58:	f000 f862 	bl	8006e20 <_sbrk_r>
 8006d5c:	6038      	str	r0, [r7, #0]
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f85d 	bl	8006e20 <_sbrk_r>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	d123      	bne.n	8006db2 <_malloc_r+0x92>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f86c 	bl	8006e4c <__malloc_unlock>
 8006d74:	e7e3      	b.n	8006d3e <_malloc_r+0x1e>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	1b5b      	subs	r3, r3, r5
 8006d7a:	d417      	bmi.n	8006dac <_malloc_r+0x8c>
 8006d7c:	2b0b      	cmp	r3, #11
 8006d7e:	d903      	bls.n	8006d88 <_malloc_r+0x68>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	441c      	add	r4, r3
 8006d84:	6025      	str	r5, [r4, #0]
 8006d86:	e004      	b.n	8006d92 <_malloc_r+0x72>
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	42a2      	cmp	r2, r4
 8006d8c:	bf0c      	ite	eq
 8006d8e:	600b      	streq	r3, [r1, #0]
 8006d90:	6053      	strne	r3, [r2, #4]
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f85a 	bl	8006e4c <__malloc_unlock>
 8006d98:	f104 000b 	add.w	r0, r4, #11
 8006d9c:	1d23      	adds	r3, r4, #4
 8006d9e:	f020 0007 	bic.w	r0, r0, #7
 8006da2:	1ac2      	subs	r2, r0, r3
 8006da4:	d0cc      	beq.n	8006d40 <_malloc_r+0x20>
 8006da6:	1a1b      	subs	r3, r3, r0
 8006da8:	50a3      	str	r3, [r4, r2]
 8006daa:	e7c9      	b.n	8006d40 <_malloc_r+0x20>
 8006dac:	4622      	mov	r2, r4
 8006dae:	6864      	ldr	r4, [r4, #4]
 8006db0:	e7cc      	b.n	8006d4c <_malloc_r+0x2c>
 8006db2:	1cc4      	adds	r4, r0, #3
 8006db4:	f024 0403 	bic.w	r4, r4, #3
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d0e3      	beq.n	8006d84 <_malloc_r+0x64>
 8006dbc:	1a21      	subs	r1, r4, r0
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f000 f82e 	bl	8006e20 <_sbrk_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d1dd      	bne.n	8006d84 <_malloc_r+0x64>
 8006dc8:	e7cf      	b.n	8006d6a <_malloc_r+0x4a>
 8006dca:	bf00      	nop
 8006dcc:	200001e4 	.word	0x200001e4
 8006dd0:	200001e8 	.word	0x200001e8

08006dd4 <_realloc_r>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	4614      	mov	r4, r2
 8006dda:	460e      	mov	r6, r1
 8006ddc:	b921      	cbnz	r1, 8006de8 <_realloc_r+0x14>
 8006dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006de2:	4611      	mov	r1, r2
 8006de4:	f7ff bf9c 	b.w	8006d20 <_malloc_r>
 8006de8:	b922      	cbnz	r2, 8006df4 <_realloc_r+0x20>
 8006dea:	f7ff ff49 	bl	8006c80 <_free_r>
 8006dee:	4625      	mov	r5, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df4:	f000 f830 	bl	8006e58 <_malloc_usable_size_r>
 8006df8:	42a0      	cmp	r0, r4
 8006dfa:	d20f      	bcs.n	8006e1c <_realloc_r+0x48>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff ff8e 	bl	8006d20 <_malloc_r>
 8006e04:	4605      	mov	r5, r0
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d0f2      	beq.n	8006df0 <_realloc_r+0x1c>
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	f7ff ff0f 	bl	8006c30 <memcpy>
 8006e12:	4631      	mov	r1, r6
 8006e14:	4638      	mov	r0, r7
 8006e16:	f7ff ff33 	bl	8006c80 <_free_r>
 8006e1a:	e7e9      	b.n	8006df0 <_realloc_r+0x1c>
 8006e1c:	4635      	mov	r5, r6
 8006e1e:	e7e7      	b.n	8006df0 <_realloc_r+0x1c>

08006e20 <_sbrk_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_sbrk_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7fa f8d8 	bl	8000fe0 <_sbrk>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_sbrk_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_sbrk_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20000774 	.word	0x20000774

08006e40 <__malloc_lock>:
 8006e40:	4801      	ldr	r0, [pc, #4]	; (8006e48 <__malloc_lock+0x8>)
 8006e42:	f000 b811 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006e46:	bf00      	nop
 8006e48:	2000077c 	.word	0x2000077c

08006e4c <__malloc_unlock>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	; (8006e54 <__malloc_unlock+0x8>)
 8006e4e:	f000 b80c 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006e52:	bf00      	nop
 8006e54:	2000077c 	.word	0x2000077c

08006e58 <_malloc_usable_size_r>:
 8006e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5c:	1f18      	subs	r0, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfbc      	itt	lt
 8006e62:	580b      	ldrlt	r3, [r1, r0]
 8006e64:	18c0      	addlt	r0, r0, r3
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_acquire_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <__retarget_lock_release_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <_init>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr

08006e78 <_fini>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr
