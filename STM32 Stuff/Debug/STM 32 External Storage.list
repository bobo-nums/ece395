
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004698  08004698  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080046a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000006e8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000770  20000770  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012cc3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002962  00000000  00000000  00032d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  000356e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af0  00000000  00000000  000362d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000483c  00000000  00000000  00036dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001026c  00000000  00000000  0003b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb811  00000000  00000000  0004b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00117081  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003380  00000000  00000000  001170d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004614 	.word	0x08004614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004614 	.word	0x08004614

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000578:	b40f      	push	{r0, r1, r2, r3}
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <myprintf+0x44>)
 8000590:	f003 fc24 	bl	8003ddc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <myprintf+0x44>)
 8000596:	f7ff fe1b 	bl	80001d0 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <myprintf+0x44>)
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <myprintf+0x48>)
 80005aa:	f002 fb4c 	bl	8002c46 <HAL_UART_Transmit>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005b8:	b004      	add	sp, #16
 80005ba:	4770      	bx	lr
 80005bc:	200000a4 	.word	0x200000a4
 80005c0:	2000029c 	.word	0x2000029c

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fc39 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f82d 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f981 	bl	80008d8 <MX_GPIO_Init>
  MX_FATFS_Init();
 80005d6:	f002 fdff 	bl	80031d8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f953 	bl	8000884 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005de:	f000 f91b 	bl	8000818 <MX_SPI3_Init>
  MX_SPI2_Init();
 80005e2:	f000 f8e3 	bl	80007ac <MX_SPI2_Init>
  MX_RTC_Init();
 80005e6:	f000 f881 	bl	80006ec <MX_RTC_Init>
  //  bytesWrote = SD_write("write.csv", FA_READ | FA_WRITE | FA_OPEN_APPEND, newbuf, btw);
  //  myprintf("Wrote %i bytes to 'write.csv'!\r\n", bytesWrote);

  //  SD_unmount();

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x0000){
 80005ea:	2101      	movs	r1, #1
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0x60>)
 80005ee:	f001 ffcf 	bl	8002590 <HAL_RTCEx_BKUPRead>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <main+0x3a>
	  rtc_set_time(&hrtc);
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0x60>)
 80005fa:	f000 fa02 	bl	8000a02 <rtc_set_time>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    RTC_TimeTypeDef mytime;
    RTC_DateTypeDef mydate;
	rtc_get_time(&hrtc, &mydate, &mytime);
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <main+0x60>)
 8000606:	f000 fa33 	bl	8000a70 <rtc_get_time>
    myprintf("time: %02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 800060a:	793b      	ldrb	r3, [r7, #4]
 800060c:	4619      	mov	r1, r3
 800060e:	797b      	ldrb	r3, [r7, #5]
 8000610:	461a      	mov	r2, r3
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x64>)
 8000616:	f7ff ffaf 	bl	8000578 <myprintf>
	HAL_Delay(1000);
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f000 fc81 	bl	8000f24 <HAL_Delay>
  {
 8000622:	e7ec      	b.n	80005fe <main+0x3a>
 8000624:	20000270 	.word	0x20000270
 8000628:	0800462c 	.word	0x0800462c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fb9a 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemClock_Config+0xb8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemClock_Config+0xbc>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemClock_Config+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000688:	230a      	movs	r3, #10
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 feff 	bl	80014a4 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ac:	f000 f9a4 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f962 	bl	8001994 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d6:	f000 f98f 	bl	80009f8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000706:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <MX_RTC_Init+0xbc>)
 8000708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_RTC_Init+0xb8>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000712:	227f      	movs	r2, #127	; 0x7f
 8000714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_RTC_Init+0xb8>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_RTC_Init+0xb8>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000730:	f001 fbe2 	bl	8001ef8 <HAL_RTC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f95d 	bl	80009f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800073e:	2300      	movs	r3, #0
 8000740:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000742:	2300      	movs	r3, #0
 8000744:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000746:	2300      	movs	r3, #0
 8000748:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_RTC_Init+0xb8>)
 800075a:	f001 fc5e 	bl	800201a <HAL_RTC_SetTime>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f948 	bl	80009f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000768:	2301      	movs	r3, #1
 800076a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800076c:	2301      	movs	r3, #1
 800076e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000770:	2301      	movs	r3, #1
 8000772:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000774:	2300      	movs	r3, #0
 8000776:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000780:	f001 fd66 	bl	8002250 <HAL_RTC_SetDate>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800078a:	f000 f935 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register 
 800078e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000792:	2101      	movs	r1, #1
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_RTC_Init+0xb8>)
 8000796:	f001 fee1 	bl	800255c <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000270 	.word	0x20000270
 80007a8:	40002800 	.word	0x40002800

080007ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_SPI2_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_SPI2_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI2_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI2_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI2_Init+0x64>)
 80007e0:	2238      	movs	r2, #56	; 0x38
 80007e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI2_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI2_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SPI2_Init+0x64>)
 80007fe:	f001 fedf 	bl	80025c0 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f8f6 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200001c0 	.word	0x200001c0
 8000814:	40003800 	.word	0x40003800

08000818 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI3_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI3_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI3_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI3_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI3_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI3_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI3_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI3_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI3_Init+0x64>)
 800084c:	2238      	movs	r2, #56	; 0x38
 800084e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI3_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI3_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI3_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI3_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI3_Init+0x64>)
 800086a:	f001 fea9 	bl	80025c0 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f8c0 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000218 	.word	0x20000218
 8000880:	40003c00 	.word	0x40003c00

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART2_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000890:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008bc:	f002 f976 	bl	8002bac <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f897 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000029c 	.word	0x2000029c
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <MX_GPIO_Init+0x114>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a3d      	ldr	r2, [pc, #244]	; (80009ec <MX_GPIO_Init+0x114>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <MX_GPIO_Init+0x114>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <MX_GPIO_Init+0x114>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a36      	ldr	r2, [pc, #216]	; (80009ec <MX_GPIO_Init+0x114>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <MX_GPIO_Init+0x114>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_GPIO_Init+0x114>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <MX_GPIO_Init+0x114>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_GPIO_Init+0x114>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_GPIO_Init+0x114>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a28      	ldr	r2, [pc, #160]	; (80009ec <MX_GPIO_Init+0x114>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_GPIO_Init+0x114>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0x114>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_GPIO_Init+0x114>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_GPIO_Init+0x114>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	481b      	ldr	r0, [pc, #108]	; (80009f0 <MX_GPIO_Init+0x118>)
 8000982:	f000 fd75 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2102      	movs	r1, #2
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x11c>)
 800098c:	f000 fd70 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000990:	2308      	movs	r3, #8
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <MX_GPIO_Init+0x11c>)
 80009a4:	f000 fbc8 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_CS_Pin */
  GPIO_InitStruct.Pin = INA_CS_Pin;
 80009a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INA_CS_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x118>)
 80009c2:	f000 fbb9 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_GPIO_Init+0x11c>)
 80009de:	f000 fbab 	bl	8001138 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40021000 	.word	0x40021000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>

08000a02 <rtc_set_time>:
 *      Author: bobox
 */

#include "rtc.h"

void rtc_set_time(RTC_HandleTypeDef *hrtc) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b088      	sub	sp, #32
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    sTime.Hours = 0x00;    // set hours
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0x00;  // set minutes
 8000a0e:	2300      	movs	r3, #0
 8000a10:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0x00;  // set seconds
 8000a12:	2300      	movs	r3, #0
 8000a14:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f001 faf7 	bl	800201a <HAL_RTC_SetTime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <rtc_set_time+0x34>
        Error_Handler();
 8000a32:	f7ff ffe1 	bl	80009f8 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;  // day
 8000a36:	2301      	movs	r3, #1
 8000a38:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;     // month
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	727b      	strb	r3, [r7, #9]
    sDate.Date = 0x00;                   // date
 8000a3e:	2300      	movs	r3, #0
 8000a40:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 0x00;                   // year
 8000a42:	2300      	movs	r3, #0
 8000a44:	72fb      	strb	r3, [r7, #11]
    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f001 fbfe 	bl	8002250 <HAL_RTC_SetDate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <rtc_set_time+0x5c>
        Error_Handler();
 8000a5a:	f7ff ffcd 	bl	80009f8 <Error_Handler>
    }
    HAL_RTCEx_BKUPWrite(hrtc, RTC_BKP_DR1, 0x0000);  // backup register
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2101      	movs	r1, #1
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f001 fd7a 	bl	800255c <HAL_RTCEx_BKUPWrite>
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <rtc_get_time>:

void rtc_get_time(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *date, RTC_TimeTypeDef *time) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
    /* Get the RTC current Time */
    HAL_RTC_GetTime(hrtc, time, RTC_FORMAT_BIN);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f001 fb87 	bl	8002194 <HAL_RTC_GetTime>
    /* Get the RTC current Date */
    HAL_RTC_GetDate(hrtc, date, RTC_FORMAT_BIN);   
 8000a86:	2200      	movs	r2, #0
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f001 fc87 	bl	800239e <HAL_RTC_GetDate>
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <HAL_RTC_MspInit+0x4c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d111      	bne.n	8000b2c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f90c 	bl	8001d34 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b22:	f7ff ff69 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_RTC_MspInit+0x50>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40002800 	.word	0x40002800
 8000b38:	42470e3c 	.word	0x42470e3c

08000b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <HAL_SPI_MspInit+0x128>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d14b      	bne.n	8000bf6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a40      	ldr	r2, [pc, #256]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4827      	ldr	r0, [pc, #156]	; (8000c6c <HAL_SPI_MspInit+0x130>)
 8000bce:	f000 fab3 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4820      	ldr	r0, [pc, #128]	; (8000c70 <HAL_SPI_MspInit+0x134>)
 8000bf0:	f000 faa2 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf4:	e031      	b.n	8000c5a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_SPI_MspInit+0x138>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d12c      	bne.n	8000c5a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_SPI_MspInit+0x12c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_SPI_MspInit+0x130>)
 8000c56:	f000 fa6f 	bl	8001138 <HAL_GPIO_Init>
}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40003800 	.word	0x40003800
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40003c00 	.word	0x40003c00

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cee:	f000 fa23 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8c6 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f002 ffc8 	bl	8003d20 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20020000 	.word	0x20020000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200001a4 	.word	0x200001a4
 8000dc4:	20000770 	.word	0x20000770

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e08:	4c0b      	ldr	r4, [pc, #44]	; (8000e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e16:	f7ff ffd7 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 ff87 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fbd1 	bl	80005c4 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e30:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 8000e34:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e38:	20000770 	.word	0x20000770

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f931 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe10 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f93b 	bl	800111e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f911 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	200002ec 	.word	0x200002ec

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200002ec 	.word	0x200002ec

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff47 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff5c 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb0 	bl	800108c <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e16b      	b.n	800142c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 815a 	bne.w	8001426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b4 	beq.w	8001426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <HAL_GPIO_Init+0x310>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x314>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x318>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x31c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x320>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x324>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x328>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x20a>
 800133e:	2307      	movs	r3, #7
 8001340:	e00e      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001342:	2308      	movs	r3, #8
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001346:	2306      	movs	r3, #6
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x310>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_GPIO_Init+0x334>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_GPIO_Init+0x334>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_GPIO_Init+0x334>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_GPIO_Init+0x334>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae90 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e264      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c2:	4ba3      	ldr	r3, [pc, #652]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d00c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4ba0      	ldr	r3, [pc, #640]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d112      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b9d      	ldr	r3, [pc, #628]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b99      	ldr	r3, [pc, #612]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e23f      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b91      	ldr	r3, [pc, #580]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a90      	ldr	r2, [pc, #576]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a8a      	ldr	r2, [pc, #552]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a87      	ldr	r2, [pc, #540]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b84      	ldr	r3, [pc, #528]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a83      	ldr	r2, [pc, #524]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b81      	ldr	r3, [pc, #516]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a80      	ldr	r2, [pc, #512]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fcd6 	bl	8000f0c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fcd2 	bl	8000f0c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e204      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcc2 	bl	8000f0c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcbe 	bl	8000f0c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1f0      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	4b6c      	ldr	r3, [pc, #432]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d063      	beq.n	8001682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b62      	ldr	r3, [pc, #392]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d11c      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e1c4      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b56      	ldr	r3, [pc, #344]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4952      	ldr	r1, [pc, #328]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	e03a      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <HAL_RCC_OscConfig+0x2b0>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fc77 	bl	8000f0c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fc73 	bl	8000f0c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1a5      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b46      	ldr	r3, [pc, #280]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4940      	ldr	r1, [pc, #256]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_OscConfig+0x2b0>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc56 	bl	8000f0c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fc52 	bl	8000f0c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e184      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d030      	beq.n	80016f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_RCC_OscConfig+0x2b4>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fc36 	bl	8000f0c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fc32 	bl	8000f0c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e164      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
 80016c2:	e015      	b.n	80016f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_OscConfig+0x2b4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fc1f 	bl	8000f0c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fc1b 	bl	8000f0c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e14d      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a0 	beq.w	800183e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x2b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d121      	bne.n	800177e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x2b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_RCC_OscConfig+0x2b8>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbe1 	bl	8000f0c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e011      	b.n	8001772 <HAL_RCC_OscConfig+0x2ce>
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	42470000 	.word	0x42470000
 8001758:	42470e80 	.word	0x42470e80
 800175c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001760:	f7ff fbd4 	bl	8000f0c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e106      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b85      	ldr	r3, [pc, #532]	; (8001988 <HAL_RCC_OscConfig+0x4e4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x2f0>
 8001786:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a80      	ldr	r2, [pc, #512]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	e01c      	b.n	80017ce <HAL_RCC_OscConfig+0x32a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x312>
 800179c:	4b7b      	ldr	r3, [pc, #492]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
 80017a8:	4b78      	ldr	r3, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a77      	ldr	r2, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0x32a>
 80017b6:	4b75      	ldr	r3, [pc, #468]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a74      	ldr	r2, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	4b72      	ldr	r3, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	4a71      	ldr	r2, [pc, #452]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d015      	beq.n	8001802 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb99 	bl	8000f0c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb95 	bl	8000f0c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0c5      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4b65      	ldr	r3, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ee      	beq.n	80017de <HAL_RCC_OscConfig+0x33a>
 8001800:	e014      	b.n	800182c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fb83 	bl	8000f0c <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff fb7f 	bl	8000f0c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0af      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 809b 	beq.w	800197e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d05c      	beq.n	800190e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d141      	bne.n	80018e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x4ec>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fb53 	bl	8000f0c <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fb4f 	bl	8000f0c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e081      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	019b      	lsls	r3, r3, #6
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_RCC_OscConfig+0x4ec>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb28 	bl	8000f0c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fb24 	bl	8000f0c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e056      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x41c>
 80018de:	e04e      	b.n	800197e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x4ec>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fb11 	bl	8000f0c <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff fb0d 	bl	8000f0c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e03f      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x44a>
 800190c:	e037      	b.n	800197e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e032      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_RCC_OscConfig+0x4e8>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d028      	beq.n	800197a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d121      	bne.n	800197a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d11a      	bne.n	800197a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001950:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001952:	4293      	cmp	r3, r2
 8001954:	d111      	bne.n	800197a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	3b01      	subs	r3, #1
 8001964:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d107      	bne.n	800197a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40007000 	.word	0x40007000
 800198c:	40023800 	.word	0x40023800
 8001990:	42470060 	.word	0x42470060

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0cc      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d90c      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d044      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e067      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff fa42 	bl	8000f0c <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff fa3e 	bl	8000f0c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d20c      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f821 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f9a2 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08004644 	.word	0x08004644
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b66:	2100      	movs	r1, #0
 8001b68:	6079      	str	r1, [r7, #4]
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	60f9      	str	r1, [r7, #12]
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b72:	2100      	movs	r1, #0
 8001b74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b76:	4952      	ldr	r1, [pc, #328]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b78:	6889      	ldr	r1, [r1, #8]
 8001b7a:	f001 010c 	and.w	r1, r1, #12
 8001b7e:	2908      	cmp	r1, #8
 8001b80:	d00d      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3e>
 8001b82:	2908      	cmp	r1, #8
 8001b84:	f200 8094 	bhi.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x150>
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x32>
 8001b8c:	2904      	cmp	r1, #4
 8001b8e:	d003      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x38>
 8001b90:	e08e      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b94:	60bb      	str	r3, [r7, #8]
       break;
 8001b96:	e08e      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b9a:	60bb      	str	r3, [r7, #8]
      break;
 8001b9c:	e08b      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9e:	4948      	ldr	r1, [pc, #288]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba0:	6849      	ldr	r1, [r1, #4]
 8001ba2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ba6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba8:	4945      	ldr	r1, [pc, #276]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001baa:	6849      	ldr	r1, [r1, #4]
 8001bac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d024      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb4:	4942      	ldr	r1, [pc, #264]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bb6:	6849      	ldr	r1, [r1, #4]
 8001bb8:	0989      	lsrs	r1, r1, #6
 8001bba:	4608      	mov	r0, r1
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001bc4:	f04f 0500 	mov.w	r5, #0
 8001bc8:	ea00 0204 	and.w	r2, r0, r4
 8001bcc:	ea01 0305 	and.w	r3, r1, r5
 8001bd0:	493d      	ldr	r1, [pc, #244]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bd2:	fb01 f003 	mul.w	r0, r1, r3
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	fb01 f102 	mul.w	r1, r1, r2
 8001bdc:	1844      	adds	r4, r0, r1
 8001bde:	493a      	ldr	r1, [pc, #232]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001be0:	fba2 0101 	umull	r0, r1, r2, r1
 8001be4:	1863      	adds	r3, r4, r1
 8001be6:	4619      	mov	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	f7fe fb46 	bl	8000280 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e04a      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	461a      	mov	r2, r3
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	ea02 0400 	and.w	r4, r2, r0
 8001c16:	ea03 0501 	and.w	r5, r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	014b      	lsls	r3, r1, #5
 8001c28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c2c:	0142      	lsls	r2, r0, #5
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	1b00      	subs	r0, r0, r4
 8001c34:	eb61 0105 	sbc.w	r1, r1, r5
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	018b      	lsls	r3, r1, #6
 8001c42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c46:	0182      	lsls	r2, r0, #6
 8001c48:	1a12      	subs	r2, r2, r0
 8001c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	00d9      	lsls	r1, r3, #3
 8001c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c5c:	00d0      	lsls	r0, r2, #3
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	1912      	adds	r2, r2, r4
 8001c64:	eb45 0303 	adc.w	r3, r5, r3
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0299      	lsls	r1, r3, #10
 8001c72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c76:	0290      	lsls	r0, r2, #10
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f7fe fafa 	bl	8000280 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	60bb      	str	r3, [r7, #8]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001cb2:	60bb      	str	r3, [r7, #8]
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	017d7840 	.word	0x017d7840

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08004654 	.word	0x08004654

08001d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d10:	f7ff ffdc 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0b5b      	lsrs	r3, r3, #13
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08004654 	.word	0x08004654

08001d34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d035      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d5c:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d62:	f7ff f8d3 	bl	8000f0c <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d6a:	f7ff f8cf 	bl	8000f0c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0b0      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d7c:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	019a      	lsls	r2, r3, #6
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	071b      	lsls	r3, r3, #28
 8001d94:	4955      	ldr	r1, [pc, #340]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d9c:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001da2:	f7ff f8b3 	bl	8000f0c <HAL_GetTick>
 8001da6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001daa:	f7ff f8af 	bl	8000f0c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e090      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8083 	beq.w	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a43      	ldr	r2, [pc, #268]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfe:	f7ff f885 	bl	8000f0c <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff f881 	bl	8000f0c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e062      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02f      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d028      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e58:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d114      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f84f 	bl	8000f0c <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff f84b 	bl	8000f0c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e02a      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ea0:	d10d      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb6:	490d      	ldr	r1, [pc, #52]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
 8001ebc:	e005      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ec4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ec8:	6093      	str	r3, [r2, #8]
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed6:	4905      	ldr	r1, [pc, #20]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	42470068 	.word	0x42470068
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42470e40 	.word	0x42470e40

08001ef8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e083      	b.n	8002012 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7f5b      	ldrb	r3, [r3, #29]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fde4 	bl	8000ae8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	22ca      	movs	r2, #202	; 0xca
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2253      	movs	r2, #83	; 0x53
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 faa8 	bl	800248c <RTC_EnterInitMode>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	22ff      	movs	r2, #255	; 0xff
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e05e      	b.n	8002012 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f66:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	041a      	lsls	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa3a 	bl	800243c <HAL_RTC_WaitForSynchro>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e018      	b.n	8002012 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	22ff      	movs	r2, #255	; 0xff
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002010:	2300      	movs	r3, #0
  }
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800201a:	b590      	push	{r4, r7, lr}
 800201c:	b087      	sub	sp, #28
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	7f1b      	ldrb	r3, [r3, #28]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_RTC_SetTime+0x1c>
 8002032:	2302      	movs	r3, #2
 8002034:	e0aa      	b.n	800218c <HAL_RTC_SetTime+0x172>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2202      	movs	r2, #2
 8002040:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d126      	bne.n	8002096 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2200      	movs	r2, #0
 800205a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fa3f 	bl	80024e4 <RTC_ByteToBcd2>
 8002066:	4603      	mov	r3, r0
 8002068:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	785b      	ldrb	r3, [r3, #1]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fa38 	bl	80024e4 <RTC_ByteToBcd2>
 8002074:	4603      	mov	r3, r0
 8002076:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002078:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	789b      	ldrb	r3, [r3, #2]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fa30 	bl	80024e4 <RTC_ByteToBcd2>
 8002084:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002086:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e018      	b.n	80020c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020b6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80020bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	22ca      	movs	r2, #202	; 0xca
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2253      	movs	r2, #83	; 0x53
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f9d7 	bl	800248c <RTC_EnterInitMode>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	22ff      	movs	r2, #255	; 0xff
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2204      	movs	r2, #4
 80020f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e047      	b.n	800218c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002106:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800210a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002142:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d111      	bne.n	8002176 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f972 	bl	800243c <HAL_RTC_WaitForSynchro>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2204      	movs	r2, #4
 800216a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00a      	b.n	800218c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800218a:	2300      	movs	r3, #0
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}

08002194 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80021c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d11a      	bne.n	8002246 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f983 	bl	8002520 <RTC_Bcd2ToByte>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f97a 	bl	8002520 <RTC_Bcd2ToByte>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	789b      	ldrb	r3, [r3, #2]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f971 	bl	8002520 <RTC_Bcd2ToByte>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	7f1b      	ldrb	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_RTC_SetDate+0x1c>
 8002268:	2302      	movs	r3, #2
 800226a:	e094      	b.n	8002396 <HAL_RTC_SetDate+0x146>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2202      	movs	r2, #2
 8002276:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <HAL_RTC_SetDate+0x4c>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	b2db      	uxtb	r3, r3
 8002294:	330a      	adds	r3, #10
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11c      	bne.n	80022dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	78db      	ldrb	r3, [r3, #3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f91c 	bl	80024e4 <RTC_ByteToBcd2>
 80022ac:	4603      	mov	r3, r0
 80022ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f915 	bl	80024e4 <RTC_ByteToBcd2>
 80022ba:	4603      	mov	r3, r0
 80022bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80022be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	789b      	ldrb	r3, [r3, #2]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f90d 	bl	80024e4 <RTC_ByteToBcd2>
 80022ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80022cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00e      	b.n	80022fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	78db      	ldrb	r3, [r3, #3]
 80022e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80022ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	22ca      	movs	r2, #202	; 0xca
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2253      	movs	r2, #83	; 0x53
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f8be 	bl	800248c <RTC_EnterInitMode>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2204      	movs	r2, #4
 8002322:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e033      	b.n	8002396 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002338:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800233c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800234c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f86d 	bl	800243c <HAL_RTC_WaitForSynchro>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2204      	movs	r2, #4
 8002374:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e00a      	b.n	8002396 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}

0800239e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	0b5b      	lsrs	r3, r3, #13
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11a      	bne.n	8002432 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	78db      	ldrb	r3, [r3, #3]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f88d 	bl	8002520 <RTC_Bcd2ToByte>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f884 	bl	8002520 <RTC_Bcd2ToByte>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	789b      	ldrb	r3, [r3, #2]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f87b 	bl	8002520 <RTC_Bcd2ToByte>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002456:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002458:	f7fe fd58 	bl	8000f0c <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800245e:	e009      	b.n	8002474 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002460:	f7fe fd54 	bl	8000f0c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246e:	d901      	bls.n	8002474 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e007      	b.n	8002484 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ee      	beq.n	8002460 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d119      	bne.n	80024da <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295
 80024ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fd2c 	bl	8000f0c <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80024b6:	e009      	b.n	80024cc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024b8:	f7fe fd28 	bl	8000f0c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c6:	d901      	bls.n	80024cc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e007      	b.n	80024dc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80024f2:	e005      	b.n	8002500 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	3b0a      	subs	r3, #10
 80024fe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b09      	cmp	r3, #9
 8002504:	d8f6      	bhi.n	80024f4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	b2da      	uxtb	r2, r3
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4313      	orrs	r3, r2
 8002512:	b2db      	uxtb	r3, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4413      	add	r3, r2
 800254e:	b2db      	uxtb	r3, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3350      	adds	r3, #80	; 0x50
 8002572:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3350      	adds	r3, #80	; 0x50
 80025a4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07b      	b.n	80026ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e2:	d009      	beq.n	80025f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
 80025ea:	e005      	b.n	80025f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fa92 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	ea42 0103 	orr.w	r1, r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0104 	and.w	r1, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f003 0210 	and.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b08c      	sub	sp, #48	; 0x30
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026e0:	2301      	movs	r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x26>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e18a      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x33c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002700:	f7fe fc04 	bl	8000f0c <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800270c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800271a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800271e:	2b01      	cmp	r3, #1
 8002720:	d00f      	beq.n	8002742 <HAL_SPI_TransmitReceive+0x70>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002728:	d107      	bne.n	800273a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_SPI_TransmitReceive+0x68>
 8002732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002736:	2b04      	cmp	r3, #4
 8002738:	d003      	beq.n	8002742 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002740:	e15b      	b.n	80029fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x82>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x82>
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800275a:	e14e      	b.n	80029fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b04      	cmp	r3, #4
 8002766:	d003      	beq.n	8002770 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2205      	movs	r2, #5
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d007      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027cc:	d178      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_SPI_TransmitReceive+0x10a>
 80027d6:	8b7b      	ldrh	r3, [r7, #26]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d166      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	1c9a      	adds	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002800:	e053      	b.n	80028aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d11b      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x176>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x176>
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d113      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	881a      	ldrh	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	1c9a      	adds	r2, r3, #2
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d119      	bne.n	800288a <HAL_SPI_TransmitReceive+0x1b8>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d014      	beq.n	800288a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	b292      	uxth	r2, r2
 800286c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	1c9a      	adds	r2, r3, #2
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002886:	2301      	movs	r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800288a:	f7fe fb3f 	bl	8000f0c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002896:	429a      	cmp	r2, r3
 8002898:	d807      	bhi.n	80028aa <HAL_SPI_TransmitReceive+0x1d8>
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d003      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028a8:	e0a7      	b.n	80029fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1a6      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x130>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1a1      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x130>
 80028be:	e07c      	b.n	80029ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x1fc>
 80028c8:	8b7b      	ldrh	r3, [r7, #26]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d16b      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f4:	e057      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d11c      	bne.n	800293e <HAL_SPI_TransmitReceive+0x26c>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d017      	beq.n	800293e <HAL_SPI_TransmitReceive+0x26c>
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d114      	bne.n	800293e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d119      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x2ae>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800297c:	2301      	movs	r3, #1
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002980:	f7fe fac4 	bl	8000f0c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800298c:	429a      	cmp	r2, r3
 800298e:	d803      	bhi.n	8002998 <HAL_SPI_TransmitReceive+0x2c6>
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d102      	bne.n	800299e <HAL_SPI_TransmitReceive+0x2cc>
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029a4:	e029      	b.n	80029fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1a2      	bne.n	80028f6 <HAL_SPI_TransmitReceive+0x224>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d19d      	bne.n	80028f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f8b2 	bl	8002b28 <SPI_EndRxTxTransaction>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029d6:	e010      	b.n	80029fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	e000      	b.n	80029fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3730      	adds	r7, #48	; 0x30
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a28:	f7fe fa70 	bl	8000f0c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a38:	f7fe fa68 	bl	8000f0c <HAL_GetTick>
 8002a3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a3e:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	015b      	lsls	r3, r3, #5
 8002a44:	0d1b      	lsrs	r3, r3, #20
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a4e:	e054      	b.n	8002afa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d050      	beq.n	8002afa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a58:	f7fe fa58 	bl	8000f0c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d902      	bls.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d13d      	bne.n	8002aea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a86:	d111      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a90:	d004      	beq.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d107      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab4:	d10f      	bne.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e017      	b.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d19b      	bne.n	8002a50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000

08002b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <SPI_EndRxTxTransaction+0x7c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <SPI_EndRxTxTransaction+0x80>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0d5b      	lsrs	r3, r3, #21
 8002b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b52:	d112      	bne.n	8002b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff ff5a 	bl	8002a18 <SPI_WaitFlagStateUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e00f      	b.n	8002b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d0f2      	beq.n	8002b7a <SPI_EndRxTxTransaction+0x52>
 8002b94:	e000      	b.n	8002b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b96:	bf00      	nop
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	165e9f81 	.word	0x165e9f81

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e03f      	b.n	8002c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe f850 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f929 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b08a      	sub	sp, #40	; 0x28
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d17c      	bne.n	8002d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_UART_Transmit+0x2c>
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e075      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Transmit+0x3e>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e06e      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2221      	movs	r2, #33	; 0x21
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe f937 	bl	8000f0c <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_UART_Transmit+0x82>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e003      	b.n	8002cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cd8:	e02a      	b.n	8002d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f840 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e036      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e007      	b.n	8002d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1cf      	bne.n	8002cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2140      	movs	r1, #64	; 0x40
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f810 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e006      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b090      	sub	sp, #64	; 0x40
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	e050      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d04c      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	f7fe f8bf 	bl	8000f0c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d241      	bcs.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dba:	637a      	str	r2, [r7, #52]	; 0x34
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e5      	bne.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3314      	adds	r3, #20
 8002dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dee:	623a      	str	r2, [r7, #32]
 8002df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	69f9      	ldr	r1, [r7, #28]
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e5      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e00f      	b.n	8002e3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d09f      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3740      	adds	r7, #64	; 0x40
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4c:	b09f      	sub	sp, #124	; 0x7c
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	68d9      	ldr	r1, [r3, #12]
 8002e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	ea40 0301 	orr.w	r3, r0, r1
 8002e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e8c:	f021 010c 	bic.w	r1, r1, #12
 8002e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e96:	430b      	orrs	r3, r1
 8002e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	6999      	ldr	r1, [r3, #24]
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	ea40 0301 	orr.w	r3, r0, r1
 8002eb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4bc5      	ldr	r3, [pc, #788]	; (80031cc <UART_SetConfig+0x384>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d004      	beq.n	8002ec6 <UART_SetConfig+0x7e>
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4bc3      	ldr	r3, [pc, #780]	; (80031d0 <UART_SetConfig+0x388>)
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d103      	bne.n	8002ece <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec6:	f7fe ff21 	bl	8001d0c <HAL_RCC_GetPCLK2Freq>
 8002eca:	6778      	str	r0, [r7, #116]	; 0x74
 8002ecc:	e002      	b.n	8002ed4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ece:	f7fe ff09 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8002ed2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002edc:	f040 80b6 	bne.w	800304c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	f04f 0500 	mov.w	r5, #0
 8002ee8:	4622      	mov	r2, r4
 8002eea:	462b      	mov	r3, r5
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	6439      	str	r1, [r7, #64]	; 0x40
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ef8:	1912      	adds	r2, r2, r4
 8002efa:	eb45 0303 	adc.w	r3, r5, r3
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	00d9      	lsls	r1, r3, #3
 8002f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f0c:	00d0      	lsls	r0, r2, #3
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	1911      	adds	r1, r2, r4
 8002f14:	6639      	str	r1, [r7, #96]	; 0x60
 8002f16:	416b      	adcs	r3, r5
 8002f18:	667b      	str	r3, [r7, #100]	; 0x64
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	1891      	adds	r1, r2, r2
 8002f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f34:	f7fd f9a4 	bl	8000280 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4ba5      	ldr	r3, [pc, #660]	; (80031d4 <UART_SetConfig+0x38c>)
 8002f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	011e      	lsls	r6, r3, #4
 8002f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f48:	461c      	mov	r4, r3
 8002f4a:	f04f 0500 	mov.w	r5, #0
 8002f4e:	4622      	mov	r2, r4
 8002f50:	462b      	mov	r3, r5
 8002f52:	1891      	adds	r1, r2, r2
 8002f54:	6339      	str	r1, [r7, #48]	; 0x30
 8002f56:	415b      	adcs	r3, r3
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f5e:	1912      	adds	r2, r2, r4
 8002f60:	eb45 0303 	adc.w	r3, r5, r3
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	00d9      	lsls	r1, r3, #3
 8002f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f72:	00d0      	lsls	r0, r2, #3
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	1911      	adds	r1, r2, r4
 8002f7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f7c:	416b      	adcs	r3, r5
 8002f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	1891      	adds	r1, r2, r2
 8002f8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f9a:	f7fd f971 	bl	8000280 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <UART_SetConfig+0x38c>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	3332      	adds	r3, #50	; 0x32
 8002fb6:	4a87      	ldr	r2, [pc, #540]	; (80031d4 <UART_SetConfig+0x38c>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fc4:	441e      	add	r6, r3
 8002fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	1894      	adds	r4, r2, r2
 8002fd4:	623c      	str	r4, [r7, #32]
 8002fd6:	415b      	adcs	r3, r3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fde:	1812      	adds	r2, r2, r0
 8002fe0:	eb41 0303 	adc.w	r3, r1, r3
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	f04f 0500 	mov.w	r5, #0
 8002fec:	00dd      	lsls	r5, r3, #3
 8002fee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ff2:	00d4      	lsls	r4, r2, #3
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	462b      	mov	r3, r5
 8002ff8:	1814      	adds	r4, r2, r0
 8002ffa:	653c      	str	r4, [r7, #80]	; 0x50
 8002ffc:	414b      	adcs	r3, r1
 8002ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8003000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	461a      	mov	r2, r3
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	1891      	adds	r1, r2, r2
 800300c:	61b9      	str	r1, [r7, #24]
 800300e:	415b      	adcs	r3, r3
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003016:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800301a:	f7fd f931 	bl	8000280 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4b6c      	ldr	r3, [pc, #432]	; (80031d4 <UART_SetConfig+0x38c>)
 8003024:	fba3 1302 	umull	r1, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2164      	movs	r1, #100	; 0x64
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3332      	adds	r3, #50	; 0x32
 8003036:	4a67      	ldr	r2, [pc, #412]	; (80031d4 <UART_SetConfig+0x38c>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	f003 0207 	and.w	r2, r3, #7
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4432      	add	r2, r6
 8003048:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800304a:	e0b9      	b.n	80031c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800304c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304e:	461c      	mov	r4, r3
 8003050:	f04f 0500 	mov.w	r5, #0
 8003054:	4622      	mov	r2, r4
 8003056:	462b      	mov	r3, r5
 8003058:	1891      	adds	r1, r2, r2
 800305a:	6139      	str	r1, [r7, #16]
 800305c:	415b      	adcs	r3, r3
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003064:	1912      	adds	r2, r2, r4
 8003066:	eb45 0303 	adc.w	r3, r5, r3
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	00d9      	lsls	r1, r3, #3
 8003074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003078:	00d0      	lsls	r0, r2, #3
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	eb12 0804 	adds.w	r8, r2, r4
 8003082:	eb43 0905 	adc.w	r9, r3, r5
 8003086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	008b      	lsls	r3, r1, #2
 800309a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800309e:	0082      	lsls	r2, r0, #2
 80030a0:	4640      	mov	r0, r8
 80030a2:	4649      	mov	r1, r9
 80030a4:	f7fd f8ec 	bl	8000280 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <UART_SetConfig+0x38c>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	011e      	lsls	r6, r3, #4
 80030b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b8:	4618      	mov	r0, r3
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	1894      	adds	r4, r2, r2
 80030c4:	60bc      	str	r4, [r7, #8]
 80030c6:	415b      	adcs	r3, r3
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ce:	1812      	adds	r2, r2, r0
 80030d0:	eb41 0303 	adc.w	r3, r1, r3
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	f04f 0500 	mov.w	r5, #0
 80030dc:	00dd      	lsls	r5, r3, #3
 80030de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030e2:	00d4      	lsls	r4, r2, #3
 80030e4:	4622      	mov	r2, r4
 80030e6:	462b      	mov	r3, r5
 80030e8:	1814      	adds	r4, r2, r0
 80030ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80030ec:	414b      	adcs	r3, r1
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	008b      	lsls	r3, r1, #2
 8003104:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003108:	0082      	lsls	r2, r0, #2
 800310a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800310e:	f7fd f8b7 	bl	8000280 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <UART_SetConfig+0x38c>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	; 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <UART_SetConfig+0x38c>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003136:	441e      	add	r6, r3
 8003138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313a:	4618      	mov	r0, r3
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	1894      	adds	r4, r2, r2
 8003146:	603c      	str	r4, [r7, #0]
 8003148:	415b      	adcs	r3, r3
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003150:	1812      	adds	r2, r2, r0
 8003152:	eb41 0303 	adc.w	r3, r1, r3
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	f04f 0500 	mov.w	r5, #0
 800315e:	00dd      	lsls	r5, r3, #3
 8003160:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003164:	00d4      	lsls	r4, r2, #3
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	eb12 0a00 	adds.w	sl, r2, r0
 800316e:	eb43 0b01 	adc.w	fp, r3, r1
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800318a:	0082      	lsls	r2, r0, #2
 800318c:	4650      	mov	r0, sl
 800318e:	4659      	mov	r1, fp
 8003190:	f7fd f876 	bl	8000280 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <UART_SetConfig+0x38c>)
 800319a:	fba3 1302 	umull	r1, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2164      	movs	r1, #100	; 0x64
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	3332      	adds	r3, #50	; 0x32
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <UART_SetConfig+0x38c>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4432      	add	r2, r6
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	377c      	adds	r7, #124	; 0x7c
 80031c4:	46bd      	mov	sp, r7
 80031c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ca:	bf00      	nop
 80031cc:	40011000 	.word	0x40011000
 80031d0:	40011400 	.word	0x40011400
 80031d4:	51eb851f 	.word	0x51eb851f

080031d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80031dc:	4904      	ldr	r1, [pc, #16]	; (80031f0 <MX_FATFS_Init+0x18>)
 80031de:	4805      	ldr	r0, [pc, #20]	; (80031f4 <MX_FATFS_Init+0x1c>)
 80031e0:	f000 fd8e 	bl	8003d00 <FATFS_LinkDriver>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <MX_FATFS_Init+0x20>)
 80031ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	200002f0 	.word	0x200002f0
 80031f4:	2000000c 	.word	0x2000000c
 80031f8:	200002f4 	.word	0x200002f4

080031fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f9d9 	bl	80035c0 <USER_SPI_initialize>
 800320e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fab7 	bl	8003798 <USER_SPI_status>
 800322a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003244:	7bf8      	ldrb	r0, [r7, #15]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	f000 faba 	bl	80037c4 <USER_SPI_read>
 8003250:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800326a:	7bf8      	ldrb	r0, [r7, #15]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	f000 fb0d 	bl	8003890 <USER_SPI_write>
 8003276:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	603a      	str	r2, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
 800328c:	460b      	mov	r3, r1
 800328e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003290:	79b9      	ldrb	r1, [r7, #6]
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fb76 	bl	8003988 <USER_SPI_ioctl>
 800329c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80032b0:	f7fd fe2c 	bl	8000f0c <HAL_GetTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <SPI_Timer_On+0x20>)
 80032b8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <SPI_Timer_On+0x24>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000758 	.word	0x20000758
 80032cc:	2000075c 	.word	0x2000075c

080032d0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80032d4:	f7fd fe1a 	bl	8000f0c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <SPI_Timer_Status+0x24>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	1ad2      	subs	r2, r2, r3
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <SPI_Timer_Status+0x28>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf34      	ite	cc
 80032e8:	2301      	movcc	r3, #1
 80032ea:	2300      	movcs	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000758 	.word	0x20000758
 80032f8:	2000075c 	.word	0x2000075c

080032fc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af02      	add	r7, sp, #8
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003306:	f107 020f 	add.w	r2, r7, #15
 800330a:	1df9      	adds	r1, r7, #7
 800330c:	2332      	movs	r3, #50	; 0x32
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	4804      	ldr	r0, [pc, #16]	; (8003324 <xchg_spi+0x28>)
 8003314:	f7ff f9dd 	bl	80026d2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000218 	.word	0x20000218

08003328 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e00a      	b.n	800334e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	18d4      	adds	r4, r2, r3
 800333e:	20ff      	movs	r0, #255	; 0xff
 8003340:	f7ff ffdc 	bl	80032fc <xchg_spi>
 8003344:	4603      	mov	r3, r0
 8003346:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3f0      	bcc.n	8003338 <rcvr_spi_multi+0x10>
	}
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e009      	b.n	8003384 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ffbf 	bl	80032fc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3301      	adds	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d3f1      	bcc.n	8003370 <xmit_spi_multi+0x10>
	}
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800339e:	f7fd fdb5 	bl	8000f0c <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80033a8:	20ff      	movs	r0, #255	; 0xff
 80033aa:	f7ff ffa7 	bl	80032fc <xchg_spi>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2bff      	cmp	r3, #255	; 0xff
 80033b6:	d007      	beq.n	80033c8 <wait_ready+0x32>
 80033b8:	f7fd fda8 	bl	8000f0c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d8ef      	bhi.n	80033a8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2bff      	cmp	r3, #255	; 0xff
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80033e0:	2201      	movs	r2, #1
 80033e2:	2102      	movs	r1, #2
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <despiselect+0x18>)
 80033e6:	f7fe f843 	bl	8001470 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80033ea:	20ff      	movs	r0, #255	; 0xff
 80033ec:	f7ff ff86 	bl	80032fc <xchg_spi>

}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000

080033f8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80033fc:	2200      	movs	r2, #0
 80033fe:	2102      	movs	r1, #2
 8003400:	4809      	ldr	r0, [pc, #36]	; (8003428 <spiselect+0x30>)
 8003402:	f7fe f835 	bl	8001470 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003406:	20ff      	movs	r0, #255	; 0xff
 8003408:	f7ff ff78 	bl	80032fc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800340c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003410:	f7ff ffc1 	bl	8003396 <wait_ready>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <spiselect+0x26>
 800341a:	2301      	movs	r3, #1
 800341c:	e002      	b.n	8003424 <spiselect+0x2c>

	despiselect();
 800341e:	f7ff ffdd 	bl	80033dc <despiselect>
	return 0;	/* Timeout */
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000

0800342c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003436:	20c8      	movs	r0, #200	; 0xc8
 8003438:	f7ff ff36 	bl	80032a8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800343c:	20ff      	movs	r0, #255	; 0xff
 800343e:	f7ff ff5d 	bl	80032fc <xchg_spi>
 8003442:	4603      	mov	r3, r0
 8003444:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2bff      	cmp	r3, #255	; 0xff
 800344a:	d104      	bne.n	8003456 <rcvr_datablock+0x2a>
 800344c:	f7ff ff40 	bl	80032d0 <SPI_Timer_Status>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2bfe      	cmp	r3, #254	; 0xfe
 800345a:	d001      	beq.n	8003460 <rcvr_datablock+0x34>
 800345c:	2300      	movs	r3, #0
 800345e:	e00a      	b.n	8003476 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ff60 	bl	8003328 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003468:	20ff      	movs	r0, #255	; 0xff
 800346a:	f7ff ff47 	bl	80032fc <xchg_spi>
 800346e:	20ff      	movs	r0, #255	; 0xff
 8003470:	f7ff ff44 	bl	80032fc <xchg_spi>

	return 1;						/* Function succeeded */
 8003474:	2301      	movs	r3, #1
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800348a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800348e:	f7ff ff82 	bl	8003396 <wait_ready>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <xmit_datablock+0x1e>
 8003498:	2300      	movs	r3, #0
 800349a:	e01e      	b.n	80034da <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff2c 	bl	80032fc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	2bfd      	cmp	r3, #253	; 0xfd
 80034a8:	d016      	beq.n	80034d8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80034aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff56 	bl	8003360 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80034b4:	20ff      	movs	r0, #255	; 0xff
 80034b6:	f7ff ff21 	bl	80032fc <xchg_spi>
 80034ba:	20ff      	movs	r0, #255	; 0xff
 80034bc:	f7ff ff1e 	bl	80032fc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80034c0:	20ff      	movs	r0, #255	; 0xff
 80034c2:	f7ff ff1b 	bl	80032fc <xchg_spi>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d001      	beq.n	80034d8 <xmit_datablock+0x5a>
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <xmit_datablock+0x5c>
	}
	return 1;
 80034d8:	2301      	movs	r3, #1
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	6039      	str	r1, [r7, #0]
 80034ec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da0e      	bge.n	8003514 <send_cmd+0x32>
		cmd &= 0x7F;
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034fc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80034fe:	2100      	movs	r1, #0
 8003500:	2037      	movs	r0, #55	; 0x37
 8003502:	f7ff ffee 	bl	80034e2 <send_cmd>
 8003506:	4603      	mov	r3, r0
 8003508:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d901      	bls.n	8003514 <send_cmd+0x32>
 8003510:	7bbb      	ldrb	r3, [r7, #14]
 8003512:	e051      	b.n	80035b8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d008      	beq.n	800352c <send_cmd+0x4a>
		despiselect();
 800351a:	f7ff ff5f 	bl	80033dc <despiselect>
		if (!spiselect()) return 0xFF;
 800351e:	f7ff ff6b 	bl	80033f8 <spiselect>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <send_cmd+0x4a>
 8003528:	23ff      	movs	r3, #255	; 0xff
 800352a:	e045      	b.n	80035b8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003532:	b2db      	uxtb	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fee1 	bl	80032fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fedb 	bl	80032fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fed5 	bl	80032fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fecf 	bl	80032fc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff feca 	bl	80032fc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <send_cmd+0x94>
 8003572:	2395      	movs	r3, #149	; 0x95
 8003574:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d101      	bne.n	8003580 <send_cmd+0x9e>
 800357c:	2387      	movs	r3, #135	; 0x87
 800357e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff feba 	bl	80032fc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d102      	bne.n	8003594 <send_cmd+0xb2>
 800358e:	20ff      	movs	r0, #255	; 0xff
 8003590:	f7ff feb4 	bl	80032fc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003594:	230a      	movs	r3, #10
 8003596:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003598:	20ff      	movs	r0, #255	; 0xff
 800359a:	f7ff feaf 	bl	80032fc <xchg_spi>
 800359e:	4603      	mov	r3, r0
 80035a0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80035a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da05      	bge.n	80035b6 <send_cmd+0xd4>
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <send_cmd+0xb6>

	return res;							/* Return received response */
 80035b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <USER_SPI_initialize+0x14>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0d6      	b.n	8003782 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80035d4:	4b6d      	ldr	r3, [pc, #436]	; (800378c <USER_SPI_initialize+0x1cc>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <USER_SPI_initialize+0x2a>
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <USER_SPI_initialize+0x1cc>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e0cb      	b.n	8003782 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80035ea:	4b69      	ldr	r3, [pc, #420]	; (8003790 <USER_SPI_initialize+0x1d0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <USER_SPI_initialize+0x1d0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80035fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80035fe:	230a      	movs	r3, #10
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e005      	b.n	8003610 <USER_SPI_initialize+0x50>
 8003604:	20ff      	movs	r0, #255	; 0xff
 8003606:	f7ff fe79 	bl	80032fc <xchg_spi>
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3b01      	subs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f6      	bne.n	8003604 <USER_SPI_initialize+0x44>

	ty = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800361a:	2100      	movs	r1, #0
 800361c:	2000      	movs	r0, #0
 800361e:	f7ff ff60 	bl	80034e2 <send_cmd>
 8003622:	4603      	mov	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 808b 	bne.w	8003740 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800362a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800362e:	f7ff fe3b 	bl	80032a8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003632:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003636:	2008      	movs	r0, #8
 8003638:	f7ff ff53 	bl	80034e2 <send_cmd>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d151      	bne.n	80036e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	e00d      	b.n	8003664 <USER_SPI_initialize+0xa4>
 8003648:	7bfc      	ldrb	r4, [r7, #15]
 800364a:	20ff      	movs	r0, #255	; 0xff
 800364c:	f7ff fe56 	bl	80032fc <xchg_spi>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	4423      	add	r3, r4
 800365a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	3301      	adds	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d9ee      	bls.n	8003648 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800366a:	7abb      	ldrb	r3, [r7, #10]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d167      	bne.n	8003740 <USER_SPI_initialize+0x180>
 8003670:	7afb      	ldrb	r3, [r7, #11]
 8003672:	2baa      	cmp	r3, #170	; 0xaa
 8003674:	d164      	bne.n	8003740 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003676:	bf00      	nop
 8003678:	f7ff fe2a 	bl	80032d0 <SPI_Timer_Status>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <USER_SPI_initialize+0xd2>
 8003682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003686:	20a9      	movs	r0, #169	; 0xa9
 8003688:	f7ff ff2b 	bl	80034e2 <send_cmd>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f2      	bne.n	8003678 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003692:	f7ff fe1d 	bl	80032d0 <SPI_Timer_Status>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d051      	beq.n	8003740 <USER_SPI_initialize+0x180>
 800369c:	2100      	movs	r1, #0
 800369e:	203a      	movs	r0, #58	; 0x3a
 80036a0:	f7ff ff1f 	bl	80034e2 <send_cmd>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d14a      	bne.n	8003740 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e00d      	b.n	80036cc <USER_SPI_initialize+0x10c>
 80036b0:	7bfc      	ldrb	r4, [r7, #15]
 80036b2:	20ff      	movs	r0, #255	; 0xff
 80036b4:	f7ff fe22 	bl	80032fc <xchg_spi>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	f107 0310 	add.w	r3, r7, #16
 80036c0:	4423      	add	r3, r4
 80036c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	3301      	adds	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d9ee      	bls.n	80036b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80036d2:	7a3b      	ldrb	r3, [r7, #8]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <USER_SPI_initialize+0x120>
 80036dc:	230c      	movs	r3, #12
 80036de:	e000      	b.n	80036e2 <USER_SPI_initialize+0x122>
 80036e0:	2304      	movs	r3, #4
 80036e2:	737b      	strb	r3, [r7, #13]
 80036e4:	e02c      	b.n	8003740 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80036e6:	2100      	movs	r1, #0
 80036e8:	20a9      	movs	r0, #169	; 0xa9
 80036ea:	f7ff fefa 	bl	80034e2 <send_cmd>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d804      	bhi.n	80036fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80036f4:	2302      	movs	r3, #2
 80036f6:	737b      	strb	r3, [r7, #13]
 80036f8:	23a9      	movs	r3, #169	; 0xa9
 80036fa:	73bb      	strb	r3, [r7, #14]
 80036fc:	e003      	b.n	8003706 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80036fe:	2301      	movs	r3, #1
 8003700:	737b      	strb	r3, [r7, #13]
 8003702:	2301      	movs	r3, #1
 8003704:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003706:	bf00      	nop
 8003708:	f7ff fde2 	bl	80032d0 <SPI_Timer_Status>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <USER_SPI_initialize+0x162>
 8003712:	7bbb      	ldrb	r3, [r7, #14]
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fee3 	bl	80034e2 <send_cmd>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f2      	bne.n	8003708 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003722:	f7ff fdd5 	bl	80032d0 <SPI_Timer_Status>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <USER_SPI_initialize+0x17c>
 800372c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003730:	2010      	movs	r0, #16
 8003732:	f7ff fed6 	bl	80034e2 <send_cmd>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <USER_SPI_initialize+0x180>
				ty = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <USER_SPI_initialize+0x1d4>)
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003746:	f7ff fe49 	bl	80033dc <despiselect>

	if (ty) {			/* OK */
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <USER_SPI_initialize+0x1d0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <USER_SPI_initialize+0x1d0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <USER_SPI_initialize+0x1cc>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	b2da      	uxtb	r2, r3
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <USER_SPI_initialize+0x1cc>)
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e002      	b.n	800377c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <USER_SPI_initialize+0x1cc>)
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <USER_SPI_initialize+0x1cc>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	bf00      	nop
 800378c:	20000020 	.word	0x20000020
 8003790:	20000218 	.word	0x20000218
 8003794:	200001a8 	.word	0x200001a8

08003798 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <USER_SPI_status+0x14>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e002      	b.n	80037b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <USER_SPI_status+0x28>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000020 	.word	0x20000020

080037c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <USER_SPI_read+0x1c>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <USER_SPI_read+0x20>
 80037e0:	2304      	movs	r3, #4
 80037e2:	e04d      	b.n	8003880 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <USER_SPI_read+0xc4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <USER_SPI_read+0x32>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e044      	b.n	8003880 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <USER_SPI_read+0xc8>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <USER_SPI_read+0x44>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d111      	bne.n	8003832 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	2011      	movs	r0, #17
 8003812:	f7ff fe66 	bl	80034e2 <send_cmd>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d129      	bne.n	8003870 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800381c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003820:	68b8      	ldr	r0, [r7, #8]
 8003822:	f7ff fe03 	bl	800342c <rcvr_datablock>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d021      	beq.n	8003870 <USER_SPI_read+0xac>
			count = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	e01e      	b.n	8003870 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	2012      	movs	r0, #18
 8003836:	f7ff fe54 	bl	80034e2 <send_cmd>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d117      	bne.n	8003870 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f7ff fdf1 	bl	800342c <rcvr_datablock>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <USER_SPI_read+0xa2>
				buff += 512;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003856:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ed      	bne.n	8003840 <USER_SPI_read+0x7c>
 8003864:	e000      	b.n	8003868 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003866:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003868:	2100      	movs	r1, #0
 800386a:	200c      	movs	r0, #12
 800386c:	f7ff fe39 	bl	80034e2 <send_cmd>
		}
	}
	despiselect();
 8003870:	f7ff fdb4 	bl	80033dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000020 	.word	0x20000020
 800388c:	200001a8 	.word	0x200001a8

08003890 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <USER_SPI_write+0x1c>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <USER_SPI_write+0x20>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e063      	b.n	8003978 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <USER_SPI_write+0xf0>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <USER_SPI_write+0x32>
 80038be:	2303      	movs	r3, #3
 80038c0:	e05a      	b.n	8003978 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80038c2:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <USER_SPI_write+0xf0>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <USER_SPI_write+0x44>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e051      	b.n	8003978 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <USER_SPI_write+0xf4>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <USER_SPI_write+0x56>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	025b      	lsls	r3, r3, #9
 80038e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d110      	bne.n	800390e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	2018      	movs	r0, #24
 80038f0:	f7ff fdf7 	bl	80034e2 <send_cmd>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d136      	bne.n	8003968 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80038fa:	21fe      	movs	r1, #254	; 0xfe
 80038fc:	68b8      	ldr	r0, [r7, #8]
 80038fe:	f7ff fdbe 	bl	800347e <xmit_datablock>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02f      	beq.n	8003968 <USER_SPI_write+0xd8>
			count = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	e02c      	b.n	8003968 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <USER_SPI_write+0xf4>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f003 0306 	and.w	r3, r3, #6
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <USER_SPI_write+0x92>
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	2097      	movs	r0, #151	; 0x97
 800391e:	f7ff fde0 	bl	80034e2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	2019      	movs	r0, #25
 8003926:	f7ff fddc 	bl	80034e2 <send_cmd>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11b      	bne.n	8003968 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003930:	21fc      	movs	r1, #252	; 0xfc
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f7ff fda3 	bl	800347e <xmit_datablock>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <USER_SPI_write+0xc4>
				buff += 512;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003944:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	3b01      	subs	r3, #1
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <USER_SPI_write+0xa0>
 8003952:	e000      	b.n	8003956 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003954:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003956:	21fd      	movs	r1, #253	; 0xfd
 8003958:	2000      	movs	r0, #0
 800395a:	f7ff fd90 	bl	800347e <xmit_datablock>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <USER_SPI_write+0xd8>
 8003964:	2301      	movs	r3, #1
 8003966:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003968:	f7ff fd38 	bl	80033dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000020 	.word	0x20000020
 8003984:	200001a8 	.word	0x200001a8

08003988 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	603a      	str	r2, [r7, #0]
 8003992:	71fb      	strb	r3, [r7, #7]
 8003994:	460b      	mov	r3, r1
 8003996:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <USER_SPI_ioctl+0x1a>
 800399e:	2304      	movs	r3, #4
 80039a0:	e15a      	b.n	8003c58 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80039a2:	4baf      	ldr	r3, [pc, #700]	; (8003c60 <USER_SPI_ioctl+0x2d8>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <USER_SPI_ioctl+0x2c>
 80039b0:	2303      	movs	r3, #3
 80039b2:	e151      	b.n	8003c58 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80039ba:	79bb      	ldrb	r3, [r7, #6]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	f200 8136 	bhi.w	8003c2e <USER_SPI_ioctl+0x2a6>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <USER_SPI_ioctl+0x40>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039dd 	.word	0x080039dd
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	08003c2f 	.word	0x08003c2f
 80039d4:	08003a9d 	.word	0x08003a9d
 80039d8:	08003b93 	.word	0x08003b93
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80039dc:	f7ff fd0c 	bl	80033f8 <spiselect>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8127 	beq.w	8003c36 <USER_SPI_ioctl+0x2ae>
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80039ee:	e122      	b.n	8003c36 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80039f0:	2100      	movs	r1, #0
 80039f2:	2009      	movs	r0, #9
 80039f4:	f7ff fd75 	bl	80034e2 <send_cmd>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 811d 	bne.w	8003c3a <USER_SPI_ioctl+0x2b2>
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	2110      	movs	r1, #16
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fd10 	bl	800342c <rcvr_datablock>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8113 	beq.w	8003c3a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003a14:	7b3b      	ldrb	r3, [r7, #12]
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d111      	bne.n	8003a42 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003a1e:	7d7b      	ldrb	r3, [r7, #21]
 8003a20:	461a      	mov	r2, r3
 8003a22:	7d3b      	ldrb	r3, [r7, #20]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	4413      	add	r3, r2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003a32:	4413      	add	r3, r2
 8003a34:	3301      	adds	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	029a      	lsls	r2, r3, #10
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e028      	b.n	8003a94 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003a42:	7c7b      	ldrb	r3, [r7, #17]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	7dbb      	ldrb	r3, [r7, #22]
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	7d7b      	ldrb	r3, [r7, #21]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 0306 	and.w	r3, r3, #6
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3302      	adds	r3, #2
 8003a66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003a6a:	7d3b      	ldrb	r3, [r7, #20]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	7cbb      	ldrb	r3, [r7, #18]
 8003a7a:	029b      	lsls	r3, r3, #10
 8003a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a80:	4413      	add	r3, r2
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003a86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a8a:	3b09      	subs	r3, #9
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003a9a:	e0ce      	b.n	8003c3a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003a9c:	4b71      	ldr	r3, [pc, #452]	; (8003c64 <USER_SPI_ioctl+0x2dc>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d031      	beq.n	8003b0c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	208d      	movs	r0, #141	; 0x8d
 8003aac:	f7ff fd19 	bl	80034e2 <send_cmd>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80c3 	bne.w	8003c3e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003ab8:	20ff      	movs	r0, #255	; 0xff
 8003aba:	f7ff fc1f 	bl	80032fc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003abe:	f107 030c 	add.w	r3, r7, #12
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fcb1 	bl	800342c <rcvr_datablock>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80b6 	beq.w	8003c3e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003ad2:	2330      	movs	r3, #48	; 0x30
 8003ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003ad8:	e007      	b.n	8003aea <USER_SPI_ioctl+0x162>
 8003ada:	20ff      	movs	r0, #255	; 0xff
 8003adc:	f7ff fc0e 	bl	80032fc <xchg_spi>
 8003ae0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003aea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f3      	bne.n	8003ada <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003af2:	7dbb      	ldrb	r3, [r7, #22]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	2310      	movs	r3, #16
 8003afc:	fa03 f202 	lsl.w	r2, r3, r2
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003b0a:	e098      	b.n	8003c3e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2009      	movs	r0, #9
 8003b10:	f7ff fce7 	bl	80034e2 <send_cmd>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8091 	bne.w	8003c3e <USER_SPI_ioctl+0x2b6>
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	2110      	movs	r1, #16
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fc82 	bl	800342c <rcvr_datablock>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8087 	beq.w	8003c3e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <USER_SPI_ioctl+0x2dc>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003b3c:	7dbb      	ldrb	r3, [r7, #22]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003b44:	7dfa      	ldrb	r2, [r7, #23]
 8003b46:	09d2      	lsrs	r2, r2, #7
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	7e7b      	ldrb	r3, [r7, #25]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e013      	b.n	8003b8a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003b62:	7dbb      	ldrb	r3, [r7, #22]
 8003b64:	109b      	asrs	r3, r3, #2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	7dfa      	ldrb	r2, [r7, #23]
 8003b70:	00d2      	lsls	r2, r2, #3
 8003b72:	f002 0218 	and.w	r2, r2, #24
 8003b76:	7df9      	ldrb	r1, [r7, #23]
 8003b78:	0949      	lsrs	r1, r1, #5
 8003b7a:	b2c9      	uxtb	r1, r1
 8003b7c:	440a      	add	r2, r1
 8003b7e:	3201      	adds	r2, #1
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003b90:	e055      	b.n	8003c3e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <USER_SPI_ioctl+0x2dc>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d051      	beq.n	8003c42 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003b9e:	f107 020c 	add.w	r2, r7, #12
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	210b      	movs	r1, #11
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff feee 	bl	8003988 <USER_SPI_ioctl>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d149      	bne.n	8003c46 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003bb2:	7b3b      	ldrb	r3, [r7, #12]
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <USER_SPI_ioctl+0x23e>
 8003bbc:	7dbb      	ldrb	r3, [r7, #22]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d041      	beq.n	8003c4a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <USER_SPI_ioctl+0x2dc>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	025b      	lsls	r3, r3, #9
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	025b      	lsls	r3, r3, #9
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf0:	2020      	movs	r0, #32
 8003bf2:	f7ff fc76 	bl	80034e2 <send_cmd>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d128      	bne.n	8003c4e <USER_SPI_ioctl+0x2c6>
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	2021      	movs	r0, #33	; 0x21
 8003c00:	f7ff fc6f 	bl	80034e2 <send_cmd>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d121      	bne.n	8003c4e <USER_SPI_ioctl+0x2c6>
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2026      	movs	r0, #38	; 0x26
 8003c0e:	f7ff fc68 	bl	80034e2 <send_cmd>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11a      	bne.n	8003c4e <USER_SPI_ioctl+0x2c6>
 8003c18:	f247 5030 	movw	r0, #30000	; 0x7530
 8003c1c:	f7ff fbbb 	bl	8003396 <wait_ready>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003c2c:	e00f      	b.n	8003c4e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003c2e:	2304      	movs	r3, #4
 8003c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c34:	e00c      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		break;
 8003c36:	bf00      	nop
 8003c38:	e00a      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		break;
 8003c3a:	bf00      	nop
 8003c3c:	e008      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		break;
 8003c3e:	bf00      	nop
 8003c40:	e006      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003c42:	bf00      	nop
 8003c44:	e004      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <USER_SPI_ioctl+0x2c8>
		break;
 8003c4e:	bf00      	nop
	}

	despiselect();
 8003c50:	f7ff fbc4 	bl	80033dc <despiselect>

	return res;
 8003c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3730      	adds	r7, #48	; 0x30
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000020 	.word	0x20000020
 8003c64:	200001a8 	.word	0x200001a8

08003c68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003c80:	7a5b      	ldrb	r3, [r3, #9]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d131      	bne.n	8003cec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003c88:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003c8a:	7a5b      	ldrb	r3, [r3, #9]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003c92:	2100      	movs	r1, #0
 8003c94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003c98:	7a5b      	ldrb	r3, [r3, #9]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003ca8:	7a5b      	ldrb	r3, [r3, #9]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003cb0:	4413      	add	r3, r2
 8003cb2:	79fa      	ldrb	r2, [r7, #7]
 8003cb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003cb8:	7a5b      	ldrb	r3, [r3, #9]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	b2d1      	uxtb	r1, r2
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <FATFS_LinkDriverEx+0x94>)
 8003cc2:	7251      	strb	r1, [r2, #9]
 8003cc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003cc6:	7dbb      	ldrb	r3, [r7, #22]
 8003cc8:	3330      	adds	r3, #48	; 0x30
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	223a      	movs	r2, #58	; 0x3a
 8003cd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3302      	adds	r3, #2
 8003cdc:	222f      	movs	r2, #47	; 0x2f
 8003cde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3303      	adds	r3, #3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200001ac 	.word	0x200001ac

08003d00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffaa 	bl	8003c68 <FATFS_LinkDriverEx>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000024 	.word	0x20000024

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 fc68 	bl	8004614 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08004698 	.word	0x08004698
 8003d68:	08004698 	.word	0x08004698
 8003d6c:	08004698 	.word	0x08004698
 8003d70:	0800469c 	.word	0x0800469c

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <_vsniprintf_r>:
 8003d84:	b530      	push	{r4, r5, lr}
 8003d86:	1e14      	subs	r4, r2, #0
 8003d88:	4605      	mov	r5, r0
 8003d8a:	b09b      	sub	sp, #108	; 0x6c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	da05      	bge.n	8003d9c <_vsniprintf_r+0x18>
 8003d90:	238b      	movs	r3, #139	; 0x8b
 8003d92:	602b      	str	r3, [r5, #0]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	b01b      	add	sp, #108	; 0x6c
 8003d9a:	bd30      	pop	{r4, r5, pc}
 8003d9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003da0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003da4:	bf14      	ite	ne
 8003da6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003daa:	4623      	moveq	r3, r4
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db4:	9100      	str	r1, [sp, #0]
 8003db6:	9104      	str	r1, [sp, #16]
 8003db8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dc0:	4669      	mov	r1, sp
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f874 	bl	8003eb0 <_svfiprintf_r>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	bfbc      	itt	lt
 8003dcc:	238b      	movlt	r3, #139	; 0x8b
 8003dce:	602b      	strlt	r3, [r5, #0]
 8003dd0:	2c00      	cmp	r4, #0
 8003dd2:	d0e1      	beq.n	8003d98 <_vsniprintf_r+0x14>
 8003dd4:	9b00      	ldr	r3, [sp, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e7dd      	b.n	8003d98 <_vsniprintf_r+0x14>

08003ddc <vsniprintf>:
 8003ddc:	b507      	push	{r0, r1, r2, lr}
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	460a      	mov	r2, r1
 8003de4:	4601      	mov	r1, r0
 8003de6:	4803      	ldr	r0, [pc, #12]	; (8003df4 <vsniprintf+0x18>)
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	f7ff ffcb 	bl	8003d84 <_vsniprintf_r>
 8003dee:	b003      	add	sp, #12
 8003df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003df4:	20000024 	.word	0x20000024

08003df8 <__ssputs_r>:
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	688e      	ldr	r6, [r1, #8]
 8003dfe:	429e      	cmp	r6, r3
 8003e00:	4682      	mov	sl, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	4690      	mov	r8, r2
 8003e06:	461f      	mov	r7, r3
 8003e08:	d838      	bhi.n	8003e7c <__ssputs_r+0x84>
 8003e0a:	898a      	ldrh	r2, [r1, #12]
 8003e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e10:	d032      	beq.n	8003e78 <__ssputs_r+0x80>
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	6909      	ldr	r1, [r1, #16]
 8003e16:	eba5 0901 	sub.w	r9, r5, r1
 8003e1a:	6965      	ldr	r5, [r4, #20]
 8003e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e24:	3301      	adds	r3, #1
 8003e26:	444b      	add	r3, r9
 8003e28:	106d      	asrs	r5, r5, #1
 8003e2a:	429d      	cmp	r5, r3
 8003e2c:	bf38      	it	cc
 8003e2e:	461d      	movcc	r5, r3
 8003e30:	0553      	lsls	r3, r2, #21
 8003e32:	d531      	bpl.n	8003e98 <__ssputs_r+0xa0>
 8003e34:	4629      	mov	r1, r5
 8003e36:	f000 fb47 	bl	80044c8 <_malloc_r>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	b950      	cbnz	r0, 8003e54 <__ssputs_r+0x5c>
 8003e3e:	230c      	movs	r3, #12
 8003e40:	f8ca 3000 	str.w	r3, [sl]
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4a:	81a3      	strh	r3, [r4, #12]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e54:	6921      	ldr	r1, [r4, #16]
 8003e56:	464a      	mov	r2, r9
 8003e58:	f000 fabe 	bl	80043d8 <memcpy>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	6126      	str	r6, [r4, #16]
 8003e6a:	6165      	str	r5, [r4, #20]
 8003e6c:	444e      	add	r6, r9
 8003e6e:	eba5 0509 	sub.w	r5, r5, r9
 8003e72:	6026      	str	r6, [r4, #0]
 8003e74:	60a5      	str	r5, [r4, #8]
 8003e76:	463e      	mov	r6, r7
 8003e78:	42be      	cmp	r6, r7
 8003e7a:	d900      	bls.n	8003e7e <__ssputs_r+0x86>
 8003e7c:	463e      	mov	r6, r7
 8003e7e:	4632      	mov	r2, r6
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	4641      	mov	r1, r8
 8003e84:	f000 fab6 	bl	80043f4 <memmove>
 8003e88:	68a3      	ldr	r3, [r4, #8]
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	1b9b      	subs	r3, r3, r6
 8003e8e:	4432      	add	r2, r6
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	6022      	str	r2, [r4, #0]
 8003e94:	2000      	movs	r0, #0
 8003e96:	e7db      	b.n	8003e50 <__ssputs_r+0x58>
 8003e98:	462a      	mov	r2, r5
 8003e9a:	f000 fb6f 	bl	800457c <_realloc_r>
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d1e1      	bne.n	8003e68 <__ssputs_r+0x70>
 8003ea4:	6921      	ldr	r1, [r4, #16]
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f000 fabe 	bl	8004428 <_free_r>
 8003eac:	e7c7      	b.n	8003e3e <__ssputs_r+0x46>
	...

08003eb0 <_svfiprintf_r>:
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	4698      	mov	r8, r3
 8003eb6:	898b      	ldrh	r3, [r1, #12]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	b09d      	sub	sp, #116	; 0x74
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	d50e      	bpl.n	8003ee2 <_svfiprintf_r+0x32>
 8003ec4:	690b      	ldr	r3, [r1, #16]
 8003ec6:	b963      	cbnz	r3, 8003ee2 <_svfiprintf_r+0x32>
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	f000 fafd 	bl	80044c8 <_malloc_r>
 8003ece:	6028      	str	r0, [r5, #0]
 8003ed0:	6128      	str	r0, [r5, #16]
 8003ed2:	b920      	cbnz	r0, 8003ede <_svfiprintf_r+0x2e>
 8003ed4:	230c      	movs	r3, #12
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	e0d1      	b.n	8004082 <_svfiprintf_r+0x1d2>
 8003ede:	2340      	movs	r3, #64	; 0x40
 8003ee0:	616b      	str	r3, [r5, #20]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ef0:	2330      	movs	r3, #48	; 0x30
 8003ef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800409c <_svfiprintf_r+0x1ec>
 8003ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003efa:	f04f 0901 	mov.w	r9, #1
 8003efe:	4623      	mov	r3, r4
 8003f00:	469a      	mov	sl, r3
 8003f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f06:	b10a      	cbz	r2, 8003f0c <_svfiprintf_r+0x5c>
 8003f08:	2a25      	cmp	r2, #37	; 0x25
 8003f0a:	d1f9      	bne.n	8003f00 <_svfiprintf_r+0x50>
 8003f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f10:	d00b      	beq.n	8003f2a <_svfiprintf_r+0x7a>
 8003f12:	465b      	mov	r3, fp
 8003f14:	4622      	mov	r2, r4
 8003f16:	4629      	mov	r1, r5
 8003f18:	4638      	mov	r0, r7
 8003f1a:	f7ff ff6d 	bl	8003df8 <__ssputs_r>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	f000 80aa 	beq.w	8004078 <_svfiprintf_r+0x1c8>
 8003f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f26:	445a      	add	r2, fp
 8003f28:	9209      	str	r2, [sp, #36]	; 0x24
 8003f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a2 	beq.w	8004078 <_svfiprintf_r+0x1c8>
 8003f34:	2300      	movs	r3, #0
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f3e:	f10a 0a01 	add.w	sl, sl, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	9307      	str	r3, [sp, #28]
 8003f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f4c:	4654      	mov	r4, sl
 8003f4e:	2205      	movs	r2, #5
 8003f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f54:	4851      	ldr	r0, [pc, #324]	; (800409c <_svfiprintf_r+0x1ec>)
 8003f56:	f7fc f943 	bl	80001e0 <memchr>
 8003f5a:	9a04      	ldr	r2, [sp, #16]
 8003f5c:	b9d8      	cbnz	r0, 8003f96 <_svfiprintf_r+0xe6>
 8003f5e:	06d0      	lsls	r0, r2, #27
 8003f60:	bf44      	itt	mi
 8003f62:	2320      	movmi	r3, #32
 8003f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f68:	0711      	lsls	r1, r2, #28
 8003f6a:	bf44      	itt	mi
 8003f6c:	232b      	movmi	r3, #43	; 0x2b
 8003f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f72:	f89a 3000 	ldrb.w	r3, [sl]
 8003f76:	2b2a      	cmp	r3, #42	; 0x2a
 8003f78:	d015      	beq.n	8003fa6 <_svfiprintf_r+0xf6>
 8003f7a:	9a07      	ldr	r2, [sp, #28]
 8003f7c:	4654      	mov	r4, sl
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f04f 0c0a 	mov.w	ip, #10
 8003f84:	4621      	mov	r1, r4
 8003f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f8a:	3b30      	subs	r3, #48	; 0x30
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d94e      	bls.n	800402e <_svfiprintf_r+0x17e>
 8003f90:	b1b0      	cbz	r0, 8003fc0 <_svfiprintf_r+0x110>
 8003f92:	9207      	str	r2, [sp, #28]
 8003f94:	e014      	b.n	8003fc0 <_svfiprintf_r+0x110>
 8003f96:	eba0 0308 	sub.w	r3, r0, r8
 8003f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	9304      	str	r3, [sp, #16]
 8003fa2:	46a2      	mov	sl, r4
 8003fa4:	e7d2      	b.n	8003f4c <_svfiprintf_r+0x9c>
 8003fa6:	9b03      	ldr	r3, [sp, #12]
 8003fa8:	1d19      	adds	r1, r3, #4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	9103      	str	r1, [sp, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfbb      	ittet	lt
 8003fb2:	425b      	neglt	r3, r3
 8003fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fb8:	9307      	strge	r3, [sp, #28]
 8003fba:	9307      	strlt	r3, [sp, #28]
 8003fbc:	bfb8      	it	lt
 8003fbe:	9204      	strlt	r2, [sp, #16]
 8003fc0:	7823      	ldrb	r3, [r4, #0]
 8003fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc4:	d10c      	bne.n	8003fe0 <_svfiprintf_r+0x130>
 8003fc6:	7863      	ldrb	r3, [r4, #1]
 8003fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003fca:	d135      	bne.n	8004038 <_svfiprintf_r+0x188>
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	1d1a      	adds	r2, r3, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	9203      	str	r2, [sp, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bfb8      	it	lt
 8003fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fdc:	3402      	adds	r4, #2
 8003fde:	9305      	str	r3, [sp, #20]
 8003fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040ac <_svfiprintf_r+0x1fc>
 8003fe4:	7821      	ldrb	r1, [r4, #0]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4650      	mov	r0, sl
 8003fea:	f7fc f8f9 	bl	80001e0 <memchr>
 8003fee:	b140      	cbz	r0, 8004002 <_svfiprintf_r+0x152>
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	eba0 000a 	sub.w	r0, r0, sl
 8003ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8003ffa:	9b04      	ldr	r3, [sp, #16]
 8003ffc:	4303      	orrs	r3, r0
 8003ffe:	3401      	adds	r4, #1
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004006:	4826      	ldr	r0, [pc, #152]	; (80040a0 <_svfiprintf_r+0x1f0>)
 8004008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800400c:	2206      	movs	r2, #6
 800400e:	f7fc f8e7 	bl	80001e0 <memchr>
 8004012:	2800      	cmp	r0, #0
 8004014:	d038      	beq.n	8004088 <_svfiprintf_r+0x1d8>
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <_svfiprintf_r+0x1f4>)
 8004018:	bb1b      	cbnz	r3, 8004062 <_svfiprintf_r+0x1b2>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	3307      	adds	r3, #7
 800401e:	f023 0307 	bic.w	r3, r3, #7
 8004022:	3308      	adds	r3, #8
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004028:	4433      	add	r3, r6
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	e767      	b.n	8003efe <_svfiprintf_r+0x4e>
 800402e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004032:	460c      	mov	r4, r1
 8004034:	2001      	movs	r0, #1
 8004036:	e7a5      	b.n	8003f84 <_svfiprintf_r+0xd4>
 8004038:	2300      	movs	r3, #0
 800403a:	3401      	adds	r4, #1
 800403c:	9305      	str	r3, [sp, #20]
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0c0a 	mov.w	ip, #10
 8004044:	4620      	mov	r0, r4
 8004046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800404a:	3a30      	subs	r2, #48	; 0x30
 800404c:	2a09      	cmp	r2, #9
 800404e:	d903      	bls.n	8004058 <_svfiprintf_r+0x1a8>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0c5      	beq.n	8003fe0 <_svfiprintf_r+0x130>
 8004054:	9105      	str	r1, [sp, #20]
 8004056:	e7c3      	b.n	8003fe0 <_svfiprintf_r+0x130>
 8004058:	fb0c 2101 	mla	r1, ip, r1, r2
 800405c:	4604      	mov	r4, r0
 800405e:	2301      	movs	r3, #1
 8004060:	e7f0      	b.n	8004044 <_svfiprintf_r+0x194>
 8004062:	ab03      	add	r3, sp, #12
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	462a      	mov	r2, r5
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <_svfiprintf_r+0x1f8>)
 800406a:	a904      	add	r1, sp, #16
 800406c:	4638      	mov	r0, r7
 800406e:	f3af 8000 	nop.w
 8004072:	1c42      	adds	r2, r0, #1
 8004074:	4606      	mov	r6, r0
 8004076:	d1d6      	bne.n	8004026 <_svfiprintf_r+0x176>
 8004078:	89ab      	ldrh	r3, [r5, #12]
 800407a:	065b      	lsls	r3, r3, #25
 800407c:	f53f af2c 	bmi.w	8003ed8 <_svfiprintf_r+0x28>
 8004080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004082:	b01d      	add	sp, #116	; 0x74
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004088:	ab03      	add	r3, sp, #12
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	462a      	mov	r2, r5
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <_svfiprintf_r+0x1f8>)
 8004090:	a904      	add	r1, sp, #16
 8004092:	4638      	mov	r0, r7
 8004094:	f000 f87a 	bl	800418c <_printf_i>
 8004098:	e7eb      	b.n	8004072 <_svfiprintf_r+0x1c2>
 800409a:	bf00      	nop
 800409c:	0800465c 	.word	0x0800465c
 80040a0:	08004666 	.word	0x08004666
 80040a4:	00000000 	.word	0x00000000
 80040a8:	08003df9 	.word	0x08003df9
 80040ac:	08004662 	.word	0x08004662

080040b0 <_printf_common>:
 80040b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	4616      	mov	r6, r2
 80040b6:	4699      	mov	r9, r3
 80040b8:	688a      	ldr	r2, [r1, #8]
 80040ba:	690b      	ldr	r3, [r1, #16]
 80040bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	bfb8      	it	lt
 80040c4:	4613      	movlt	r3, r2
 80040c6:	6033      	str	r3, [r6, #0]
 80040c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040cc:	4607      	mov	r7, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	b10a      	cbz	r2, 80040d6 <_printf_common+0x26>
 80040d2:	3301      	adds	r3, #1
 80040d4:	6033      	str	r3, [r6, #0]
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	0699      	lsls	r1, r3, #26
 80040da:	bf42      	ittt	mi
 80040dc:	6833      	ldrmi	r3, [r6, #0]
 80040de:	3302      	addmi	r3, #2
 80040e0:	6033      	strmi	r3, [r6, #0]
 80040e2:	6825      	ldr	r5, [r4, #0]
 80040e4:	f015 0506 	ands.w	r5, r5, #6
 80040e8:	d106      	bne.n	80040f8 <_printf_common+0x48>
 80040ea:	f104 0a19 	add.w	sl, r4, #25
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	6832      	ldr	r2, [r6, #0]
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	dc26      	bgt.n	8004146 <_printf_common+0x96>
 80040f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040fc:	1e13      	subs	r3, r2, #0
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	bf18      	it	ne
 8004102:	2301      	movne	r3, #1
 8004104:	0692      	lsls	r2, r2, #26
 8004106:	d42b      	bmi.n	8004160 <_printf_common+0xb0>
 8004108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d01e      	beq.n	8004154 <_printf_common+0xa4>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	68e5      	ldr	r5, [r4, #12]
 800411a:	6832      	ldr	r2, [r6, #0]
 800411c:	f003 0306 	and.w	r3, r3, #6
 8004120:	2b04      	cmp	r3, #4
 8004122:	bf08      	it	eq
 8004124:	1aad      	subeq	r5, r5, r2
 8004126:	68a3      	ldr	r3, [r4, #8]
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	bf0c      	ite	eq
 800412c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004130:	2500      	movne	r5, #0
 8004132:	4293      	cmp	r3, r2
 8004134:	bfc4      	itt	gt
 8004136:	1a9b      	subgt	r3, r3, r2
 8004138:	18ed      	addgt	r5, r5, r3
 800413a:	2600      	movs	r6, #0
 800413c:	341a      	adds	r4, #26
 800413e:	42b5      	cmp	r5, r6
 8004140:	d11a      	bne.n	8004178 <_printf_common+0xc8>
 8004142:	2000      	movs	r0, #0
 8004144:	e008      	b.n	8004158 <_printf_common+0xa8>
 8004146:	2301      	movs	r3, #1
 8004148:	4652      	mov	r2, sl
 800414a:	4649      	mov	r1, r9
 800414c:	4638      	mov	r0, r7
 800414e:	47c0      	blx	r8
 8004150:	3001      	adds	r0, #1
 8004152:	d103      	bne.n	800415c <_printf_common+0xac>
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415c:	3501      	adds	r5, #1
 800415e:	e7c6      	b.n	80040ee <_printf_common+0x3e>
 8004160:	18e1      	adds	r1, r4, r3
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	2030      	movs	r0, #48	; 0x30
 8004166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800416a:	4422      	add	r2, r4
 800416c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004174:	3302      	adds	r3, #2
 8004176:	e7c7      	b.n	8004108 <_printf_common+0x58>
 8004178:	2301      	movs	r3, #1
 800417a:	4622      	mov	r2, r4
 800417c:	4649      	mov	r1, r9
 800417e:	4638      	mov	r0, r7
 8004180:	47c0      	blx	r8
 8004182:	3001      	adds	r0, #1
 8004184:	d0e6      	beq.n	8004154 <_printf_common+0xa4>
 8004186:	3601      	adds	r6, #1
 8004188:	e7d9      	b.n	800413e <_printf_common+0x8e>
	...

0800418c <_printf_i>:
 800418c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	460c      	mov	r4, r1
 8004192:	4691      	mov	r9, r2
 8004194:	7e27      	ldrb	r7, [r4, #24]
 8004196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004198:	2f78      	cmp	r7, #120	; 0x78
 800419a:	4680      	mov	r8, r0
 800419c:	469a      	mov	sl, r3
 800419e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041a2:	d807      	bhi.n	80041b4 <_printf_i+0x28>
 80041a4:	2f62      	cmp	r7, #98	; 0x62
 80041a6:	d80a      	bhi.n	80041be <_printf_i+0x32>
 80041a8:	2f00      	cmp	r7, #0
 80041aa:	f000 80d8 	beq.w	800435e <_printf_i+0x1d2>
 80041ae:	2f58      	cmp	r7, #88	; 0x58
 80041b0:	f000 80a3 	beq.w	80042fa <_printf_i+0x16e>
 80041b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041bc:	e03a      	b.n	8004234 <_printf_i+0xa8>
 80041be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041c2:	2b15      	cmp	r3, #21
 80041c4:	d8f6      	bhi.n	80041b4 <_printf_i+0x28>
 80041c6:	a001      	add	r0, pc, #4	; (adr r0, 80041cc <_printf_i+0x40>)
 80041c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041cc:	08004225 	.word	0x08004225
 80041d0:	08004239 	.word	0x08004239
 80041d4:	080041b5 	.word	0x080041b5
 80041d8:	080041b5 	.word	0x080041b5
 80041dc:	080041b5 	.word	0x080041b5
 80041e0:	080041b5 	.word	0x080041b5
 80041e4:	08004239 	.word	0x08004239
 80041e8:	080041b5 	.word	0x080041b5
 80041ec:	080041b5 	.word	0x080041b5
 80041f0:	080041b5 	.word	0x080041b5
 80041f4:	080041b5 	.word	0x080041b5
 80041f8:	08004345 	.word	0x08004345
 80041fc:	08004269 	.word	0x08004269
 8004200:	08004327 	.word	0x08004327
 8004204:	080041b5 	.word	0x080041b5
 8004208:	080041b5 	.word	0x080041b5
 800420c:	08004367 	.word	0x08004367
 8004210:	080041b5 	.word	0x080041b5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041b5 	.word	0x080041b5
 800421c:	080041b5 	.word	0x080041b5
 8004220:	0800432f 	.word	0x0800432f
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	600a      	str	r2, [r1, #0]
 800422c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004234:	2301      	movs	r3, #1
 8004236:	e0a3      	b.n	8004380 <_printf_i+0x1f4>
 8004238:	6825      	ldr	r5, [r4, #0]
 800423a:	6808      	ldr	r0, [r1, #0]
 800423c:	062e      	lsls	r6, r5, #24
 800423e:	f100 0304 	add.w	r3, r0, #4
 8004242:	d50a      	bpl.n	800425a <_printf_i+0xce>
 8004244:	6805      	ldr	r5, [r0, #0]
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	2d00      	cmp	r5, #0
 800424a:	da03      	bge.n	8004254 <_printf_i+0xc8>
 800424c:	232d      	movs	r3, #45	; 0x2d
 800424e:	426d      	negs	r5, r5
 8004250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004254:	485e      	ldr	r0, [pc, #376]	; (80043d0 <_printf_i+0x244>)
 8004256:	230a      	movs	r3, #10
 8004258:	e019      	b.n	800428e <_printf_i+0x102>
 800425a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800425e:	6805      	ldr	r5, [r0, #0]
 8004260:	600b      	str	r3, [r1, #0]
 8004262:	bf18      	it	ne
 8004264:	b22d      	sxthne	r5, r5
 8004266:	e7ef      	b.n	8004248 <_printf_i+0xbc>
 8004268:	680b      	ldr	r3, [r1, #0]
 800426a:	6825      	ldr	r5, [r4, #0]
 800426c:	1d18      	adds	r0, r3, #4
 800426e:	6008      	str	r0, [r1, #0]
 8004270:	0628      	lsls	r0, r5, #24
 8004272:	d501      	bpl.n	8004278 <_printf_i+0xec>
 8004274:	681d      	ldr	r5, [r3, #0]
 8004276:	e002      	b.n	800427e <_printf_i+0xf2>
 8004278:	0669      	lsls	r1, r5, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0xe8>
 800427c:	881d      	ldrh	r5, [r3, #0]
 800427e:	4854      	ldr	r0, [pc, #336]	; (80043d0 <_printf_i+0x244>)
 8004280:	2f6f      	cmp	r7, #111	; 0x6f
 8004282:	bf0c      	ite	eq
 8004284:	2308      	moveq	r3, #8
 8004286:	230a      	movne	r3, #10
 8004288:	2100      	movs	r1, #0
 800428a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800428e:	6866      	ldr	r6, [r4, #4]
 8004290:	60a6      	str	r6, [r4, #8]
 8004292:	2e00      	cmp	r6, #0
 8004294:	bfa2      	ittt	ge
 8004296:	6821      	ldrge	r1, [r4, #0]
 8004298:	f021 0104 	bicge.w	r1, r1, #4
 800429c:	6021      	strge	r1, [r4, #0]
 800429e:	b90d      	cbnz	r5, 80042a4 <_printf_i+0x118>
 80042a0:	2e00      	cmp	r6, #0
 80042a2:	d04d      	beq.n	8004340 <_printf_i+0x1b4>
 80042a4:	4616      	mov	r6, r2
 80042a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042aa:	fb03 5711 	mls	r7, r3, r1, r5
 80042ae:	5dc7      	ldrb	r7, [r0, r7]
 80042b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042b4:	462f      	mov	r7, r5
 80042b6:	42bb      	cmp	r3, r7
 80042b8:	460d      	mov	r5, r1
 80042ba:	d9f4      	bls.n	80042a6 <_printf_i+0x11a>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10b      	bne.n	80042d8 <_printf_i+0x14c>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	07df      	lsls	r7, r3, #31
 80042c4:	d508      	bpl.n	80042d8 <_printf_i+0x14c>
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	6861      	ldr	r1, [r4, #4]
 80042ca:	4299      	cmp	r1, r3
 80042cc:	bfde      	ittt	le
 80042ce:	2330      	movle	r3, #48	; 0x30
 80042d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042d8:	1b92      	subs	r2, r2, r6
 80042da:	6122      	str	r2, [r4, #16]
 80042dc:	f8cd a000 	str.w	sl, [sp]
 80042e0:	464b      	mov	r3, r9
 80042e2:	aa03      	add	r2, sp, #12
 80042e4:	4621      	mov	r1, r4
 80042e6:	4640      	mov	r0, r8
 80042e8:	f7ff fee2 	bl	80040b0 <_printf_common>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d14c      	bne.n	800438a <_printf_i+0x1fe>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	b004      	add	sp, #16
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	4835      	ldr	r0, [pc, #212]	; (80043d0 <_printf_i+0x244>)
 80042fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	680e      	ldr	r6, [r1, #0]
 8004304:	061f      	lsls	r7, r3, #24
 8004306:	f856 5b04 	ldr.w	r5, [r6], #4
 800430a:	600e      	str	r6, [r1, #0]
 800430c:	d514      	bpl.n	8004338 <_printf_i+0x1ac>
 800430e:	07d9      	lsls	r1, r3, #31
 8004310:	bf44      	itt	mi
 8004312:	f043 0320 	orrmi.w	r3, r3, #32
 8004316:	6023      	strmi	r3, [r4, #0]
 8004318:	b91d      	cbnz	r5, 8004322 <_printf_i+0x196>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	f023 0320 	bic.w	r3, r3, #32
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	2310      	movs	r3, #16
 8004324:	e7b0      	b.n	8004288 <_printf_i+0xfc>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	2378      	movs	r3, #120	; 0x78
 8004330:	4828      	ldr	r0, [pc, #160]	; (80043d4 <_printf_i+0x248>)
 8004332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004336:	e7e3      	b.n	8004300 <_printf_i+0x174>
 8004338:	065e      	lsls	r6, r3, #25
 800433a:	bf48      	it	mi
 800433c:	b2ad      	uxthmi	r5, r5
 800433e:	e7e6      	b.n	800430e <_printf_i+0x182>
 8004340:	4616      	mov	r6, r2
 8004342:	e7bb      	b.n	80042bc <_printf_i+0x130>
 8004344:	680b      	ldr	r3, [r1, #0]
 8004346:	6826      	ldr	r6, [r4, #0]
 8004348:	6960      	ldr	r0, [r4, #20]
 800434a:	1d1d      	adds	r5, r3, #4
 800434c:	600d      	str	r5, [r1, #0]
 800434e:	0635      	lsls	r5, r6, #24
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	d501      	bpl.n	8004358 <_printf_i+0x1cc>
 8004354:	6018      	str	r0, [r3, #0]
 8004356:	e002      	b.n	800435e <_printf_i+0x1d2>
 8004358:	0671      	lsls	r1, r6, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0x1c8>
 800435c:	8018      	strh	r0, [r3, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	4616      	mov	r6, r2
 8004364:	e7ba      	b.n	80042dc <_printf_i+0x150>
 8004366:	680b      	ldr	r3, [r1, #0]
 8004368:	1d1a      	adds	r2, r3, #4
 800436a:	600a      	str	r2, [r1, #0]
 800436c:	681e      	ldr	r6, [r3, #0]
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	2100      	movs	r1, #0
 8004372:	4630      	mov	r0, r6
 8004374:	f7fb ff34 	bl	80001e0 <memchr>
 8004378:	b108      	cbz	r0, 800437e <_printf_i+0x1f2>
 800437a:	1b80      	subs	r0, r0, r6
 800437c:	6060      	str	r0, [r4, #4]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	2300      	movs	r3, #0
 8004384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004388:	e7a8      	b.n	80042dc <_printf_i+0x150>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d0ab      	beq.n	80042f0 <_printf_i+0x164>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	079b      	lsls	r3, r3, #30
 800439c:	d413      	bmi.n	80043c6 <_printf_i+0x23a>
 800439e:	68e0      	ldr	r0, [r4, #12]
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	4298      	cmp	r0, r3
 80043a4:	bfb8      	it	lt
 80043a6:	4618      	movlt	r0, r3
 80043a8:	e7a4      	b.n	80042f4 <_printf_i+0x168>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4632      	mov	r2, r6
 80043ae:	4649      	mov	r1, r9
 80043b0:	4640      	mov	r0, r8
 80043b2:	47d0      	blx	sl
 80043b4:	3001      	adds	r0, #1
 80043b6:	d09b      	beq.n	80042f0 <_printf_i+0x164>
 80043b8:	3501      	adds	r5, #1
 80043ba:	68e3      	ldr	r3, [r4, #12]
 80043bc:	9903      	ldr	r1, [sp, #12]
 80043be:	1a5b      	subs	r3, r3, r1
 80043c0:	42ab      	cmp	r3, r5
 80043c2:	dcf2      	bgt.n	80043aa <_printf_i+0x21e>
 80043c4:	e7eb      	b.n	800439e <_printf_i+0x212>
 80043c6:	2500      	movs	r5, #0
 80043c8:	f104 0619 	add.w	r6, r4, #25
 80043cc:	e7f5      	b.n	80043ba <_printf_i+0x22e>
 80043ce:	bf00      	nop
 80043d0:	0800466d 	.word	0x0800466d
 80043d4:	0800467e 	.word	0x0800467e

080043d8 <memcpy>:
 80043d8:	440a      	add	r2, r1
 80043da:	4291      	cmp	r1, r2
 80043dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e0:	d100      	bne.n	80043e4 <memcpy+0xc>
 80043e2:	4770      	bx	lr
 80043e4:	b510      	push	{r4, lr}
 80043e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ee:	4291      	cmp	r1, r2
 80043f0:	d1f9      	bne.n	80043e6 <memcpy+0xe>
 80043f2:	bd10      	pop	{r4, pc}

080043f4 <memmove>:
 80043f4:	4288      	cmp	r0, r1
 80043f6:	b510      	push	{r4, lr}
 80043f8:	eb01 0402 	add.w	r4, r1, r2
 80043fc:	d902      	bls.n	8004404 <memmove+0x10>
 80043fe:	4284      	cmp	r4, r0
 8004400:	4623      	mov	r3, r4
 8004402:	d807      	bhi.n	8004414 <memmove+0x20>
 8004404:	1e43      	subs	r3, r0, #1
 8004406:	42a1      	cmp	r1, r4
 8004408:	d008      	beq.n	800441c <memmove+0x28>
 800440a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004412:	e7f8      	b.n	8004406 <memmove+0x12>
 8004414:	4402      	add	r2, r0
 8004416:	4601      	mov	r1, r0
 8004418:	428a      	cmp	r2, r1
 800441a:	d100      	bne.n	800441e <memmove+0x2a>
 800441c:	bd10      	pop	{r4, pc}
 800441e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004426:	e7f7      	b.n	8004418 <memmove+0x24>

08004428 <_free_r>:
 8004428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800442a:	2900      	cmp	r1, #0
 800442c:	d048      	beq.n	80044c0 <_free_r+0x98>
 800442e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f1a1 0404 	sub.w	r4, r1, #4
 800443a:	bfb8      	it	lt
 800443c:	18e4      	addlt	r4, r4, r3
 800443e:	f000 f8d3 	bl	80045e8 <__malloc_lock>
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <_free_r+0x9c>)
 8004444:	9801      	ldr	r0, [sp, #4]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	4615      	mov	r5, r2
 800444a:	b933      	cbnz	r3, 800445a <_free_r+0x32>
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	6014      	str	r4, [r2, #0]
 8004450:	b003      	add	sp, #12
 8004452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004456:	f000 b8cd 	b.w	80045f4 <__malloc_unlock>
 800445a:	42a3      	cmp	r3, r4
 800445c:	d90b      	bls.n	8004476 <_free_r+0x4e>
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	1862      	adds	r2, r4, r1
 8004462:	4293      	cmp	r3, r2
 8004464:	bf04      	itt	eq
 8004466:	681a      	ldreq	r2, [r3, #0]
 8004468:	685b      	ldreq	r3, [r3, #4]
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	bf04      	itt	eq
 800446e:	1852      	addeq	r2, r2, r1
 8004470:	6022      	streq	r2, [r4, #0]
 8004472:	602c      	str	r4, [r5, #0]
 8004474:	e7ec      	b.n	8004450 <_free_r+0x28>
 8004476:	461a      	mov	r2, r3
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b10b      	cbz	r3, 8004480 <_free_r+0x58>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d9fa      	bls.n	8004476 <_free_r+0x4e>
 8004480:	6811      	ldr	r1, [r2, #0]
 8004482:	1855      	adds	r5, r2, r1
 8004484:	42a5      	cmp	r5, r4
 8004486:	d10b      	bne.n	80044a0 <_free_r+0x78>
 8004488:	6824      	ldr	r4, [r4, #0]
 800448a:	4421      	add	r1, r4
 800448c:	1854      	adds	r4, r2, r1
 800448e:	42a3      	cmp	r3, r4
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	d1dd      	bne.n	8004450 <_free_r+0x28>
 8004494:	681c      	ldr	r4, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	6053      	str	r3, [r2, #4]
 800449a:	4421      	add	r1, r4
 800449c:	6011      	str	r1, [r2, #0]
 800449e:	e7d7      	b.n	8004450 <_free_r+0x28>
 80044a0:	d902      	bls.n	80044a8 <_free_r+0x80>
 80044a2:	230c      	movs	r3, #12
 80044a4:	6003      	str	r3, [r0, #0]
 80044a6:	e7d3      	b.n	8004450 <_free_r+0x28>
 80044a8:	6825      	ldr	r5, [r4, #0]
 80044aa:	1961      	adds	r1, r4, r5
 80044ac:	428b      	cmp	r3, r1
 80044ae:	bf04      	itt	eq
 80044b0:	6819      	ldreq	r1, [r3, #0]
 80044b2:	685b      	ldreq	r3, [r3, #4]
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	bf04      	itt	eq
 80044b8:	1949      	addeq	r1, r1, r5
 80044ba:	6021      	streq	r1, [r4, #0]
 80044bc:	6054      	str	r4, [r2, #4]
 80044be:	e7c7      	b.n	8004450 <_free_r+0x28>
 80044c0:	b003      	add	sp, #12
 80044c2:	bd30      	pop	{r4, r5, pc}
 80044c4:	200001b8 	.word	0x200001b8

080044c8 <_malloc_r>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	1ccd      	adds	r5, r1, #3
 80044cc:	f025 0503 	bic.w	r5, r5, #3
 80044d0:	3508      	adds	r5, #8
 80044d2:	2d0c      	cmp	r5, #12
 80044d4:	bf38      	it	cc
 80044d6:	250c      	movcc	r5, #12
 80044d8:	2d00      	cmp	r5, #0
 80044da:	4606      	mov	r6, r0
 80044dc:	db01      	blt.n	80044e2 <_malloc_r+0x1a>
 80044de:	42a9      	cmp	r1, r5
 80044e0:	d903      	bls.n	80044ea <_malloc_r+0x22>
 80044e2:	230c      	movs	r3, #12
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	2000      	movs	r0, #0
 80044e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ea:	f000 f87d 	bl	80045e8 <__malloc_lock>
 80044ee:	4921      	ldr	r1, [pc, #132]	; (8004574 <_malloc_r+0xac>)
 80044f0:	680a      	ldr	r2, [r1, #0]
 80044f2:	4614      	mov	r4, r2
 80044f4:	b99c      	cbnz	r4, 800451e <_malloc_r+0x56>
 80044f6:	4f20      	ldr	r7, [pc, #128]	; (8004578 <_malloc_r+0xb0>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b923      	cbnz	r3, 8004506 <_malloc_r+0x3e>
 80044fc:	4621      	mov	r1, r4
 80044fe:	4630      	mov	r0, r6
 8004500:	f000 f862 	bl	80045c8 <_sbrk_r>
 8004504:	6038      	str	r0, [r7, #0]
 8004506:	4629      	mov	r1, r5
 8004508:	4630      	mov	r0, r6
 800450a:	f000 f85d 	bl	80045c8 <_sbrk_r>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d123      	bne.n	800455a <_malloc_r+0x92>
 8004512:	230c      	movs	r3, #12
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	4630      	mov	r0, r6
 8004518:	f000 f86c 	bl	80045f4 <__malloc_unlock>
 800451c:	e7e3      	b.n	80044e6 <_malloc_r+0x1e>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	1b5b      	subs	r3, r3, r5
 8004522:	d417      	bmi.n	8004554 <_malloc_r+0x8c>
 8004524:	2b0b      	cmp	r3, #11
 8004526:	d903      	bls.n	8004530 <_malloc_r+0x68>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	441c      	add	r4, r3
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	e004      	b.n	800453a <_malloc_r+0x72>
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	42a2      	cmp	r2, r4
 8004534:	bf0c      	ite	eq
 8004536:	600b      	streq	r3, [r1, #0]
 8004538:	6053      	strne	r3, [r2, #4]
 800453a:	4630      	mov	r0, r6
 800453c:	f000 f85a 	bl	80045f4 <__malloc_unlock>
 8004540:	f104 000b 	add.w	r0, r4, #11
 8004544:	1d23      	adds	r3, r4, #4
 8004546:	f020 0007 	bic.w	r0, r0, #7
 800454a:	1ac2      	subs	r2, r0, r3
 800454c:	d0cc      	beq.n	80044e8 <_malloc_r+0x20>
 800454e:	1a1b      	subs	r3, r3, r0
 8004550:	50a3      	str	r3, [r4, r2]
 8004552:	e7c9      	b.n	80044e8 <_malloc_r+0x20>
 8004554:	4622      	mov	r2, r4
 8004556:	6864      	ldr	r4, [r4, #4]
 8004558:	e7cc      	b.n	80044f4 <_malloc_r+0x2c>
 800455a:	1cc4      	adds	r4, r0, #3
 800455c:	f024 0403 	bic.w	r4, r4, #3
 8004560:	42a0      	cmp	r0, r4
 8004562:	d0e3      	beq.n	800452c <_malloc_r+0x64>
 8004564:	1a21      	subs	r1, r4, r0
 8004566:	4630      	mov	r0, r6
 8004568:	f000 f82e 	bl	80045c8 <_sbrk_r>
 800456c:	3001      	adds	r0, #1
 800456e:	d1dd      	bne.n	800452c <_malloc_r+0x64>
 8004570:	e7cf      	b.n	8004512 <_malloc_r+0x4a>
 8004572:	bf00      	nop
 8004574:	200001b8 	.word	0x200001b8
 8004578:	200001bc 	.word	0x200001bc

0800457c <_realloc_r>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	4607      	mov	r7, r0
 8004580:	4614      	mov	r4, r2
 8004582:	460e      	mov	r6, r1
 8004584:	b921      	cbnz	r1, 8004590 <_realloc_r+0x14>
 8004586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800458a:	4611      	mov	r1, r2
 800458c:	f7ff bf9c 	b.w	80044c8 <_malloc_r>
 8004590:	b922      	cbnz	r2, 800459c <_realloc_r+0x20>
 8004592:	f7ff ff49 	bl	8004428 <_free_r>
 8004596:	4625      	mov	r5, r4
 8004598:	4628      	mov	r0, r5
 800459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800459c:	f000 f830 	bl	8004600 <_malloc_usable_size_r>
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d20f      	bcs.n	80045c4 <_realloc_r+0x48>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4638      	mov	r0, r7
 80045a8:	f7ff ff8e 	bl	80044c8 <_malloc_r>
 80045ac:	4605      	mov	r5, r0
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d0f2      	beq.n	8004598 <_realloc_r+0x1c>
 80045b2:	4631      	mov	r1, r6
 80045b4:	4622      	mov	r2, r4
 80045b6:	f7ff ff0f 	bl	80043d8 <memcpy>
 80045ba:	4631      	mov	r1, r6
 80045bc:	4638      	mov	r0, r7
 80045be:	f7ff ff33 	bl	8004428 <_free_r>
 80045c2:	e7e9      	b.n	8004598 <_realloc_r+0x1c>
 80045c4:	4635      	mov	r5, r6
 80045c6:	e7e7      	b.n	8004598 <_realloc_r+0x1c>

080045c8 <_sbrk_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d06      	ldr	r5, [pc, #24]	; (80045e4 <_sbrk_r+0x1c>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	f7fc fbc2 	bl	8000d5c <_sbrk>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_sbrk_r+0x1a>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_sbrk_r+0x1a>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20000760 	.word	0x20000760

080045e8 <__malloc_lock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <__malloc_lock+0x8>)
 80045ea:	f000 b811 	b.w	8004610 <__retarget_lock_acquire_recursive>
 80045ee:	bf00      	nop
 80045f0:	20000768 	.word	0x20000768

080045f4 <__malloc_unlock>:
 80045f4:	4801      	ldr	r0, [pc, #4]	; (80045fc <__malloc_unlock+0x8>)
 80045f6:	f000 b80c 	b.w	8004612 <__retarget_lock_release_recursive>
 80045fa:	bf00      	nop
 80045fc:	20000768 	.word	0x20000768

08004600 <_malloc_usable_size_r>:
 8004600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004604:	1f18      	subs	r0, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	bfbc      	itt	lt
 800460a:	580b      	ldrlt	r3, [r1, r0]
 800460c:	18c0      	addlt	r0, r0, r3
 800460e:	4770      	bx	lr

08004610 <__retarget_lock_acquire_recursive>:
 8004610:	4770      	bx	lr

08004612 <__retarget_lock_release_recursive>:
 8004612:	4770      	bx	lr

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
