
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f48  08004f48  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000006fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000784  20000784  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125ed  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002904  00000000  00000000  000326a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  00034fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af8  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229bd  00000000  00000000  000366a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fff8  00000000  00000000  00059065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc52  00000000  00000000  0006905d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134caf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000345c  00000000  00000000  00134d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dbc 	.word	0x08004dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004dbc 	.word	0x08004dbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b96e 	b.w	80008ec <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468c      	mov	ip, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8083 	bne.w	800073e <__udivmoddi4+0x116>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d947      	bls.n	80006ce <__udivmoddi4+0xa6>
 800063e:	fab2 f282 	clz	r2, r2
 8000642:	b142      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000644:	f1c2 0020 	rsb	r0, r2, #32
 8000648:	fa24 f000 	lsr.w	r0, r4, r0
 800064c:	4091      	lsls	r1, r2
 800064e:	4097      	lsls	r7, r2
 8000650:	ea40 0c01 	orr.w	ip, r0, r1
 8000654:	4094      	lsls	r4, r2
 8000656:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800065a:	0c23      	lsrs	r3, r4, #16
 800065c:	fbbc f6f8 	udiv	r6, ip, r8
 8000660:	fa1f fe87 	uxth.w	lr, r7
 8000664:	fb08 c116 	mls	r1, r8, r6, ip
 8000668:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066c:	fb06 f10e 	mul.w	r1, r6, lr
 8000670:	4299      	cmp	r1, r3
 8000672:	d909      	bls.n	8000688 <__udivmoddi4+0x60>
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295
 800067a:	f080 8119 	bcs.w	80008b0 <__udivmoddi4+0x288>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 8116 	bls.w	80008b0 <__udivmoddi4+0x288>
 8000684:	3e02      	subs	r6, #2
 8000686:	443b      	add	r3, r7
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 fe0e 	mul.w	lr, r0, lr
 800069c:	45a6      	cmp	lr, r4
 800069e:	d909      	bls.n	80006b4 <__udivmoddi4+0x8c>
 80006a0:	193c      	adds	r4, r7, r4
 80006a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a6:	f080 8105 	bcs.w	80008b4 <__udivmoddi4+0x28c>
 80006aa:	45a6      	cmp	lr, r4
 80006ac:	f240 8102 	bls.w	80008b4 <__udivmoddi4+0x28c>
 80006b0:	3802      	subs	r0, #2
 80006b2:	443c      	add	r4, r7
 80006b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b8:	eba4 040e 	sub.w	r4, r4, lr
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa0>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	b902      	cbnz	r2, 80006d2 <__udivmoddi4+0xaa>
 80006d0:	deff      	udf	#255	; 0xff
 80006d2:	fab2 f282 	clz	r2, r2
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d150      	bne.n	800077c <__udivmoddi4+0x154>
 80006da:	1bcb      	subs	r3, r1, r7
 80006dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006e0:	fa1f f887 	uxth.w	r8, r7
 80006e4:	2601      	movs	r6, #1
 80006e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80006ea:	0c21      	lsrs	r1, r4, #16
 80006ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80006f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f4:	fb08 f30c 	mul.w	r3, r8, ip
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d907      	bls.n	800070c <__udivmoddi4+0xe4>
 80006fc:	1879      	adds	r1, r7, r1
 80006fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000702:	d202      	bcs.n	800070a <__udivmoddi4+0xe2>
 8000704:	428b      	cmp	r3, r1
 8000706:	f200 80e9 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 800070a:	4684      	mov	ip, r0
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	b2a3      	uxth	r3, r4
 8000710:	fbb1 f0fe 	udiv	r0, r1, lr
 8000714:	fb0e 1110 	mls	r1, lr, r0, r1
 8000718:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800071c:	fb08 f800 	mul.w	r8, r8, r0
 8000720:	45a0      	cmp	r8, r4
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x10c>
 8000724:	193c      	adds	r4, r7, r4
 8000726:	f100 33ff 	add.w	r3, r0, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x10a>
 800072c:	45a0      	cmp	r8, r4
 800072e:	f200 80d9 	bhi.w	80008e4 <__udivmoddi4+0x2bc>
 8000732:	4618      	mov	r0, r3
 8000734:	eba4 0408 	sub.w	r4, r4, r8
 8000738:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800073c:	e7bf      	b.n	80006be <__udivmoddi4+0x96>
 800073e:	428b      	cmp	r3, r1
 8000740:	d909      	bls.n	8000756 <__udivmoddi4+0x12e>
 8000742:	2d00      	cmp	r5, #0
 8000744:	f000 80b1 	beq.w	80008aa <__udivmoddi4+0x282>
 8000748:	2600      	movs	r6, #0
 800074a:	e9c5 0100 	strd	r0, r1, [r5]
 800074e:	4630      	mov	r0, r6
 8000750:	4631      	mov	r1, r6
 8000752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000756:	fab3 f683 	clz	r6, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d14a      	bne.n	80007f4 <__udivmoddi4+0x1cc>
 800075e:	428b      	cmp	r3, r1
 8000760:	d302      	bcc.n	8000768 <__udivmoddi4+0x140>
 8000762:	4282      	cmp	r2, r0
 8000764:	f200 80b8 	bhi.w	80008d8 <__udivmoddi4+0x2b0>
 8000768:	1a84      	subs	r4, r0, r2
 800076a:	eb61 0103 	sbc.w	r1, r1, r3
 800076e:	2001      	movs	r0, #1
 8000770:	468c      	mov	ip, r1
 8000772:	2d00      	cmp	r5, #0
 8000774:	d0a8      	beq.n	80006c8 <__udivmoddi4+0xa0>
 8000776:	e9c5 4c00 	strd	r4, ip, [r5]
 800077a:	e7a5      	b.n	80006c8 <__udivmoddi4+0xa0>
 800077c:	f1c2 0320 	rsb	r3, r2, #32
 8000780:	fa20 f603 	lsr.w	r6, r0, r3
 8000784:	4097      	lsls	r7, r2
 8000786:	fa01 f002 	lsl.w	r0, r1, r2
 800078a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800078e:	40d9      	lsrs	r1, r3
 8000790:	4330      	orrs	r0, r6
 8000792:	0c03      	lsrs	r3, r0, #16
 8000794:	fbb1 f6fe 	udiv	r6, r1, lr
 8000798:	fa1f f887 	uxth.w	r8, r7
 800079c:	fb0e 1116 	mls	r1, lr, r6, r1
 80007a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007a4:	fb06 f108 	mul.w	r1, r6, r8
 80007a8:	4299      	cmp	r1, r3
 80007aa:	fa04 f402 	lsl.w	r4, r4, r2
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x19c>
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007b6:	f080 808d 	bcs.w	80008d4 <__udivmoddi4+0x2ac>
 80007ba:	4299      	cmp	r1, r3
 80007bc:	f240 808a 	bls.w	80008d4 <__udivmoddi4+0x2ac>
 80007c0:	3e02      	subs	r6, #2
 80007c2:	443b      	add	r3, r7
 80007c4:	1a5b      	subs	r3, r3, r1
 80007c6:	b281      	uxth	r1, r0
 80007c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb00 f308 	mul.w	r3, r0, r8
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0x1c4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f100 3cff 	add.w	ip, r0, #4294967295
 80007e2:	d273      	bcs.n	80008cc <__udivmoddi4+0x2a4>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d971      	bls.n	80008cc <__udivmoddi4+0x2a4>
 80007e8:	3802      	subs	r0, #2
 80007ea:	4439      	add	r1, r7
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80007f2:	e778      	b.n	80006e6 <__udivmoddi4+0xbe>
 80007f4:	f1c6 0c20 	rsb	ip, r6, #32
 80007f8:	fa03 f406 	lsl.w	r4, r3, r6
 80007fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000800:	431c      	orrs	r4, r3
 8000802:	fa20 f70c 	lsr.w	r7, r0, ip
 8000806:	fa01 f306 	lsl.w	r3, r1, r6
 800080a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800080e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000812:	431f      	orrs	r7, r3
 8000814:	0c3b      	lsrs	r3, r7, #16
 8000816:	fbb1 f9fe 	udiv	r9, r1, lr
 800081a:	fa1f f884 	uxth.w	r8, r4
 800081e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000822:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000826:	fb09 fa08 	mul.w	sl, r9, r8
 800082a:	458a      	cmp	sl, r1
 800082c:	fa02 f206 	lsl.w	r2, r2, r6
 8000830:	fa00 f306 	lsl.w	r3, r0, r6
 8000834:	d908      	bls.n	8000848 <__udivmoddi4+0x220>
 8000836:	1861      	adds	r1, r4, r1
 8000838:	f109 30ff 	add.w	r0, r9, #4294967295
 800083c:	d248      	bcs.n	80008d0 <__udivmoddi4+0x2a8>
 800083e:	458a      	cmp	sl, r1
 8000840:	d946      	bls.n	80008d0 <__udivmoddi4+0x2a8>
 8000842:	f1a9 0902 	sub.w	r9, r9, #2
 8000846:	4421      	add	r1, r4
 8000848:	eba1 010a 	sub.w	r1, r1, sl
 800084c:	b2bf      	uxth	r7, r7
 800084e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000852:	fb0e 1110 	mls	r1, lr, r0, r1
 8000856:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800085a:	fb00 f808 	mul.w	r8, r0, r8
 800085e:	45b8      	cmp	r8, r7
 8000860:	d907      	bls.n	8000872 <__udivmoddi4+0x24a>
 8000862:	19e7      	adds	r7, r4, r7
 8000864:	f100 31ff 	add.w	r1, r0, #4294967295
 8000868:	d22e      	bcs.n	80008c8 <__udivmoddi4+0x2a0>
 800086a:	45b8      	cmp	r8, r7
 800086c:	d92c      	bls.n	80008c8 <__udivmoddi4+0x2a0>
 800086e:	3802      	subs	r0, #2
 8000870:	4427      	add	r7, r4
 8000872:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000876:	eba7 0708 	sub.w	r7, r7, r8
 800087a:	fba0 8902 	umull	r8, r9, r0, r2
 800087e:	454f      	cmp	r7, r9
 8000880:	46c6      	mov	lr, r8
 8000882:	4649      	mov	r1, r9
 8000884:	d31a      	bcc.n	80008bc <__udivmoddi4+0x294>
 8000886:	d017      	beq.n	80008b8 <__udivmoddi4+0x290>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x27a>
 800088a:	ebb3 020e 	subs.w	r2, r3, lr
 800088e:	eb67 0701 	sbc.w	r7, r7, r1
 8000892:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000896:	40f2      	lsrs	r2, r6
 8000898:	ea4c 0202 	orr.w	r2, ip, r2
 800089c:	40f7      	lsrs	r7, r6
 800089e:	e9c5 2700 	strd	r2, r7, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e70b      	b.n	80006c8 <__udivmoddi4+0xa0>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e9      	b.n	8000688 <__udivmoddi4+0x60>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6fd      	b.n	80006b4 <__udivmoddi4+0x8c>
 80008b8:	4543      	cmp	r3, r8
 80008ba:	d2e5      	bcs.n	8000888 <__udivmoddi4+0x260>
 80008bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80008c0:	eb69 0104 	sbc.w	r1, r9, r4
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0x260>
 80008c8:	4608      	mov	r0, r1
 80008ca:	e7d2      	b.n	8000872 <__udivmoddi4+0x24a>
 80008cc:	4660      	mov	r0, ip
 80008ce:	e78d      	b.n	80007ec <__udivmoddi4+0x1c4>
 80008d0:	4681      	mov	r9, r0
 80008d2:	e7b9      	b.n	8000848 <__udivmoddi4+0x220>
 80008d4:	4666      	mov	r6, ip
 80008d6:	e775      	b.n	80007c4 <__udivmoddi4+0x19c>
 80008d8:	4630      	mov	r0, r6
 80008da:	e74a      	b.n	8000772 <__udivmoddi4+0x14a>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	4439      	add	r1, r7
 80008e2:	e713      	b.n	800070c <__udivmoddi4+0xe4>
 80008e4:	3802      	subs	r0, #2
 80008e6:	443c      	add	r4, r7
 80008e8:	e724      	b.n	8000734 <__udivmoddi4+0x10c>
 80008ea:	bf00      	nop

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <BME_read24>:
 *      Author: bobox
 */

#include "bme.h"

uint32_t BME_read24(SPI_HandleTypeDef* spi, uint8_t addr){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[3];
    addr = (uint8_t)(addr | 0x80);
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000902:	b2db      	uxtb	r3, r3
 8000904:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <BME_read24+0x5c>)
 800090c:	f000 ffb4 	bl	8001878 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 8000910:	1cf9      	adds	r1, r7, #3
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	2201      	movs	r2, #1
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f001 fffc 	bl	8002914 <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 3, 100);
 800091c:	f107 010c 	add.w	r1, r7, #12
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	2203      	movs	r2, #3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f002 f931 	bl	8002b8c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <BME_read24+0x5c>)
 8000930:	f000 ffa2 	bl	8001878 <HAL_GPIO_WritePin>
    return (uint32_t)(buf[0]) << 16 | (uint32_t)(buf[1]) << 8 | (uint32_t)(buf[2]);
 8000934:	7b3b      	ldrb	r3, [r7, #12]
 8000936:	041a      	lsls	r2, r3, #16
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	4313      	orrs	r3, r2
 800093e:	7bba      	ldrb	r2, [r7, #14]
 8000940:	4313      	orrs	r3, r2
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020800 	.word	0x40020800

08000950 <BME_readTemperature>:

float BME_readTemperature(SPI_HandleTypeDef* spi) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = BME_read24(spi, BME280_REGISTER_TEMPDATA);
 8000958:	21fa      	movs	r1, #250	; 0xfa
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffc8 	bl	80008f0 <BME_read24>
 8000960:	4603      	mov	r3, r0
 8000962:	617b      	str	r3, [r7, #20]
  if (adc_T == 0x800000) // value in case temp measurement was disabled
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800096a:	d102      	bne.n	8000972 <BME_readTemperature+0x22>
    return -1;
 800096c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000970:	e052      	b.n	8000a18 <BME_readTemperature+0xc8>
  adc_T >>= 4;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	111b      	asrs	r3, r3, #4
 8000976:	617b      	str	r3, [r7, #20]

  var1 = (int32_t)((adc_T / 8) - ((int32_t)_bme280_calib.dig_T1 * 2));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da00      	bge.n	8000980 <BME_readTemperature+0x30>
 800097e:	3307      	adds	r3, #7
 8000980:	10db      	asrs	r3, r3, #3
 8000982:	461a      	mov	r2, r3
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <BME_readTemperature+0xd8>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	613b      	str	r3, [r7, #16]
  var1 = (var1 * ((int32_t)_bme280_calib.dig_T2)) / 2048;
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <BME_readTemperature+0xd8>)
 8000990:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000994:	461a      	mov	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	fb03 f302 	mul.w	r3, r3, r2
 800099c:	2b00      	cmp	r3, #0
 800099e:	da01      	bge.n	80009a4 <BME_readTemperature+0x54>
 80009a0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80009a4:	12db      	asrs	r3, r3, #11
 80009a6:	613b      	str	r3, [r7, #16]
  var2 = (int32_t)((adc_T / 16) - ((int32_t)_bme280_calib.dig_T1));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da00      	bge.n	80009b0 <BME_readTemperature+0x60>
 80009ae:	330f      	adds	r3, #15
 80009b0:	111b      	asrs	r3, r3, #4
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <BME_readTemperature+0xd8>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	60fb      	str	r3, [r7, #12]
  var2 = (((var2 * var2) / 4096) * ((int32_t)_bme280_calib.dig_T3)) / 16384;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	fb03 f303 	mul.w	r3, r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da01      	bge.n	80009ca <BME_readTemperature+0x7a>
 80009c6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009ca:	131b      	asrs	r3, r3, #12
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <BME_readTemperature+0xd8>)
 80009d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009d4:	fb03 f302 	mul.w	r3, r3, r2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	da02      	bge.n	80009e2 <BME_readTemperature+0x92>
 80009dc:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80009e0:	333f      	adds	r3, #63	; 0x3f
 80009e2:	139b      	asrs	r3, r3, #14
 80009e4:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <BME_readTemperature+0xdc>)
 80009ee:	6013      	str	r3, [r2, #0]

  int32_t T = (t_fine * 5 + 128) / 256;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <BME_readTemperature+0xdc>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	3380      	adds	r3, #128	; 0x80
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da00      	bge.n	8000a02 <BME_readTemperature+0xb2>
 8000a00:	33ff      	adds	r3, #255	; 0xff
 8000a02:	121b      	asrs	r3, r3, #8
 8000a04:	60bb      	str	r3, [r7, #8]

  return (float)T / 100;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a10:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a30 <BME_readTemperature+0xe0>
 8000a14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a18:	eef0 7a47 	vmov.f32	s15, s14
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001c4 	.word	0x200001c4
 8000a2c:	200001e8 	.word	0x200001e8
 8000a30:	42c80000 	.word	0x42c80000

08000a34 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000a34:	b40f      	push	{r0, r1, r2, r3}
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <myprintf+0x44>)
 8000a4c:	f003 fd9a 	bl	8004584 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <myprintf+0x44>)
 8000a52:	f7ff fbbd 	bl	80001d0 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	4905      	ldr	r1, [pc, #20]	; (8000a78 <myprintf+0x44>)
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <myprintf+0x48>)
 8000a66:	f002 fcc2 	bl	80033ee <HAL_UART_Transmit>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a74:	b004      	add	sp, #16
 8000a76:	4770      	bx	lr
 8000a78:	200000a4 	.word	0x200000a4
 8000a7c:	200002bc 	.word	0x200002bc

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 fbdf 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f823 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f979 	bl	8000d84 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000a92:	f002 ff75 	bl	8003980 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000a96:	f000 f94b 	bl	8000d30 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000a9a:	f000 f913 	bl	8000cc4 <MX_SPI3_Init>
  MX_RTC_Init();
 8000a9e:	f000 f879 	bl	8000b94 <MX_RTC_Init>
  MX_SPI2_Init();
 8000aa2:	f000 f8d7 	bl	8000c54 <MX_SPI2_Init>
    // HALL_read(&hspi2, &buf[0]);
    // myprintf("%x %x %x %x | ", buf[0], buf[1], buf[2], buf[3]);
    // HAL_Delay(500);

    float temp;
    temp = BME_readTemperature(&hspi3);
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <main+0x4c>)
 8000aa8:	f7ff ff52 	bl	8000950 <BME_readTemperature>
 8000aac:	ed87 0a01 	vstr	s0, [r7, #4]
    myprintf("%f   ", temp);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fd49 	bl	8000548 <__aeabi_f2d>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <main+0x50>)
 8000abc:	f7ff ffba 	bl	8000a34 <myprintf>
    HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac4:	f000 fc32 	bl	800132c <HAL_Delay>
  {
 8000ac8:	e7ed      	b.n	8000aa6 <main+0x26>
 8000aca:	bf00      	nop
 8000acc:	20000244 	.word	0x20000244
 8000ad0:	08004eec 	.word	0x08004eec

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2230      	movs	r2, #48	; 0x30
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fd1a 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <SystemClock_Config+0xb8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <SystemClock_Config+0xbc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemClock_Config+0xbc>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <SystemClock_Config+0xbc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b30:	230a      	movs	r3, #10
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 feaf 	bl	80018ac <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b54:	f000 f9bc 	bl	8000ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 f912 	bl	8001d9c <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b7e:	f000 f9a7 	bl	8000ed0 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <MX_RTC_Init+0xbc>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bba:	227f      	movs	r2, #127	; 0x7f
 8000bbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bd6:	481d      	ldr	r0, [pc, #116]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000bd8:	f001 fb92 	bl	8002300 <HAL_RTC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f975 	bl	8000ed0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000c02:	f001 fc0e 	bl	8002422 <HAL_RTC_SetTime>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 f960 	bl	8000ed0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c10:	2301      	movs	r3, #1
 8000c12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c14:	2301      	movs	r3, #1
 8000c16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000c28:	f001 fcb8 	bl	800259c <HAL_RTC_SetDate>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c32:	f000 f94d 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register 
 8000c36:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_RTC_Init+0xb8>)
 8000c3e:	f001 fdc6 	bl	80027ce <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000029c 	.word	0x2000029c
 8000c50:	40002800 	.word	0x40002800

08000c54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <MX_SPI2_Init+0x6c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c6c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c8a:	2238      	movs	r2, #56	; 0x38
 8000c8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000ca2:	220a      	movs	r2, #10
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000ca8:	f001 fdab 	bl	8002802 <HAL_SPI_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000cb2:	f000 f90d 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001ec 	.word	0x200001ec
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <MX_SPI3_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cf8:	2238      	movs	r2, #56	; 0x38
 8000cfa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000d10:	220a      	movs	r2, #10
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_SPI3_Init+0x64>)
 8000d16:	f001 fd74 	bl	8002802 <HAL_SPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d20:	f000 f8d6 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000244 	.word	0x20000244
 8000d2c:	40003c00 	.word	0x40003c00

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_USART2_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d68:	f002 faf4 	bl	8003354 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 f8ad 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200002bc 	.word	0x200002bc
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a47      	ldr	r2, [pc, #284]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a40      	ldr	r2, [pc, #256]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_GPIO_Init+0x13c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <MX_GPIO_Init+0x140>)
 8000e2e:	f000 fd23 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BME_CS_Pin|HALL_CS_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0x144>)
 8000e3a:	f000 fd1d 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2102      	movs	r1, #2
 8000e42:	4822      	ldr	r0, [pc, #136]	; (8000ecc <MX_GPIO_Init+0x148>)
 8000e44:	f000 fd18 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_GPIO_Init+0x148>)
 8000e5c:	f000 fb70 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_CS_Pin */
  GPIO_InitStruct.Pin = INA_CS_Pin;
 8000e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INA_CS_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <MX_GPIO_Init+0x140>)
 8000e7a:	f000 fb61 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : BME_CS_Pin HALL_CS_Pin */
  GPIO_InitStruct.Pin = BME_CS_Pin|HALL_CS_Pin;
 8000e7e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0x144>)
 8000e98:	f000 fb52 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_GPIO_Init+0x148>)
 8000eb4:	f000 fb44 	bl	8001540 <HAL_GPIO_Init>

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_RTC_MspInit+0x4c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d111      	bne.n	8000f70 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 f8ee 	bl	800213c <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f66:	f7ff ffb3 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_RTC_MspInit+0x50>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40002800 	.word	0x40002800
 8000f7c:	42470e3c 	.word	0x42470e3c

08000f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12d      	bne.n	8000ffe <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a31      	ldr	r2, [pc, #196]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000fda:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fec:	2305      	movs	r3, #5
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481f      	ldr	r0, [pc, #124]	; (8001074 <HAL_SPI_MspInit+0xf4>)
 8000ff8:	f000 faa2 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ffc:	e031      	b.n	8001062 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HAL_SPI_MspInit+0xf8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d12c      	bne.n	8001062 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6313      	str	r3, [r2, #48]	; 0x30
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001040:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001052:	2306      	movs	r3, #6
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <HAL_SPI_MspInit+0xfc>)
 800105e:	f000 fa6f 	bl	8001540 <HAL_GPIO_Init>
}
 8001062:	bf00      	nop
 8001064:	3730      	adds	r7, #48	; 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40003800 	.word	0x40003800
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400
 8001078:	40003c00 	.word	0x40003c00
 800107c:	40020800 	.word	0x40020800

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_UART_MspInit+0x84>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12b      	bne.n	80010fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0x88>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x88>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0x88>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_UART_MspInit+0x88>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_UART_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010da:	230c      	movs	r3, #12
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ea:	2307      	movs	r3, #7
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_UART_MspInit+0x8c>)
 80010f6:	f000 fa23 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40004400 	.word	0x40004400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f8c6 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f003 f998 	bl	80044c8 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20020000 	.word	0x20020000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	200001a4 	.word	0x200001a4
 80011cc:	20000788 	.word	0x20000788

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121e:	f7ff ffd7 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f003 f957 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff fc2b 	bl	8000a80 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001238:	08004f50 	.word	0x08004f50
  ldr r2, =_sbss
 800123c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001240:	20000784 	.word	0x20000784

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f931 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fe2e 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f93b 	bl	8001526 <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f911 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	20000300 	.word	0x20000300

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000300 	.word	0x20000300

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff47 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff5c 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffb0 	bl	8001494 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e16b      	b.n	8001834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 815a 	bne.w	800182e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d005      	beq.n	8001592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158e:	2b02      	cmp	r3, #2
 8001590:	d130      	bne.n	80015f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c8:	2201      	movs	r2, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 0201 	and.w	r2, r3, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d017      	beq.n	8001630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d123      	bne.n	8001684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0203 	and.w	r2, r3, #3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80b4 	beq.w	800182e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b60      	ldr	r3, [pc, #384]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a5f      	ldr	r2, [pc, #380]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e2:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_GPIO_Init+0x310>)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x314>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d02b      	beq.n	8001766 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a51      	ldr	r2, [pc, #324]	; (8001858 <HAL_GPIO_Init+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d025      	beq.n	8001762 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_GPIO_Init+0x31c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01f      	beq.n	800175e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <HAL_GPIO_Init+0x320>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x21a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4e      	ldr	r2, [pc, #312]	; (8001864 <HAL_GPIO_Init+0x324>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x216>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4d      	ldr	r2, [pc, #308]	; (8001868 <HAL_GPIO_Init+0x328>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x212>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_GPIO_Init+0x32c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <HAL_GPIO_Init+0x330>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x20a>
 8001746:	2307      	movs	r3, #7
 8001748:	e00e      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800174a:	2308      	movs	r3, #8
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800174e:	2306      	movs	r3, #6
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001766:	2300      	movs	r3, #0
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001778:	4935      	ldr	r1, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x310>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_GPIO_Init+0x334>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3301      	adds	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	f67f ae90 	bls.w	800155c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40021000 	.word	0x40021000
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40021c00 	.word	0x40021c00
 8001874:	40013c00 	.word	0x40013c00

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e264      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d075      	beq.n	80019b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ca:	4ba3      	ldr	r3, [pc, #652]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d00c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4ba0      	ldr	r3, [pc, #640]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b9d      	ldr	r3, [pc, #628]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b99      	ldr	r3, [pc, #612]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d05b      	beq.n	80019b4 <HAL_RCC_OscConfig+0x108>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d157      	bne.n	80019b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e23f      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x74>
 8001912:	4b91      	ldr	r3, [pc, #580]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a90      	ldr	r2, [pc, #576]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x98>
 800192a:	4b8b      	ldr	r3, [pc, #556]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a8a      	ldr	r2, [pc, #552]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a87      	ldr	r2, [pc, #540]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001944:	4b84      	ldr	r3, [pc, #528]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a83      	ldr	r2, [pc, #524]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a80      	ldr	r2, [pc, #512]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fcd6 	bl	8001314 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fcd2 	bl	8001314 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e204      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xc0>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fcc2 	bl	8001314 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fcbe 	bl	8001314 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1f0      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0xe8>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c2:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x152>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1c4      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4952      	ldr	r1, [pc, #328]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e03a      	b.n	8001a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_RCC_OscConfig+0x2b0>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fc77 	bl	8001314 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fc73 	bl	8001314 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1a5      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4940      	ldr	r1, [pc, #256]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_OscConfig+0x2b0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc56 	bl	8001314 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fc52 	bl	8001314 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e184      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d030      	beq.n	8001af8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <HAL_RCC_OscConfig+0x2b4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fc36 	bl	8001314 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fc32 	bl	8001314 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e164      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x200>
 8001aca:	e015      	b.n	8001af8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001acc:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_RCC_OscConfig+0x2b4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fc1f 	bl	8001314 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ada:	f7ff fc1b 	bl	8001314 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e14d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a0 	beq.w	8001c46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x2b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d121      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RCC_OscConfig+0x2b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_RCC_OscConfig+0x2b8>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fbe1 	bl	8001314 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e011      	b.n	8001b7a <HAL_RCC_OscConfig+0x2ce>
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	42470000 	.word	0x42470000
 8001b60:	42470e80 	.word	0x42470e80
 8001b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b68:	f7ff fbd4 	bl	8001314 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e106      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x4e4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2f0>
 8001b8e:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9a:	e01c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x32a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x312>
 8001ba4:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb0:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a77      	ldr	r2, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x32a>
 8001bbe:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a74      	ldr	r2, [pc, #464]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bca:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a71      	ldr	r2, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff fb99 	bl	8001314 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff fb95 	bl	8001314 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0c5      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ee      	beq.n	8001be6 <HAL_RCC_OscConfig+0x33a>
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fb83 	bl	8001314 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fb7f 	bl	8001314 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0af      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 809b 	beq.w	8001d86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d05c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d141      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x4ec>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fb53 	bl	8001314 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff fb4f 	bl	8001314 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e081      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	019b      	lsls	r3, r3, #6
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	4937      	ldr	r1, [pc, #220]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <HAL_RCC_OscConfig+0x4ec>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fb28 	bl	8001314 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fb24 	bl	8001314 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e056      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x41c>
 8001ce6:	e04e      	b.n	8001d86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x4ec>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff fb11 	bl	8001314 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fb0d 	bl	8001314 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e03f      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x44a>
 8001d14:	e037      	b.n	8001d86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e032      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_RCC_OscConfig+0x4e8>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d028      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d121      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d11a      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d111      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40007000 	.word	0x40007000
 8001d94:	40023800 	.word	0x40023800
 8001d98:	42470060 	.word	0x42470060

08001d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0cc      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d90c      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d044      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e067      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4934      	ldr	r1, [pc, #208]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7ff fa42 	bl	8001314 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7ff fa3e 	bl	8001314 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e04f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d20c      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f9a2 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08004ef4 	.word	0x08004ef4
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f6e:	2100      	movs	r1, #0
 8001f70:	6079      	str	r1, [r7, #4]
 8001f72:	2100      	movs	r1, #0
 8001f74:	60f9      	str	r1, [r7, #12]
 8001f76:	2100      	movs	r1, #0
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f7e:	4952      	ldr	r1, [pc, #328]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f80:	6889      	ldr	r1, [r1, #8]
 8001f82:	f001 010c 	and.w	r1, r1, #12
 8001f86:	2908      	cmp	r1, #8
 8001f88:	d00d      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001f8a:	2908      	cmp	r1, #8
 8001f8c:	f200 8094 	bhi.w	80020b8 <HAL_RCC_GetSysClockFreq+0x150>
 8001f90:	2900      	cmp	r1, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x32>
 8001f94:	2904      	cmp	r1, #4
 8001f96:	d003      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8001f98:	e08e      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_GetSysClockFreq+0x164>)
 8001f9c:	60bb      	str	r3, [r7, #8]
       break;
 8001f9e:	e08e      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fa2:	60bb      	str	r3, [r7, #8]
      break;
 8001fa4:	e08b      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa6:	4948      	ldr	r1, [pc, #288]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa8:	6849      	ldr	r1, [r1, #4]
 8001faa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001fae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb0:	4945      	ldr	r1, [pc, #276]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fb2:	6849      	ldr	r1, [r1, #4]
 8001fb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fb8:	2900      	cmp	r1, #0
 8001fba:	d024      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbc:	4942      	ldr	r1, [pc, #264]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fbe:	6849      	ldr	r1, [r1, #4]
 8001fc0:	0989      	lsrs	r1, r1, #6
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001fcc:	f04f 0500 	mov.w	r5, #0
 8001fd0:	ea00 0204 	and.w	r2, r0, r4
 8001fd4:	ea01 0305 	and.w	r3, r1, r5
 8001fd8:	493d      	ldr	r1, [pc, #244]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fda:	fb01 f003 	mul.w	r0, r1, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	fb01 f102 	mul.w	r1, r1, r2
 8001fe4:	1844      	adds	r4, r0, r1
 8001fe6:	493a      	ldr	r1, [pc, #232]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fe8:	fba2 0101 	umull	r0, r1, r2, r1
 8001fec:	1863      	adds	r3, r4, r1
 8001fee:	4619      	mov	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	f7fe fafe 	bl	80005f8 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e04a      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	461a      	mov	r2, r3
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002016:	f04f 0100 	mov.w	r1, #0
 800201a:	ea02 0400 	and.w	r4, r2, r0
 800201e:	ea03 0501 	and.w	r5, r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	014b      	lsls	r3, r1, #5
 8002030:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002034:	0142      	lsls	r2, r0, #5
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	1b00      	subs	r0, r0, r4
 800203c:	eb61 0105 	sbc.w	r1, r1, r5
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	018b      	lsls	r3, r1, #6
 800204a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800204e:	0182      	lsls	r2, r0, #6
 8002050:	1a12      	subs	r2, r2, r0
 8002052:	eb63 0301 	sbc.w	r3, r3, r1
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	00d9      	lsls	r1, r3, #3
 8002060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002064:	00d0      	lsls	r0, r2, #3
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	1912      	adds	r2, r2, r4
 800206c:	eb45 0303 	adc.w	r3, r5, r3
 8002070:	f04f 0000 	mov.w	r0, #0
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	0299      	lsls	r1, r3, #10
 800207a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800207e:	0290      	lsls	r0, r2, #10
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	461a      	mov	r2, r3
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	f7fe fab2 	bl	80005f8 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	60bb      	str	r3, [r7, #8]
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_RCC_GetSysClockFreq+0x164>)
 80020ba:	60bb      	str	r3, [r7, #8]
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	68bb      	ldr	r3, [r7, #8]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	017d7840 	.word	0x017d7840

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08004f04 	.word	0x08004f04

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	08004f04 	.word	0x08004f04

0800213c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002160:	2b00      	cmp	r3, #0
 8002162:	d035      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002164:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800216a:	f7ff f8d3 	bl	8001314 <HAL_GetTick>
 800216e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002172:	f7ff f8cf 	bl	8001314 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0b0      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002184:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	019a      	lsls	r2, r3, #6
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	071b      	lsls	r3, r3, #28
 800219c:	4955      	ldr	r1, [pc, #340]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021a4:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021aa:	f7ff f8b3 	bl	8001314 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021b2:	f7ff f8af 	bl	8001314 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e090      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8083 	beq.w	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002206:	f7ff f885 	bl	8001314 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7ff f881 	bl	8001314 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e062      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002220:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002234:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02f      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	429a      	cmp	r2, r3
 8002248:	d028      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800225a:	4b28      	ldr	r3, [pc, #160]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002260:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d114      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff f84f 	bl	8001314 <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff f84b 	bl	8001314 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e02a      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ee      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	490d      	ldr	r1, [pc, #52]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
 80022c4:	e005      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022d0:	6093      	str	r3, [r2, #8]
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	4905      	ldr	r1, [pc, #20]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	42470068 	.word	0x42470068
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42470e40 	.word	0x42470e40

08002300 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e083      	b.n	800241a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7f5b      	ldrb	r3, [r3, #29]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fe02 	bl	8000f2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	22ca      	movs	r2, #202	; 0xca
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2253      	movs	r2, #83	; 0x53
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f9fb 	bl	800273a <RTC_EnterInitMode>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	22ff      	movs	r2, #255	; 0xff
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2204      	movs	r2, #4
 8002356:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e05e      	b.n	800241a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800236a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800236e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	041a      	lsls	r2, r3, #16
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10e      	bne.n	80023e8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f98d 	bl	80026ea <HAL_RTC_WaitForSynchro>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	22ff      	movs	r2, #255	; 0xff
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2204      	movs	r2, #4
 80023e2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e018      	b.n	800241a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002422:	b590      	push	{r4, r7, lr}
 8002424:	b087      	sub	sp, #28
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	7f1b      	ldrb	r3, [r3, #28]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_RTC_SetTime+0x1c>
 800243a:	2302      	movs	r3, #2
 800243c:	e0aa      	b.n	8002594 <HAL_RTC_SetTime+0x172>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2202      	movs	r2, #2
 8002448:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d126      	bne.n	800249e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f992 	bl	8002792 <RTC_ByteToBcd2>
 800246e:	4603      	mov	r3, r0
 8002470:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f98b 	bl	8002792 <RTC_ByteToBcd2>
 800247c:	4603      	mov	r3, r0
 800247e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002480:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f983 	bl	8002792 <RTC_ByteToBcd2>
 800248c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800248e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e018      	b.n	80024d0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2200      	movs	r2, #0
 80024b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024be:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80024c4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	22ca      	movs	r2, #202	; 0xca
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2253      	movs	r2, #83	; 0x53
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f92a 	bl	800273a <RTC_EnterInitMode>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2204      	movs	r2, #4
 80024f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e047      	b.n	8002594 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800250e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002512:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002522:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d111      	bne.n	800257e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f8c5 	bl	80026ea <HAL_RTC_WaitForSynchro>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	22ff      	movs	r2, #255	; 0xff
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2204      	movs	r2, #4
 8002572:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00a      	b.n	8002594 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002592:	2300      	movs	r3, #0
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}

0800259c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	7f1b      	ldrb	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_RTC_SetDate+0x1c>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e094      	b.n	80026e2 <HAL_RTC_SetDate+0x146>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2202      	movs	r2, #2
 80025c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_RTC_SetDate+0x4c>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	f023 0310 	bic.w	r3, r3, #16
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	330a      	adds	r3, #10
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11c      	bne.n	8002628 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8cd 	bl	8002792 <RTC_ByteToBcd2>
 80025f8:	4603      	mov	r3, r0
 80025fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f8c6 	bl	8002792 <RTC_ByteToBcd2>
 8002606:	4603      	mov	r3, r0
 8002608:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800260a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f8be 	bl	8002792 <RTC_ByteToBcd2>
 8002616:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002618:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e00e      	b.n	8002646 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	78db      	ldrb	r3, [r3, #3]
 800262c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002634:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800263a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	22ca      	movs	r2, #202	; 0xca
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2253      	movs	r2, #83	; 0x53
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f86f 	bl	800273a <RTC_EnterInitMode>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2204      	movs	r2, #4
 800266e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e033      	b.n	80026e2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002684:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002688:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002698:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f81e 	bl	80026ea <HAL_RTC_WaitForSynchro>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2204      	movs	r2, #4
 80026c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e00a      	b.n	80026e2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	22ff      	movs	r2, #255	; 0xff
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}

080026ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002704:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002706:	f7fe fe05 	bl	8001314 <HAL_GetTick>
 800270a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800270c:	e009      	b.n	8002722 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800270e:	f7fe fe01 	bl	8001314 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800271c:	d901      	bls.n	8002722 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e007      	b.n	8002732 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d119      	bne.n	8002788 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800275e:	f7fe fdd9 	bl	8001314 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002764:	e009      	b.n	800277a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002766:	f7fe fdd5 	bl	8001314 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002774:	d901      	bls.n	800277a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e007      	b.n	800278a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ee      	beq.n	8002766 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80027a0:	e005      	b.n	80027ae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	3b0a      	subs	r3, #10
 80027ac:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	d8f6      	bhi.n	80027a2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4313      	orrs	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b087      	sub	sp, #28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3350      	adds	r3, #80	; 0x50
 80027e4:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4413      	add	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e07b      	b.n	800290c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002824:	d009      	beq.n	800283a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
 800282c:	e005      	b.n	800283a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe fb93 	bl	8000f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002870:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	ea42 0103 	orr.w	r1, r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	f003 0104 	and.w	r1, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f003 0210 	and.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_SPI_Transmit+0x22>
 8002932:	2302      	movs	r3, #2
 8002934:	e126      	b.n	8002b84 <HAL_SPI_Transmit+0x270>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293e:	f7fe fce9 	bl	8001314 <HAL_GetTick>
 8002942:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d002      	beq.n	800295a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002954:	2302      	movs	r3, #2
 8002956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002958:	e10b      	b.n	8002b72 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_SPI_Transmit+0x52>
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800296a:	e102      	b.n	8002b72 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2203      	movs	r2, #3
 8002970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b2:	d10f      	bne.n	80029d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d007      	beq.n	80029f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fa:	d14b      	bne.n	8002a94 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_SPI_Transmit+0xf6>
 8002a04:	8afb      	ldrh	r3, [r7, #22]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d13e      	bne.n	8002a88 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	1c9a      	adds	r2, r3, #2
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a2e:	e02b      	b.n	8002a88 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d112      	bne.n	8002a64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	881a      	ldrh	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1c9a      	adds	r2, r3, #2
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a62:	e011      	b.n	8002a88 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a64:	f7fe fc56 	bl	8001314 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d803      	bhi.n	8002a7c <HAL_SPI_Transmit+0x168>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d102      	bne.n	8002a82 <HAL_SPI_Transmit+0x16e>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a86:	e074      	b.n	8002b72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ce      	bne.n	8002a30 <HAL_SPI_Transmit+0x11c>
 8002a92:	e04c      	b.n	8002b2e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Transmit+0x18e>
 8002a9c:	8afb      	ldrh	r3, [r7, #22]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d140      	bne.n	8002b24 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	7812      	ldrb	r2, [r2, #0]
 8002aae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ac8:	e02c      	b.n	8002b24 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d113      	bne.n	8002b00 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002afe:	e011      	b.n	8002b24 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b00:	f7fe fc08 	bl	8001314 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d803      	bhi.n	8002b18 <HAL_SPI_Transmit+0x204>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d102      	bne.n	8002b1e <HAL_SPI_Transmit+0x20a>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b22:	e026      	b.n	8002b72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1cd      	bne.n	8002aca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fbcc 	bl	80032d0 <SPI_EndRxTxTransaction>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e000      	b.n	8002b72 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba8:	d112      	bne.n	8002bd0 <HAL_SPI_Receive+0x44>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8f1 	bl	8002dae <HAL_SPI_TransmitReceive>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	e0ea      	b.n	8002da6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_SPI_Receive+0x52>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e0e3      	b.n	8002da6 <HAL_SPI_Receive+0x21a>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be6:	f7fe fb95 	bl	8001314 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bfc:	e0ca      	b.n	8002d94 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Receive+0x7e>
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c0e:	e0c1      	b.n	8002d94 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2204      	movs	r2, #4
 8002c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c56:	d10f      	bne.n	8002c78 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d007      	beq.n	8002c96 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d162      	bne.n	8002d64 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c9e:	e02e      	b.n	8002cfe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d115      	bne.n	8002cda <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f103 020c 	add.w	r2, r3, #12
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cd8:	e011      	b.n	8002cfe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cda:	f7fe fb1b 	bl	8001314 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d803      	bhi.n	8002cf2 <HAL_SPI_Receive+0x166>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Receive+0x16c>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cfc:	e04a      	b.n	8002d94 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1cb      	bne.n	8002ca0 <HAL_SPI_Receive+0x114>
 8002d08:	e031      	b.n	8002d6e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d113      	bne.n	8002d40 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	b292      	uxth	r2, r2
 8002d24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	1c9a      	adds	r2, r3, #2
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d3e:	e011      	b.n	8002d64 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d40:	f7fe fae8 	bl	8001314 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d803      	bhi.n	8002d58 <HAL_SPI_Receive+0x1cc>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_Receive+0x1d2>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d62:	e017      	b.n	8002d94 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1cd      	bne.n	8002d0a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fa46 	bl	8003204 <SPI_EndRxTransaction>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	75fb      	strb	r3, [r7, #23]
 8002d90:	e000      	b.n	8002d94 <HAL_SPI_Receive+0x208>
  }

error :
 8002d92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b08c      	sub	sp, #48	; 0x30
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x26>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e18a      	b.n	80030ea <HAL_SPI_TransmitReceive+0x33c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ddc:	f7fe fa9a 	bl	8001314 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d00f      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x70>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e04:	d107      	bne.n	8002e16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_SPI_TransmitReceive+0x68>
 8002e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d003      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e1c:	e15b      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x82>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x82>
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e36:	e14e      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d003      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2205      	movs	r2, #5
 8002e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	887a      	ldrh	r2, [r7, #2]
 8002e6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d007      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea8:	d178      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x10a>
 8002eb2:	8b7b      	ldrh	r3, [r7, #26]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d166      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	1c9a      	adds	r2, r3, #2
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002edc:	e053      	b.n	8002f86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x176>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x176>
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d113      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d119      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x1b8>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d014      	beq.n	8002f66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	b292      	uxth	r2, r2
 8002f48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	1c9a      	adds	r2, r3, #2
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f62:	2301      	movs	r3, #1
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f66:	f7fe f9d5 	bl	8001314 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d807      	bhi.n	8002f86 <HAL_SPI_TransmitReceive+0x1d8>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d003      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f84:	e0a7      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1a6      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x130>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1a1      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x130>
 8002f9a:	e07c      	b.n	8003096 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x1fc>
 8002fa4:	8b7b      	ldrh	r3, [r7, #26]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d16b      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	7812      	ldrb	r2, [r2, #0]
 8002fb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd0:	e057      	b.n	8003082 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11c      	bne.n	800301a <HAL_SPI_TransmitReceive+0x26c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d017      	beq.n	800301a <HAL_SPI_TransmitReceive+0x26c>
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d114      	bne.n	800301a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d119      	bne.n	800305c <HAL_SPI_TransmitReceive+0x2ae>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003058:	2301      	movs	r3, #1
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800305c:	f7fe f95a 	bl	8001314 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003068:	429a      	cmp	r2, r3
 800306a:	d803      	bhi.n	8003074 <HAL_SPI_TransmitReceive+0x2c6>
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d102      	bne.n	800307a <HAL_SPI_TransmitReceive+0x2cc>
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003080:	e029      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1a2      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x224>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d19d      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f918 	bl	80032d0 <SPI_EndRxTxTransaction>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030b2:	e010      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	e000      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3730      	adds	r7, #48	; 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003104:	f7fe f906 	bl	8001314 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4413      	add	r3, r2
 8003112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003114:	f7fe f8fe 	bl	8001314 <HAL_GetTick>
 8003118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	015b      	lsls	r3, r3, #5
 8003120:	0d1b      	lsrs	r3, r3, #20
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312a:	e054      	b.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d050      	beq.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003134:	f7fe f8ee 	bl	8001314 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	429a      	cmp	r2, r3
 8003142:	d902      	bls.n	800314a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d13d      	bne.n	80031c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003162:	d111      	bne.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316c:	d004      	beq.n	8003178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d107      	bne.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003190:	d10f      	bne.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e017      	b.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d19b      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000

08003204 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003218:	d111      	bne.n	800323e <SPI_EndRxTransaction+0x3a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003222:	d004      	beq.n	800322e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322c:	d107      	bne.n	800323e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003246:	d12a      	bne.n	800329e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d012      	beq.n	8003278 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff ff49 	bl	80030f4 <SPI_WaitFlagStateUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02d      	beq.n	80032c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e026      	b.n	80032c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	2101      	movs	r1, #1
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff ff36 	bl	80030f4 <SPI_WaitFlagStateUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01a      	beq.n	80032c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e013      	b.n	80032c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2101      	movs	r1, #1
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff ff23 	bl	80030f4 <SPI_WaitFlagStateUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e000      	b.n	80032c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <SPI_EndRxTxTransaction+0x7c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <SPI_EndRxTxTransaction+0x80>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	0d5b      	lsrs	r3, r3, #21
 80032e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fa:	d112      	bne.n	8003322 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff fef4 	bl	80030f4 <SPI_WaitFlagStateUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3b01      	subs	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d0f2      	beq.n	8003322 <SPI_EndRxTxTransaction+0x52>
 800333c:	e000      	b.n	8003340 <SPI_EndRxTxTransaction+0x70>
        break;
 800333e:	bf00      	nop
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000
 8003350:	165e9f81 	.word	0x165e9f81

08003354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e03f      	b.n	80033e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fe80 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f929 	bl	80035f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b08a      	sub	sp, #40	; 0x28
 80033f2:	af02      	add	r7, sp, #8
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	d17c      	bne.n	8003508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_UART_Transmit+0x2c>
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e075      	b.n	800350a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_UART_Transmit+0x3e>
 8003428:	2302      	movs	r3, #2
 800342a:	e06e      	b.n	800350a <HAL_UART_Transmit+0x11c>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2221      	movs	r2, #33	; 0x21
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003442:	f7fd ff67 	bl	8001314 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d108      	bne.n	8003470 <HAL_UART_Transmit+0x82>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e003      	b.n	8003478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003480:	e02a      	b.n	80034d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f840 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e036      	b.n	800350a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	3302      	adds	r3, #2
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e007      	b.n	80034ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1cf      	bne.n	8003482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2140      	movs	r1, #64	; 0x40
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f810 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e006      	b.n	800350a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b090      	sub	sp, #64	; 0x40
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003522:	e050      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d04c      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x30>
 8003532:	f7fd feef 	bl	8001314 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800353e:	429a      	cmp	r2, r3
 8003540:	d241      	bcs.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003562:	637a      	str	r2, [r7, #52]	; 0x34
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e5      	bne.n	8003542 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3314      	adds	r3, #20
 800357c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	613b      	str	r3, [r7, #16]
   return(result);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003596:	623a      	str	r2, [r7, #32]
 8003598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	69f9      	ldr	r1, [r7, #28]
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e00f      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4013      	ands	r3, r2
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d09f      	beq.n	8003524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3740      	adds	r7, #64	; 0x40
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	b09f      	sub	sp, #124	; 0x7c
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	68d9      	ldr	r1, [r3, #12]
 8003608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	ea40 0301 	orr.w	r3, r0, r1
 8003610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	431a      	orrs	r2, r3
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003634:	f021 010c 	bic.w	r1, r1, #12
 8003638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363e:	430b      	orrs	r3, r1
 8003640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800364c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364e:	6999      	ldr	r1, [r3, #24]
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	ea40 0301 	orr.w	r3, r0, r1
 8003658:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800365a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4bc5      	ldr	r3, [pc, #788]	; (8003974 <UART_SetConfig+0x384>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d004      	beq.n	800366e <UART_SetConfig+0x7e>
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4bc3      	ldr	r3, [pc, #780]	; (8003978 <UART_SetConfig+0x388>)
 800366a:	429a      	cmp	r2, r3
 800366c:	d103      	bne.n	8003676 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800366e:	f7fe fd51 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003672:	6778      	str	r0, [r7, #116]	; 0x74
 8003674:	e002      	b.n	800367c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003676:	f7fe fd39 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 800367a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800367c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003684:	f040 80b6 	bne.w	80037f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368a:	461c      	mov	r4, r3
 800368c:	f04f 0500 	mov.w	r5, #0
 8003690:	4622      	mov	r2, r4
 8003692:	462b      	mov	r3, r5
 8003694:	1891      	adds	r1, r2, r2
 8003696:	6439      	str	r1, [r7, #64]	; 0x40
 8003698:	415b      	adcs	r3, r3
 800369a:	647b      	str	r3, [r7, #68]	; 0x44
 800369c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036a0:	1912      	adds	r2, r2, r4
 80036a2:	eb45 0303 	adc.w	r3, r5, r3
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	00d9      	lsls	r1, r3, #3
 80036b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036b4:	00d0      	lsls	r0, r2, #3
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	1911      	adds	r1, r2, r4
 80036bc:	6639      	str	r1, [r7, #96]	; 0x60
 80036be:	416b      	adcs	r3, r5
 80036c0:	667b      	str	r3, [r7, #100]	; 0x64
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	1891      	adds	r1, r2, r2
 80036ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80036d0:	415b      	adcs	r3, r3
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036dc:	f7fc ff8c 	bl	80005f8 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4ba5      	ldr	r3, [pc, #660]	; (800397c <UART_SetConfig+0x38c>)
 80036e6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	011e      	lsls	r6, r3, #4
 80036ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f0:	461c      	mov	r4, r3
 80036f2:	f04f 0500 	mov.w	r5, #0
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	6339      	str	r1, [r7, #48]	; 0x30
 80036fe:	415b      	adcs	r3, r3
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
 8003702:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003706:	1912      	adds	r2, r2, r4
 8003708:	eb45 0303 	adc.w	r3, r5, r3
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	00d9      	lsls	r1, r3, #3
 8003716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800371a:	00d0      	lsls	r0, r2, #3
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	1911      	adds	r1, r2, r4
 8003722:	65b9      	str	r1, [r7, #88]	; 0x58
 8003724:	416b      	adcs	r3, r5
 8003726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	461a      	mov	r2, r3
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	1891      	adds	r1, r2, r2
 8003734:	62b9      	str	r1, [r7, #40]	; 0x28
 8003736:	415b      	adcs	r3, r3
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800373e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003742:	f7fc ff59 	bl	80005f8 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4b8c      	ldr	r3, [pc, #560]	; (800397c <UART_SetConfig+0x38c>)
 800374c:	fba3 1302 	umull	r1, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	2164      	movs	r1, #100	; 0x64
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	3332      	adds	r3, #50	; 0x32
 800375e:	4a87      	ldr	r2, [pc, #540]	; (800397c <UART_SetConfig+0x38c>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800376c:	441e      	add	r6, r3
 800376e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003770:	4618      	mov	r0, r3
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	1894      	adds	r4, r2, r2
 800377c:	623c      	str	r4, [r7, #32]
 800377e:	415b      	adcs	r3, r3
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003786:	1812      	adds	r2, r2, r0
 8003788:	eb41 0303 	adc.w	r3, r1, r3
 800378c:	f04f 0400 	mov.w	r4, #0
 8003790:	f04f 0500 	mov.w	r5, #0
 8003794:	00dd      	lsls	r5, r3, #3
 8003796:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800379a:	00d4      	lsls	r4, r2, #3
 800379c:	4622      	mov	r2, r4
 800379e:	462b      	mov	r3, r5
 80037a0:	1814      	adds	r4, r2, r0
 80037a2:	653c      	str	r4, [r7, #80]	; 0x50
 80037a4:	414b      	adcs	r3, r1
 80037a6:	657b      	str	r3, [r7, #84]	; 0x54
 80037a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	61b9      	str	r1, [r7, #24]
 80037b6:	415b      	adcs	r3, r3
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037c2:	f7fc ff19 	bl	80005f8 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b6c      	ldr	r3, [pc, #432]	; (800397c <UART_SetConfig+0x38c>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	; 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3332      	adds	r3, #50	; 0x32
 80037de:	4a67      	ldr	r2, [pc, #412]	; (800397c <UART_SetConfig+0x38c>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4432      	add	r2, r6
 80037f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f2:	e0b9      	b.n	8003968 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f6:	461c      	mov	r4, r3
 80037f8:	f04f 0500 	mov.w	r5, #0
 80037fc:	4622      	mov	r2, r4
 80037fe:	462b      	mov	r3, r5
 8003800:	1891      	adds	r1, r2, r2
 8003802:	6139      	str	r1, [r7, #16]
 8003804:	415b      	adcs	r3, r3
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800380c:	1912      	adds	r2, r2, r4
 800380e:	eb45 0303 	adc.w	r3, r5, r3
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	00d9      	lsls	r1, r3, #3
 800381c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003820:	00d0      	lsls	r0, r2, #3
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	eb12 0804 	adds.w	r8, r2, r4
 800382a:	eb43 0905 	adc.w	r9, r3, r5
 800382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4618      	mov	r0, r3
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	008b      	lsls	r3, r1, #2
 8003842:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003846:	0082      	lsls	r2, r0, #2
 8003848:	4640      	mov	r0, r8
 800384a:	4649      	mov	r1, r9
 800384c:	f7fc fed4 	bl	80005f8 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4b49      	ldr	r3, [pc, #292]	; (800397c <UART_SetConfig+0x38c>)
 8003856:	fba3 2302 	umull	r2, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	011e      	lsls	r6, r3, #4
 800385e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003860:	4618      	mov	r0, r3
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	1894      	adds	r4, r2, r2
 800386c:	60bc      	str	r4, [r7, #8]
 800386e:	415b      	adcs	r3, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003876:	1812      	adds	r2, r2, r0
 8003878:	eb41 0303 	adc.w	r3, r1, r3
 800387c:	f04f 0400 	mov.w	r4, #0
 8003880:	f04f 0500 	mov.w	r5, #0
 8003884:	00dd      	lsls	r5, r3, #3
 8003886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800388a:	00d4      	lsls	r4, r2, #3
 800388c:	4622      	mov	r2, r4
 800388e:	462b      	mov	r3, r5
 8003890:	1814      	adds	r4, r2, r0
 8003892:	64bc      	str	r4, [r7, #72]	; 0x48
 8003894:	414b      	adcs	r3, r1
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	008b      	lsls	r3, r1, #2
 80038ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038b0:	0082      	lsls	r2, r0, #2
 80038b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038b6:	f7fc fe9f 	bl	80005f8 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <UART_SetConfig+0x38c>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	2164      	movs	r1, #100	; 0x64
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	3332      	adds	r3, #50	; 0x32
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <UART_SetConfig+0x38c>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038de:	441e      	add	r6, r3
 80038e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e2:	4618      	mov	r0, r3
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	1894      	adds	r4, r2, r2
 80038ee:	603c      	str	r4, [r7, #0]
 80038f0:	415b      	adcs	r3, r3
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f8:	1812      	adds	r2, r2, r0
 80038fa:	eb41 0303 	adc.w	r3, r1, r3
 80038fe:	f04f 0400 	mov.w	r4, #0
 8003902:	f04f 0500 	mov.w	r5, #0
 8003906:	00dd      	lsls	r5, r3, #3
 8003908:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800390c:	00d4      	lsls	r4, r2, #3
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	eb12 0a00 	adds.w	sl, r2, r0
 8003916:	eb43 0b01 	adc.w	fp, r3, r1
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003932:	0082      	lsls	r2, r0, #2
 8003934:	4650      	mov	r0, sl
 8003936:	4659      	mov	r1, fp
 8003938:	f7fc fe5e 	bl	80005f8 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <UART_SetConfig+0x38c>)
 8003942:	fba3 1302 	umull	r1, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2164      	movs	r1, #100	; 0x64
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	3332      	adds	r3, #50	; 0x32
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <UART_SetConfig+0x38c>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4432      	add	r2, r6
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	377c      	adds	r7, #124	; 0x7c
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	40011000 	.word	0x40011000
 8003978:	40011400 	.word	0x40011400
 800397c:	51eb851f 	.word	0x51eb851f

08003980 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003984:	4904      	ldr	r1, [pc, #16]	; (8003998 <MX_FATFS_Init+0x18>)
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <MX_FATFS_Init+0x1c>)
 8003988:	f000 fd8e 	bl	80044a8 <FATFS_LinkDriver>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <MX_FATFS_Init+0x20>)
 8003992:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000304 	.word	0x20000304
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	20000308 	.word	0x20000308

080039a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f9d9 	bl	8003d68 <USER_SPI_initialize>
 80039b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fab7 	bl	8003f40 <USER_SPI_status>
 80039d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80039ec:	7bf8      	ldrb	r0, [r7, #15]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	f000 faba 	bl	8003f6c <USER_SPI_read>
 80039f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003a12:	7bf8      	ldrb	r0, [r7, #15]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	f000 fb0d 	bl	8004038 <USER_SPI_write>
 8003a1e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	603a      	str	r2, [r7, #0]
 8003a32:	71fb      	strb	r3, [r7, #7]
 8003a34:	460b      	mov	r3, r1
 8003a36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003a38:	79b9      	ldrb	r1, [r7, #6]
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fb76 	bl	8004130 <USER_SPI_ioctl>
 8003a44:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003a58:	f7fd fc5c 	bl	8001314 <HAL_GetTick>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <SPI_Timer_On+0x20>)
 8003a60:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <SPI_Timer_On+0x24>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	2000076c 	.word	0x2000076c
 8003a74:	20000770 	.word	0x20000770

08003a78 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003a7c:	f7fd fc4a 	bl	8001314 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <SPI_Timer_Status+0x24>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <SPI_Timer_Status+0x28>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	bf34      	ite	cc
 8003a90:	2301      	movcc	r3, #1
 8003a92:	2300      	movcs	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000076c 	.word	0x2000076c
 8003aa0:	20000770 	.word	0x20000770

08003aa4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003aae:	f107 020f 	add.w	r2, r7, #15
 8003ab2:	1df9      	adds	r1, r7, #7
 8003ab4:	2332      	movs	r3, #50	; 0x32
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4804      	ldr	r0, [pc, #16]	; (8003acc <xchg_spi+0x28>)
 8003abc:	f7ff f977 	bl	8002dae <HAL_SPI_TransmitReceive>
    return rxDat;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000244 	.word	0x20000244

08003ad0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e00a      	b.n	8003af6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	18d4      	adds	r4, r2, r3
 8003ae6:	20ff      	movs	r0, #255	; 0xff
 8003ae8:	f7ff ffdc 	bl	8003aa4 <xchg_spi>
 8003aec:	4603      	mov	r3, r0
 8003aee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3f0      	bcc.n	8003ae0 <rcvr_spi_multi+0x10>
	}
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd90      	pop	{r4, r7, pc}

08003b08 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e009      	b.n	8003b2c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ffbf 	bl	8003aa4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3f1      	bcc.n	8003b18 <xmit_spi_multi+0x10>
	}
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003b46:	f7fd fbe5 	bl	8001314 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003b50:	20ff      	movs	r0, #255	; 0xff
 8003b52:	f7ff ffa7 	bl	8003aa4 <xchg_spi>
 8003b56:	4603      	mov	r3, r0
 8003b58:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2bff      	cmp	r3, #255	; 0xff
 8003b5e:	d007      	beq.n	8003b70 <wait_ready+0x32>
 8003b60:	f7fd fbd8 	bl	8001314 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d8ef      	bhi.n	8003b50 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2bff      	cmp	r3, #255	; 0xff
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4803      	ldr	r0, [pc, #12]	; (8003b9c <despiselect+0x18>)
 8003b8e:	f7fd fe73 	bl	8001878 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003b92:	20ff      	movs	r0, #255	; 0xff
 8003b94:	f7ff ff86 	bl	8003aa4 <xchg_spi>

}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4809      	ldr	r0, [pc, #36]	; (8003bd0 <spiselect+0x30>)
 8003baa:	f7fd fe65 	bl	8001878 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003bae:	20ff      	movs	r0, #255	; 0xff
 8003bb0:	f7ff ff78 	bl	8003aa4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bb8:	f7ff ffc1 	bl	8003b3e <wait_ready>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <spiselect+0x26>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e002      	b.n	8003bcc <spiselect+0x2c>

	despiselect();
 8003bc6:	f7ff ffdd 	bl	8003b84 <despiselect>
	return 0;	/* Timeout */
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003bde:	20c8      	movs	r0, #200	; 0xc8
 8003be0:	f7ff ff36 	bl	8003a50 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003be4:	20ff      	movs	r0, #255	; 0xff
 8003be6:	f7ff ff5d 	bl	8003aa4 <xchg_spi>
 8003bea:	4603      	mov	r3, r0
 8003bec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2bff      	cmp	r3, #255	; 0xff
 8003bf2:	d104      	bne.n	8003bfe <rcvr_datablock+0x2a>
 8003bf4:	f7ff ff40 	bl	8003a78 <SPI_Timer_Status>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f2      	bne.n	8003be4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2bfe      	cmp	r3, #254	; 0xfe
 8003c02:	d001      	beq.n	8003c08 <rcvr_datablock+0x34>
 8003c04:	2300      	movs	r3, #0
 8003c06:	e00a      	b.n	8003c1e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff60 	bl	8003ad0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003c10:	20ff      	movs	r0, #255	; 0xff
 8003c12:	f7ff ff47 	bl	8003aa4 <xchg_spi>
 8003c16:	20ff      	movs	r0, #255	; 0xff
 8003c18:	f7ff ff44 	bl	8003aa4 <xchg_spi>

	return 1;						/* Function succeeded */
 8003c1c:	2301      	movs	r3, #1
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c36:	f7ff ff82 	bl	8003b3e <wait_ready>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <xmit_datablock+0x1e>
 8003c40:	2300      	movs	r3, #0
 8003c42:	e01e      	b.n	8003c82 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff ff2c 	bl	8003aa4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	2bfd      	cmp	r3, #253	; 0xfd
 8003c50:	d016      	beq.n	8003c80 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ff56 	bl	8003b08 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003c5c:	20ff      	movs	r0, #255	; 0xff
 8003c5e:	f7ff ff21 	bl	8003aa4 <xchg_spi>
 8003c62:	20ff      	movs	r0, #255	; 0xff
 8003c64:	f7ff ff1e 	bl	8003aa4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003c68:	20ff      	movs	r0, #255	; 0xff
 8003c6a:	f7ff ff1b 	bl	8003aa4 <xchg_spi>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d001      	beq.n	8003c80 <xmit_datablock+0x5a>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e000      	b.n	8003c82 <xmit_datablock+0x5c>
	}
	return 1;
 8003c80:	2301      	movs	r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	6039      	str	r1, [r7, #0]
 8003c94:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da0e      	bge.n	8003cbc <send_cmd+0x32>
		cmd &= 0x7F;
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2037      	movs	r0, #55	; 0x37
 8003caa:	f7ff ffee 	bl	8003c8a <send_cmd>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003cb2:	7bbb      	ldrb	r3, [r7, #14]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d901      	bls.n	8003cbc <send_cmd+0x32>
 8003cb8:	7bbb      	ldrb	r3, [r7, #14]
 8003cba:	e051      	b.n	8003d60 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d008      	beq.n	8003cd4 <send_cmd+0x4a>
		despiselect();
 8003cc2:	f7ff ff5f 	bl	8003b84 <despiselect>
		if (!spiselect()) return 0xFF;
 8003cc6:	f7ff ff6b 	bl	8003ba0 <spiselect>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <send_cmd+0x4a>
 8003cd0:	23ff      	movs	r3, #255	; 0xff
 8003cd2:	e045      	b.n	8003d60 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fee1 	bl	8003aa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	0e1b      	lsrs	r3, r3, #24
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fedb 	bl	8003aa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fed5 	bl	8003aa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fecf 	bl	8003aa4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff feca 	bl	8003aa4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <send_cmd+0x94>
 8003d1a:	2395      	movs	r3, #149	; 0x95
 8003d1c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d101      	bne.n	8003d28 <send_cmd+0x9e>
 8003d24:	2387      	movs	r3, #135	; 0x87
 8003d26:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff feba 	bl	8003aa4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d102      	bne.n	8003d3c <send_cmd+0xb2>
 8003d36:	20ff      	movs	r0, #255	; 0xff
 8003d38:	f7ff feb4 	bl	8003aa4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003d40:	20ff      	movs	r0, #255	; 0xff
 8003d42:	f7ff feaf 	bl	8003aa4 <xchg_spi>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da05      	bge.n	8003d5e <send_cmd+0xd4>
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <USER_SPI_initialize+0x14>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0d6      	b.n	8003f2a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003d7c:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <USER_SPI_initialize+0x1cc>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <USER_SPI_initialize+0x2a>
 8003d8a:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <USER_SPI_initialize+0x1cc>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e0cb      	b.n	8003f2a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003d92:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <USER_SPI_initialize+0x1d0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <USER_SPI_initialize+0x1d0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003da4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003da6:	230a      	movs	r3, #10
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e005      	b.n	8003db8 <USER_SPI_initialize+0x50>
 8003dac:	20ff      	movs	r0, #255	; 0xff
 8003dae:	f7ff fe79 	bl	8003aa4 <xchg_spi>
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f6      	bne.n	8003dac <USER_SPI_initialize+0x44>

	ty = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7ff ff60 	bl	8003c8a <send_cmd>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 808b 	bne.w	8003ee8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dd6:	f7ff fe3b 	bl	8003a50 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003dda:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003dde:	2008      	movs	r0, #8
 8003de0:	f7ff ff53 	bl	8003c8a <send_cmd>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d151      	bne.n	8003e8e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e00d      	b.n	8003e0c <USER_SPI_initialize+0xa4>
 8003df0:	7bfc      	ldrb	r4, [r7, #15]
 8003df2:	20ff      	movs	r0, #255	; 0xff
 8003df4:	f7ff fe56 	bl	8003aa4 <xchg_spi>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	4423      	add	r3, r4
 8003e02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d9ee      	bls.n	8003df0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003e12:	7abb      	ldrb	r3, [r7, #10]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d167      	bne.n	8003ee8 <USER_SPI_initialize+0x180>
 8003e18:	7afb      	ldrb	r3, [r7, #11]
 8003e1a:	2baa      	cmp	r3, #170	; 0xaa
 8003e1c:	d164      	bne.n	8003ee8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003e1e:	bf00      	nop
 8003e20:	f7ff fe2a 	bl	8003a78 <SPI_Timer_Status>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <USER_SPI_initialize+0xd2>
 8003e2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e2e:	20a9      	movs	r0, #169	; 0xa9
 8003e30:	f7ff ff2b 	bl	8003c8a <send_cmd>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f2      	bne.n	8003e20 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003e3a:	f7ff fe1d 	bl	8003a78 <SPI_Timer_Status>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d051      	beq.n	8003ee8 <USER_SPI_initialize+0x180>
 8003e44:	2100      	movs	r1, #0
 8003e46:	203a      	movs	r0, #58	; 0x3a
 8003e48:	f7ff ff1f 	bl	8003c8a <send_cmd>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d14a      	bne.n	8003ee8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	e00d      	b.n	8003e74 <USER_SPI_initialize+0x10c>
 8003e58:	7bfc      	ldrb	r4, [r7, #15]
 8003e5a:	20ff      	movs	r0, #255	; 0xff
 8003e5c:	f7ff fe22 	bl	8003aa4 <xchg_spi>
 8003e60:	4603      	mov	r3, r0
 8003e62:	461a      	mov	r2, r3
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	4423      	add	r3, r4
 8003e6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	3301      	adds	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d9ee      	bls.n	8003e58 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003e7a:	7a3b      	ldrb	r3, [r7, #8]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <USER_SPI_initialize+0x120>
 8003e84:	230c      	movs	r3, #12
 8003e86:	e000      	b.n	8003e8a <USER_SPI_initialize+0x122>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	737b      	strb	r3, [r7, #13]
 8003e8c:	e02c      	b.n	8003ee8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003e8e:	2100      	movs	r1, #0
 8003e90:	20a9      	movs	r0, #169	; 0xa9
 8003e92:	f7ff fefa 	bl	8003c8a <send_cmd>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d804      	bhi.n	8003ea6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	737b      	strb	r3, [r7, #13]
 8003ea0:	23a9      	movs	r3, #169	; 0xa9
 8003ea2:	73bb      	strb	r3, [r7, #14]
 8003ea4:	e003      	b.n	8003eae <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	737b      	strb	r3, [r7, #13]
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003eae:	bf00      	nop
 8003eb0:	f7ff fde2 	bl	8003a78 <SPI_Timer_Status>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <USER_SPI_initialize+0x162>
 8003eba:	7bbb      	ldrb	r3, [r7, #14]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fee3 	bl	8003c8a <send_cmd>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f2      	bne.n	8003eb0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003eca:	f7ff fdd5 	bl	8003a78 <SPI_Timer_Status>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <USER_SPI_initialize+0x17c>
 8003ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ed8:	2010      	movs	r0, #16
 8003eda:	f7ff fed6 	bl	8003c8a <send_cmd>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <USER_SPI_initialize+0x180>
				ty = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <USER_SPI_initialize+0x1d4>)
 8003eea:	7b7b      	ldrb	r3, [r7, #13]
 8003eec:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003eee:	f7ff fe49 	bl	8003b84 <despiselect>

	if (ty) {			/* OK */
 8003ef2:	7b7b      	ldrb	r3, [r7, #13]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <USER_SPI_initialize+0x1d0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <USER_SPI_initialize+0x1d0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <USER_SPI_initialize+0x1cc>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <USER_SPI_initialize+0x1cc>)
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e002      	b.n	8003f24 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <USER_SPI_initialize+0x1cc>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <USER_SPI_initialize+0x1cc>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000020 	.word	0x20000020
 8003f38:	20000244 	.word	0x20000244
 8003f3c:	200001a8 	.word	0x200001a8

08003f40 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <USER_SPI_status+0x14>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e002      	b.n	8003f5a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <USER_SPI_status+0x28>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000020 	.word	0x20000020

08003f6c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <USER_SPI_read+0x1c>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <USER_SPI_read+0x20>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e04d      	b.n	8004028 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f8c:	4b28      	ldr	r3, [pc, #160]	; (8004030 <USER_SPI_read+0xc4>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <USER_SPI_read+0x32>
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e044      	b.n	8004028 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003f9e:	4b25      	ldr	r3, [pc, #148]	; (8004034 <USER_SPI_read+0xc8>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <USER_SPI_read+0x44>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	025b      	lsls	r3, r3, #9
 8003fae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d111      	bne.n	8003fda <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	2011      	movs	r0, #17
 8003fba:	f7ff fe66 	bl	8003c8a <send_cmd>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d129      	bne.n	8004018 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fc8:	68b8      	ldr	r0, [r7, #8]
 8003fca:	f7ff fe03 	bl	8003bd4 <rcvr_datablock>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d021      	beq.n	8004018 <USER_SPI_read+0xac>
			count = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	e01e      	b.n	8004018 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	2012      	movs	r0, #18
 8003fde:	f7ff fe54 	bl	8003c8a <send_cmd>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d117      	bne.n	8004018 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fec:	68b8      	ldr	r0, [r7, #8]
 8003fee:	f7ff fdf1 	bl	8003bd4 <rcvr_datablock>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <USER_SPI_read+0xa2>
				buff += 512;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ffe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	3b01      	subs	r3, #1
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ed      	bne.n	8003fe8 <USER_SPI_read+0x7c>
 800400c:	e000      	b.n	8004010 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800400e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004010:	2100      	movs	r1, #0
 8004012:	200c      	movs	r0, #12
 8004014:	f7ff fe39 	bl	8003c8a <send_cmd>
		}
	}
	despiselect();
 8004018:	f7ff fdb4 	bl	8003b84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000020 	.word	0x20000020
 8004034:	200001a8 	.word	0x200001a8

08004038 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <USER_SPI_write+0x1c>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <USER_SPI_write+0x20>
 8004054:	2304      	movs	r3, #4
 8004056:	e063      	b.n	8004120 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004058:	4b33      	ldr	r3, [pc, #204]	; (8004128 <USER_SPI_write+0xf0>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <USER_SPI_write+0x32>
 8004066:	2303      	movs	r3, #3
 8004068:	e05a      	b.n	8004120 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800406a:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <USER_SPI_write+0xf0>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <USER_SPI_write+0x44>
 8004078:	2302      	movs	r3, #2
 800407a:	e051      	b.n	8004120 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <USER_SPI_write+0xf4>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <USER_SPI_write+0x56>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	025b      	lsls	r3, r3, #9
 800408c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d110      	bne.n	80040b6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	2018      	movs	r0, #24
 8004098:	f7ff fdf7 	bl	8003c8a <send_cmd>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d136      	bne.n	8004110 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80040a2:	21fe      	movs	r1, #254	; 0xfe
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f7ff fdbe 	bl	8003c26 <xmit_datablock>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02f      	beq.n	8004110 <USER_SPI_write+0xd8>
			count = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	e02c      	b.n	8004110 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <USER_SPI_write+0xf4>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <USER_SPI_write+0x92>
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	2097      	movs	r0, #151	; 0x97
 80040c6:	f7ff fde0 	bl	8003c8a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	2019      	movs	r0, #25
 80040ce:	f7ff fddc 	bl	8003c8a <send_cmd>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11b      	bne.n	8004110 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80040d8:	21fc      	movs	r1, #252	; 0xfc
 80040da:	68b8      	ldr	r0, [r7, #8]
 80040dc:	f7ff fda3 	bl	8003c26 <xmit_datablock>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <USER_SPI_write+0xc4>
				buff += 512;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ee      	bne.n	80040d8 <USER_SPI_write+0xa0>
 80040fa:	e000      	b.n	80040fe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80040fc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80040fe:	21fd      	movs	r1, #253	; 0xfd
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff fd90 	bl	8003c26 <xmit_datablock>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <USER_SPI_write+0xd8>
 800410c:	2301      	movs	r3, #1
 800410e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004110:	f7ff fd38 	bl	8003b84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000020 	.word	0x20000020
 800412c:	200001a8 	.word	0x200001a8

08004130 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	; 0x30
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	603a      	str	r2, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
 800413c:	460b      	mov	r3, r1
 800413e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <USER_SPI_ioctl+0x1a>
 8004146:	2304      	movs	r3, #4
 8004148:	e15a      	b.n	8004400 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800414a:	4baf      	ldr	r3, [pc, #700]	; (8004408 <USER_SPI_ioctl+0x2d8>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <USER_SPI_ioctl+0x2c>
 8004158:	2303      	movs	r3, #3
 800415a:	e151      	b.n	8004400 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004162:	79bb      	ldrb	r3, [r7, #6]
 8004164:	2b04      	cmp	r3, #4
 8004166:	f200 8136 	bhi.w	80043d6 <USER_SPI_ioctl+0x2a6>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <USER_SPI_ioctl+0x40>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004185 	.word	0x08004185
 8004174:	08004199 	.word	0x08004199
 8004178:	080043d7 	.word	0x080043d7
 800417c:	08004245 	.word	0x08004245
 8004180:	0800433b 	.word	0x0800433b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004184:	f7ff fd0c 	bl	8003ba0 <spiselect>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8127 	beq.w	80043de <USER_SPI_ioctl+0x2ae>
 8004190:	2300      	movs	r3, #0
 8004192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004196:	e122      	b.n	80043de <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004198:	2100      	movs	r1, #0
 800419a:	2009      	movs	r0, #9
 800419c:	f7ff fd75 	bl	8003c8a <send_cmd>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 811d 	bne.w	80043e2 <USER_SPI_ioctl+0x2b2>
 80041a8:	f107 030c 	add.w	r3, r7, #12
 80041ac:	2110      	movs	r1, #16
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fd10 	bl	8003bd4 <rcvr_datablock>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8113 	beq.w	80043e2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80041bc:	7b3b      	ldrb	r3, [r7, #12]
 80041be:	099b      	lsrs	r3, r3, #6
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d111      	bne.n	80041ea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80041c6:	7d7b      	ldrb	r3, [r7, #21]
 80041c8:	461a      	mov	r2, r3
 80041ca:	7d3b      	ldrb	r3, [r7, #20]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	4413      	add	r3, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80041da:	4413      	add	r3, r2
 80041dc:	3301      	adds	r3, #1
 80041de:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	029a      	lsls	r2, r3, #10
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e028      	b.n	800423c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80041ea:	7c7b      	ldrb	r3, [r7, #17]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	7dbb      	ldrb	r3, [r7, #22]
 80041f4:	09db      	lsrs	r3, r3, #7
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	7d7b      	ldrb	r3, [r7, #21]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0306 	and.w	r3, r3, #6
 8004206:	b2db      	uxtb	r3, r3
 8004208:	4413      	add	r3, r2
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3302      	adds	r3, #2
 800420e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004212:	7d3b      	ldrb	r3, [r7, #20]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	7cbb      	ldrb	r3, [r7, #18]
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004228:	4413      	add	r3, r2
 800422a:	3301      	adds	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800422e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004232:	3b09      	subs	r3, #9
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	409a      	lsls	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004242:	e0ce      	b.n	80043e2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004244:	4b71      	ldr	r3, [pc, #452]	; (800440c <USER_SPI_ioctl+0x2dc>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d031      	beq.n	80042b4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004250:	2100      	movs	r1, #0
 8004252:	208d      	movs	r0, #141	; 0x8d
 8004254:	f7ff fd19 	bl	8003c8a <send_cmd>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 80c3 	bne.w	80043e6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004260:	20ff      	movs	r0, #255	; 0xff
 8004262:	f7ff fc1f 	bl	8003aa4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	2110      	movs	r1, #16
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fcb1 	bl	8003bd4 <rcvr_datablock>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80b6 	beq.w	80043e6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800427a:	2330      	movs	r3, #48	; 0x30
 800427c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004280:	e007      	b.n	8004292 <USER_SPI_ioctl+0x162>
 8004282:	20ff      	movs	r0, #255	; 0xff
 8004284:	f7ff fc0e 	bl	8003aa4 <xchg_spi>
 8004288:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800428c:	3b01      	subs	r3, #1
 800428e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004292:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f3      	bne.n	8004282 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800429a:	7dbb      	ldrb	r3, [r7, #22]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	2310      	movs	r3, #16
 80042a4:	fa03 f202 	lsl.w	r2, r3, r2
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80042b2:	e098      	b.n	80043e6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80042b4:	2100      	movs	r1, #0
 80042b6:	2009      	movs	r0, #9
 80042b8:	f7ff fce7 	bl	8003c8a <send_cmd>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 8091 	bne.w	80043e6 <USER_SPI_ioctl+0x2b6>
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	2110      	movs	r1, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fc82 	bl	8003bd4 <rcvr_datablock>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8087 	beq.w	80043e6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <USER_SPI_ioctl+0x2dc>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80042e4:	7dbb      	ldrb	r3, [r7, #22]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80042ec:	7dfa      	ldrb	r2, [r7, #23]
 80042ee:	09d2      	lsrs	r2, r2, #7
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	4413      	add	r3, r2
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	7e7b      	ldrb	r3, [r7, #25]
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	461a      	mov	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e013      	b.n	8004332 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800430a:	7dbb      	ldrb	r3, [r7, #22]
 800430c:	109b      	asrs	r3, r3, #2
 800430e:	b29b      	uxth	r3, r3
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	3301      	adds	r3, #1
 8004316:	7dfa      	ldrb	r2, [r7, #23]
 8004318:	00d2      	lsls	r2, r2, #3
 800431a:	f002 0218 	and.w	r2, r2, #24
 800431e:	7df9      	ldrb	r1, [r7, #23]
 8004320:	0949      	lsrs	r1, r1, #5
 8004322:	b2c9      	uxtb	r1, r1
 8004324:	440a      	add	r2, r1
 8004326:	3201      	adds	r2, #1
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	461a      	mov	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004338:	e055      	b.n	80043e6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800433a:	4b34      	ldr	r3, [pc, #208]	; (800440c <USER_SPI_ioctl+0x2dc>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	f003 0306 	and.w	r3, r3, #6
 8004342:	2b00      	cmp	r3, #0
 8004344:	d051      	beq.n	80043ea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004346:	f107 020c 	add.w	r2, r7, #12
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	210b      	movs	r1, #11
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff feee 	bl	8004130 <USER_SPI_ioctl>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d149      	bne.n	80043ee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800435a:	7b3b      	ldrb	r3, [r7, #12]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <USER_SPI_ioctl+0x23e>
 8004364:	7dbb      	ldrb	r3, [r7, #22]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d041      	beq.n	80043f2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	623b      	str	r3, [r7, #32]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <USER_SPI_ioctl+0x2dc>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	025b      	lsls	r3, r3, #9
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004398:	2020      	movs	r0, #32
 800439a:	f7ff fc76 	bl	8003c8a <send_cmd>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d128      	bne.n	80043f6 <USER_SPI_ioctl+0x2c6>
 80043a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043a6:	2021      	movs	r0, #33	; 0x21
 80043a8:	f7ff fc6f 	bl	8003c8a <send_cmd>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d121      	bne.n	80043f6 <USER_SPI_ioctl+0x2c6>
 80043b2:	2100      	movs	r1, #0
 80043b4:	2026      	movs	r0, #38	; 0x26
 80043b6:	f7ff fc68 	bl	8003c8a <send_cmd>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11a      	bne.n	80043f6 <USER_SPI_ioctl+0x2c6>
 80043c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80043c4:	f7ff fbbb 	bl	8003b3e <wait_ready>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d013      	beq.n	80043f6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80043d4:	e00f      	b.n	80043f6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80043d6:	2304      	movs	r3, #4
 80043d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80043dc:	e00c      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		break;
 80043de:	bf00      	nop
 80043e0:	e00a      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		break;
 80043e2:	bf00      	nop
 80043e4:	e008      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		break;
 80043e6:	bf00      	nop
 80043e8:	e006      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80043ea:	bf00      	nop
 80043ec:	e004      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <USER_SPI_ioctl+0x2c8>
		break;
 80043f6:	bf00      	nop
	}

	despiselect();
 80043f8:	f7ff fbc4 	bl	8003b84 <despiselect>

	return res;
 80043fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004400:	4618      	mov	r0, r3
 8004402:	3730      	adds	r7, #48	; 0x30
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000020 	.word	0x20000020
 800440c:	200001a8 	.word	0x200001a8

08004410 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004426:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004428:	7a5b      	ldrb	r3, [r3, #9]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d131      	bne.n	8004494 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004430:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004432:	7a5b      	ldrb	r3, [r3, #9]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004440:	7a5b      	ldrb	r3, [r3, #9]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004450:	7a5b      	ldrb	r3, [r3, #9]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004458:	4413      	add	r3, r2
 800445a:	79fa      	ldrb	r2, [r7, #7]
 800445c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 8004460:	7a5b      	ldrb	r3, [r3, #9]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	b2d1      	uxtb	r1, r2
 8004468:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <FATFS_LinkDriverEx+0x94>)
 800446a:	7251      	strb	r1, [r2, #9]
 800446c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800446e:	7dbb      	ldrb	r3, [r7, #22]
 8004470:	3330      	adds	r3, #48	; 0x30
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3301      	adds	r3, #1
 800447c:	223a      	movs	r2, #58	; 0x3a
 800447e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3302      	adds	r3, #2
 8004484:	222f      	movs	r2, #47	; 0x2f
 8004486:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3303      	adds	r3, #3
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	200001ac 	.word	0x200001ac

080044a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80044b2:	2200      	movs	r2, #0
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffaa 	bl	8004410 <FATFS_LinkDriverEx>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <__errno>:
 80044c8:	4b01      	ldr	r3, [pc, #4]	; (80044d0 <__errno+0x8>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000024 	.word	0x20000024

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4d0d      	ldr	r5, [pc, #52]	; (800450c <__libc_init_array+0x38>)
 80044d8:	4c0d      	ldr	r4, [pc, #52]	; (8004510 <__libc_init_array+0x3c>)
 80044da:	1b64      	subs	r4, r4, r5
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	2600      	movs	r6, #0
 80044e0:	42a6      	cmp	r6, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	4d0b      	ldr	r5, [pc, #44]	; (8004514 <__libc_init_array+0x40>)
 80044e6:	4c0c      	ldr	r4, [pc, #48]	; (8004518 <__libc_init_array+0x44>)
 80044e8:	f000 fc68 	bl	8004dbc <_init>
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	2600      	movs	r6, #0
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fc:	4798      	blx	r3
 80044fe:	3601      	adds	r6, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f855 3b04 	ldr.w	r3, [r5], #4
 8004506:	4798      	blx	r3
 8004508:	3601      	adds	r6, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	08004f48 	.word	0x08004f48
 8004510:	08004f48 	.word	0x08004f48
 8004514:	08004f48 	.word	0x08004f48
 8004518:	08004f4c 	.word	0x08004f4c

0800451c <memset>:
 800451c:	4402      	add	r2, r0
 800451e:	4603      	mov	r3, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <_vsniprintf_r>:
 800452c:	b530      	push	{r4, r5, lr}
 800452e:	1e14      	subs	r4, r2, #0
 8004530:	4605      	mov	r5, r0
 8004532:	b09b      	sub	sp, #108	; 0x6c
 8004534:	4618      	mov	r0, r3
 8004536:	da05      	bge.n	8004544 <_vsniprintf_r+0x18>
 8004538:	238b      	movs	r3, #139	; 0x8b
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	b01b      	add	sp, #108	; 0x6c
 8004542:	bd30      	pop	{r4, r5, pc}
 8004544:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004548:	f8ad 300c 	strh.w	r3, [sp, #12]
 800454c:	bf14      	ite	ne
 800454e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004552:	4623      	moveq	r3, r4
 8004554:	9302      	str	r3, [sp, #8]
 8004556:	9305      	str	r3, [sp, #20]
 8004558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455c:	9100      	str	r1, [sp, #0]
 800455e:	9104      	str	r1, [sp, #16]
 8004560:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004564:	4602      	mov	r2, r0
 8004566:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004568:	4669      	mov	r1, sp
 800456a:	4628      	mov	r0, r5
 800456c:	f000 f874 	bl	8004658 <_svfiprintf_r>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	bfbc      	itt	lt
 8004574:	238b      	movlt	r3, #139	; 0x8b
 8004576:	602b      	strlt	r3, [r5, #0]
 8004578:	2c00      	cmp	r4, #0
 800457a:	d0e1      	beq.n	8004540 <_vsniprintf_r+0x14>
 800457c:	9b00      	ldr	r3, [sp, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e7dd      	b.n	8004540 <_vsniprintf_r+0x14>

08004584 <vsniprintf>:
 8004584:	b507      	push	{r0, r1, r2, lr}
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	460a      	mov	r2, r1
 800458c:	4601      	mov	r1, r0
 800458e:	4803      	ldr	r0, [pc, #12]	; (800459c <vsniprintf+0x18>)
 8004590:	6800      	ldr	r0, [r0, #0]
 8004592:	f7ff ffcb 	bl	800452c <_vsniprintf_r>
 8004596:	b003      	add	sp, #12
 8004598:	f85d fb04 	ldr.w	pc, [sp], #4
 800459c:	20000024 	.word	0x20000024

080045a0 <__ssputs_r>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	688e      	ldr	r6, [r1, #8]
 80045a6:	429e      	cmp	r6, r3
 80045a8:	4682      	mov	sl, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	4690      	mov	r8, r2
 80045ae:	461f      	mov	r7, r3
 80045b0:	d838      	bhi.n	8004624 <__ssputs_r+0x84>
 80045b2:	898a      	ldrh	r2, [r1, #12]
 80045b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045b8:	d032      	beq.n	8004620 <__ssputs_r+0x80>
 80045ba:	6825      	ldr	r5, [r4, #0]
 80045bc:	6909      	ldr	r1, [r1, #16]
 80045be:	eba5 0901 	sub.w	r9, r5, r1
 80045c2:	6965      	ldr	r5, [r4, #20]
 80045c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045cc:	3301      	adds	r3, #1
 80045ce:	444b      	add	r3, r9
 80045d0:	106d      	asrs	r5, r5, #1
 80045d2:	429d      	cmp	r5, r3
 80045d4:	bf38      	it	cc
 80045d6:	461d      	movcc	r5, r3
 80045d8:	0553      	lsls	r3, r2, #21
 80045da:	d531      	bpl.n	8004640 <__ssputs_r+0xa0>
 80045dc:	4629      	mov	r1, r5
 80045de:	f000 fb47 	bl	8004c70 <_malloc_r>
 80045e2:	4606      	mov	r6, r0
 80045e4:	b950      	cbnz	r0, 80045fc <__ssputs_r+0x5c>
 80045e6:	230c      	movs	r3, #12
 80045e8:	f8ca 3000 	str.w	r3, [sl]
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	464a      	mov	r2, r9
 8004600:	f000 fabe 	bl	8004b80 <memcpy>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	6126      	str	r6, [r4, #16]
 8004612:	6165      	str	r5, [r4, #20]
 8004614:	444e      	add	r6, r9
 8004616:	eba5 0509 	sub.w	r5, r5, r9
 800461a:	6026      	str	r6, [r4, #0]
 800461c:	60a5      	str	r5, [r4, #8]
 800461e:	463e      	mov	r6, r7
 8004620:	42be      	cmp	r6, r7
 8004622:	d900      	bls.n	8004626 <__ssputs_r+0x86>
 8004624:	463e      	mov	r6, r7
 8004626:	4632      	mov	r2, r6
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	4641      	mov	r1, r8
 800462c:	f000 fab6 	bl	8004b9c <memmove>
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	1b9b      	subs	r3, r3, r6
 8004636:	4432      	add	r2, r6
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	6022      	str	r2, [r4, #0]
 800463c:	2000      	movs	r0, #0
 800463e:	e7db      	b.n	80045f8 <__ssputs_r+0x58>
 8004640:	462a      	mov	r2, r5
 8004642:	f000 fb6f 	bl	8004d24 <_realloc_r>
 8004646:	4606      	mov	r6, r0
 8004648:	2800      	cmp	r0, #0
 800464a:	d1e1      	bne.n	8004610 <__ssputs_r+0x70>
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	4650      	mov	r0, sl
 8004650:	f000 fabe 	bl	8004bd0 <_free_r>
 8004654:	e7c7      	b.n	80045e6 <__ssputs_r+0x46>
	...

08004658 <_svfiprintf_r>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	4698      	mov	r8, r3
 800465e:	898b      	ldrh	r3, [r1, #12]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	b09d      	sub	sp, #116	; 0x74
 8004664:	4607      	mov	r7, r0
 8004666:	460d      	mov	r5, r1
 8004668:	4614      	mov	r4, r2
 800466a:	d50e      	bpl.n	800468a <_svfiprintf_r+0x32>
 800466c:	690b      	ldr	r3, [r1, #16]
 800466e:	b963      	cbnz	r3, 800468a <_svfiprintf_r+0x32>
 8004670:	2140      	movs	r1, #64	; 0x40
 8004672:	f000 fafd 	bl	8004c70 <_malloc_r>
 8004676:	6028      	str	r0, [r5, #0]
 8004678:	6128      	str	r0, [r5, #16]
 800467a:	b920      	cbnz	r0, 8004686 <_svfiprintf_r+0x2e>
 800467c:	230c      	movs	r3, #12
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	e0d1      	b.n	800482a <_svfiprintf_r+0x1d2>
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	616b      	str	r3, [r5, #20]
 800468a:	2300      	movs	r3, #0
 800468c:	9309      	str	r3, [sp, #36]	; 0x24
 800468e:	2320      	movs	r3, #32
 8004690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004694:	f8cd 800c 	str.w	r8, [sp, #12]
 8004698:	2330      	movs	r3, #48	; 0x30
 800469a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004844 <_svfiprintf_r+0x1ec>
 800469e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046a2:	f04f 0901 	mov.w	r9, #1
 80046a6:	4623      	mov	r3, r4
 80046a8:	469a      	mov	sl, r3
 80046aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ae:	b10a      	cbz	r2, 80046b4 <_svfiprintf_r+0x5c>
 80046b0:	2a25      	cmp	r2, #37	; 0x25
 80046b2:	d1f9      	bne.n	80046a8 <_svfiprintf_r+0x50>
 80046b4:	ebba 0b04 	subs.w	fp, sl, r4
 80046b8:	d00b      	beq.n	80046d2 <_svfiprintf_r+0x7a>
 80046ba:	465b      	mov	r3, fp
 80046bc:	4622      	mov	r2, r4
 80046be:	4629      	mov	r1, r5
 80046c0:	4638      	mov	r0, r7
 80046c2:	f7ff ff6d 	bl	80045a0 <__ssputs_r>
 80046c6:	3001      	adds	r0, #1
 80046c8:	f000 80aa 	beq.w	8004820 <_svfiprintf_r+0x1c8>
 80046cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ce:	445a      	add	r2, fp
 80046d0:	9209      	str	r2, [sp, #36]	; 0x24
 80046d2:	f89a 3000 	ldrb.w	r3, [sl]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a2 	beq.w	8004820 <_svfiprintf_r+0x1c8>
 80046dc:	2300      	movs	r3, #0
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e6:	f10a 0a01 	add.w	sl, sl, #1
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	9307      	str	r3, [sp, #28]
 80046ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f2:	931a      	str	r3, [sp, #104]	; 0x68
 80046f4:	4654      	mov	r4, sl
 80046f6:	2205      	movs	r2, #5
 80046f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fc:	4851      	ldr	r0, [pc, #324]	; (8004844 <_svfiprintf_r+0x1ec>)
 80046fe:	f7fb fd6f 	bl	80001e0 <memchr>
 8004702:	9a04      	ldr	r2, [sp, #16]
 8004704:	b9d8      	cbnz	r0, 800473e <_svfiprintf_r+0xe6>
 8004706:	06d0      	lsls	r0, r2, #27
 8004708:	bf44      	itt	mi
 800470a:	2320      	movmi	r3, #32
 800470c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004710:	0711      	lsls	r1, r2, #28
 8004712:	bf44      	itt	mi
 8004714:	232b      	movmi	r3, #43	; 0x2b
 8004716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800471a:	f89a 3000 	ldrb.w	r3, [sl]
 800471e:	2b2a      	cmp	r3, #42	; 0x2a
 8004720:	d015      	beq.n	800474e <_svfiprintf_r+0xf6>
 8004722:	9a07      	ldr	r2, [sp, #28]
 8004724:	4654      	mov	r4, sl
 8004726:	2000      	movs	r0, #0
 8004728:	f04f 0c0a 	mov.w	ip, #10
 800472c:	4621      	mov	r1, r4
 800472e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004732:	3b30      	subs	r3, #48	; 0x30
 8004734:	2b09      	cmp	r3, #9
 8004736:	d94e      	bls.n	80047d6 <_svfiprintf_r+0x17e>
 8004738:	b1b0      	cbz	r0, 8004768 <_svfiprintf_r+0x110>
 800473a:	9207      	str	r2, [sp, #28]
 800473c:	e014      	b.n	8004768 <_svfiprintf_r+0x110>
 800473e:	eba0 0308 	sub.w	r3, r0, r8
 8004742:	fa09 f303 	lsl.w	r3, r9, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	46a2      	mov	sl, r4
 800474c:	e7d2      	b.n	80046f4 <_svfiprintf_r+0x9c>
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	9103      	str	r1, [sp, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfbb      	ittet	lt
 800475a:	425b      	neglt	r3, r3
 800475c:	f042 0202 	orrlt.w	r2, r2, #2
 8004760:	9307      	strge	r3, [sp, #28]
 8004762:	9307      	strlt	r3, [sp, #28]
 8004764:	bfb8      	it	lt
 8004766:	9204      	strlt	r2, [sp, #16]
 8004768:	7823      	ldrb	r3, [r4, #0]
 800476a:	2b2e      	cmp	r3, #46	; 0x2e
 800476c:	d10c      	bne.n	8004788 <_svfiprintf_r+0x130>
 800476e:	7863      	ldrb	r3, [r4, #1]
 8004770:	2b2a      	cmp	r3, #42	; 0x2a
 8004772:	d135      	bne.n	80047e0 <_svfiprintf_r+0x188>
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	9203      	str	r2, [sp, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	bfb8      	it	lt
 8004780:	f04f 33ff 	movlt.w	r3, #4294967295
 8004784:	3402      	adds	r4, #2
 8004786:	9305      	str	r3, [sp, #20]
 8004788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004854 <_svfiprintf_r+0x1fc>
 800478c:	7821      	ldrb	r1, [r4, #0]
 800478e:	2203      	movs	r2, #3
 8004790:	4650      	mov	r0, sl
 8004792:	f7fb fd25 	bl	80001e0 <memchr>
 8004796:	b140      	cbz	r0, 80047aa <_svfiprintf_r+0x152>
 8004798:	2340      	movs	r3, #64	; 0x40
 800479a:	eba0 000a 	sub.w	r0, r0, sl
 800479e:	fa03 f000 	lsl.w	r0, r3, r0
 80047a2:	9b04      	ldr	r3, [sp, #16]
 80047a4:	4303      	orrs	r3, r0
 80047a6:	3401      	adds	r4, #1
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ae:	4826      	ldr	r0, [pc, #152]	; (8004848 <_svfiprintf_r+0x1f0>)
 80047b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047b4:	2206      	movs	r2, #6
 80047b6:	f7fb fd13 	bl	80001e0 <memchr>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d038      	beq.n	8004830 <_svfiprintf_r+0x1d8>
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <_svfiprintf_r+0x1f4>)
 80047c0:	bb1b      	cbnz	r3, 800480a <_svfiprintf_r+0x1b2>
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	3307      	adds	r3, #7
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	3308      	adds	r3, #8
 80047cc:	9303      	str	r3, [sp, #12]
 80047ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d0:	4433      	add	r3, r6
 80047d2:	9309      	str	r3, [sp, #36]	; 0x24
 80047d4:	e767      	b.n	80046a6 <_svfiprintf_r+0x4e>
 80047d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80047da:	460c      	mov	r4, r1
 80047dc:	2001      	movs	r0, #1
 80047de:	e7a5      	b.n	800472c <_svfiprintf_r+0xd4>
 80047e0:	2300      	movs	r3, #0
 80047e2:	3401      	adds	r4, #1
 80047e4:	9305      	str	r3, [sp, #20]
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 0c0a 	mov.w	ip, #10
 80047ec:	4620      	mov	r0, r4
 80047ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047f2:	3a30      	subs	r2, #48	; 0x30
 80047f4:	2a09      	cmp	r2, #9
 80047f6:	d903      	bls.n	8004800 <_svfiprintf_r+0x1a8>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0c5      	beq.n	8004788 <_svfiprintf_r+0x130>
 80047fc:	9105      	str	r1, [sp, #20]
 80047fe:	e7c3      	b.n	8004788 <_svfiprintf_r+0x130>
 8004800:	fb0c 2101 	mla	r1, ip, r1, r2
 8004804:	4604      	mov	r4, r0
 8004806:	2301      	movs	r3, #1
 8004808:	e7f0      	b.n	80047ec <_svfiprintf_r+0x194>
 800480a:	ab03      	add	r3, sp, #12
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	462a      	mov	r2, r5
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <_svfiprintf_r+0x1f8>)
 8004812:	a904      	add	r1, sp, #16
 8004814:	4638      	mov	r0, r7
 8004816:	f3af 8000 	nop.w
 800481a:	1c42      	adds	r2, r0, #1
 800481c:	4606      	mov	r6, r0
 800481e:	d1d6      	bne.n	80047ce <_svfiprintf_r+0x176>
 8004820:	89ab      	ldrh	r3, [r5, #12]
 8004822:	065b      	lsls	r3, r3, #25
 8004824:	f53f af2c 	bmi.w	8004680 <_svfiprintf_r+0x28>
 8004828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800482a:	b01d      	add	sp, #116	; 0x74
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004830:	ab03      	add	r3, sp, #12
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	462a      	mov	r2, r5
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <_svfiprintf_r+0x1f8>)
 8004838:	a904      	add	r1, sp, #16
 800483a:	4638      	mov	r0, r7
 800483c:	f000 f87a 	bl	8004934 <_printf_i>
 8004840:	e7eb      	b.n	800481a <_svfiprintf_r+0x1c2>
 8004842:	bf00      	nop
 8004844:	08004f0c 	.word	0x08004f0c
 8004848:	08004f16 	.word	0x08004f16
 800484c:	00000000 	.word	0x00000000
 8004850:	080045a1 	.word	0x080045a1
 8004854:	08004f12 	.word	0x08004f12

08004858 <_printf_common>:
 8004858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	4616      	mov	r6, r2
 800485e:	4699      	mov	r9, r3
 8004860:	688a      	ldr	r2, [r1, #8]
 8004862:	690b      	ldr	r3, [r1, #16]
 8004864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004868:	4293      	cmp	r3, r2
 800486a:	bfb8      	it	lt
 800486c:	4613      	movlt	r3, r2
 800486e:	6033      	str	r3, [r6, #0]
 8004870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004874:	4607      	mov	r7, r0
 8004876:	460c      	mov	r4, r1
 8004878:	b10a      	cbz	r2, 800487e <_printf_common+0x26>
 800487a:	3301      	adds	r3, #1
 800487c:	6033      	str	r3, [r6, #0]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	0699      	lsls	r1, r3, #26
 8004882:	bf42      	ittt	mi
 8004884:	6833      	ldrmi	r3, [r6, #0]
 8004886:	3302      	addmi	r3, #2
 8004888:	6033      	strmi	r3, [r6, #0]
 800488a:	6825      	ldr	r5, [r4, #0]
 800488c:	f015 0506 	ands.w	r5, r5, #6
 8004890:	d106      	bne.n	80048a0 <_printf_common+0x48>
 8004892:	f104 0a19 	add.w	sl, r4, #25
 8004896:	68e3      	ldr	r3, [r4, #12]
 8004898:	6832      	ldr	r2, [r6, #0]
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	42ab      	cmp	r3, r5
 800489e:	dc26      	bgt.n	80048ee <_printf_common+0x96>
 80048a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048a4:	1e13      	subs	r3, r2, #0
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	bf18      	it	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	0692      	lsls	r2, r2, #26
 80048ae:	d42b      	bmi.n	8004908 <_printf_common+0xb0>
 80048b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048b4:	4649      	mov	r1, r9
 80048b6:	4638      	mov	r0, r7
 80048b8:	47c0      	blx	r8
 80048ba:	3001      	adds	r0, #1
 80048bc:	d01e      	beq.n	80048fc <_printf_common+0xa4>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	68e5      	ldr	r5, [r4, #12]
 80048c2:	6832      	ldr	r2, [r6, #0]
 80048c4:	f003 0306 	and.w	r3, r3, #6
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	bf08      	it	eq
 80048cc:	1aad      	subeq	r5, r5, r2
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	6922      	ldr	r2, [r4, #16]
 80048d2:	bf0c      	ite	eq
 80048d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d8:	2500      	movne	r5, #0
 80048da:	4293      	cmp	r3, r2
 80048dc:	bfc4      	itt	gt
 80048de:	1a9b      	subgt	r3, r3, r2
 80048e0:	18ed      	addgt	r5, r5, r3
 80048e2:	2600      	movs	r6, #0
 80048e4:	341a      	adds	r4, #26
 80048e6:	42b5      	cmp	r5, r6
 80048e8:	d11a      	bne.n	8004920 <_printf_common+0xc8>
 80048ea:	2000      	movs	r0, #0
 80048ec:	e008      	b.n	8004900 <_printf_common+0xa8>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4652      	mov	r2, sl
 80048f2:	4649      	mov	r1, r9
 80048f4:	4638      	mov	r0, r7
 80048f6:	47c0      	blx	r8
 80048f8:	3001      	adds	r0, #1
 80048fa:	d103      	bne.n	8004904 <_printf_common+0xac>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004904:	3501      	adds	r5, #1
 8004906:	e7c6      	b.n	8004896 <_printf_common+0x3e>
 8004908:	18e1      	adds	r1, r4, r3
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	2030      	movs	r0, #48	; 0x30
 800490e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004912:	4422      	add	r2, r4
 8004914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800491c:	3302      	adds	r3, #2
 800491e:	e7c7      	b.n	80048b0 <_printf_common+0x58>
 8004920:	2301      	movs	r3, #1
 8004922:	4622      	mov	r2, r4
 8004924:	4649      	mov	r1, r9
 8004926:	4638      	mov	r0, r7
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d0e6      	beq.n	80048fc <_printf_common+0xa4>
 800492e:	3601      	adds	r6, #1
 8004930:	e7d9      	b.n	80048e6 <_printf_common+0x8e>
	...

08004934 <_printf_i>:
 8004934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	460c      	mov	r4, r1
 800493a:	4691      	mov	r9, r2
 800493c:	7e27      	ldrb	r7, [r4, #24]
 800493e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004940:	2f78      	cmp	r7, #120	; 0x78
 8004942:	4680      	mov	r8, r0
 8004944:	469a      	mov	sl, r3
 8004946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800494a:	d807      	bhi.n	800495c <_printf_i+0x28>
 800494c:	2f62      	cmp	r7, #98	; 0x62
 800494e:	d80a      	bhi.n	8004966 <_printf_i+0x32>
 8004950:	2f00      	cmp	r7, #0
 8004952:	f000 80d8 	beq.w	8004b06 <_printf_i+0x1d2>
 8004956:	2f58      	cmp	r7, #88	; 0x58
 8004958:	f000 80a3 	beq.w	8004aa2 <_printf_i+0x16e>
 800495c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004964:	e03a      	b.n	80049dc <_printf_i+0xa8>
 8004966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800496a:	2b15      	cmp	r3, #21
 800496c:	d8f6      	bhi.n	800495c <_printf_i+0x28>
 800496e:	a001      	add	r0, pc, #4	; (adr r0, 8004974 <_printf_i+0x40>)
 8004970:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049e1 	.word	0x080049e1
 800497c:	0800495d 	.word	0x0800495d
 8004980:	0800495d 	.word	0x0800495d
 8004984:	0800495d 	.word	0x0800495d
 8004988:	0800495d 	.word	0x0800495d
 800498c:	080049e1 	.word	0x080049e1
 8004990:	0800495d 	.word	0x0800495d
 8004994:	0800495d 	.word	0x0800495d
 8004998:	0800495d 	.word	0x0800495d
 800499c:	0800495d 	.word	0x0800495d
 80049a0:	08004aed 	.word	0x08004aed
 80049a4:	08004a11 	.word	0x08004a11
 80049a8:	08004acf 	.word	0x08004acf
 80049ac:	0800495d 	.word	0x0800495d
 80049b0:	0800495d 	.word	0x0800495d
 80049b4:	08004b0f 	.word	0x08004b0f
 80049b8:	0800495d 	.word	0x0800495d
 80049bc:	08004a11 	.word	0x08004a11
 80049c0:	0800495d 	.word	0x0800495d
 80049c4:	0800495d 	.word	0x0800495d
 80049c8:	08004ad7 	.word	0x08004ad7
 80049cc:	680b      	ldr	r3, [r1, #0]
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	600a      	str	r2, [r1, #0]
 80049d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a3      	b.n	8004b28 <_printf_i+0x1f4>
 80049e0:	6825      	ldr	r5, [r4, #0]
 80049e2:	6808      	ldr	r0, [r1, #0]
 80049e4:	062e      	lsls	r6, r5, #24
 80049e6:	f100 0304 	add.w	r3, r0, #4
 80049ea:	d50a      	bpl.n	8004a02 <_printf_i+0xce>
 80049ec:	6805      	ldr	r5, [r0, #0]
 80049ee:	600b      	str	r3, [r1, #0]
 80049f0:	2d00      	cmp	r5, #0
 80049f2:	da03      	bge.n	80049fc <_printf_i+0xc8>
 80049f4:	232d      	movs	r3, #45	; 0x2d
 80049f6:	426d      	negs	r5, r5
 80049f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fc:	485e      	ldr	r0, [pc, #376]	; (8004b78 <_printf_i+0x244>)
 80049fe:	230a      	movs	r3, #10
 8004a00:	e019      	b.n	8004a36 <_printf_i+0x102>
 8004a02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a06:	6805      	ldr	r5, [r0, #0]
 8004a08:	600b      	str	r3, [r1, #0]
 8004a0a:	bf18      	it	ne
 8004a0c:	b22d      	sxthne	r5, r5
 8004a0e:	e7ef      	b.n	80049f0 <_printf_i+0xbc>
 8004a10:	680b      	ldr	r3, [r1, #0]
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	1d18      	adds	r0, r3, #4
 8004a16:	6008      	str	r0, [r1, #0]
 8004a18:	0628      	lsls	r0, r5, #24
 8004a1a:	d501      	bpl.n	8004a20 <_printf_i+0xec>
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <_printf_i+0xf2>
 8004a20:	0669      	lsls	r1, r5, #25
 8004a22:	d5fb      	bpl.n	8004a1c <_printf_i+0xe8>
 8004a24:	881d      	ldrh	r5, [r3, #0]
 8004a26:	4854      	ldr	r0, [pc, #336]	; (8004b78 <_printf_i+0x244>)
 8004a28:	2f6f      	cmp	r7, #111	; 0x6f
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2308      	moveq	r3, #8
 8004a2e:	230a      	movne	r3, #10
 8004a30:	2100      	movs	r1, #0
 8004a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a36:	6866      	ldr	r6, [r4, #4]
 8004a38:	60a6      	str	r6, [r4, #8]
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	bfa2      	ittt	ge
 8004a3e:	6821      	ldrge	r1, [r4, #0]
 8004a40:	f021 0104 	bicge.w	r1, r1, #4
 8004a44:	6021      	strge	r1, [r4, #0]
 8004a46:	b90d      	cbnz	r5, 8004a4c <_printf_i+0x118>
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	d04d      	beq.n	8004ae8 <_printf_i+0x1b4>
 8004a4c:	4616      	mov	r6, r2
 8004a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a52:	fb03 5711 	mls	r7, r3, r1, r5
 8004a56:	5dc7      	ldrb	r7, [r0, r7]
 8004a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a5c:	462f      	mov	r7, r5
 8004a5e:	42bb      	cmp	r3, r7
 8004a60:	460d      	mov	r5, r1
 8004a62:	d9f4      	bls.n	8004a4e <_printf_i+0x11a>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d10b      	bne.n	8004a80 <_printf_i+0x14c>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07df      	lsls	r7, r3, #31
 8004a6c:	d508      	bpl.n	8004a80 <_printf_i+0x14c>
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6861      	ldr	r1, [r4, #4]
 8004a72:	4299      	cmp	r1, r3
 8004a74:	bfde      	ittt	le
 8004a76:	2330      	movle	r3, #48	; 0x30
 8004a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a80:	1b92      	subs	r2, r2, r6
 8004a82:	6122      	str	r2, [r4, #16]
 8004a84:	f8cd a000 	str.w	sl, [sp]
 8004a88:	464b      	mov	r3, r9
 8004a8a:	aa03      	add	r2, sp, #12
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7ff fee2 	bl	8004858 <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d14c      	bne.n	8004b32 <_printf_i+0x1fe>
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	b004      	add	sp, #16
 8004a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa2:	4835      	ldr	r0, [pc, #212]	; (8004b78 <_printf_i+0x244>)
 8004aa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	680e      	ldr	r6, [r1, #0]
 8004aac:	061f      	lsls	r7, r3, #24
 8004aae:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ab2:	600e      	str	r6, [r1, #0]
 8004ab4:	d514      	bpl.n	8004ae0 <_printf_i+0x1ac>
 8004ab6:	07d9      	lsls	r1, r3, #31
 8004ab8:	bf44      	itt	mi
 8004aba:	f043 0320 	orrmi.w	r3, r3, #32
 8004abe:	6023      	strmi	r3, [r4, #0]
 8004ac0:	b91d      	cbnz	r5, 8004aca <_printf_i+0x196>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f023 0320 	bic.w	r3, r3, #32
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	2310      	movs	r3, #16
 8004acc:	e7b0      	b.n	8004a30 <_printf_i+0xfc>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	f043 0320 	orr.w	r3, r3, #32
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	2378      	movs	r3, #120	; 0x78
 8004ad8:	4828      	ldr	r0, [pc, #160]	; (8004b7c <_printf_i+0x248>)
 8004ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ade:	e7e3      	b.n	8004aa8 <_printf_i+0x174>
 8004ae0:	065e      	lsls	r6, r3, #25
 8004ae2:	bf48      	it	mi
 8004ae4:	b2ad      	uxthmi	r5, r5
 8004ae6:	e7e6      	b.n	8004ab6 <_printf_i+0x182>
 8004ae8:	4616      	mov	r6, r2
 8004aea:	e7bb      	b.n	8004a64 <_printf_i+0x130>
 8004aec:	680b      	ldr	r3, [r1, #0]
 8004aee:	6826      	ldr	r6, [r4, #0]
 8004af0:	6960      	ldr	r0, [r4, #20]
 8004af2:	1d1d      	adds	r5, r3, #4
 8004af4:	600d      	str	r5, [r1, #0]
 8004af6:	0635      	lsls	r5, r6, #24
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0x1cc>
 8004afc:	6018      	str	r0, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0x1d2>
 8004b00:	0671      	lsls	r1, r6, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0x1c8>
 8004b04:	8018      	strh	r0, [r3, #0]
 8004b06:	2300      	movs	r3, #0
 8004b08:	6123      	str	r3, [r4, #16]
 8004b0a:	4616      	mov	r6, r2
 8004b0c:	e7ba      	b.n	8004a84 <_printf_i+0x150>
 8004b0e:	680b      	ldr	r3, [r1, #0]
 8004b10:	1d1a      	adds	r2, r3, #4
 8004b12:	600a      	str	r2, [r1, #0]
 8004b14:	681e      	ldr	r6, [r3, #0]
 8004b16:	6862      	ldr	r2, [r4, #4]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7fb fb60 	bl	80001e0 <memchr>
 8004b20:	b108      	cbz	r0, 8004b26 <_printf_i+0x1f2>
 8004b22:	1b80      	subs	r0, r0, r6
 8004b24:	6060      	str	r0, [r4, #4]
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b30:	e7a8      	b.n	8004a84 <_printf_i+0x150>
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	4632      	mov	r2, r6
 8004b36:	4649      	mov	r1, r9
 8004b38:	4640      	mov	r0, r8
 8004b3a:	47d0      	blx	sl
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d0ab      	beq.n	8004a98 <_printf_i+0x164>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	079b      	lsls	r3, r3, #30
 8004b44:	d413      	bmi.n	8004b6e <_printf_i+0x23a>
 8004b46:	68e0      	ldr	r0, [r4, #12]
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	bfb8      	it	lt
 8004b4e:	4618      	movlt	r0, r3
 8004b50:	e7a4      	b.n	8004a9c <_printf_i+0x168>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4632      	mov	r2, r6
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	47d0      	blx	sl
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d09b      	beq.n	8004a98 <_printf_i+0x164>
 8004b60:	3501      	adds	r5, #1
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	9903      	ldr	r1, [sp, #12]
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dcf2      	bgt.n	8004b52 <_printf_i+0x21e>
 8004b6c:	e7eb      	b.n	8004b46 <_printf_i+0x212>
 8004b6e:	2500      	movs	r5, #0
 8004b70:	f104 0619 	add.w	r6, r4, #25
 8004b74:	e7f5      	b.n	8004b62 <_printf_i+0x22e>
 8004b76:	bf00      	nop
 8004b78:	08004f1d 	.word	0x08004f1d
 8004b7c:	08004f2e 	.word	0x08004f2e

08004b80 <memcpy>:
 8004b80:	440a      	add	r2, r1
 8004b82:	4291      	cmp	r1, r2
 8004b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	4770      	bx	lr
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b96:	4291      	cmp	r1, r2
 8004b98:	d1f9      	bne.n	8004b8e <memcpy+0xe>
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <memmove>:
 8004b9c:	4288      	cmp	r0, r1
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	eb01 0402 	add.w	r4, r1, r2
 8004ba4:	d902      	bls.n	8004bac <memmove+0x10>
 8004ba6:	4284      	cmp	r4, r0
 8004ba8:	4623      	mov	r3, r4
 8004baa:	d807      	bhi.n	8004bbc <memmove+0x20>
 8004bac:	1e43      	subs	r3, r0, #1
 8004bae:	42a1      	cmp	r1, r4
 8004bb0:	d008      	beq.n	8004bc4 <memmove+0x28>
 8004bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bba:	e7f8      	b.n	8004bae <memmove+0x12>
 8004bbc:	4402      	add	r2, r0
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	428a      	cmp	r2, r1
 8004bc2:	d100      	bne.n	8004bc6 <memmove+0x2a>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bce:	e7f7      	b.n	8004bc0 <memmove+0x24>

08004bd0 <_free_r>:
 8004bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d048      	beq.n	8004c68 <_free_r+0x98>
 8004bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bda:	9001      	str	r0, [sp, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f1a1 0404 	sub.w	r4, r1, #4
 8004be2:	bfb8      	it	lt
 8004be4:	18e4      	addlt	r4, r4, r3
 8004be6:	f000 f8d3 	bl	8004d90 <__malloc_lock>
 8004bea:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <_free_r+0x9c>)
 8004bec:	9801      	ldr	r0, [sp, #4]
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	4615      	mov	r5, r2
 8004bf2:	b933      	cbnz	r3, 8004c02 <_free_r+0x32>
 8004bf4:	6063      	str	r3, [r4, #4]
 8004bf6:	6014      	str	r4, [r2, #0]
 8004bf8:	b003      	add	sp, #12
 8004bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bfe:	f000 b8cd 	b.w	8004d9c <__malloc_unlock>
 8004c02:	42a3      	cmp	r3, r4
 8004c04:	d90b      	bls.n	8004c1e <_free_r+0x4e>
 8004c06:	6821      	ldr	r1, [r4, #0]
 8004c08:	1862      	adds	r2, r4, r1
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	bf04      	itt	eq
 8004c0e:	681a      	ldreq	r2, [r3, #0]
 8004c10:	685b      	ldreq	r3, [r3, #4]
 8004c12:	6063      	str	r3, [r4, #4]
 8004c14:	bf04      	itt	eq
 8004c16:	1852      	addeq	r2, r2, r1
 8004c18:	6022      	streq	r2, [r4, #0]
 8004c1a:	602c      	str	r4, [r5, #0]
 8004c1c:	e7ec      	b.n	8004bf8 <_free_r+0x28>
 8004c1e:	461a      	mov	r2, r3
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	b10b      	cbz	r3, 8004c28 <_free_r+0x58>
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d9fa      	bls.n	8004c1e <_free_r+0x4e>
 8004c28:	6811      	ldr	r1, [r2, #0]
 8004c2a:	1855      	adds	r5, r2, r1
 8004c2c:	42a5      	cmp	r5, r4
 8004c2e:	d10b      	bne.n	8004c48 <_free_r+0x78>
 8004c30:	6824      	ldr	r4, [r4, #0]
 8004c32:	4421      	add	r1, r4
 8004c34:	1854      	adds	r4, r2, r1
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	6011      	str	r1, [r2, #0]
 8004c3a:	d1dd      	bne.n	8004bf8 <_free_r+0x28>
 8004c3c:	681c      	ldr	r4, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	6053      	str	r3, [r2, #4]
 8004c42:	4421      	add	r1, r4
 8004c44:	6011      	str	r1, [r2, #0]
 8004c46:	e7d7      	b.n	8004bf8 <_free_r+0x28>
 8004c48:	d902      	bls.n	8004c50 <_free_r+0x80>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	6003      	str	r3, [r0, #0]
 8004c4e:	e7d3      	b.n	8004bf8 <_free_r+0x28>
 8004c50:	6825      	ldr	r5, [r4, #0]
 8004c52:	1961      	adds	r1, r4, r5
 8004c54:	428b      	cmp	r3, r1
 8004c56:	bf04      	itt	eq
 8004c58:	6819      	ldreq	r1, [r3, #0]
 8004c5a:	685b      	ldreq	r3, [r3, #4]
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	bf04      	itt	eq
 8004c60:	1949      	addeq	r1, r1, r5
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	6054      	str	r4, [r2, #4]
 8004c66:	e7c7      	b.n	8004bf8 <_free_r+0x28>
 8004c68:	b003      	add	sp, #12
 8004c6a:	bd30      	pop	{r4, r5, pc}
 8004c6c:	200001b8 	.word	0x200001b8

08004c70 <_malloc_r>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	1ccd      	adds	r5, r1, #3
 8004c74:	f025 0503 	bic.w	r5, r5, #3
 8004c78:	3508      	adds	r5, #8
 8004c7a:	2d0c      	cmp	r5, #12
 8004c7c:	bf38      	it	cc
 8004c7e:	250c      	movcc	r5, #12
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	4606      	mov	r6, r0
 8004c84:	db01      	blt.n	8004c8a <_malloc_r+0x1a>
 8004c86:	42a9      	cmp	r1, r5
 8004c88:	d903      	bls.n	8004c92 <_malloc_r+0x22>
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	6033      	str	r3, [r6, #0]
 8004c8e:	2000      	movs	r0, #0
 8004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c92:	f000 f87d 	bl	8004d90 <__malloc_lock>
 8004c96:	4921      	ldr	r1, [pc, #132]	; (8004d1c <_malloc_r+0xac>)
 8004c98:	680a      	ldr	r2, [r1, #0]
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	b99c      	cbnz	r4, 8004cc6 <_malloc_r+0x56>
 8004c9e:	4f20      	ldr	r7, [pc, #128]	; (8004d20 <_malloc_r+0xb0>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	b923      	cbnz	r3, 8004cae <_malloc_r+0x3e>
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f000 f862 	bl	8004d70 <_sbrk_r>
 8004cac:	6038      	str	r0, [r7, #0]
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 f85d 	bl	8004d70 <_sbrk_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d123      	bne.n	8004d02 <_malloc_r+0x92>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f000 f86c 	bl	8004d9c <__malloc_unlock>
 8004cc4:	e7e3      	b.n	8004c8e <_malloc_r+0x1e>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	1b5b      	subs	r3, r3, r5
 8004cca:	d417      	bmi.n	8004cfc <_malloc_r+0x8c>
 8004ccc:	2b0b      	cmp	r3, #11
 8004cce:	d903      	bls.n	8004cd8 <_malloc_r+0x68>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	441c      	add	r4, r3
 8004cd4:	6025      	str	r5, [r4, #0]
 8004cd6:	e004      	b.n	8004ce2 <_malloc_r+0x72>
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	42a2      	cmp	r2, r4
 8004cdc:	bf0c      	ite	eq
 8004cde:	600b      	streq	r3, [r1, #0]
 8004ce0:	6053      	strne	r3, [r2, #4]
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 f85a 	bl	8004d9c <__malloc_unlock>
 8004ce8:	f104 000b 	add.w	r0, r4, #11
 8004cec:	1d23      	adds	r3, r4, #4
 8004cee:	f020 0007 	bic.w	r0, r0, #7
 8004cf2:	1ac2      	subs	r2, r0, r3
 8004cf4:	d0cc      	beq.n	8004c90 <_malloc_r+0x20>
 8004cf6:	1a1b      	subs	r3, r3, r0
 8004cf8:	50a3      	str	r3, [r4, r2]
 8004cfa:	e7c9      	b.n	8004c90 <_malloc_r+0x20>
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	6864      	ldr	r4, [r4, #4]
 8004d00:	e7cc      	b.n	8004c9c <_malloc_r+0x2c>
 8004d02:	1cc4      	adds	r4, r0, #3
 8004d04:	f024 0403 	bic.w	r4, r4, #3
 8004d08:	42a0      	cmp	r0, r4
 8004d0a:	d0e3      	beq.n	8004cd4 <_malloc_r+0x64>
 8004d0c:	1a21      	subs	r1, r4, r0
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f82e 	bl	8004d70 <_sbrk_r>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d1dd      	bne.n	8004cd4 <_malloc_r+0x64>
 8004d18:	e7cf      	b.n	8004cba <_malloc_r+0x4a>
 8004d1a:	bf00      	nop
 8004d1c:	200001b8 	.word	0x200001b8
 8004d20:	200001bc 	.word	0x200001bc

08004d24 <_realloc_r>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	4607      	mov	r7, r0
 8004d28:	4614      	mov	r4, r2
 8004d2a:	460e      	mov	r6, r1
 8004d2c:	b921      	cbnz	r1, 8004d38 <_realloc_r+0x14>
 8004d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d32:	4611      	mov	r1, r2
 8004d34:	f7ff bf9c 	b.w	8004c70 <_malloc_r>
 8004d38:	b922      	cbnz	r2, 8004d44 <_realloc_r+0x20>
 8004d3a:	f7ff ff49 	bl	8004bd0 <_free_r>
 8004d3e:	4625      	mov	r5, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	f000 f830 	bl	8004da8 <_malloc_usable_size_r>
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d20f      	bcs.n	8004d6c <_realloc_r+0x48>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4638      	mov	r0, r7
 8004d50:	f7ff ff8e 	bl	8004c70 <_malloc_r>
 8004d54:	4605      	mov	r5, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0f2      	beq.n	8004d40 <_realloc_r+0x1c>
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	f7ff ff0f 	bl	8004b80 <memcpy>
 8004d62:	4631      	mov	r1, r6
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7ff ff33 	bl	8004bd0 <_free_r>
 8004d6a:	e7e9      	b.n	8004d40 <_realloc_r+0x1c>
 8004d6c:	4635      	mov	r5, r6
 8004d6e:	e7e7      	b.n	8004d40 <_realloc_r+0x1c>

08004d70 <_sbrk_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4d06      	ldr	r5, [pc, #24]	; (8004d8c <_sbrk_r+0x1c>)
 8004d74:	2300      	movs	r3, #0
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	f7fc f9f2 	bl	8001164 <_sbrk>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_sbrk_r+0x1a>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_sbrk_r+0x1a>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	20000774 	.word	0x20000774

08004d90 <__malloc_lock>:
 8004d90:	4801      	ldr	r0, [pc, #4]	; (8004d98 <__malloc_lock+0x8>)
 8004d92:	f000 b811 	b.w	8004db8 <__retarget_lock_acquire_recursive>
 8004d96:	bf00      	nop
 8004d98:	2000077c 	.word	0x2000077c

08004d9c <__malloc_unlock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	; (8004da4 <__malloc_unlock+0x8>)
 8004d9e:	f000 b80c 	b.w	8004dba <__retarget_lock_release_recursive>
 8004da2:	bf00      	nop
 8004da4:	2000077c 	.word	0x2000077c

08004da8 <_malloc_usable_size_r>:
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f18      	subs	r0, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbc      	itt	lt
 8004db2:	580b      	ldrlt	r3, [r1, r0]
 8004db4:	18c0      	addlt	r0, r0, r3
 8004db6:	4770      	bx	lr

08004db8 <__retarget_lock_acquire_recursive>:
 8004db8:	4770      	bx	lr

08004dba <__retarget_lock_release_recursive>:
 8004dba:	4770      	bx	lr

08004dbc <_init>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_fini>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr
