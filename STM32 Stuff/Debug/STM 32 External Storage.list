
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0800a1a8  0800a1a8  0001a1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a914  0800a914  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a91c  0800a91c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000774  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000968  20000968  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188bd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d7  00000000  00000000  00038ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  0003bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e48  00000000  00000000  0003cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b5c  00000000  00000000  0003dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015775  00000000  00000000  000438fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce173  00000000  00000000  00059071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001271e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  00127238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a18c 	.word	0x0800a18c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800a18c 	.word	0x0800a18c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <BME_init>:
 *      Author: bobox
 */

#include "bme.h"

bool BME_init(SPI_HandleTypeDef* spi){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(BME_read8(spi, BME280_REGISTER_CHIPID) != 0x60){
 8000ea8:	21d0      	movs	r1, #208	; 0xd0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f8cc 	bl	8001048 <BME_read8>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b60      	cmp	r3, #96	; 0x60
 8000eb4:	d001      	beq.n	8000eba <BME_init+0x1a>
    return false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e01b      	b.n	8000ef2 <BME_init+0x52>
  }
  BME_write8(spi, BME280_REGISTER_SOFTRESET, 0xB6);
 8000eba:	22b6      	movs	r2, #182	; 0xb6
 8000ebc:	21e0      	movs	r1, #224	; 0xe0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f81c 	bl	8000efc <BME_write8>
  HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f001 f819 	bl	8001efc <HAL_Delay>
  while(isReadingCalibration(spi)){
 8000eca:	e002      	b.n	8000ed2 <BME_init+0x32>
    HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f001 f815 	bl	8001efc <HAL_Delay>
  while(isReadingCalibration(spi)){
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f838 	bl	8000f48 <isReadingCalibration>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f6      	bne.n	8000ecc <BME_init+0x2c>
  }
  readCoefficients(spi);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f848 	bl	8000f74 <readCoefficients>
  setSampling(spi);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f867 	bl	8000fb8 <setSampling>
  HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f001 f806 	bl	8001efc <HAL_Delay>
  return true;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <BME_write8>:

void BME_write8(SPI_HandleTypeDef* spi, uint8_t addr, uint8_t val){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	70bb      	strb	r3, [r7, #2]
  uint8_t buf[2];
  buf[0] = addr & ~0x80;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	733b      	strb	r3, [r7, #12]
  buf[1] = val;
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <BME_write8+0x48>)
 8000f20:	f001 faaa 	bl	8002478 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi, &buf, 2, 100);
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f002 fb09 	bl	8003544 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <BME_write8+0x48>)
 8000f38:	f001 fa9e 	bl	8002478 <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <isReadingCalibration>:

bool isReadingCalibration(SPI_HandleTypeDef* spi){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint8_t const rStatus = BME_read8(spi, BME280_REGISTER_STATUS);
 8000f50:	21f3      	movs	r1, #243	; 0xf3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f878 	bl	8001048 <BME_read8>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
  return (rStatus & (1 << 0)) != 0;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <readCoefficients>:

void readCoefficients(SPI_HandleTypeDef* spi){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  _bme280_calib.dig_T1 = BME_read16_LE(spi, BME280_REGISTER_DIG_T1);
 8000f7c:	2188      	movs	r1, #136	; 0x88
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f836 	bl	8000ff0 <BME_read16_LE>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <readCoefficients+0x40>)
 8000f8a:	801a      	strh	r2, [r3, #0]
  _bme280_calib.dig_T2 = BME_readS16_LE(spi, BME280_REGISTER_DIG_T2);
 8000f8c:	218a      	movs	r1, #138	; 0x8a
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f849 	bl	8001026 <BME_readS16_LE>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <readCoefficients+0x40>)
 8000f9a:	805a      	strh	r2, [r3, #2]
  _bme280_calib.dig_T3 = BME_readS16_LE(spi, BME280_REGISTER_DIG_T3);
 8000f9c:	218c      	movs	r1, #140	; 0x8c
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f841 	bl	8001026 <BME_readS16_LE>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <readCoefficients+0x40>)
 8000faa:	809a      	strh	r2, [r3, #4]
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000354 	.word	0x20000354

08000fb8 <setSampling>:

void setSampling(SPI_HandleTypeDef* spi){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  BME_write8(spi, BME280_REGISTER_CONTROL, MODE_SLEEP);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	21f4      	movs	r1, #244	; 0xf4
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff99 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONTROLHUMID, SAMPLING_X16);
 8000fca:	2205      	movs	r2, #5
 8000fcc:	21f2      	movs	r1, #242	; 0xf2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff94 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONFIG, (STANDBY_MS_0_5 << 5) | (FILTER_OFF << 2) | 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21f5      	movs	r1, #245	; 0xf5
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff8f 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONTROL, (SAMPLING_X16 << 5) | (SAMPLING_X16 << 2) | MODE_NORMAL);
 8000fde:	22b7      	movs	r2, #183	; 0xb7
 8000fe0:	21f4      	movs	r1, #244	; 0xf4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff8a 	bl	8000efc <BME_write8>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <BME_read16_LE>:

uint16_t BME_read16_LE(SPI_HandleTypeDef* spi, uint8_t addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  uint16_t temp = BME_read16(spi, addr);
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f84b 	bl	800109c <BME_read16>
 8001006:	4603      	mov	r3, r0
 8001008:	81fb      	strh	r3, [r7, #14]
  return (temp >> 8) | (temp << 8);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <BME_readS16_LE>:

int16_t BME_readS16_LE(SPI_HandleTypeDef* spi, uint8_t addr){
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
  return (int16_t)BME_read16_LE(spi, addr);
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffda 	bl	8000ff0 <BME_read16_LE>
 800103c:	4603      	mov	r3, r0
 800103e:	b21b      	sxth	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <BME_read8>:

uint8_t BME_read8(SPI_HandleTypeDef* spi, uint8_t addr){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];
    addr = (uint8_t)(addr | 0x80);
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105a:	b2db      	uxtb	r3, r3
 800105c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <BME_read8+0x50>)
 8001064:	f001 fa08 	bl	8002478 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 8001068:	1cf9      	adds	r1, r7, #3
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	2201      	movs	r2, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fa68 	bl	8003544 <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 1, 100);
 8001074:	f107 010c 	add.w	r1, r7, #12
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	2201      	movs	r2, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f002 fb9d 	bl	80037bc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <BME_read8+0x50>)
 8001088:	f001 f9f6 	bl	8002478 <HAL_GPIO_WritePin>
    return buf[0];
 800108c:	7b3b      	ldrb	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800

0800109c <BME_read16>:

uint16_t BME_read16(SPI_HandleTypeDef* spi, uint8_t addr){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  uint8_t buf[2];
  addr = (uint8_t)(addr | 0x80);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <BME_read16+0x5c>)
 80010b8:	f001 f9de 	bl	8002478 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi, &addr, 1, 100);
 80010bc:	1cf9      	adds	r1, r7, #3
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	2201      	movs	r2, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f002 fa3e 	bl	8003544 <HAL_SPI_Transmit>
  HAL_SPI_Receive(spi, buf, 3, 100);
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2203      	movs	r2, #3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f002 fb73 	bl	80037bc <HAL_SPI_Receive>
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <BME_read16+0x5c>)
 80010dc:	f001 f9cc 	bl	8002478 <HAL_GPIO_WritePin>
  return (uint16_t)(buf[0]) << 8 | (uint16_t)(buf[1]);
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020800 	.word	0x40020800

080010fc <BME_read24>:

uint32_t BME_read24(SPI_HandleTypeDef* spi, uint8_t addr){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[3];
    addr = (uint8_t)(addr | 0x80);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110e:	b2db      	uxtb	r3, r3
 8001110:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4810      	ldr	r0, [pc, #64]	; (8001158 <BME_read24+0x5c>)
 8001118:	f001 f9ae 	bl	8002478 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 800111c:	1cf9      	adds	r1, r7, #3
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	2201      	movs	r2, #1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f002 fa0e 	bl	8003544 <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 3, 100);
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	2203      	movs	r2, #3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f002 fb43 	bl	80037bc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <BME_read24+0x5c>)
 800113c:	f001 f99c 	bl	8002478 <HAL_GPIO_WritePin>
    return (uint32_t)buf[0] << 16 | (uint32_t)buf[1] << 8 | (uint32_t)buf[2];
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4313      	orrs	r3, r2
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	4313      	orrs	r3, r2
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020800 	.word	0x40020800

0800115c <BME_readTemperature>:

float BME_readTemperature(SPI_HandleTypeDef* spi) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = BME_read24(spi, BME280_REGISTER_TEMPDATA);
 8001164:	21fa      	movs	r1, #250	; 0xfa
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffc8 	bl	80010fc <BME_read24>
 800116c:	4603      	mov	r3, r0
 800116e:	61fb      	str	r3, [r7, #28]
  if (adc_T == 0x800000){ // value in case temp measurement was disabled
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001176:	d102      	bne.n	800117e <BME_readTemperature+0x22>
    return -1;
 8001178:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800117c:	e050      	b.n	8001220 <BME_readTemperature+0xc4>
  }
  adc_T >>= 4;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	111b      	asrs	r3, r3, #4
 8001182:	61fb      	str	r3, [r7, #28]

  var1 = (int32_t)((adc_T / 8) - ((int32_t)_bme280_calib.dig_T1 * 2));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <BME_readTemperature+0x30>
 800118a:	3307      	adds	r3, #7
 800118c:	10db      	asrs	r3, r3, #3
 800118e:	461a      	mov	r2, r3
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <BME_readTemperature+0xd4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	61bb      	str	r3, [r7, #24]
  var1 = (var1 * ((int32_t)_bme280_calib.dig_T2)) / 2048;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <BME_readTemperature+0xd4>)
 800119c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a0:	461a      	mov	r2, r3
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	fb03 f302 	mul.w	r3, r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da01      	bge.n	80011b0 <BME_readTemperature+0x54>
 80011ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011b0:	12db      	asrs	r3, r3, #11
 80011b2:	61bb      	str	r3, [r7, #24]
  var2 = (int32_t)((adc_T / 16) - ((int32_t)_bme280_calib.dig_T1));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da00      	bge.n	80011bc <BME_readTemperature+0x60>
 80011ba:	330f      	adds	r3, #15
 80011bc:	111b      	asrs	r3, r3, #4
 80011be:	461a      	mov	r2, r3
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <BME_readTemperature+0xd4>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  var2 = (((var2 * var2) / 4096) * ((int32_t)_bme280_calib.dig_T3)) / 16384;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fb03 f303 	mul.w	r3, r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da01      	bge.n	80011d6 <BME_readTemperature+0x7a>
 80011d2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80011d6:	131b      	asrs	r3, r3, #12
 80011d8:	461a      	mov	r2, r3
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <BME_readTemperature+0xd4>)
 80011dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011e0:	fb03 f302 	mul.w	r3, r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da02      	bge.n	80011ee <BME_readTemperature+0x92>
 80011e8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80011ec:	333f      	adds	r3, #63	; 0x3f
 80011ee:	139b      	asrs	r3, r3, #14
 80011f0:	617b      	str	r3, [r7, #20]

  int32_t t_fine = var1 + var2;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]

  int32_t T = (t_fine * 5 + 128) / 256;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3380      	adds	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <BME_readTemperature+0xae>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	60fb      	str	r3, [r7, #12]

  return (float)T / 100;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001234 <BME_readTemperature+0xd8>
 800121c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001220:	eef0 7a47 	vmov.f32	s15, s14
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000354 	.word	0x20000354
 8001234:	42c80000 	.word	0x42c80000

08001238 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8001238:	b40f      	push	{r0, r1, r2, r3}
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <myprintf+0x44>)
 8001250:	f006 fd82 	bl	8007d58 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <myprintf+0x44>)
 8001256:	f7fe ffbb 	bl	80001d0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	b29a      	uxth	r2, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	4905      	ldr	r1, [pc, #20]	; (800127c <myprintf+0x44>)
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <myprintf+0x48>)
 800126a:	f002 fed8 	bl	800401e <HAL_UART_Transmit>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001278:	b004      	add	sp, #16
 800127a:	4770      	bx	lr
 800127c:	20000210 	.word	0x20000210
 8001280:	200004a0 	.word	0x200004a0

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f000 fdc4 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 f872 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f000 f9fe 	bl	8001694 <MX_GPIO_Init>
  MX_FATFS_Init();
 8001298:	f003 f98a 	bl	80045b0 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800129c:	f000 f9d0 	bl	8001640 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80012a0:	f000 f998 	bl	80015d4 <MX_SPI3_Init>
  MX_RTC_Init();
 80012a4:	f000 f8c8 	bl	8001438 <MX_RTC_Init>
  MX_SPI2_Init();
 80012a8:	f000 f95c 	bl	8001564 <MX_SPI2_Init>
  MX_SPI1_Init();
 80012ac:	f000 f924 	bl	80014f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 80012b0:	20c8      	movs	r0, #200	; 0xc8
 80012b2:	f000 fe23 	bl	8001efc <HAL_Delay>
  BME_init(&hspi1);
 80012b6:	4829      	ldr	r0, [pc, #164]	; (800135c <main+0xd8>)
 80012b8:	f7ff fdf2 	bl	8000ea0 <BME_init>
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_SET);  // idk why i need this lol but doesnt initialize sd without
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c2:	4827      	ldr	r0, [pc, #156]	; (8001360 <main+0xdc>)
 80012c4:	f001 f8d8 	bl	8002478 <HAL_GPIO_WritePin>
  FATFS FatFs;
  SD_mount(&FatFs);
 80012c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fac3 	bl	8001858 <SD_mount>

  // Write header
  char buf[256] = "Time, Angle, Temperature\n";
 80012d2:	1d3e      	adds	r6, r7, #4
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <main+0xe0>)
 80012d6:	4634      	mov	r4, r6
 80012d8:	461d      	mov	r5, r3
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e2:	c403      	stmia	r4!, {r0, r1}
 80012e4:	8022      	strh	r2, [r4, #0]
 80012e6:	f106 031a 	add.w	r3, r6, #26
 80012ea:	22e6      	movs	r2, #230	; 0xe6
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 f894 	bl	800741c <memset>
  int btw = strlen(buf);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ff6a 	bl	80001d0 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  UINT bytesWrote;
  bytesWrote = SD_write("data.csv", FA_READ | FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS, buf, btw);
 8001302:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001306:	1d3a      	adds	r2, r7, #4
 8001308:	211b      	movs	r1, #27
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <main+0xe4>)
 800130c:	f000 fad4 	bl	80018b8 <SD_write>
 8001310:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
  myprintf("Wrote %i bytes to 'data.csv'!\r\n", bytesWrote);
 8001314:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <main+0xe8>)
 800131a:	f7ff ff8d 	bl	8001238 <myprintf>

  SD_unmount();
 800131e:	f000 fb29 	bl	8001974 <SD_unmount>

  // reset timer to 0
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x0000){
 8001322:	2101      	movs	r1, #1
 8001324:	4812      	ldr	r0, [pc, #72]	; (8001370 <main+0xec>)
 8001326:	f002 f86c 	bl	8003402 <HAL_RTCEx_BKUPRead>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <main+0xb2>
    rtc_set_time(&hrtc);
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <main+0xec>)
 8001332:	f000 fa5a 	bl	80017ea <rtc_set_time>
    // hall_data = hall_data/182;
    // myprintf("data: %d", hall_data);
    // HAL_Delay(500);

    float temp;
    temp = BME_readTemperature(&hspi1);
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <main+0xd8>)
 8001338:	f7ff ff10 	bl	800115c <BME_readTemperature>
 800133c:	ed87 0acd 	vstr	s0, [r7, #820]	; 0x334
    myprintf("%.2f   ", temp);
 8001340:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <main+0xf0>)
 800134e:	f7ff ff73 	bl	8001238 <myprintf>
    HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f000 fdd1 	bl	8001efc <HAL_Delay>
  {
 800135a:	e7ec      	b.n	8001336 <main+0xb2>
 800135c:	20000448 	.word	0x20000448
 8001360:	40020c00 	.word	0x40020c00
 8001364:	0800a2fc 	.word	0x0800a2fc
 8001368:	0800a1c8 	.word	0x0800a1c8
 800136c:	0800a2d4 	.word	0x0800a2d4
 8001370:	20000428 	.word	0x20000428
 8001374:	0800a2f4 	.word	0x0800a2f4

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	2230      	movs	r2, #48	; 0x30
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f006 f848 	bl	800741c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <SystemClock_Config+0xb8>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <SystemClock_Config+0xb8>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <SystemClock_Config+0xb8>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <SystemClock_Config+0xbc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <SystemClock_Config+0xbc>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <SystemClock_Config+0xbc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013d4:	230a      	movs	r3, #10
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	2310      	movs	r3, #16
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f85d 	bl	80024ac <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013f8:	f000 f9f2 	bl	80017e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fac0 	bl	800299c <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001422:	f000 f9dd 	bl	80017e0 <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3750      	adds	r7, #80	; 0x50
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <MX_RTC_Init+0xb8>)
 8001452:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <MX_RTC_Init+0xbc>)
 8001454:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_RTC_Init+0xb8>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_RTC_Init+0xb8>)
 800145e:	227f      	movs	r2, #127	; 0x7f
 8001460:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_RTC_Init+0xb8>)
 8001464:	22ff      	movs	r2, #255	; 0xff
 8001466:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_RTC_Init+0xb8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_RTC_Init+0xb8>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_RTC_Init+0xb8>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800147a:	481d      	ldr	r0, [pc, #116]	; (80014f0 <MX_RTC_Init+0xb8>)
 800147c:	f001 fd40 	bl	8002f00 <HAL_RTC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 f9ab 	bl	80017e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800148a:	2300      	movs	r3, #0
 800148c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800148e:	2300      	movs	r3, #0
 8001490:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001492:	2300      	movs	r3, #0
 8001494:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2201      	movs	r2, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <MX_RTC_Init+0xb8>)
 80014a6:	f001 fdbc 	bl	8003022 <HAL_RTC_SetTime>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80014b0:	f000 f996 	bl	80017e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014b4:	2301      	movs	r3, #1
 80014b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80014b8:	2301      	movs	r3, #1
 80014ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80014bc:	2301      	movs	r3, #1
 80014be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <MX_RTC_Init+0xb8>)
 80014cc:	f001 fe66 	bl	800319c <HAL_RTC_SetDate>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014d6:	f000 f983 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register 
 80014da:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80014de:	2101      	movs	r1, #1
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_RTC_Init+0xb8>)
 80014e2:	f001 ff74 	bl	80033ce <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000428 	.word	0x20000428
 80014f4:	40002800 	.word	0x40002800

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_SPI1_Init+0x64>)
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <MX_SPI1_Init+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_SPI1_Init+0x64>)
 8001504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_SPI1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_SPI1_Init+0x64>)
 8001524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SPI1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SPI1_Init+0x64>)
 8001544:	220a      	movs	r2, #10
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_SPI1_Init+0x64>)
 800154a:	f001 ff72 	bl	8003432 <HAL_SPI_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001554:	f000 f944 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000448 	.word	0x20000448
 8001560:	40013000 	.word	0x40013000

08001564 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_SPI2_Init+0x68>)
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <MX_SPI2_Init+0x6c>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_SPI2_Init+0x68>)
 8001570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001574:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_SPI2_Init+0x68>)
 8001578:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800157c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_SPI2_Init+0x68>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_SPI2_Init+0x68>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_SPI2_Init+0x68>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_SPI2_Init+0x68>)
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_SPI2_Init+0x68>)
 800159a:	2238      	movs	r2, #56	; 0x38
 800159c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_SPI2_Init+0x68>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_SPI2_Init+0x68>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_SPI2_Init+0x68>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_SPI2_Init+0x68>)
 80015b2:	220a      	movs	r2, #10
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_SPI2_Init+0x68>)
 80015b8:	f001 ff3b 	bl	8003432 <HAL_SPI_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80015c2:	f000 f90d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000378 	.word	0x20000378
 80015d0:	40003800 	.word	0x40003800

080015d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_SPI3_Init+0x64>)
 80015da:	4a18      	ldr	r2, [pc, #96]	; (800163c <MX_SPI3_Init+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_SPI3_Init+0x64>)
 80015e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_SPI3_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_SPI3_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_SPI3_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_SPI3_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_SPI3_Init+0x64>)
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_SPI3_Init+0x64>)
 8001608:	2238      	movs	r2, #56	; 0x38
 800160a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <MX_SPI3_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_SPI3_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <MX_SPI3_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_SPI3_Init+0x64>)
 8001620:	220a      	movs	r2, #10
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_SPI3_Init+0x64>)
 8001626:	f001 ff04 	bl	8003432 <HAL_SPI_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001630:	f000 f8d6 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200003d0 	.word	0x200003d0
 800163c:	40003c00 	.word	0x40003c00

08001640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <MX_USART2_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <MX_USART2_UART_Init+0x4c>)
 800164c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART2_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001678:	f002 fc84 	bl	8003f84 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f000 f8ad 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200004a0 	.word	0x200004a0
 8001690:	40004400 	.word	0x40004400

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a39      	ldr	r2, [pc, #228]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <MX_GPIO_Init+0x13c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <MX_GPIO_Init+0x13c>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <MX_GPIO_Init+0x13c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <MX_GPIO_Init+0x13c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a2b      	ldr	r2, [pc, #172]	; (80017d0 <MX_GPIO_Init+0x13c>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <MX_GPIO_Init+0x13c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173c:	4825      	ldr	r0, [pc, #148]	; (80017d4 <MX_GPIO_Init+0x140>)
 800173e:	f000 fe9b 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AMT_CS_Pin|BME_CS_Pin|HALL_CS_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001748:	4823      	ldr	r0, [pc, #140]	; (80017d8 <MX_GPIO_Init+0x144>)
 800174a:	f000 fe95 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2102      	movs	r1, #2
 8001752:	4822      	ldr	r0, [pc, #136]	; (80017dc <MX_GPIO_Init+0x148>)
 8001754:	f000 fe90 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8001758:	2308      	movs	r3, #8
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	481c      	ldr	r0, [pc, #112]	; (80017dc <MX_GPIO_Init+0x148>)
 800176c:	f000 fcd0 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_CS_Pin */
  GPIO_InitStruct.Pin = INA_CS_Pin;
 8001770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INA_CS_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <MX_GPIO_Init+0x140>)
 800178a:	f000 fcc1 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMT_CS_Pin BME_CS_Pin HALL_CS_Pin */
  GPIO_InitStruct.Pin = AMT_CS_Pin|BME_CS_Pin|HALL_CS_Pin;
 800178e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_GPIO_Init+0x144>)
 80017a8:	f000 fcb2 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80017ac:	2302      	movs	r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_GPIO_Init+0x148>)
 80017c4:	f000 fca4 	bl	8002110 <HAL_GPIO_Init>

}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40021000 	.word	0x40021000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>

080017ea <rtc_set_time>:
 *      Author: bobox
 */

#include "rtc.h"

void rtc_set_time(RTC_HandleTypeDef* hrtc) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b088      	sub	sp, #32
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    sTime.Hours = 0x00;    // set hours
 80017f2:	2300      	movs	r3, #0
 80017f4:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0x00;  // set minutes
 80017f6:	2300      	movs	r3, #0
 80017f8:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0x00;  // set seconds
 80017fa:	2300      	movs	r3, #0
 80017fc:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2201      	movs	r2, #1
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f001 fc07 	bl	8003022 <HAL_RTC_SetTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <rtc_set_time+0x34>
        Error_Handler();
 800181a:	f7ff ffe1 	bl	80017e0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;  // day
 800181e:	2301      	movs	r3, #1
 8001820:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;     // month
 8001822:	2301      	movs	r3, #1
 8001824:	727b      	strb	r3, [r7, #9]
    sDate.Date = 0x00;                   // date
 8001826:	2300      	movs	r3, #0
 8001828:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 0x00;                   // year
 800182a:	2300      	movs	r3, #0
 800182c:	72fb      	strb	r3, [r7, #11]
    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2201      	movs	r2, #1
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f001 fcb0 	bl	800319c <HAL_RTC_SetDate>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <rtc_set_time+0x5c>
        Error_Handler();
 8001842:	f7ff ffcd 	bl	80017e0 <Error_Handler>
    }
    HAL_RTCEx_BKUPWrite(hrtc, RTC_BKP_DR1, 0x0000);  // backup register
 8001846:	2200      	movs	r2, #0
 8001848:	2101      	movs	r1, #1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f001 fdbf 	bl	80033ce <HAL_RTCEx_BKUPWrite>
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <SD_mount>:
 *      Author: bobox
 */

#include "sd.h"

void SD_mount(FATFS* FatFs) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    FRESULT fres;  // result after operations

    // loop until SD card detected
    while (HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin) != GPIO_PIN_SET) {
 8001860:	e006      	b.n	8001870 <SD_mount+0x18>
        myprintf("waiting to init");
 8001862:	4811      	ldr	r0, [pc, #68]	; (80018a8 <SD_mount+0x50>)
 8001864:	f7ff fce8 	bl	8001238 <myprintf>
        HAL_Delay(1000);
 8001868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800186c:	f000 fb46 	bl	8001efc <HAL_Delay>
    while (HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin) != GPIO_PIN_SET) {
 8001870:	2108      	movs	r1, #8
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <SD_mount+0x54>)
 8001874:	f000 fde8 	bl	8002448 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d1f1      	bne.n	8001862 <SD_mount+0xa>
    }
    HAL_Delay(200);  // short delay to let SD card mount

    // Open the file system
    fres = f_mount(FatFs, "", 1);  // 1=mount now
 800187e:	2201      	movs	r2, #1
 8001880:	490b      	ldr	r1, [pc, #44]	; (80018b0 <SD_mount+0x58>)
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f005 f922 	bl	8006acc <f_mount>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
    if (fres != FR_OK) {
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <SD_mount+0x46>
        myprintf("f_mount error (%i)\r\n", fres);
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	4619      	mov	r1, r3
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <SD_mount+0x5c>)
 8001898:	f7ff fcce 	bl	8001238 <myprintf>
        while (1);
 800189c:	e7fe      	b.n	800189c <SD_mount+0x44>
    }
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	0800a3fc 	.word	0x0800a3fc
 80018ac:	40021000 	.word	0x40021000
 80018b0:	0800a40c 	.word	0x0800a40c
 80018b4:	0800a410 	.word	0x0800a410

080018b8 <SD_write>:

UINT SD_write(const TCHAR* path, BYTE mode, const char* buf, UINT btw) {
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80018be:	af00      	add	r7, sp, #0
 80018c0:	f107 040c 	add.w	r4, r7, #12
 80018c4:	6020      	str	r0, [r4, #0]
 80018c6:	4608      	mov	r0, r1
 80018c8:	1d39      	adds	r1, r7, #4
 80018ca:	600a      	str	r2, [r1, #0]
 80018cc:	463a      	mov	r2, r7
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	f107 030b 	add.w	r3, r7, #11
 80018d4:	4602      	mov	r2, r0
 80018d6:	701a      	strb	r2, [r3, #0]
    FIL fil;       // file handle
 80018d8:	2200      	movs	r2, #0
 80018da:	2102      	movs	r1, #2
 80018dc:	4822      	ldr	r0, [pc, #136]	; (8001968 <SD_write+0xb0>)
 80018de:	f000 fdcb 	bl	8002478 <HAL_GPIO_WritePin>
    FRESULT fres;  // result after operations
    UINT bytesWrote;

    fres = f_open(&fil, path, mode);
    if (fres != FR_OK) {
 80018e2:	f107 030b 	add.w	r3, r7, #11
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	f107 0014 	add.w	r0, r7, #20
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	f005 f931 	bl	8006b58 <f_open>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        myprintf("f_open error (%i)\r\n", fres);
 80018fc:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <SD_write+0x5a>
        while (1);
 8001904:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001908:	4619      	mov	r1, r3
 800190a:	4818      	ldr	r0, [pc, #96]	; (800196c <SD_write+0xb4>)
 800190c:	f7ff fc94 	bl	8001238 <myprintf>
    }
 8001910:	e7fe      	b.n	8001910 <SD_write+0x58>

    fres = f_write(&fil, buf, btw, &bytesWrote);
    if (fres != FR_OK) {
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	463a      	mov	r2, r7
 8001918:	1d39      	adds	r1, r7, #4
 800191a:	f107 0014 	add.w	r0, r7, #20
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	6809      	ldr	r1, [r1, #0]
 8001922:	f005 fad7 	bl	8006ed4 <f_write>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        myprintf("f_write error (%i)\r\n", fres);
 800192c:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <SD_write+0x8a>
        while (1);
 8001934:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <SD_write+0xb8>)
 800193c:	f7ff fc7c 	bl	8001238 <myprintf>
    }
 8001940:	e7fe      	b.n	8001940 <SD_write+0x88>
    f_close(&fil);  // close file
    return bytesWrote;
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fcb7 	bl	80072ba <f_close>
}
 800194c:	2201      	movs	r2, #1
 800194e:	2102      	movs	r1, #2
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <SD_write+0xb0>)
 8001952:	f000 fd91 	bl	8002478 <HAL_GPIO_WritePin>

 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	681b      	ldr	r3, [r3, #0]
void SD_unmount() {
 800195c:	4618      	mov	r0, r3
 800195e:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 8001962:	46bd      	mov	sp, r7
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	0800a428 	.word	0x0800a428
 8001970:	0800a43c 	.word	0x0800a43c

08001974 <SD_unmount>:
    f_mount(NULL, "", 0);
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
 8001978:	2200      	movs	r2, #0
 800197a:	4903      	ldr	r1, [pc, #12]	; (8001988 <SD_unmount+0x14>)
 800197c:	2000      	movs	r0, #0
 800197e:	f005 f8a5 	bl	8006acc <f_mount>
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	0800a40c 	.word	0x0800a40c

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_RTC_MspInit+0x4c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019fc:	2302      	movs	r3, #2
 80019fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a04:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 f996 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a16:	f7ff fee3 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_RTC_MspInit+0x50>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40002800 	.word	0x40002800
 8001a2c:	42470e3c 	.word	0x42470e3c

08001a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_SPI_MspInit+0xec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12d      	bne.n	8001aae <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a2a      	ldr	r2, [pc, #168]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
 8001a8a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481f      	ldr	r0, [pc, #124]	; (8001b24 <HAL_SPI_MspInit+0xf4>)
 8001aa8:	f000 fb32 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
  {
 8001aac:	e031      	b.n	8001b12 <HAL_SPI_MspInit+0xe2>
  }
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_SPI_MspInit+0xf8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d12c      	bne.n	8001b12 <HAL_SPI_MspInit+0xe2>
    /* Peripheral clock enable */
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]

 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_SPI_MspInit+0xf0>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001af0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b02:	2306      	movs	r3, #6
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <HAL_SPI_MspInit+0xfc>)
 8001b0e:	f000 faff 	bl	8002110 <HAL_GPIO_Init>
  {
 8001b12:	bf00      	nop
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40003800 	.word	0x40003800
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	40020800 	.word	0x40020800

08001b30 <HAL_UART_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
  else if(hspi->Instance==SPI2)
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* USER CODE END SPI2_MspDeInit 0 */
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
    /* Peripheral clock disable */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0x84>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12b      	bne.n	8001baa <HAL_UART_MspInit+0x7a>
    __HAL_RCC_SPI2_CLK_DISABLE();

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);

 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	617b      	str	r3, [r7, #20]
  {
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
  /* USER CODE BEGIN SPI3_MspDeInit 0 */
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]

 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
  /* USER CODE END SPI3_MspDeInit 0 */
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Peripheral clock disable */
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_UART_MspInit+0x8c>)
 8001ba6:	f000 fab3 	bl	8002110 <HAL_GPIO_Init>

    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f956 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_kill>:

int _kill(int pid, int sig)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c2e:	f005 fbcb 	bl	80073c8 <__errno>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2216      	movs	r2, #22
 8001c36:	601a      	str	r2, [r3, #0]
	return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_exit>:

void _exit (int status)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffe7 	bl	8001c24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c56:	e7fe      	b.n	8001c56 <_exit+0x12>

08001c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e00a      	b.n	8001c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6a:	f3af 8000 	nop.w
 8001c6e:	4601      	mov	r1, r0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf0      	blt.n	8001c6a <_read+0x12>
	}

return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e009      	b.n	8001cb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf1      	blt.n	8001ca4 <_write+0x12>
	}
	return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_close>:

int _close(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
	return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f005 fb30 	bl	80073c8 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20020000 	.word	0x20020000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	20000310 	.word	0x20000310
 8001d9c:	20000968 	.word	0x20000968

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x12>
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
 8001dca:	490e      	ldr	r1, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1a>)
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <LoopFillZerobss+0x1e>)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:
 8001dd2:	58d4      	ldr	r4, [r2, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:
 8001dd8:	18c4      	adds	r4, r0, r3
 8001dda:	428c      	cmp	r4, r1
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x22>)
 8001de0:	4c0b      	ldr	r4, [pc, #44]	; (8001e10 <LoopFillZerobss+0x26>)
 8001de2:	2300      	movs	r3, #0
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:
 8001dea:	42a2      	cmp	r2, r4
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>
 8001dee:	f7ff ffd7 	bl	8001da0 <SystemInit>
 8001df2:	f005 faef 	bl	80073d4 <__libc_init_array>
 8001df6:	f7ff fa45 	bl	8001284 <main>
 8001dfa:	4770      	bx	lr
 8001dfc:	20020000 	.word	0x20020000
 8001e00:	20000000 	.word	0x20000000
 8001e04:	200001f4 	.word	0x200001f4
 8001e08:	0800a924 	.word	0x0800a924
 8001e0c:	200001f4 	.word	0x200001f4
 8001e10:	20000968 	.word	0x20000968

08001e14 <ADC_IRQHandler>:
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_Init+0x40>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_Init+0x40>)
 8001e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x40>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 f931 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	200f      	movs	r0, #15
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fd9e 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f93b 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f000 f911 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	200004e4 	.word	0x200004e4

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200004e4 	.word	0x200004e4

08001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff ffee 	bl	8001ee4 <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d005      	beq.n	8001f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_Delay+0x44>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f22:	bf00      	nop
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d8f7      	bhi.n	8001f24 <HAL_Delay+0x28>
  {
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000008 	.word	0x20000008

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff47 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff5c 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffb0 	bl	8002064 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e16b      	b.n	8002404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 815a 	bne.w	80023fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d017      	beq.n	8002200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80b4 	beq.w	80023fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_GPIO_Init+0x30c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a5f      	ldr	r2, [pc, #380]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <HAL_GPIO_Init+0x310>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x314>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x226>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_GPIO_Init+0x318>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x222>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_GPIO_Init+0x31c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x21e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x320>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x21a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x324>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x216>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x328>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x212>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x32c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x330>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x20a>
 8002316:	2307      	movs	r3, #7
 8002318:	e00e      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800231a:	2308      	movs	r3, #8
 800231c:	e00c      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800231e:	2306      	movs	r3, #6
 8002320:	e00a      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002322:	2305      	movs	r3, #5
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002326:	2304      	movs	r3, #4
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002336:	2300      	movs	r3, #0
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002348:	4935      	ldr	r1, [pc, #212]	; (8002420 <HAL_GPIO_Init+0x310>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002356:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800237a:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x334>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	f67f ae90 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40021400 	.word	0x40021400
 800243c:	40021800 	.word	0x40021800
 8002440:	40021c00 	.word	0x40021c00
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e001      	b.n	800246a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002494:	e003      	b.n	800249e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	041a      	lsls	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e264      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d075      	beq.n	80025b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ca:	4ba3      	ldr	r3, [pc, #652]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d00c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4ba0      	ldr	r3, [pc, #640]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b9d      	ldr	r3, [pc, #628]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b99      	ldr	r3, [pc, #612]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d157      	bne.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e23f      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x74>
 8002512:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a90      	ldr	r2, [pc, #576]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b8b      	ldr	r3, [pc, #556]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a8a      	ldr	r2, [pc, #552]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b88      	ldr	r3, [pc, #544]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a87      	ldr	r2, [pc, #540]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002544:	4b84      	ldr	r3, [pc, #528]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a83      	ldr	r2, [pc, #524]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b81      	ldr	r3, [pc, #516]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a80      	ldr	r2, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff fcbe 	bl	8001ee4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff fcba 	bl	8001ee4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e204      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xc0>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff fcaa 	bl	8001ee4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff fca6 	bl	8001ee4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1f0      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d063      	beq.n	800268a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b62      	ldr	r3, [pc, #392]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d11c      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1c4      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4952      	ldr	r1, [pc, #328]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	e03a      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261c:	4b4f      	ldr	r3, [pc, #316]	; (800275c <HAL_RCC_OscConfig+0x2b0>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7ff fc5f 	bl	8001ee4 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7ff fc5b 	bl	8001ee4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1a5      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4940      	ldr	r1, [pc, #256]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_RCC_OscConfig+0x2b0>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7ff fc3e 	bl	8001ee4 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7ff fc3a 	bl	8001ee4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e184      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d030      	beq.n	80026f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCC_OscConfig+0x2b4>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7ff fc1e 	bl	8001ee4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7ff fc1a 	bl	8001ee4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e164      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x200>
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x2b4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff fc07 	bl	8001ee4 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7ff fc03 	bl	8001ee4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e14d      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a0 	beq.w	8002846 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x2b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d121      	bne.n	8002786 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x2b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_RCC_OscConfig+0x2b8>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7ff fbc9 	bl	8001ee4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e011      	b.n	800277a <HAL_RCC_OscConfig+0x2ce>
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	42470000 	.word	0x42470000
 8002760:	42470e80 	.word	0x42470e80
 8002764:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7ff fbbc 	bl	8001ee4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e106      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b85      	ldr	r3, [pc, #532]	; (8002990 <HAL_RCC_OscConfig+0x4e4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x2f0>
 800278e:	4b81      	ldr	r3, [pc, #516]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a80      	ldr	r2, [pc, #512]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	e01c      	b.n	80027d6 <HAL_RCC_OscConfig+0x32a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x312>
 80027a4:	4b7b      	ldr	r3, [pc, #492]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	4b78      	ldr	r3, [pc, #480]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a77      	ldr	r2, [pc, #476]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0x32a>
 80027be:	4b75      	ldr	r3, [pc, #468]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a74      	ldr	r2, [pc, #464]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	4b72      	ldr	r3, [pc, #456]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a71      	ldr	r2, [pc, #452]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7ff fb81 	bl	8001ee4 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7ff fb7d 	bl	8001ee4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0c5      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ee      	beq.n	80027e6 <HAL_RCC_OscConfig+0x33a>
 8002808:	e014      	b.n	8002834 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7ff fb6b 	bl	8001ee4 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7ff fb67 	bl	8001ee4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0af      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b56      	ldr	r3, [pc, #344]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a55      	ldr	r2, [pc, #340]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 809b 	beq.w	8002986 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d05c      	beq.n	8002916 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d141      	bne.n	80028e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <HAL_RCC_OscConfig+0x4ec>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7ff fb3b 	bl	8001ee4 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002872:	f7ff fb37 	bl	8001ee4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e081      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	019b      	lsls	r3, r3, #6
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	4937      	ldr	r1, [pc, #220]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_RCC_OscConfig+0x4ec>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fb10 	bl	8001ee4 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff fb0c 	bl	8001ee4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e056      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x41c>
 80028e6:	e04e      	b.n	8002986 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x4ec>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff faf9 	bl	8001ee4 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff faf5 	bl	8001ee4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e03f      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x44a>
 8002914:	e037      	b.n	8002986 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e032      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCC_OscConfig+0x4e8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d028      	beq.n	8002982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d121      	bne.n	8002982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d11a      	bne.n	8002982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002958:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295a:	4293      	cmp	r3, r2
 800295c:	d111      	bne.n	8002982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40007000 	.word	0x40007000
 8002994:	40023800 	.word	0x40023800
 8002998:	42470060 	.word	0x42470060

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0cc      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d90c      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b8      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	494d      	ldr	r1, [pc, #308]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d044      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d119      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e07f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e067      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4934      	ldr	r1, [pc, #208]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7ff fa2a 	bl	8001ee4 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7ff fa26 	bl	8001ee4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e04f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d20c      	bcs.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e032      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4916      	ldr	r1, [pc, #88]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b22:	f000 f821 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f98a 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023c00 	.word	0x40023c00
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	0800a498 	.word	0x0800a498
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b6e:	2100      	movs	r1, #0
 8002b70:	6079      	str	r1, [r7, #4]
 8002b72:	2100      	movs	r1, #0
 8002b74:	60f9      	str	r1, [r7, #12]
 8002b76:	2100      	movs	r1, #0
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7e:	4952      	ldr	r1, [pc, #328]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b80:	6889      	ldr	r1, [r1, #8]
 8002b82:	f001 010c 	and.w	r1, r1, #12
 8002b86:	2908      	cmp	r1, #8
 8002b88:	d00d      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002b8a:	2908      	cmp	r1, #8
 8002b8c:	f200 8094 	bhi.w	8002cb8 <HAL_RCC_GetSysClockFreq+0x150>
 8002b90:	2900      	cmp	r1, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x32>
 8002b94:	2904      	cmp	r1, #4
 8002b96:	d003      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x38>
 8002b98:	e08e      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x164>)
 8002b9c:	60bb      	str	r3, [r7, #8]
       break;
 8002b9e:	e08e      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ba2:	60bb      	str	r3, [r7, #8]
      break;
 8002ba4:	e08b      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba6:	4948      	ldr	r1, [pc, #288]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ba8:	6849      	ldr	r1, [r1, #4]
 8002baa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002bae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb0:	4945      	ldr	r1, [pc, #276]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb2:	6849      	ldr	r1, [r1, #4]
 8002bb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002bb8:	2900      	cmp	r1, #0
 8002bba:	d024      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbc:	4942      	ldr	r1, [pc, #264]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bbe:	6849      	ldr	r1, [r1, #4]
 8002bc0:	0989      	lsrs	r1, r1, #6
 8002bc2:	4608      	mov	r0, r1
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002bcc:	f04f 0500 	mov.w	r5, #0
 8002bd0:	ea00 0204 	and.w	r2, r0, r4
 8002bd4:	ea01 0305 	and.w	r3, r1, r5
 8002bd8:	493d      	ldr	r1, [pc, #244]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bda:	fb01 f003 	mul.w	r0, r1, r3
 8002bde:	2100      	movs	r1, #0
 8002be0:	fb01 f102 	mul.w	r1, r1, r2
 8002be4:	1844      	adds	r4, r0, r1
 8002be6:	493a      	ldr	r1, [pc, #232]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002be8:	fba2 0101 	umull	r0, r1, r2, r1
 8002bec:	1863      	adds	r3, r4, r1
 8002bee:	4619      	mov	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	f7fd ffd6 	bl	8000ba8 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e04a      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	ea02 0400 	and.w	r4, r2, r0
 8002c1e:	ea03 0501 	and.w	r5, r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	014b      	lsls	r3, r1, #5
 8002c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c34:	0142      	lsls	r2, r0, #5
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	1b00      	subs	r0, r0, r4
 8002c3c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	018b      	lsls	r3, r1, #6
 8002c4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c4e:	0182      	lsls	r2, r0, #6
 8002c50:	1a12      	subs	r2, r2, r0
 8002c52:	eb63 0301 	sbc.w	r3, r3, r1
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	00d9      	lsls	r1, r3, #3
 8002c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c64:	00d0      	lsls	r0, r2, #3
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	1912      	adds	r2, r2, r4
 8002c6c:	eb45 0303 	adc.w	r3, r5, r3
 8002c70:	f04f 0000 	mov.w	r0, #0
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	0299      	lsls	r1, r3, #10
 8002c7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c7e:	0290      	lsls	r0, r2, #10
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f7fd ff8a 	bl	8000ba8 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	60bb      	str	r3, [r7, #8]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x164>)
 8002cba:	60bb      	str	r3, [r7, #8]
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	017d7840 	.word	0x017d7840

08002cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf0:	f7ff fff0 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0a9b      	lsrs	r3, r3, #10
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	0800a4a8 	.word	0x0800a4a8

08002d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d18:	f7ff ffdc 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	0b5b      	lsrs	r3, r3, #13
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	0800a4a8 	.word	0x0800a4a8

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d035      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d64:	4b62      	ldr	r3, [pc, #392]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d6a:	f7ff f8bb 	bl	8001ee4 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d72:	f7ff f8b7 	bl	8001ee4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0b0      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d84:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	019a      	lsls	r2, r3, #6
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	071b      	lsls	r3, r3, #28
 8002d9c:	4955      	ldr	r1, [pc, #340]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002da4:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002daa:	f7ff f89b 	bl	8001ee4 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002db2:	f7ff f897 	bl	8001ee4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e090      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8083 	beq.w	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a43      	ldr	r2, [pc, #268]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3e      	ldr	r2, [pc, #248]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e06:	f7ff f86d 	bl	8001ee4 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7ff f869 	bl	8001ee4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e062      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e34:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02f      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d028      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d114      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e72:	f7ff f837 	bl	8001ee4 <HAL_GetTick>
 8002e76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7ff f833 	bl	8001ee4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e02a      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ecc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ed0:	6093      	str	r3, [r2, #8]
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ede:	4905      	ldr	r1, [pc, #20]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	42470068 	.word	0x42470068
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42470e40 	.word	0x42470e40

08002f00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e083      	b.n	800301a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7f5b      	ldrb	r3, [r3, #29]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fd5a 	bl	80019dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	22ca      	movs	r2, #202	; 0xca
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2253      	movs	r2, #83	; 0x53
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9fb 	bl	800333a <RTC_EnterInitMode>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	22ff      	movs	r2, #255	; 0xff
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2204      	movs	r2, #4
 8002f56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e05e      	b.n	800301a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6919      	ldr	r1, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	041a      	lsls	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f98d 	bl	80032ea <HAL_RTC_WaitForSynchro>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e018      	b.n	800301a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003022:	b590      	push	{r4, r7, lr}
 8003024:	b087      	sub	sp, #28
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	7f1b      	ldrb	r3, [r3, #28]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_RTC_SetTime+0x1c>
 800303a:	2302      	movs	r3, #2
 800303c:	e0aa      	b.n	8003194 <HAL_RTC_SetTime+0x172>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2202      	movs	r2, #2
 8003048:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d126      	bne.n	800309e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2200      	movs	r2, #0
 8003062:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f992 	bl	8003392 <RTC_ByteToBcd2>
 800306e:	4603      	mov	r3, r0
 8003070:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f98b 	bl	8003392 <RTC_ByteToBcd2>
 800307c:	4603      	mov	r3, r0
 800307e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003080:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	789b      	ldrb	r3, [r3, #2]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f983 	bl	8003392 <RTC_ByteToBcd2>
 800308c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800308e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	78db      	ldrb	r3, [r3, #3]
 8003096:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e018      	b.n	80030d0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030be:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030c4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	22ca      	movs	r2, #202	; 0xca
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2253      	movs	r2, #83	; 0x53
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f92a 	bl	800333a <RTC_EnterInitMode>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2204      	movs	r2, #4
 80030f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e047      	b.n	8003194 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800310e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003112:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003122:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6899      	ldr	r1, [r3, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	431a      	orrs	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800314a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d111      	bne.n	800317e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8c5 	bl	80032ea <HAL_RTC_WaitForSynchro>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	22ff      	movs	r2, #255	; 0xff
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2204      	movs	r2, #4
 8003172:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e00a      	b.n	8003194 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003192:	2300      	movs	r3, #0
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd90      	pop	{r4, r7, pc}

0800319c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	7f1b      	ldrb	r3, [r3, #28]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_RTC_SetDate+0x1c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e094      	b.n	80032e2 <HAL_RTC_SetDate+0x146>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_RTC_SetDate+0x4c>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	f023 0310 	bic.w	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	330a      	adds	r3, #10
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11c      	bne.n	8003228 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f8cd 	bl	8003392 <RTC_ByteToBcd2>
 80031f8:	4603      	mov	r3, r0
 80031fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f8c6 	bl	8003392 <RTC_ByteToBcd2>
 8003206:	4603      	mov	r3, r0
 8003208:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800320a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f8be 	bl	8003392 <RTC_ByteToBcd2>
 8003216:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003218:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e00e      	b.n	8003246 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003234:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800323a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	22ca      	movs	r2, #202	; 0xca
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2253      	movs	r2, #83	; 0x53
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f86f 	bl	800333a <RTC_EnterInitMode>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	22ff      	movs	r2, #255	; 0xff
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2204      	movs	r2, #4
 800326e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e033      	b.n	80032e2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003284:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003288:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003298:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f81e 	bl	80032ea <HAL_RTC_WaitForSynchro>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22ff      	movs	r2, #255	; 0xff
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2204      	movs	r2, #4
 80032c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e00a      	b.n	80032e2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	22ff      	movs	r2, #255	; 0xff
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}

080032ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003304:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003306:	f7fe fded 	bl	8001ee4 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800330c:	e009      	b.n	8003322 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800330e:	f7fe fde9 	bl	8001ee4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331c:	d901      	bls.n	8003322 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e007      	b.n	8003332 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ee      	beq.n	800330e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d119      	bne.n	8003388 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800335e:	f7fe fdc1 	bl	8001ee4 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003364:	e009      	b.n	800337a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003366:	f7fe fdbd 	bl	8001ee4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003374:	d901      	bls.n	800337a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80033a0:	e005      	b.n	80033ae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3301      	adds	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	3b0a      	subs	r3, #10
 80033ac:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b09      	cmp	r3, #9
 80033b2:	d8f6      	bhi.n	80033a2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	4313      	orrs	r3, r2
 80033c0:	b2db      	uxtb	r3, r3
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3350      	adds	r3, #80	; 0x50
 80033e4:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4413      	add	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3350      	adds	r3, #80	; 0x50
 8003416:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e07b      	b.n	800353c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003454:	d009      	beq.n	800346a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	61da      	str	r2, [r3, #28]
 800345c:	e005      	b.n	800346a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fe fad3 	bl	8001a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	ea42 0103 	orr.w	r1, r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	f003 0104 	and.w	r1, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0210 	and.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_SPI_Transmit+0x22>
 8003562:	2302      	movs	r3, #2
 8003564:	e126      	b.n	80037b4 <HAL_SPI_Transmit+0x270>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800356e:	f7fe fcb9 	bl	8001ee4 <HAL_GetTick>
 8003572:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d002      	beq.n	800358a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003588:	e10b      	b.n	80037a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_SPI_Transmit+0x52>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	77fb      	strb	r3, [r7, #31]
    goto error;
 800359a:	e102      	b.n	80037a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d10f      	bne.n	8003604 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003602:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d007      	beq.n	8003622 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362a:	d14b      	bne.n	80036c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_SPI_Transmit+0xf6>
 8003634:	8afb      	ldrh	r3, [r7, #22]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d13e      	bne.n	80036b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800365e:	e02b      	b.n	80036b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d112      	bne.n	8003694 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	881a      	ldrh	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	1c9a      	adds	r2, r3, #2
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	86da      	strh	r2, [r3, #54]	; 0x36
 8003692:	e011      	b.n	80036b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003694:	f7fe fc26 	bl	8001ee4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d803      	bhi.n	80036ac <HAL_SPI_Transmit+0x168>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_Transmit+0x16e>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036b6:	e074      	b.n	80037a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ce      	bne.n	8003660 <HAL_SPI_Transmit+0x11c>
 80036c2:	e04c      	b.n	800375e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x18e>
 80036cc:	8afb      	ldrh	r3, [r7, #22]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d140      	bne.n	8003754 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036f8:	e02c      	b.n	8003754 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d113      	bne.n	8003730 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	86da      	strh	r2, [r3, #54]	; 0x36
 800372e:	e011      	b.n	8003754 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003730:	f7fe fbd8 	bl	8001ee4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d803      	bhi.n	8003748 <HAL_SPI_Transmit+0x204>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d102      	bne.n	800374e <HAL_SPI_Transmit+0x20a>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003752:	e026      	b.n	80037a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1cd      	bne.n	80036fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fbcc 	bl	8003f00 <SPI_EndRxTxTransaction>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800377c:	2300      	movs	r3, #0
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e000      	b.n	80037a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d8:	d112      	bne.n	8003800 <HAL_SPI_Receive+0x44>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2204      	movs	r2, #4
 80037e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f8f1 	bl	80039de <HAL_SPI_TransmitReceive>
 80037fc:	4603      	mov	r3, r0
 80037fe:	e0ea      	b.n	80039d6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_SPI_Receive+0x52>
 800380a:	2302      	movs	r3, #2
 800380c:	e0e3      	b.n	80039d6 <HAL_SPI_Receive+0x21a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003816:	f7fe fb65 	bl	8001ee4 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800382c:	e0ca      	b.n	80039c4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_SPI_Receive+0x7e>
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800383e:	e0c1      	b.n	80039c4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2204      	movs	r2, #4
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d10f      	bne.n	80038a8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003896:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d007      	beq.n	80038c6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d162      	bne.n	8003994 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038ce:	e02e      	b.n	800392e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d115      	bne.n	800390a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f103 020c 	add.w	r2, r3, #12
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003908:	e011      	b.n	800392e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800390a:	f7fe faeb 	bl	8001ee4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d803      	bhi.n	8003922 <HAL_SPI_Receive+0x166>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d102      	bne.n	8003928 <HAL_SPI_Receive+0x16c>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800392c:	e04a      	b.n	80039c4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1cb      	bne.n	80038d0 <HAL_SPI_Receive+0x114>
 8003938:	e031      	b.n	800399e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d113      	bne.n	8003970 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	b292      	uxth	r2, r2
 8003954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	1c9a      	adds	r2, r3, #2
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800396e:	e011      	b.n	8003994 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003970:	f7fe fab8 	bl	8001ee4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d803      	bhi.n	8003988 <HAL_SPI_Receive+0x1cc>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d102      	bne.n	800398e <HAL_SPI_Receive+0x1d2>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003992:	e017      	b.n	80039c4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1cd      	bne.n	800393a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa46 	bl	8003e34 <SPI_EndRxTransaction>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
 80039c0:	e000      	b.n	80039c4 <HAL_SPI_Receive+0x208>
  }

error :
 80039c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08c      	sub	sp, #48	; 0x30
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039ec:	2301      	movs	r3, #1
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x26>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e18a      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x33c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a0c:	f7fe fa6a 	bl	8001ee4 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d00f      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x70>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a34:	d107      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x68>
 8003a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d003      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a4c:	e15b      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x82>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x82>
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a66:	e14e      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2205      	movs	r2, #5
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d007      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad8:	d178      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x10a>
 8003ae2:	8b7b      	ldrh	r3, [r7, #26]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d166      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0c:	e053      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11b      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x176>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x176>
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d113      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d119      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x1b8>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	b292      	uxth	r2, r2
 8003b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b92:	2301      	movs	r3, #1
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b96:	f7fe f9a5 	bl	8001ee4 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d807      	bhi.n	8003bb6 <HAL_SPI_TransmitReceive+0x1d8>
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d003      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bb4:	e0a7      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1a6      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x130>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1a1      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x130>
 8003bca:	e07c      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x1fc>
 8003bd4:	8b7b      	ldrh	r3, [r7, #26]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d16b      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c00:	e057      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d11c      	bne.n	8003c4a <HAL_SPI_TransmitReceive+0x26c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d017      	beq.n	8003c4a <HAL_SPI_TransmitReceive+0x26c>
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d114      	bne.n	8003c4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d119      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x2ae>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c8c:	f7fe f92a 	bl	8001ee4 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_TransmitReceive+0x2c6>
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_TransmitReceive+0x2cc>
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cb0:	e029      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1a2      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x224>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d19d      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f918 	bl	8003f00 <SPI_EndRxTxTransaction>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ce2:	e010      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e000      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3730      	adds	r7, #48	; 0x30
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d34:	f7fe f8d6 	bl	8001ee4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4413      	add	r3, r2
 8003d42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d44:	f7fe f8ce 	bl	8001ee4 <HAL_GetTick>
 8003d48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	015b      	lsls	r3, r3, #5
 8003d50:	0d1b      	lsrs	r3, r3, #20
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d5a:	e054      	b.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d050      	beq.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d64:	f7fe f8be 	bl	8001ee4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d902      	bls.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d13d      	bne.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d92:	d111      	bne.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	d004      	beq.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d107      	bne.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc0:	d10f      	bne.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e017      	b.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d19b      	bne.n	8003d5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e48:	d111      	bne.n	8003e6e <SPI_EndRxTransaction+0x3a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e52:	d004      	beq.n	8003e5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5c:	d107      	bne.n	8003e6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e76:	d12a      	bne.n	8003ece <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d012      	beq.n	8003ea8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff ff49 	bl	8003d24 <SPI_WaitFlagStateUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02d      	beq.n	8003ef4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e026      	b.n	8003ef6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ff36 	bl	8003d24 <SPI_WaitFlagStateUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01a      	beq.n	8003ef4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e013      	b.n	8003ef6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ff23 	bl	8003d24 <SPI_WaitFlagStateUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e000      	b.n	8003ef6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <SPI_EndRxTxTransaction+0x7c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <SPI_EndRxTxTransaction+0x80>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	0d5b      	lsrs	r3, r3, #21
 8003f18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2a:	d112      	bne.n	8003f52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2180      	movs	r1, #128	; 0x80
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fef4 	bl	8003d24 <SPI_WaitFlagStateUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e00f      	b.n	8003f72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	2b80      	cmp	r3, #128	; 0x80
 8003f6a:	d0f2      	beq.n	8003f52 <SPI_EndRxTxTransaction+0x52>
 8003f6c:	e000      	b.n	8003f70 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f6e:	bf00      	nop
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	165e9f81 	.word	0x165e9f81

08003f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03f      	b.n	8004016 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fdc0 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f929 	bl	8004220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b08a      	sub	sp, #40	; 0x28
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	d17c      	bne.n	8004138 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_UART_Transmit+0x2c>
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e075      	b.n	800413a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_UART_Transmit+0x3e>
 8004058:	2302      	movs	r3, #2
 800405a:	e06e      	b.n	800413a <HAL_UART_Transmit+0x11c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004072:	f7fd ff37 	bl	8001ee4 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d108      	bne.n	80040a0 <HAL_UART_Transmit+0x82>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e003      	b.n	80040a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040b0:	e02a      	b.n	8004108 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f840 	bl	8004142 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e036      	b.n	800413a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3302      	adds	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e007      	b.n	80040fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1cf      	bne.n	80040b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f810 	bl	8004142 <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e006      	b.n	800413a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b090      	sub	sp, #64	; 0x40
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004152:	e050      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d04c      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800415c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x30>
 8004162:	f7fd febf 	bl	8001ee4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416e:	429a      	cmp	r2, r3
 8004170:	d241      	bcs.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004192:	637a      	str	r2, [r7, #52]	; 0x34
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	613b      	str	r3, [r7, #16]
   return(result);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041c6:	623a      	str	r2, [r7, #32]
 80041c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	69f9      	ldr	r1, [r7, #28]
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e00f      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	429a      	cmp	r2, r3
 8004212:	d09f      	beq.n	8004154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3740      	adds	r7, #64	; 0x40
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	b09f      	sub	sp, #124	; 0x7c
 8004226:	af00      	add	r7, sp, #0
 8004228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004236:	68d9      	ldr	r1, [r3, #12]
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	ea40 0301 	orr.w	r3, r0, r1
 8004240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	431a      	orrs	r2, r3
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	431a      	orrs	r2, r3
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4313      	orrs	r3, r2
 8004258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004264:	f021 010c 	bic.w	r1, r1, #12
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800426e:	430b      	orrs	r3, r1
 8004270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	6999      	ldr	r1, [r3, #24]
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	ea40 0301 	orr.w	r3, r0, r1
 8004288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4bc5      	ldr	r3, [pc, #788]	; (80045a4 <UART_SetConfig+0x384>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d004      	beq.n	800429e <UART_SetConfig+0x7e>
 8004294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4bc3      	ldr	r3, [pc, #780]	; (80045a8 <UART_SetConfig+0x388>)
 800429a:	429a      	cmp	r2, r3
 800429c:	d103      	bne.n	80042a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800429e:	f7fe fd39 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 80042a2:	6778      	str	r0, [r7, #116]	; 0x74
 80042a4:	e002      	b.n	80042ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042a6:	f7fe fd21 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80042aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b4:	f040 80b6 	bne.w	8004424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ba:	461c      	mov	r4, r3
 80042bc:	f04f 0500 	mov.w	r5, #0
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	6439      	str	r1, [r7, #64]	; 0x40
 80042c8:	415b      	adcs	r3, r3
 80042ca:	647b      	str	r3, [r7, #68]	; 0x44
 80042cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042d0:	1912      	adds	r2, r2, r4
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f04f 0000 	mov.w	r0, #0
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	00d9      	lsls	r1, r3, #3
 80042e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e4:	00d0      	lsls	r0, r2, #3
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	1911      	adds	r1, r2, r4
 80042ec:	6639      	str	r1, [r7, #96]	; 0x60
 80042ee:	416b      	adcs	r3, r5
 80042f0:	667b      	str	r3, [r7, #100]	; 0x64
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	1891      	adds	r1, r2, r2
 80042fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004300:	415b      	adcs	r3, r3
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800430c:	f7fc fc4c 	bl	8000ba8 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4ba5      	ldr	r3, [pc, #660]	; (80045ac <UART_SetConfig+0x38c>)
 8004316:	fba3 2302 	umull	r2, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	011e      	lsls	r6, r3, #4
 800431e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004320:	461c      	mov	r4, r3
 8004322:	f04f 0500 	mov.w	r5, #0
 8004326:	4622      	mov	r2, r4
 8004328:	462b      	mov	r3, r5
 800432a:	1891      	adds	r1, r2, r2
 800432c:	6339      	str	r1, [r7, #48]	; 0x30
 800432e:	415b      	adcs	r3, r3
 8004330:	637b      	str	r3, [r7, #52]	; 0x34
 8004332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004336:	1912      	adds	r2, r2, r4
 8004338:	eb45 0303 	adc.w	r3, r5, r3
 800433c:	f04f 0000 	mov.w	r0, #0
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	00d9      	lsls	r1, r3, #3
 8004346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800434a:	00d0      	lsls	r0, r2, #3
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	1911      	adds	r1, r2, r4
 8004352:	65b9      	str	r1, [r7, #88]	; 0x58
 8004354:	416b      	adcs	r3, r5
 8004356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	1891      	adds	r1, r2, r2
 8004364:	62b9      	str	r1, [r7, #40]	; 0x28
 8004366:	415b      	adcs	r3, r3
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800436e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004372:	f7fc fc19 	bl	8000ba8 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4b8c      	ldr	r3, [pc, #560]	; (80045ac <UART_SetConfig+0x38c>)
 800437c:	fba3 1302 	umull	r1, r3, r3, r2
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	2164      	movs	r1, #100	; 0x64
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	3332      	adds	r3, #50	; 0x32
 800438e:	4a87      	ldr	r2, [pc, #540]	; (80045ac <UART_SetConfig+0x38c>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800439c:	441e      	add	r6, r3
 800439e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a0:	4618      	mov	r0, r3
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	1894      	adds	r4, r2, r2
 80043ac:	623c      	str	r4, [r7, #32]
 80043ae:	415b      	adcs	r3, r3
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043b6:	1812      	adds	r2, r2, r0
 80043b8:	eb41 0303 	adc.w	r3, r1, r3
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	f04f 0500 	mov.w	r5, #0
 80043c4:	00dd      	lsls	r5, r3, #3
 80043c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ca:	00d4      	lsls	r4, r2, #3
 80043cc:	4622      	mov	r2, r4
 80043ce:	462b      	mov	r3, r5
 80043d0:	1814      	adds	r4, r2, r0
 80043d2:	653c      	str	r4, [r7, #80]	; 0x50
 80043d4:	414b      	adcs	r3, r1
 80043d6:	657b      	str	r3, [r7, #84]	; 0x54
 80043d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	461a      	mov	r2, r3
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	1891      	adds	r1, r2, r2
 80043e4:	61b9      	str	r1, [r7, #24]
 80043e6:	415b      	adcs	r3, r3
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043f2:	f7fc fbd9 	bl	8000ba8 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4b6c      	ldr	r3, [pc, #432]	; (80045ac <UART_SetConfig+0x38c>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	; 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	3332      	adds	r3, #50	; 0x32
 800440e:	4a67      	ldr	r2, [pc, #412]	; (80045ac <UART_SetConfig+0x38c>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 0207 	and.w	r2, r3, #7
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4432      	add	r2, r6
 8004420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004422:	e0b9      	b.n	8004598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004426:	461c      	mov	r4, r3
 8004428:	f04f 0500 	mov.w	r5, #0
 800442c:	4622      	mov	r2, r4
 800442e:	462b      	mov	r3, r5
 8004430:	1891      	adds	r1, r2, r2
 8004432:	6139      	str	r1, [r7, #16]
 8004434:	415b      	adcs	r3, r3
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800443c:	1912      	adds	r2, r2, r4
 800443e:	eb45 0303 	adc.w	r3, r5, r3
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	00d9      	lsls	r1, r3, #3
 800444c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004450:	00d0      	lsls	r0, r2, #3
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	eb12 0804 	adds.w	r8, r2, r4
 800445a:	eb43 0905 	adc.w	r9, r3, r5
 800445e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4618      	mov	r0, r3
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	008b      	lsls	r3, r1, #2
 8004472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004476:	0082      	lsls	r2, r0, #2
 8004478:	4640      	mov	r0, r8
 800447a:	4649      	mov	r1, r9
 800447c:	f7fc fb94 	bl	8000ba8 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b49      	ldr	r3, [pc, #292]	; (80045ac <UART_SetConfig+0x38c>)
 8004486:	fba3 2302 	umull	r2, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011e      	lsls	r6, r3, #4
 800448e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004490:	4618      	mov	r0, r3
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	1894      	adds	r4, r2, r2
 800449c:	60bc      	str	r4, [r7, #8]
 800449e:	415b      	adcs	r3, r3
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a6:	1812      	adds	r2, r2, r0
 80044a8:	eb41 0303 	adc.w	r3, r1, r3
 80044ac:	f04f 0400 	mov.w	r4, #0
 80044b0:	f04f 0500 	mov.w	r5, #0
 80044b4:	00dd      	lsls	r5, r3, #3
 80044b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ba:	00d4      	lsls	r4, r2, #3
 80044bc:	4622      	mov	r2, r4
 80044be:	462b      	mov	r3, r5
 80044c0:	1814      	adds	r4, r2, r0
 80044c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80044c4:	414b      	adcs	r3, r1
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f04f 0100 	mov.w	r1, #0
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044e0:	0082      	lsls	r2, r0, #2
 80044e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044e6:	f7fc fb5f 	bl	8000ba8 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <UART_SetConfig+0x38c>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	3332      	adds	r3, #50	; 0x32
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <UART_SetConfig+0x38c>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450e:	441e      	add	r6, r3
 8004510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004512:	4618      	mov	r0, r3
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	1894      	adds	r4, r2, r2
 800451e:	603c      	str	r4, [r7, #0]
 8004520:	415b      	adcs	r3, r3
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004528:	1812      	adds	r2, r2, r0
 800452a:	eb41 0303 	adc.w	r3, r1, r3
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	f04f 0500 	mov.w	r5, #0
 8004536:	00dd      	lsls	r5, r3, #3
 8004538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800453c:	00d4      	lsls	r4, r2, #3
 800453e:	4622      	mov	r2, r4
 8004540:	462b      	mov	r3, r5
 8004542:	eb12 0a00 	adds.w	sl, r2, r0
 8004546:	eb43 0b01 	adc.w	fp, r3, r1
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	008b      	lsls	r3, r1, #2
 800455e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004562:	0082      	lsls	r2, r0, #2
 8004564:	4650      	mov	r0, sl
 8004566:	4659      	mov	r1, fp
 8004568:	f7fc fb1e 	bl	8000ba8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <UART_SetConfig+0x38c>)
 8004572:	fba3 1302 	umull	r1, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2164      	movs	r1, #100	; 0x64
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	3332      	adds	r3, #50	; 0x32
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <UART_SetConfig+0x38c>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4432      	add	r2, r6
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	377c      	adds	r7, #124	; 0x7c
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a2:	bf00      	nop
 80045a4:	40011000 	.word	0x40011000
 80045a8:	40011400 	.word	0x40011400
 80045ac:	51eb851f 	.word	0x51eb851f

080045b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80045b4:	4904      	ldr	r1, [pc, #16]	; (80045c8 <MX_FATFS_Init+0x18>)
 80045b6:	4805      	ldr	r0, [pc, #20]	; (80045cc <MX_FATFS_Init+0x1c>)
 80045b8:	f002 fef6 	bl	80073a8 <FATFS_LinkDriver>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <MX_FATFS_Init+0x20>)
 80045c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200004e8 	.word	0x200004e8
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	200004ec 	.word	0x200004ec

080045d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80045d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80045da:	4618      	mov	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f9d9 	bl	80049a8 <USER_SPI_initialize>
 80045f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fab7 	bl	8004b80 <USER_SPI_status>
 8004612:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800462c:	7bf8      	ldrb	r0, [r7, #15]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	f000 faba 	bl	8004bac <USER_SPI_read>
 8004638:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004652:	7bf8      	ldrb	r0, [r7, #15]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	f000 fb0d 	bl	8004c78 <USER_SPI_write>
 800465e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	603a      	str	r2, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
 8004674:	460b      	mov	r3, r1
 8004676:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004678:	79b9      	ldrb	r1, [r7, #6]
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fb76 	bl	8004d70 <USER_SPI_ioctl>
 8004684:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004698:	f7fd fc24 	bl	8001ee4 <HAL_GetTick>
 800469c:	4603      	mov	r3, r0
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <SPI_Timer_On+0x20>)
 80046a0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80046a2:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <SPI_Timer_On+0x24>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000950 	.word	0x20000950
 80046b4:	20000954 	.word	0x20000954

080046b8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80046bc:	f7fd fc12 	bl	8001ee4 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <SPI_Timer_Status+0x24>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SPI_Timer_Status+0x28>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	bf34      	ite	cc
 80046d0:	2301      	movcc	r3, #1
 80046d2:	2300      	movcs	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000950 	.word	0x20000950
 80046e0:	20000954 	.word	0x20000954

080046e4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80046ee:	f107 020f 	add.w	r2, r7, #15
 80046f2:	1df9      	adds	r1, r7, #7
 80046f4:	2332      	movs	r3, #50	; 0x32
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2301      	movs	r3, #1
 80046fa:	4804      	ldr	r0, [pc, #16]	; (800470c <xchg_spi+0x28>)
 80046fc:	f7ff f96f 	bl	80039de <HAL_SPI_TransmitReceive>
    return rxDat;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	200003d0 	.word	0x200003d0

08004710 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e00a      	b.n	8004736 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	18d4      	adds	r4, r2, r3
 8004726:	20ff      	movs	r0, #255	; 0xff
 8004728:	f7ff ffdc 	bl	80046e4 <xchg_spi>
 800472c:	4603      	mov	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d3f0      	bcc.n	8004720 <rcvr_spi_multi+0x10>
	}
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	bd90      	pop	{r4, r7, pc}

08004748 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e009      	b.n	800476c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ffbf 	bl	80046e4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d3f1      	bcc.n	8004758 <xmit_spi_multi+0x10>
	}
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004786:	f7fd fbad 	bl	8001ee4 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004790:	20ff      	movs	r0, #255	; 0xff
 8004792:	f7ff ffa7 	bl	80046e4 <xchg_spi>
 8004796:	4603      	mov	r3, r0
 8004798:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2bff      	cmp	r3, #255	; 0xff
 800479e:	d007      	beq.n	80047b0 <wait_ready+0x32>
 80047a0:	f7fd fba0 	bl	8001ee4 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d8ef      	bhi.n	8004790 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2bff      	cmp	r3, #255	; 0xff
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80047c8:	2201      	movs	r2, #1
 80047ca:	2102      	movs	r1, #2
 80047cc:	4803      	ldr	r0, [pc, #12]	; (80047dc <despiselect+0x18>)
 80047ce:	f7fd fe53 	bl	8002478 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80047d2:	20ff      	movs	r0, #255	; 0xff
 80047d4:	f7ff ff86 	bl	80046e4 <xchg_spi>

}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000

080047e0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80047e4:	2200      	movs	r2, #0
 80047e6:	2102      	movs	r1, #2
 80047e8:	4809      	ldr	r0, [pc, #36]	; (8004810 <spiselect+0x30>)
 80047ea:	f7fd fe45 	bl	8002478 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80047ee:	20ff      	movs	r0, #255	; 0xff
 80047f0:	f7ff ff78 	bl	80046e4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80047f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047f8:	f7ff ffc1 	bl	800477e <wait_ready>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <spiselect+0x26>
 8004802:	2301      	movs	r3, #1
 8004804:	e002      	b.n	800480c <spiselect+0x2c>

	despiselect();
 8004806:	f7ff ffdd 	bl	80047c4 <despiselect>
	return 0;	/* Timeout */
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800481e:	20c8      	movs	r0, #200	; 0xc8
 8004820:	f7ff ff36 	bl	8004690 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004824:	20ff      	movs	r0, #255	; 0xff
 8004826:	f7ff ff5d 	bl	80046e4 <xchg_spi>
 800482a:	4603      	mov	r3, r0
 800482c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2bff      	cmp	r3, #255	; 0xff
 8004832:	d104      	bne.n	800483e <rcvr_datablock+0x2a>
 8004834:	f7ff ff40 	bl	80046b8 <SPI_Timer_Status>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f2      	bne.n	8004824 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2bfe      	cmp	r3, #254	; 0xfe
 8004842:	d001      	beq.n	8004848 <rcvr_datablock+0x34>
 8004844:	2300      	movs	r3, #0
 8004846:	e00a      	b.n	800485e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff60 	bl	8004710 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004850:	20ff      	movs	r0, #255	; 0xff
 8004852:	f7ff ff47 	bl	80046e4 <xchg_spi>
 8004856:	20ff      	movs	r0, #255	; 0xff
 8004858:	f7ff ff44 	bl	80046e4 <xchg_spi>

	return 1;						/* Function succeeded */
 800485c:	2301      	movs	r3, #1
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004876:	f7ff ff82 	bl	800477e <wait_ready>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <xmit_datablock+0x1e>
 8004880:	2300      	movs	r3, #0
 8004882:	e01e      	b.n	80048c2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff2c 	bl	80046e4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	2bfd      	cmp	r3, #253	; 0xfd
 8004890:	d016      	beq.n	80048c0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff56 	bl	8004748 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800489c:	20ff      	movs	r0, #255	; 0xff
 800489e:	f7ff ff21 	bl	80046e4 <xchg_spi>
 80048a2:	20ff      	movs	r0, #255	; 0xff
 80048a4:	f7ff ff1e 	bl	80046e4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80048a8:	20ff      	movs	r0, #255	; 0xff
 80048aa:	f7ff ff1b 	bl	80046e4 <xchg_spi>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d001      	beq.n	80048c0 <xmit_datablock+0x5a>
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <xmit_datablock+0x5c>
	}
	return 1;
 80048c0:	2301      	movs	r3, #1
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	6039      	str	r1, [r7, #0]
 80048d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da0e      	bge.n	80048fc <send_cmd+0x32>
		cmd &= 0x7F;
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80048e6:	2100      	movs	r1, #0
 80048e8:	2037      	movs	r0, #55	; 0x37
 80048ea:	f7ff ffee 	bl	80048ca <send_cmd>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d901      	bls.n	80048fc <send_cmd+0x32>
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	e051      	b.n	80049a0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d008      	beq.n	8004914 <send_cmd+0x4a>
		despiselect();
 8004902:	f7ff ff5f 	bl	80047c4 <despiselect>
		if (!spiselect()) return 0xFF;
 8004906:	f7ff ff6b 	bl	80047e0 <spiselect>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <send_cmd+0x4a>
 8004910:	23ff      	movs	r3, #255	; 0xff
 8004912:	e045      	b.n	80049a0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491a:	b2db      	uxtb	r3, r3
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fee1 	bl	80046e4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	0e1b      	lsrs	r3, r3, #24
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fedb 	bl	80046e4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	b2db      	uxtb	r3, r3
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fed5 	bl	80046e4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fecf 	bl	80046e4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff feca 	bl	80046e4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <send_cmd+0x94>
 800495a:	2395      	movs	r3, #149	; 0x95
 800495c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d101      	bne.n	8004968 <send_cmd+0x9e>
 8004964:	2387      	movs	r3, #135	; 0x87
 8004966:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff feba 	bl	80046e4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d102      	bne.n	800497c <send_cmd+0xb2>
 8004976:	20ff      	movs	r0, #255	; 0xff
 8004978:	f7ff feb4 	bl	80046e4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800497c:	230a      	movs	r3, #10
 800497e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004980:	20ff      	movs	r0, #255	; 0xff
 8004982:	f7ff feaf 	bl	80046e4 <xchg_spi>
 8004986:	4603      	mov	r3, r0
 8004988:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800498a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da05      	bge.n	800499e <send_cmd+0xd4>
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	3b01      	subs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <send_cmd+0xb6>

	return res;							/* Return received response */
 800499e:	7bbb      	ldrb	r3, [r7, #14]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <USER_SPI_initialize+0x14>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0d6      	b.n	8004b6a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80049bc:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <USER_SPI_initialize+0x1cc>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <USER_SPI_initialize+0x2a>
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <USER_SPI_initialize+0x1cc>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e0cb      	b.n	8004b6a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80049d2:	4b69      	ldr	r3, [pc, #420]	; (8004b78 <USER_SPI_initialize+0x1d0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80049dc:	4b66      	ldr	r3, [pc, #408]	; (8004b78 <USER_SPI_initialize+0x1d0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80049e4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80049e6:	230a      	movs	r3, #10
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	e005      	b.n	80049f8 <USER_SPI_initialize+0x50>
 80049ec:	20ff      	movs	r0, #255	; 0xff
 80049ee:	f7ff fe79 	bl	80046e4 <xchg_spi>
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f6      	bne.n	80049ec <USER_SPI_initialize+0x44>

	ty = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004a02:	2100      	movs	r1, #0
 8004a04:	2000      	movs	r0, #0
 8004a06:	f7ff ff60 	bl	80048ca <send_cmd>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 808b 	bne.w	8004b28 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a16:	f7ff fe3b 	bl	8004690 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004a1a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a1e:	2008      	movs	r0, #8
 8004a20:	f7ff ff53 	bl	80048ca <send_cmd>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d151      	bne.n	8004ace <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e00d      	b.n	8004a4c <USER_SPI_initialize+0xa4>
 8004a30:	7bfc      	ldrb	r4, [r7, #15]
 8004a32:	20ff      	movs	r0, #255	; 0xff
 8004a34:	f7ff fe56 	bl	80046e4 <xchg_spi>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	4423      	add	r3, r4
 8004a42:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d9ee      	bls.n	8004a30 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004a52:	7abb      	ldrb	r3, [r7, #10]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d167      	bne.n	8004b28 <USER_SPI_initialize+0x180>
 8004a58:	7afb      	ldrb	r3, [r7, #11]
 8004a5a:	2baa      	cmp	r3, #170	; 0xaa
 8004a5c:	d164      	bne.n	8004b28 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004a5e:	bf00      	nop
 8004a60:	f7ff fe2a 	bl	80046b8 <SPI_Timer_Status>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <USER_SPI_initialize+0xd2>
 8004a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a6e:	20a9      	movs	r0, #169	; 0xa9
 8004a70:	f7ff ff2b 	bl	80048ca <send_cmd>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f2      	bne.n	8004a60 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004a7a:	f7ff fe1d 	bl	80046b8 <SPI_Timer_Status>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d051      	beq.n	8004b28 <USER_SPI_initialize+0x180>
 8004a84:	2100      	movs	r1, #0
 8004a86:	203a      	movs	r0, #58	; 0x3a
 8004a88:	f7ff ff1f 	bl	80048ca <send_cmd>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d14a      	bne.n	8004b28 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e00d      	b.n	8004ab4 <USER_SPI_initialize+0x10c>
 8004a98:	7bfc      	ldrb	r4, [r7, #15]
 8004a9a:	20ff      	movs	r0, #255	; 0xff
 8004a9c:	f7ff fe22 	bl	80046e4 <xchg_spi>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f107 0310 	add.w	r3, r7, #16
 8004aa8:	4423      	add	r3, r4
 8004aaa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d9ee      	bls.n	8004a98 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004aba:	7a3b      	ldrb	r3, [r7, #8]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <USER_SPI_initialize+0x120>
 8004ac4:	230c      	movs	r3, #12
 8004ac6:	e000      	b.n	8004aca <USER_SPI_initialize+0x122>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	737b      	strb	r3, [r7, #13]
 8004acc:	e02c      	b.n	8004b28 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004ace:	2100      	movs	r1, #0
 8004ad0:	20a9      	movs	r0, #169	; 0xa9
 8004ad2:	f7ff fefa 	bl	80048ca <send_cmd>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d804      	bhi.n	8004ae6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004adc:	2302      	movs	r3, #2
 8004ade:	737b      	strb	r3, [r7, #13]
 8004ae0:	23a9      	movs	r3, #169	; 0xa9
 8004ae2:	73bb      	strb	r3, [r7, #14]
 8004ae4:	e003      	b.n	8004aee <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	737b      	strb	r3, [r7, #13]
 8004aea:	2301      	movs	r3, #1
 8004aec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004aee:	bf00      	nop
 8004af0:	f7ff fde2 	bl	80046b8 <SPI_Timer_Status>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <USER_SPI_initialize+0x162>
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fee3 	bl	80048ca <send_cmd>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f2      	bne.n	8004af0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004b0a:	f7ff fdd5 	bl	80046b8 <SPI_Timer_Status>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <USER_SPI_initialize+0x17c>
 8004b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b18:	2010      	movs	r0, #16
 8004b1a:	f7ff fed6 	bl	80048ca <send_cmd>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <USER_SPI_initialize+0x180>
				ty = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <USER_SPI_initialize+0x1d4>)
 8004b2a:	7b7b      	ldrb	r3, [r7, #13]
 8004b2c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004b2e:	f7ff fe49 	bl	80047c4 <despiselect>

	if (ty) {			/* OK */
 8004b32:	7b7b      	ldrb	r3, [r7, #13]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <USER_SPI_initialize+0x1d0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <USER_SPI_initialize+0x1d0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <USER_SPI_initialize+0x1cc>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <USER_SPI_initialize+0x1cc>)
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e002      	b.n	8004b64 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <USER_SPI_initialize+0x1cc>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <USER_SPI_initialize+0x1cc>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd90      	pop	{r4, r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000020 	.word	0x20000020
 8004b78:	200003d0 	.word	0x200003d0
 8004b7c:	20000314 	.word	0x20000314

08004b80 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <USER_SPI_status+0x14>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e002      	b.n	8004b9a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <USER_SPI_status+0x28>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000020 	.word	0x20000020

08004bac <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <USER_SPI_read+0x1c>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <USER_SPI_read+0x20>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04d      	b.n	8004c68 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004bcc:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <USER_SPI_read+0xc4>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <USER_SPI_read+0x32>
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e044      	b.n	8004c68 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <USER_SPI_read+0xc8>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <USER_SPI_read+0x44>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	025b      	lsls	r3, r3, #9
 8004bee:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d111      	bne.n	8004c1a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	2011      	movs	r0, #17
 8004bfa:	f7ff fe66 	bl	80048ca <send_cmd>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d129      	bne.n	8004c58 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c08:	68b8      	ldr	r0, [r7, #8]
 8004c0a:	f7ff fe03 	bl	8004814 <rcvr_datablock>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d021      	beq.n	8004c58 <USER_SPI_read+0xac>
			count = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	e01e      	b.n	8004c58 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	2012      	movs	r0, #18
 8004c1e:	f7ff fe54 	bl	80048ca <send_cmd>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d117      	bne.n	8004c58 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c2c:	68b8      	ldr	r0, [r7, #8]
 8004c2e:	f7ff fdf1 	bl	8004814 <rcvr_datablock>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <USER_SPI_read+0xa2>
				buff += 512;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004c3e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1ed      	bne.n	8004c28 <USER_SPI_read+0x7c>
 8004c4c:	e000      	b.n	8004c50 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004c4e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004c50:	2100      	movs	r1, #0
 8004c52:	200c      	movs	r0, #12
 8004c54:	f7ff fe39 	bl	80048ca <send_cmd>
		}
	}
	despiselect();
 8004c58:	f7ff fdb4 	bl	80047c4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000020 	.word	0x20000020
 8004c74:	20000314 	.word	0x20000314

08004c78 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <USER_SPI_write+0x1c>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <USER_SPI_write+0x20>
 8004c94:	2304      	movs	r3, #4
 8004c96:	e063      	b.n	8004d60 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004c98:	4b33      	ldr	r3, [pc, #204]	; (8004d68 <USER_SPI_write+0xf0>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <USER_SPI_write+0x32>
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e05a      	b.n	8004d60 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <USER_SPI_write+0xf0>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <USER_SPI_write+0x44>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e051      	b.n	8004d60 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <USER_SPI_write+0xf4>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <USER_SPI_write+0x56>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	025b      	lsls	r3, r3, #9
 8004ccc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d110      	bne.n	8004cf6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	2018      	movs	r0, #24
 8004cd8:	f7ff fdf7 	bl	80048ca <send_cmd>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d136      	bne.n	8004d50 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004ce2:	21fe      	movs	r1, #254	; 0xfe
 8004ce4:	68b8      	ldr	r0, [r7, #8]
 8004ce6:	f7ff fdbe 	bl	8004866 <xmit_datablock>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02f      	beq.n	8004d50 <USER_SPI_write+0xd8>
			count = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	e02c      	b.n	8004d50 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <USER_SPI_write+0xf4>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f003 0306 	and.w	r3, r3, #6
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <USER_SPI_write+0x92>
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	2097      	movs	r0, #151	; 0x97
 8004d06:	f7ff fde0 	bl	80048ca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	2019      	movs	r0, #25
 8004d0e:	f7ff fddc 	bl	80048ca <send_cmd>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11b      	bne.n	8004d50 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004d18:	21fc      	movs	r1, #252	; 0xfc
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f7ff fda3 	bl	8004866 <xmit_datablock>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <USER_SPI_write+0xc4>
				buff += 512;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d2c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ee      	bne.n	8004d18 <USER_SPI_write+0xa0>
 8004d3a:	e000      	b.n	8004d3e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004d3c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004d3e:	21fd      	movs	r1, #253	; 0xfd
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7ff fd90 	bl	8004866 <xmit_datablock>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <USER_SPI_write+0xd8>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004d50:	f7ff fd38 	bl	80047c4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000020 	.word	0x20000020
 8004d6c:	20000314 	.word	0x20000314

08004d70 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	603a      	str	r2, [r7, #0]
 8004d7a:	71fb      	strb	r3, [r7, #7]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <USER_SPI_ioctl+0x1a>
 8004d86:	2304      	movs	r3, #4
 8004d88:	e15a      	b.n	8005040 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004d8a:	4baf      	ldr	r3, [pc, #700]	; (8005048 <USER_SPI_ioctl+0x2d8>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <USER_SPI_ioctl+0x2c>
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e151      	b.n	8005040 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004da2:	79bb      	ldrb	r3, [r7, #6]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	f200 8136 	bhi.w	8005016 <USER_SPI_ioctl+0x2a6>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <USER_SPI_ioctl+0x40>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc5 	.word	0x08004dc5
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08005017 	.word	0x08005017
 8004dbc:	08004e85 	.word	0x08004e85
 8004dc0:	08004f7b 	.word	0x08004f7b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004dc4:	f7ff fd0c 	bl	80047e0 <spiselect>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8127 	beq.w	800501e <USER_SPI_ioctl+0x2ae>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004dd6:	e122      	b.n	800501e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004dd8:	2100      	movs	r1, #0
 8004dda:	2009      	movs	r0, #9
 8004ddc:	f7ff fd75 	bl	80048ca <send_cmd>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 811d 	bne.w	8005022 <USER_SPI_ioctl+0x2b2>
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	2110      	movs	r1, #16
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fd10 	bl	8004814 <rcvr_datablock>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8113 	beq.w	8005022 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004dfc:	7b3b      	ldrb	r3, [r7, #12]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d111      	bne.n	8004e2a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004e06:	7d7b      	ldrb	r3, [r7, #21]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	7d3b      	ldrb	r3, [r7, #20]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	4413      	add	r3, r2
 8004e10:	461a      	mov	r2, r3
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	029a      	lsls	r2, r3, #10
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e028      	b.n	8004e7c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004e2a:	7c7b      	ldrb	r3, [r7, #17]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	7dbb      	ldrb	r3, [r7, #22]
 8004e34:	09db      	lsrs	r3, r3, #7
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	7d7b      	ldrb	r3, [r7, #21]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004e52:	7d3b      	ldrb	r3, [r7, #20]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	441a      	add	r2, r3
 8004e60:	7cbb      	ldrb	r3, [r7, #18]
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e68:	4413      	add	r3, r2
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e72:	3b09      	subs	r3, #9
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	409a      	lsls	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004e82:	e0ce      	b.n	8005022 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004e84:	4b71      	ldr	r3, [pc, #452]	; (800504c <USER_SPI_ioctl+0x2dc>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d031      	beq.n	8004ef4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004e90:	2100      	movs	r1, #0
 8004e92:	208d      	movs	r0, #141	; 0x8d
 8004e94:	f7ff fd19 	bl	80048ca <send_cmd>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 80c3 	bne.w	8005026 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004ea0:	20ff      	movs	r0, #255	; 0xff
 8004ea2:	f7ff fc1f 	bl	80046e4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004ea6:	f107 030c 	add.w	r3, r7, #12
 8004eaa:	2110      	movs	r1, #16
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fcb1 	bl	8004814 <rcvr_datablock>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80b6 	beq.w	8005026 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004eba:	2330      	movs	r3, #48	; 0x30
 8004ebc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004ec0:	e007      	b.n	8004ed2 <USER_SPI_ioctl+0x162>
 8004ec2:	20ff      	movs	r0, #255	; 0xff
 8004ec4:	f7ff fc0e 	bl	80046e4 <xchg_spi>
 8004ec8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004ed2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f3      	bne.n	8004ec2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004eda:	7dbb      	ldrb	r3, [r7, #22]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	fa03 f202 	lsl.w	r2, r3, r2
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004ef2:	e098      	b.n	8005026 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	2009      	movs	r0, #9
 8004ef8:	f7ff fce7 	bl	80048ca <send_cmd>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 8091 	bne.w	8005026 <USER_SPI_ioctl+0x2b6>
 8004f04:	f107 030c 	add.w	r3, r7, #12
 8004f08:	2110      	movs	r1, #16
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fc82 	bl	8004814 <rcvr_datablock>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8087 	beq.w	8005026 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004f18:	4b4c      	ldr	r3, [pc, #304]	; (800504c <USER_SPI_ioctl+0x2dc>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004f24:	7dbb      	ldrb	r3, [r7, #22]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004f2c:	7dfa      	ldrb	r2, [r7, #23]
 8004f2e:	09d2      	lsrs	r2, r2, #7
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	4413      	add	r3, r2
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	7e7b      	ldrb	r3, [r7, #25]
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e013      	b.n	8004f72 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004f4a:	7dbb      	ldrb	r3, [r7, #22]
 8004f4c:	109b      	asrs	r3, r3, #2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	3301      	adds	r3, #1
 8004f56:	7dfa      	ldrb	r2, [r7, #23]
 8004f58:	00d2      	lsls	r2, r2, #3
 8004f5a:	f002 0218 	and.w	r2, r2, #24
 8004f5e:	7df9      	ldrb	r1, [r7, #23]
 8004f60:	0949      	lsrs	r1, r1, #5
 8004f62:	b2c9      	uxtb	r1, r1
 8004f64:	440a      	add	r2, r1
 8004f66:	3201      	adds	r2, #1
 8004f68:	fb02 f303 	mul.w	r3, r2, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004f78:	e055      	b.n	8005026 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004f7a:	4b34      	ldr	r3, [pc, #208]	; (800504c <USER_SPI_ioctl+0x2dc>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f003 0306 	and.w	r3, r3, #6
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d051      	beq.n	800502a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004f86:	f107 020c 	add.w	r2, r7, #12
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	210b      	movs	r1, #11
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff feee 	bl	8004d70 <USER_SPI_ioctl>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d149      	bne.n	800502e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004f9a:	7b3b      	ldrb	r3, [r7, #12]
 8004f9c:	099b      	lsrs	r3, r3, #6
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <USER_SPI_ioctl+0x23e>
 8004fa4:	7dbb      	ldrb	r3, [r7, #22]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d041      	beq.n	8005032 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <USER_SPI_ioctl+0x2dc>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	025b      	lsls	r3, r3, #9
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	025b      	lsls	r3, r3, #9
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd8:	2020      	movs	r0, #32
 8004fda:	f7ff fc76 	bl	80048ca <send_cmd>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d128      	bne.n	8005036 <USER_SPI_ioctl+0x2c6>
 8004fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe6:	2021      	movs	r0, #33	; 0x21
 8004fe8:	f7ff fc6f 	bl	80048ca <send_cmd>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d121      	bne.n	8005036 <USER_SPI_ioctl+0x2c6>
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	2026      	movs	r0, #38	; 0x26
 8004ff6:	f7ff fc68 	bl	80048ca <send_cmd>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11a      	bne.n	8005036 <USER_SPI_ioctl+0x2c6>
 8005000:	f247 5030 	movw	r0, #30000	; 0x7530
 8005004:	f7ff fbbb 	bl	800477e <wait_ready>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d013      	beq.n	8005036 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800500e:	2300      	movs	r3, #0
 8005010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005014:	e00f      	b.n	8005036 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005016:	2304      	movs	r3, #4
 8005018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800501c:	e00c      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		break;
 800501e:	bf00      	nop
 8005020:	e00a      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		break;
 8005022:	bf00      	nop
 8005024:	e008      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		break;
 8005026:	bf00      	nop
 8005028:	e006      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800502a:	bf00      	nop
 800502c:	e004      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <USER_SPI_ioctl+0x2c8>
		break;
 8005036:	bf00      	nop
	}

	despiselect();
 8005038:	f7ff fbc4 	bl	80047c4 <despiselect>

	return res;
 800503c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005040:	4618      	mov	r0, r3
 8005042:	3730      	adds	r7, #48	; 0x30
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000020 	.word	0x20000020
 800504c:	20000314 	.word	0x20000314

08005050 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <disk_status+0x30>)
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	79fa      	ldrb	r2, [r7, #7]
 8005068:	4905      	ldr	r1, [pc, #20]	; (8005080 <disk_status+0x30>)
 800506a:	440a      	add	r2, r1
 800506c:	7a12      	ldrb	r2, [r2, #8]
 800506e:	4610      	mov	r0, r2
 8005070:	4798      	blx	r3
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000340 	.word	0x20000340

08005084 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <disk_initialize+0x48>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d111      	bne.n	80050c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <disk_initialize+0x48>)
 80050a0:	2101      	movs	r1, #1
 80050a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	4a09      	ldr	r2, [pc, #36]	; (80050cc <disk_initialize+0x48>)
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	79fa      	ldrb	r2, [r7, #7]
 80050b2:	4906      	ldr	r1, [pc, #24]	; (80050cc <disk_initialize+0x48>)
 80050b4:	440a      	add	r2, r1
 80050b6:	7a12      	ldrb	r2, [r2, #8]
 80050b8:	4610      	mov	r0, r2
 80050ba:	4798      	blx	r3
 80050bc:	4603      	mov	r3, r0
 80050be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000340 	.word	0x20000340

080050d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	4a0a      	ldr	r2, [pc, #40]	; (800510c <disk_read+0x3c>)
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	689c      	ldr	r4, [r3, #8]
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <disk_read+0x3c>)
 80050f0:	4413      	add	r3, r2
 80050f2:	7a18      	ldrb	r0, [r3, #8]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	47a0      	blx	r4
 80050fc:	4603      	mov	r3, r0
 80050fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
}
 8005102:	4618      	mov	r0, r3
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd90      	pop	{r4, r7, pc}
 800510a:	bf00      	nop
 800510c:	20000340 	.word	0x20000340

08005110 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <disk_write+0x3c>)
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68dc      	ldr	r4, [r3, #12]
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	4a07      	ldr	r2, [pc, #28]	; (800514c <disk_write+0x3c>)
 8005130:	4413      	add	r3, r2
 8005132:	7a18      	ldrb	r0, [r3, #8]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	47a0      	blx	r4
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005140:	7dfb      	ldrb	r3, [r7, #23]
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	bf00      	nop
 800514c:	20000340 	.word	0x20000340

08005150 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	603a      	str	r2, [r7, #0]
 800515a:	71fb      	strb	r3, [r7, #7]
 800515c:	460b      	mov	r3, r1
 800515e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	4a09      	ldr	r2, [pc, #36]	; (8005188 <disk_ioctl+0x38>)
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	4906      	ldr	r1, [pc, #24]	; (8005188 <disk_ioctl+0x38>)
 8005170:	440a      	add	r2, r1
 8005172:	7a10      	ldrb	r0, [r2, #8]
 8005174:	79b9      	ldrb	r1, [r7, #6]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4798      	blx	r3
 800517a:	4603      	mov	r3, r0
 800517c:	73fb      	strb	r3, [r7, #15]
  return res;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000340 	.word	0x20000340

0800518c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3301      	adds	r3, #1
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	b21a      	sxth	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b21b      	sxth	r3, r3
 80051a8:	4313      	orrs	r3, r2
 80051aa:	b21b      	sxth	r3, r3
 80051ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051ae:	89fb      	ldrh	r3, [r7, #14]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3303      	adds	r3, #3
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	3202      	adds	r2, #2
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	3201      	adds	r2, #1
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80051f4:	68fb      	ldr	r3, [r7, #12]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	887b      	ldrh	r3, [r7, #2]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	1c53      	adds	r3, r2, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	6179      	str	r1, [r7, #20]
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3b01      	subs	r3, #1
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f1      	bne.n	80052aa <mem_cpy+0x1a>
	}
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80052d2:	b480      	push	{r7}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	617a      	str	r2, [r7, #20]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f3      	bne.n	80052e2 <mem_set+0x10>
}
 80052fa:	bf00      	nop
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	61fa      	str	r2, [r7, #28]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	61ba      	str	r2, [r7, #24]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	1acb      	subs	r3, r1, r3
 8005334:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3b01      	subs	r3, #1
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <mem_cmp+0x40>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0eb      	beq.n	8005320 <mem_cmp+0x18>

	return r;
 8005348:	697b      	ldr	r3, [r7, #20]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3724      	adds	r7, #36	; 0x24
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005360:	e002      	b.n	8005368 <chk_chr+0x12>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3301      	adds	r3, #1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <chk_chr+0x26>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	4293      	cmp	r3, r2
 800537a:	d1f2      	bne.n	8005362 <chk_chr+0xc>
	return *str;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	781b      	ldrb	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e029      	b.n	80053f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80053a0:	4a27      	ldr	r2, [pc, #156]	; (8005440 <chk_lock+0xb4>)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	4413      	add	r3, r2
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01d      	beq.n	80053ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80053ae:	4a24      	ldr	r2, [pc, #144]	; (8005440 <chk_lock+0xb4>)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	4413      	add	r3, r2
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d116      	bne.n	80053ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <chk_lock+0xb4>)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d10c      	bne.n	80053ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80053d4:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <chk_lock+0xb4>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	4413      	add	r3, r2
 80053dc:	3308      	adds	r3, #8
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d102      	bne.n	80053ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80053e8:	e007      	b.n	80053fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d9d2      	bls.n	80053a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d109      	bne.n	8005414 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <chk_lock+0x80>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d101      	bne.n	8005410 <chk_lock+0x84>
 800540c:	2300      	movs	r3, #0
 800540e:	e010      	b.n	8005432 <chk_lock+0xa6>
 8005410:	2312      	movs	r3, #18
 8005412:	e00e      	b.n	8005432 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <chk_lock+0xa0>
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <chk_lock+0xb4>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	330c      	adds	r3, #12
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d101      	bne.n	8005430 <chk_lock+0xa4>
 800542c:	2310      	movs	r3, #16
 800542e:	e000      	b.n	8005432 <chk_lock+0xa6>
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000320 	.word	0x20000320

08005444 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	e002      	b.n	8005456 <enq_lock+0x12>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3301      	adds	r3, #1
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d806      	bhi.n	800546a <enq_lock+0x26>
 800545c:	4a09      	ldr	r2, [pc, #36]	; (8005484 <enq_lock+0x40>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	4413      	add	r3, r2
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f2      	bne.n	8005450 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000320 	.word	0x20000320

08005488 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e01f      	b.n	80054d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005498:	4a41      	ldr	r2, [pc, #260]	; (80055a0 <inc_lock+0x118>)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d113      	bne.n	80054d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80054aa:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <inc_lock+0x118>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	3304      	adds	r3, #4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d109      	bne.n	80054d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80054be:	4a38      	ldr	r2, [pc, #224]	; (80055a0 <inc_lock+0x118>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	4413      	add	r3, r2
 80054c6:	3308      	adds	r3, #8
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d006      	beq.n	80054e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d9dc      	bls.n	8005498 <inc_lock+0x10>
 80054de:	e000      	b.n	80054e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80054e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d132      	bne.n	800554e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	e002      	b.n	80054f4 <inc_lock+0x6c>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d806      	bhi.n	8005508 <inc_lock+0x80>
 80054fa:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <inc_lock+0x118>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4413      	add	r3, r2
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f2      	bne.n	80054ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d101      	bne.n	8005512 <inc_lock+0x8a>
 800550e:	2300      	movs	r3, #0
 8005510:	e040      	b.n	8005594 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4922      	ldr	r1, [pc, #136]	; (80055a0 <inc_lock+0x118>)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	440b      	add	r3, r1
 800551e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	491e      	ldr	r1, [pc, #120]	; (80055a0 <inc_lock+0x118>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	440b      	add	r3, r1
 800552c:	3304      	adds	r3, #4
 800552e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	491a      	ldr	r1, [pc, #104]	; (80055a0 <inc_lock+0x118>)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	440b      	add	r3, r1
 800553c:	3308      	adds	r3, #8
 800553e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005540:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <inc_lock+0x118>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	330c      	adds	r3, #12
 800554a:	2200      	movs	r2, #0
 800554c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <inc_lock+0xe0>
 8005554:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <inc_lock+0x118>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	330c      	adds	r3, #12
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <inc_lock+0xe0>
 8005564:	2300      	movs	r3, #0
 8005566:	e015      	b.n	8005594 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <inc_lock+0xf8>
 800556e:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <inc_lock+0x118>)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	4413      	add	r3, r2
 8005576:	330c      	adds	r3, #12
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	e001      	b.n	8005584 <inc_lock+0xfc>
 8005580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005584:	4906      	ldr	r1, [pc, #24]	; (80055a0 <inc_lock+0x118>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	440b      	add	r3, r1
 800558c:	330c      	adds	r3, #12
 800558e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20000320 	.word	0x20000320

080055a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d825      	bhi.n	8005604 <dec_lock+0x60>
		n = Files[i].ctr;
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <dec_lock+0x74>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	4413      	add	r3, r2
 80055c0:	330c      	adds	r3, #12
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80055c6:	89fb      	ldrh	r3, [r7, #14]
 80055c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055cc:	d101      	bne.n	80055d2 <dec_lock+0x2e>
 80055ce:	2300      	movs	r3, #0
 80055d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80055d2:	89fb      	ldrh	r3, [r7, #14]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <dec_lock+0x3a>
 80055d8:	89fb      	ldrh	r3, [r7, #14]
 80055da:	3b01      	subs	r3, #1
 80055dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80055de:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <dec_lock+0x74>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	330c      	adds	r3, #12
 80055e8:	89fa      	ldrh	r2, [r7, #14]
 80055ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <dec_lock+0x5a>
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <dec_lock+0x74>)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4413      	add	r3, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	737b      	strb	r3, [r7, #13]
 8005602:	e001      	b.n	8005608 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005604:	2302      	movs	r3, #2
 8005606:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005608:	7b7b      	ldrb	r3, [r7, #13]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000320 	.word	0x20000320

0800561c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e010      	b.n	800564c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800562a:	4a0d      	ldr	r2, [pc, #52]	; (8005660 <clear_lock+0x44>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	4413      	add	r3, r2
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d105      	bne.n	8005646 <clear_lock+0x2a>
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <clear_lock+0x44>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d9eb      	bls.n	800562a <clear_lock+0xe>
	}
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000320 	.word	0x20000320

08005664 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	78db      	ldrb	r3, [r3, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d034      	beq.n	80056e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	7858      	ldrb	r0, [r3, #1]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005688:	2301      	movs	r3, #1
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	f7ff fd40 	bl	8005110 <disk_write>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005696:	2301      	movs	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
 800569a:	e022      	b.n	80056e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	1ad2      	subs	r2, r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d217      	bcs.n	80056e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	789b      	ldrb	r3, [r3, #2]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	e010      	b.n	80056dc <sync_window+0x78>
					wsect += fs->fsize;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4413      	add	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7858      	ldrb	r0, [r3, #1]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056ce:	2301      	movs	r3, #1
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	f7ff fd1d 	bl	8005110 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	3b01      	subs	r3, #1
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d8eb      	bhi.n	80056ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d01b      	beq.n	800573c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ffad 	bl	8005664 <sync_window>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d113      	bne.n	800573c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7858      	ldrb	r0, [r3, #1]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800571e:	2301      	movs	r3, #1
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	f7ff fcd5 	bl	80050d0 <disk_read>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff87 	bl	8005664 <sync_window>
 8005756:	4603      	mov	r3, r0
 8005758:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d158      	bne.n	8005812 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d148      	bne.n	80057fa <sync_fs+0xb2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	791b      	ldrb	r3, [r3, #4]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d144      	bne.n	80057fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3330      	adds	r3, #48	; 0x30
 8005774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fda9 	bl	80052d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3330      	adds	r3, #48	; 0x30
 8005784:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005788:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fd38 	bl	8005202 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3330      	adds	r3, #48	; 0x30
 8005796:	4921      	ldr	r1, [pc, #132]	; (800581c <sync_fs+0xd4>)
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fd4d 	bl	8005238 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3330      	adds	r3, #48	; 0x30
 80057a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057a6:	491e      	ldr	r1, [pc, #120]	; (8005820 <sync_fs+0xd8>)
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fd45 	bl	8005238 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3330      	adds	r3, #48	; 0x30
 80057b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f7ff fd3b 	bl	8005238 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3330      	adds	r3, #48	; 0x30
 80057c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7ff fd31 	bl	8005238 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7858      	ldrb	r0, [r3, #1]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	2301      	movs	r3, #1
 80057f0:	f7ff fc8e 	bl	8005110 <disk_write>
			fs->fsi_flag = 0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fca4 	bl	8005150 <disk_ioctl>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <sync_fs+0xca>
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	41615252 	.word	0x41615252
 8005820:	61417272 	.word	0x61417272

08005824 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	3b02      	subs	r3, #2
 8005832:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	3b02      	subs	r3, #2
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d301      	bcc.n	8005844 <clust2sect+0x20>
 8005840:	2300      	movs	r3, #0
 8005842:	e008      	b.n	8005856 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	895b      	ldrh	r3, [r3, #10]
 8005848:	461a      	mov	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	fb03 f202 	mul.w	r2, r3, r2
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	4413      	add	r3, r2
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d904      	bls.n	8005882 <get_fat+0x20>
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005882:	2301      	movs	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e08f      	b.n	80059a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d062      	beq.n	800595c <get_fat+0xfa>
 8005896:	2b03      	cmp	r3, #3
 8005898:	dc7c      	bgt.n	8005994 <get_fat+0x132>
 800589a:	2b01      	cmp	r3, #1
 800589c:	d002      	beq.n	80058a4 <get_fat+0x42>
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d042      	beq.n	8005928 <get_fat+0xc6>
 80058a2:	e077      	b.n	8005994 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	0a5b      	lsrs	r3, r3, #9
 80058ba:	4413      	add	r3, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	6938      	ldr	r0, [r7, #16]
 80058c0:	f7ff ff14 	bl	80056ec <move_window>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d167      	bne.n	800599a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	60fa      	str	r2, [r7, #12]
 80058d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	0a5b      	lsrs	r3, r3, #9
 80058e6:	4413      	add	r3, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	6938      	ldr	r0, [r7, #16]
 80058ec:	f7ff fefe 	bl	80056ec <move_window>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d153      	bne.n	800599e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <get_fat+0xbc>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	e002      	b.n	8005924 <get_fat+0xc2>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	617b      	str	r3, [r7, #20]
			break;
 8005926:	e03f      	b.n	80059a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	4413      	add	r3, r2
 8005932:	4619      	mov	r1, r3
 8005934:	6938      	ldr	r0, [r7, #16]
 8005936:	f7ff fed9 	bl	80056ec <move_window>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d130      	bne.n	80059a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800594e:	4413      	add	r3, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fc1b 	bl	800518c <ld_word>
 8005956:	4603      	mov	r3, r0
 8005958:	617b      	str	r3, [r7, #20]
			break;
 800595a:	e025      	b.n	80059a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	09db      	lsrs	r3, r3, #7
 8005964:	4413      	add	r3, r2
 8005966:	4619      	mov	r1, r3
 8005968:	6938      	ldr	r0, [r7, #16]
 800596a:	f7ff febf 	bl	80056ec <move_window>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d118      	bne.n	80059a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005982:	4413      	add	r3, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fc19 	bl	80051bc <ld_dword>
 800598a:	4603      	mov	r3, r0
 800598c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005990:	617b      	str	r3, [r7, #20]
			break;
 8005992:	e009      	b.n	80059a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005994:	2301      	movs	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e006      	b.n	80059a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800599a:	bf00      	nop
 800599c:	e004      	b.n	80059a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059a6:	bf00      	nop
		}
	}

	return val;
 80059a8:	697b      	ldr	r3, [r7, #20]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80059b2:	b590      	push	{r4, r7, lr}
 80059b4:	b089      	sub	sp, #36	; 0x24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	f240 80d2 	bls.w	8005b6e <put_fat+0x1bc>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	f080 80cc 	bcs.w	8005b6e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	f000 8096 	beq.w	8005b0c <put_fat+0x15a>
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	f300 80cd 	bgt.w	8005b80 <put_fat+0x1ce>
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d002      	beq.n	80059f0 <put_fat+0x3e>
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d06e      	beq.n	8005acc <put_fat+0x11a>
 80059ee:	e0c7      	b.n	8005b80 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4413      	add	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	0a5b      	lsrs	r3, r3, #9
 8005a06:	4413      	add	r3, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff fe6e 	bl	80056ec <move_window>
 8005a10:	4603      	mov	r3, r0
 8005a12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a14:	7ffb      	ldrb	r3, [r7, #31]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 80ab 	bne.w	8005b72 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	1c59      	adds	r1, r3, #1
 8005a26:	61b9      	str	r1, [r7, #24]
 8005a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2c:	4413      	add	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <put_fat+0xa4>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	b25a      	sxtb	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	e001      	b.n	8005a5a <put_fat+0xa8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	0a5b      	lsrs	r3, r3, #9
 8005a6c:	4413      	add	r3, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fe3b 	bl	80056ec <move_window>
 8005a76:	4603      	mov	r3, r0
 8005a78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d17a      	bne.n	8005b76 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8c:	4413      	add	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <put_fat+0xf0>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e00e      	b.n	8005ac0 <put_fat+0x10e>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b25b      	sxtb	r3, r3
 8005aa8:	f023 030f 	bic.w	r3, r3, #15
 8005aac:	b25a      	sxtb	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	b25b      	sxtb	r3, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b25b      	sxtb	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	70da      	strb	r2, [r3, #3]
			break;
 8005aca:	e059      	b.n	8005b80 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fe07 	bl	80056ec <move_window>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d148      	bne.n	8005b7a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005af6:	4413      	add	r3, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	b292      	uxth	r2, r2
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fb7f 	bl	8005202 <st_word>
			fs->wflag = 1;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	70da      	strb	r2, [r3, #3]
			break;
 8005b0a:	e039      	b.n	8005b80 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	09db      	lsrs	r3, r3, #7
 8005b14:	4413      	add	r3, r2
 8005b16:	4619      	mov	r1, r3
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fde7 	bl	80056ec <move_window>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b22:	7ffb      	ldrb	r3, [r7, #31]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d12a      	bne.n	8005b7e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b3c:	4413      	add	r3, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fb3c 	bl	80051bc <ld_dword>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b4a:	4323      	orrs	r3, r4
 8005b4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b5c:	4413      	add	r3, r2
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fb69 	bl	8005238 <st_dword>
			fs->wflag = 1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	70da      	strb	r2, [r3, #3]
			break;
 8005b6c:	e008      	b.n	8005b80 <put_fat+0x1ce>
		}
	}
 8005b6e:	bf00      	nop
 8005b70:	e006      	b.n	8005b80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b72:	bf00      	nop
 8005b74:	e004      	b.n	8005b80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b7e:	bf00      	nop
	return res;
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd90      	pop	{r4, r7, pc}

08005b8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d904      	bls.n	8005bb0 <remove_chain+0x26>
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d301      	bcc.n	8005bb4 <remove_chain+0x2a>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e04b      	b.n	8005c4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00c      	beq.n	8005bd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005bba:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	69b8      	ldr	r0, [r7, #24]
 8005bc2:	f7ff fef6 	bl	80059b2 <put_fat>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005bca:	7ffb      	ldrb	r3, [r7, #31]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <remove_chain+0x4a>
 8005bd0:	7ffb      	ldrb	r3, [r7, #31]
 8005bd2:	e03b      	b.n	8005c4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff fe43 	bl	8005862 <get_fat>
 8005bdc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d031      	beq.n	8005c48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <remove_chain+0x64>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e02e      	b.n	8005c4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d101      	bne.n	8005bfa <remove_chain+0x70>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e028      	b.n	8005c4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	69b8      	ldr	r0, [r7, #24]
 8005c00:	f7ff fed7 	bl	80059b2 <put_fat>
 8005c04:	4603      	mov	r3, r0
 8005c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c08:	7ffb      	ldrb	r3, [r7, #31]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <remove_chain+0x88>
 8005c0e:	7ffb      	ldrb	r3, [r7, #31]
 8005c10:	e01c      	b.n	8005c4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	3b02      	subs	r3, #2
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d20b      	bcs.n	8005c38 <remove_chain+0xae>
			fs->free_clst++;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	791b      	ldrb	r3, [r3, #4]
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d3c6      	bcc.n	8005bd4 <remove_chain+0x4a>
 8005c46:	e000      	b.n	8005c4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <create_chain+0x2c>
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d31b      	bcc.n	8005cb8 <create_chain+0x64>
 8005c80:	2301      	movs	r3, #1
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e018      	b.n	8005cb8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fdea 	bl	8005862 <get_fat>
 8005c8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d801      	bhi.n	8005c9a <create_chain+0x46>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e070      	b.n	8005d7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d101      	bne.n	8005ca6 <create_chain+0x52>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	e06a      	b.n	8005d7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d201      	bcs.n	8005cb4 <create_chain+0x60>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e063      	b.n	8005d7c <create_chain+0x128>
		scl = clst;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d307      	bcc.n	8005cdc <create_chain+0x88>
				ncl = 2;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d901      	bls.n	8005cdc <create_chain+0x88>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e04f      	b.n	8005d7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005cdc:	69f9      	ldr	r1, [r7, #28]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fdbf 	bl	8005862 <get_fat>
 8005ce4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d003      	beq.n	8005cfa <create_chain+0xa6>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d101      	bne.n	8005cfe <create_chain+0xaa>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	e03e      	b.n	8005d7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d1da      	bne.n	8005cbc <create_chain+0x68>
 8005d06:	2300      	movs	r3, #0
 8005d08:	e038      	b.n	8005d7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	6938      	ldr	r0, [r7, #16]
 8005d14:	f7ff fe4d 	bl	80059b2 <put_fat>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <create_chain+0xe2>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d006      	beq.n	8005d36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6938      	ldr	r0, [r7, #16]
 8005d2e:	f7ff fe40 	bl	80059b2 <put_fat>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d116      	bne.n	8005d6a <create_chain+0x116>
		fs->last_clst = ncl;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	3b02      	subs	r3, #2
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d804      	bhi.n	8005d5a <create_chain+0x106>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	791b      	ldrb	r3, [r3, #4]
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	711a      	strb	r2, [r3, #4]
 8005d68:	e007      	b.n	8005d7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d102      	bne.n	8005d76 <create_chain+0x122>
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	e000      	b.n	8005d78 <create_chain+0x124>
 8005d76:	2301      	movs	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005d7a:	69fb      	ldr	r3, [r7, #28]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	3304      	adds	r3, #4
 8005d9a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	0a5b      	lsrs	r3, r3, #9
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	8952      	ldrh	r2, [r2, #10]
 8005da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	613a      	str	r2, [r7, #16]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <clmt_clust+0x3a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e010      	b.n	8005de0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d307      	bcc.n	8005dd6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dd4:	e7e9      	b.n	8005daa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005dd6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e02:	d204      	bcs.n	8005e0e <dir_sdi+0x22>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e063      	b.n	8005eda <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <dir_sdi+0x46>
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d902      	bls.n	8005e32 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10c      	bne.n	8005e52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	8912      	ldrh	r2, [r2, #8]
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d301      	bcc.n	8005e48 <dir_sdi+0x5c>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e048      	b.n	8005eda <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	61da      	str	r2, [r3, #28]
 8005e50:	e029      	b.n	8005ea6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	895b      	ldrh	r3, [r3, #10]
 8005e56:	025b      	lsls	r3, r3, #9
 8005e58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e5a:	e019      	b.n	8005e90 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6979      	ldr	r1, [r7, #20]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fcfe 	bl	8005862 <get_fat>
 8005e66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d101      	bne.n	8005e74 <dir_sdi+0x88>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e032      	b.n	8005eda <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d904      	bls.n	8005e84 <dir_sdi+0x98>
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d301      	bcc.n	8005e88 <dir_sdi+0x9c>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e028      	b.n	8005eda <dir_sdi+0xee>
			ofs -= csz;
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d2e1      	bcs.n	8005e5c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f7ff fcc2 	bl	8005824 <clust2sect>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <dir_sdi+0xcc>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e010      	b.n	8005eda <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	0a5b      	lsrs	r3, r3, #9
 8005ec0:	441a      	add	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	3320      	adds	r3, #32
 8005ef8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <dir_next+0x28>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f08:	d301      	bcc.n	8005f0e <dir_next+0x2c>
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	e0aa      	b.n	8006064 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 8098 	bne.w	800604a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10b      	bne.n	8005f44 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	8912      	ldrh	r2, [r2, #8]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	f0c0 8088 	bcc.w	800604a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	61da      	str	r2, [r3, #28]
 8005f40:	2304      	movs	r3, #4
 8005f42:	e08f      	b.n	8006064 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	0a5b      	lsrs	r3, r3, #9
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	8952      	ldrh	r2, [r2, #10]
 8005f4c:	3a01      	subs	r2, #1
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d17a      	bne.n	800604a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7ff fc80 	bl	8005862 <get_fat>
 8005f62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d801      	bhi.n	8005f6e <dir_next+0x8c>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e07a      	b.n	8006064 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d101      	bne.n	8005f7a <dir_next+0x98>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e074      	b.n	8006064 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d358      	bcc.n	8006036 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	61da      	str	r2, [r3, #28]
 8005f90:	2304      	movs	r3, #4
 8005f92:	e067      	b.n	8006064 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7ff fe59 	bl	8005c54 <create_chain>
 8005fa2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <dir_next+0xcc>
 8005faa:	2307      	movs	r3, #7
 8005fac:	e05a      	b.n	8006064 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <dir_next+0xd6>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e055      	b.n	8006064 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d101      	bne.n	8005fc4 <dir_next+0xe2>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e04f      	b.n	8006064 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff fb4d 	bl	8005664 <sync_window>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <dir_next+0xf2>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e047      	b.n	8006064 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3330      	adds	r3, #48	; 0x30
 8005fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff f977 	bl	80052d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	6979      	ldr	r1, [r7, #20]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fc1a 	bl	8005824 <clust2sect>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ff6:	e012      	b.n	800601e <dir_next+0x13c>
						fs->wflag = 1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fb30 	bl	8005664 <sync_window>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <dir_next+0x12c>
 800600a:	2301      	movs	r3, #1
 800600c:	e02a      	b.n	8006064 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3301      	adds	r3, #1
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	62da      	str	r2, [r3, #44]	; 0x2c
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	895b      	ldrh	r3, [r3, #10]
 8006022:	461a      	mov	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4293      	cmp	r3, r2
 8006028:	d3e6      	bcc.n	8005ff8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad2      	subs	r2, r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fbf0 	bl	8005824 <clust2sect>
 8006044:	4602      	mov	r2, r0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605c:	441a      	add	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800607c:	2100      	movs	r1, #0
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff feb4 	bl	8005dec <dir_sdi>
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d12b      	bne.n	80060e6 <dir_alloc+0x7a>
		n = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4619      	mov	r1, r3
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fb27 	bl	80056ec <move_window>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d11d      	bne.n	80060e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2be5      	cmp	r3, #229	; 0xe5
 80060b0:	d004      	beq.n	80060bc <dir_alloc+0x50>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3301      	adds	r3, #1
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d102      	bne.n	80060d0 <dir_alloc+0x64>
 80060ca:	e00c      	b.n	80060e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80060d0:	2101      	movs	r1, #1
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ff05 	bl	8005ee2 <dir_next>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0d7      	beq.n	8006092 <dir_alloc+0x26>
 80060e2:	e000      	b.n	80060e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80060e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d101      	bne.n	80060f0 <dir_alloc+0x84>
 80060ec:	2307      	movs	r3, #7
 80060ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	331a      	adds	r3, #26
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff f83f 	bl	800518c <ld_word>
 800610e:	4603      	mov	r3, r0
 8006110:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d109      	bne.n	800612e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f834 	bl	800518c <ld_word>
 8006124:	4603      	mov	r3, r0
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	331a      	adds	r3, #26
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	b292      	uxth	r2, r2
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff f857 	bl	8005202 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d109      	bne.n	8006170 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f103 0214 	add.w	r2, r3, #20
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	b29b      	uxth	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7ff f849 	bl	8005202 <st_word>
	}
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006186:	2100      	movs	r1, #0
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fe2f 	bl	8005dec <dir_sdi>
 800618e:	4603      	mov	r3, r0
 8006190:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <dir_find+0x24>
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	e03e      	b.n	800621a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4619      	mov	r1, r3
 80061a2:	6938      	ldr	r0, [r7, #16]
 80061a4:	f7ff faa2 	bl	80056ec <move_window>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d12f      	bne.n	8006212 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <dir_find+0x4e>
 80061c0:	2304      	movs	r3, #4
 80061c2:	75fb      	strb	r3, [r7, #23]
 80061c4:	e028      	b.n	8006218 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	330b      	adds	r3, #11
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	330b      	adds	r3, #11
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <dir_find+0x86>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a18      	ldr	r0, [r3, #32]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3324      	adds	r3, #36	; 0x24
 80061f0:	220b      	movs	r2, #11
 80061f2:	4619      	mov	r1, r3
 80061f4:	f7ff f888 	bl	8005308 <mem_cmp>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80061fe:	2100      	movs	r1, #0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fe6e 	bl	8005ee2 <dir_next>
 8006206:	4603      	mov	r3, r0
 8006208:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0c5      	beq.n	800619c <dir_find+0x24>
 8006210:	e002      	b.n	8006218 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006216:	bf00      	nop

	return res;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006230:	2101      	movs	r1, #1
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ff1a 	bl	800606c <dir_alloc>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11c      	bne.n	800627c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4619      	mov	r1, r3
 8006248:	68b8      	ldr	r0, [r7, #8]
 800624a:	f7ff fa4f 	bl	80056ec <move_window>
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d111      	bne.n	800627c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	2220      	movs	r2, #32
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff f836 	bl	80052d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a18      	ldr	r0, [r3, #32]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3324      	adds	r3, #36	; 0x24
 800626e:	220b      	movs	r2, #11
 8006270:	4619      	mov	r1, r3
 8006272:	f7ff f80d 	bl	8005290 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2201      	movs	r2, #1
 800627a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3324      	adds	r3, #36	; 0x24
 800629c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800629e:	220b      	movs	r2, #11
 80062a0:	2120      	movs	r1, #32
 80062a2:	68b8      	ldr	r0, [r7, #8]
 80062a4:	f7ff f815 	bl	80052d2 <mem_set>
	si = i = 0; ni = 8;
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	2308      	movs	r3, #8
 80062b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	61fa      	str	r2, [r7, #28]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80062c2:	7efb      	ldrb	r3, [r7, #27]
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d94e      	bls.n	8006366 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80062c8:	7efb      	ldrb	r3, [r7, #27]
 80062ca:	2b2f      	cmp	r3, #47	; 0x2f
 80062cc:	d006      	beq.n	80062dc <create_name+0x54>
 80062ce:	7efb      	ldrb	r3, [r7, #27]
 80062d0:	2b5c      	cmp	r3, #92	; 0x5c
 80062d2:	d110      	bne.n	80062f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80062d4:	e002      	b.n	80062dc <create_name+0x54>
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3301      	adds	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b2f      	cmp	r3, #47	; 0x2f
 80062e6:	d0f6      	beq.n	80062d6 <create_name+0x4e>
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b5c      	cmp	r3, #92	; 0x5c
 80062f2:	d0f0      	beq.n	80062d6 <create_name+0x4e>
			break;
 80062f4:	e038      	b.n	8006368 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80062f6:	7efb      	ldrb	r3, [r7, #27]
 80062f8:	2b2e      	cmp	r3, #46	; 0x2e
 80062fa:	d003      	beq.n	8006304 <create_name+0x7c>
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d30c      	bcc.n	800631e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b0b      	cmp	r3, #11
 8006308:	d002      	beq.n	8006310 <create_name+0x88>
 800630a:	7efb      	ldrb	r3, [r7, #27]
 800630c:	2b2e      	cmp	r3, #46	; 0x2e
 800630e:	d001      	beq.n	8006314 <create_name+0x8c>
 8006310:	2306      	movs	r3, #6
 8006312:	e044      	b.n	800639e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006314:	2308      	movs	r3, #8
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	230b      	movs	r3, #11
 800631a:	617b      	str	r3, [r7, #20]
			continue;
 800631c:	e022      	b.n	8006364 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800631e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006322:	2b00      	cmp	r3, #0
 8006324:	da04      	bge.n	8006330 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006326:	7efb      	ldrb	r3, [r7, #27]
 8006328:	3b80      	subs	r3, #128	; 0x80
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <create_name+0x120>)
 800632c:	5cd3      	ldrb	r3, [r2, r3]
 800632e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006330:	7efb      	ldrb	r3, [r7, #27]
 8006332:	4619      	mov	r1, r3
 8006334:	481d      	ldr	r0, [pc, #116]	; (80063ac <create_name+0x124>)
 8006336:	f7ff f80e 	bl	8005356 <chk_chr>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <create_name+0xbc>
 8006340:	2306      	movs	r3, #6
 8006342:	e02c      	b.n	800639e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006344:	7efb      	ldrb	r3, [r7, #27]
 8006346:	2b60      	cmp	r3, #96	; 0x60
 8006348:	d905      	bls.n	8006356 <create_name+0xce>
 800634a:	7efb      	ldrb	r3, [r7, #27]
 800634c:	2b7a      	cmp	r3, #122	; 0x7a
 800634e:	d802      	bhi.n	8006356 <create_name+0xce>
 8006350:	7efb      	ldrb	r3, [r7, #27]
 8006352:	3b20      	subs	r3, #32
 8006354:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	613a      	str	r2, [r7, #16]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	4413      	add	r3, r2
 8006360:	7efa      	ldrb	r2, [r7, #27]
 8006362:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006364:	e7a6      	b.n	80062b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006366:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	441a      	add	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <create_name+0xf4>
 8006378:	2306      	movs	r3, #6
 800637a:	e010      	b.n	800639e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2be5      	cmp	r3, #229	; 0xe5
 8006382:	d102      	bne.n	800638a <create_name+0x102>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2205      	movs	r2, #5
 8006388:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800638a:	7efb      	ldrb	r3, [r7, #27]
 800638c:	2b20      	cmp	r3, #32
 800638e:	d801      	bhi.n	8006394 <create_name+0x10c>
 8006390:	2204      	movs	r2, #4
 8006392:	e000      	b.n	8006396 <create_name+0x10e>
 8006394:	2200      	movs	r2, #0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	330b      	adds	r3, #11
 800639a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800639c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	0800a4b0 	.word	0x0800a4b0
 80063ac:	0800a454 	.word	0x0800a454

080063b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063c4:	e002      	b.n	80063cc <follow_path+0x1c>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b2f      	cmp	r3, #47	; 0x2f
 80063d2:	d0f8      	beq.n	80063c6 <follow_path+0x16>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b5c      	cmp	r3, #92	; 0x5c
 80063da:	d0f4      	beq.n	80063c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2200      	movs	r2, #0
 80063e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b1f      	cmp	r3, #31
 80063e8:	d80a      	bhi.n	8006400 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2280      	movs	r2, #128	; 0x80
 80063ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80063f2:	2100      	movs	r1, #0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fcf9 	bl	8005dec <dir_sdi>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]
 80063fe:	e043      	b.n	8006488 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006400:	463b      	mov	r3, r7
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff ff3f 	bl	8006288 <create_name>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d134      	bne.n	800647e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff feaf 	bl	8006178 <dir_find>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006424:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b04      	cmp	r3, #4
 8006430:	d127      	bne.n	8006482 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d122      	bne.n	8006482 <follow_path+0xd2>
 800643c:	2305      	movs	r3, #5
 800643e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006440:	e01f      	b.n	8006482 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11c      	bne.n	8006486 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	799b      	ldrb	r3, [r3, #6]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006458:	2305      	movs	r3, #5
 800645a:	75fb      	strb	r3, [r7, #23]
 800645c:	e014      	b.n	8006488 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646c:	4413      	add	r3, r2
 800646e:	4619      	mov	r1, r3
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff fe42 	bl	80060fa <ld_clust>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800647c:	e7c0      	b.n	8006400 <follow_path+0x50>
			if (res != FR_OK) break;
 800647e:	bf00      	nop
 8006480:	e002      	b.n	8006488 <follow_path+0xd8>
				break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006486:	bf00      	nop
			}
		}
	}

	return res;
 8006488:	7dfb      	ldrb	r3, [r7, #23]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800649a:	f04f 33ff 	mov.w	r3, #4294967295
 800649e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d031      	beq.n	800650c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e002      	b.n	80064b6 <get_ldnumber+0x24>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d903      	bls.n	80064c6 <get_ldnumber+0x34>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b3a      	cmp	r3, #58	; 0x3a
 80064c4:	d1f4      	bne.n	80064b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b3a      	cmp	r3, #58	; 0x3a
 80064cc:	d11c      	bne.n	8006508 <get_ldnumber+0x76>
			tp = *path;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	60fa      	str	r2, [r7, #12]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	3b30      	subs	r3, #48	; 0x30
 80064de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d80e      	bhi.n	8006504 <get_ldnumber+0x72>
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d10a      	bne.n	8006504 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <get_ldnumber+0x72>
					vol = (int)i;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	3301      	adds	r3, #1
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	e002      	b.n	800650e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800650c:	693b      	ldr	r3, [r7, #16]
}
 800650e:	4618      	mov	r0, r3
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	70da      	strb	r2, [r3, #3]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff f8d8 	bl	80056ec <move_window>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <check_fs+0x2a>
 8006542:	2304      	movs	r3, #4
 8006544:	e038      	b.n	80065b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3330      	adds	r3, #48	; 0x30
 800654a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fe1c 	bl	800518c <ld_word>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800655c:	429a      	cmp	r2, r3
 800655e:	d001      	beq.n	8006564 <check_fs+0x48>
 8006560:	2303      	movs	r3, #3
 8006562:	e029      	b.n	80065b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800656a:	2be9      	cmp	r3, #233	; 0xe9
 800656c:	d009      	beq.n	8006582 <check_fs+0x66>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006574:	2beb      	cmp	r3, #235	; 0xeb
 8006576:	d11e      	bne.n	80065b6 <check_fs+0x9a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800657e:	2b90      	cmp	r3, #144	; 0x90
 8006580:	d119      	bne.n	80065b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3330      	adds	r3, #48	; 0x30
 8006586:	3336      	adds	r3, #54	; 0x36
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fe17 	bl	80051bc <ld_dword>
 800658e:	4603      	mov	r3, r0
 8006590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006594:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <check_fs+0xa4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d101      	bne.n	800659e <check_fs+0x82>
 800659a:	2300      	movs	r3, #0
 800659c:	e00c      	b.n	80065b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3330      	adds	r3, #48	; 0x30
 80065a2:	3352      	adds	r3, #82	; 0x52
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe fe09 	bl	80051bc <ld_dword>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4a05      	ldr	r2, [pc, #20]	; (80065c4 <check_fs+0xa8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d101      	bne.n	80065b6 <check_fs+0x9a>
 80065b2:	2300      	movs	r3, #0
 80065b4:	e000      	b.n	80065b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80065b6:	2302      	movs	r3, #2
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	00544146 	.word	0x00544146
 80065c4:	33544146 	.word	0x33544146

080065c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b096      	sub	sp, #88	; 0x58
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff ff58 	bl	8006492 <get_ldnumber>
 80065e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da01      	bge.n	80065ee <find_volume+0x26>
 80065ea:	230b      	movs	r3, #11
 80065ec:	e22e      	b.n	8006a4c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80065ee:	4aa8      	ldr	r2, [pc, #672]	; (8006890 <find_volume+0x2c8>)
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <find_volume+0x3a>
 80065fe:	230c      	movs	r3, #12
 8006600:	e224      	b.n	8006a4c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006606:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01a      	beq.n	800664e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe fd17 	bl	8005050 <disk_status>
 8006622:	4603      	mov	r3, r0
 8006624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <find_volume+0x82>
 800663a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006646:	230a      	movs	r3, #10
 8006648:	e200      	b.n	8006a4c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800664a:	2300      	movs	r3, #0
 800664c:	e1fe      	b.n	8006a4c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	b2da      	uxtb	r2, r3
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fd0f 	bl	8005084 <disk_initialize>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800666c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006678:	2303      	movs	r3, #3
 800667a:	e1e7      	b.n	8006a4c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <find_volume+0xca>
 8006682:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800668e:	230a      	movs	r3, #10
 8006690:	e1dc      	b.n	8006a4c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800669a:	f7ff ff3f 	bl	800651c <check_fs>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80066a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d14b      	bne.n	8006744 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066ac:	2300      	movs	r3, #0
 80066ae:	643b      	str	r3, [r7, #64]	; 0x40
 80066b0:	e01f      	b.n	80066f2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80066c0:	4413      	add	r3, r2
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	3304      	adds	r3, #4
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <find_volume+0x114>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	3308      	adds	r3, #8
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fd72 	bl	80051bc <ld_dword>
 80066d8:	4602      	mov	r2, r0
 80066da:	e000      	b.n	80066de <find_volume+0x116>
 80066dc:	2200      	movs	r2, #0
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80066e6:	440b      	add	r3, r1
 80066e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ee:	3301      	adds	r3, #1
 80066f0:	643b      	str	r3, [r7, #64]	; 0x40
 80066f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d9dc      	bls.n	80066b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80066f8:	2300      	movs	r3, #0
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80066fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <find_volume+0x140>
 8006702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006704:	3b01      	subs	r3, #1
 8006706:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006710:	4413      	add	r3, r2
 8006712:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006716:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <find_volume+0x162>
 800671e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006722:	f7ff fefb 	bl	800651c <check_fs>
 8006726:	4603      	mov	r3, r0
 8006728:	e000      	b.n	800672c <find_volume+0x164>
 800672a:	2303      	movs	r3, #3
 800672c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006734:	2b01      	cmp	r3, #1
 8006736:	d905      	bls.n	8006744 <find_volume+0x17c>
 8006738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673a:	3301      	adds	r3, #1
 800673c:	643b      	str	r3, [r7, #64]	; 0x40
 800673e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006740:	2b03      	cmp	r3, #3
 8006742:	d9e1      	bls.n	8006708 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006748:	2b04      	cmp	r3, #4
 800674a:	d101      	bne.n	8006750 <find_volume+0x188>
 800674c:	2301      	movs	r3, #1
 800674e:	e17d      	b.n	8006a4c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006754:	2b01      	cmp	r3, #1
 8006756:	d901      	bls.n	800675c <find_volume+0x194>
 8006758:	230d      	movs	r3, #13
 800675a:	e177      	b.n	8006a4c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	3330      	adds	r3, #48	; 0x30
 8006760:	330b      	adds	r3, #11
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fd12 	bl	800518c <ld_word>
 8006768:	4603      	mov	r3, r0
 800676a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676e:	d001      	beq.n	8006774 <find_volume+0x1ac>
 8006770:	230d      	movs	r3, #13
 8006772:	e16b      	b.n	8006a4c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	3330      	adds	r3, #48	; 0x30
 8006778:	3316      	adds	r3, #22
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fd06 	bl	800518c <ld_word>
 8006780:	4603      	mov	r3, r0
 8006782:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <find_volume+0x1d0>
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	3330      	adds	r3, #48	; 0x30
 800678e:	3324      	adds	r3, #36	; 0x24
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe fd13 	bl	80051bc <ld_dword>
 8006796:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	789b      	ldrb	r3, [r3, #2]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d005      	beq.n	80067bc <find_volume+0x1f4>
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	789b      	ldrb	r3, [r3, #2]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d001      	beq.n	80067bc <find_volume+0x1f4>
 80067b8:	230d      	movs	r3, #13
 80067ba:	e147      	b.n	8006a4c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	789b      	ldrb	r3, [r3, #2]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	fb02 f303 	mul.w	r3, r2, r3
 80067c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	895b      	ldrh	r3, [r3, #10]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <find_volume+0x228>
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	895b      	ldrh	r3, [r3, #10]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	895b      	ldrh	r3, [r3, #10]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	4013      	ands	r3, r2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <find_volume+0x22c>
 80067f0:	230d      	movs	r3, #13
 80067f2:	e12b      	b.n	8006a4c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	3330      	adds	r3, #48	; 0x30
 80067f8:	3311      	adds	r3, #17
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fcc6 	bl	800518c <ld_word>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	891b      	ldrh	r3, [r3, #8]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <find_volume+0x252>
 8006816:	230d      	movs	r3, #13
 8006818:	e118      	b.n	8006a4c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	3330      	adds	r3, #48	; 0x30
 800681e:	3313      	adds	r3, #19
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fcb3 	bl	800518c <ld_word>
 8006826:	4603      	mov	r3, r0
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800682a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <find_volume+0x276>
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3330      	adds	r3, #48	; 0x30
 8006834:	3320      	adds	r3, #32
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fcc0 	bl	80051bc <ld_dword>
 800683c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	3330      	adds	r3, #48	; 0x30
 8006842:	330e      	adds	r3, #14
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fca1 	bl	800518c <ld_word>
 800684a:	4603      	mov	r3, r0
 800684c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800684e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <find_volume+0x290>
 8006854:	230d      	movs	r3, #13
 8006856:	e0f9      	b.n	8006a4c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006858:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800685a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685c:	4413      	add	r3, r2
 800685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006860:	8912      	ldrh	r2, [r2, #8]
 8006862:	0912      	lsrs	r2, r2, #4
 8006864:	b292      	uxth	r2, r2
 8006866:	4413      	add	r3, r2
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800686a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	429a      	cmp	r2, r3
 8006870:	d201      	bcs.n	8006876 <find_volume+0x2ae>
 8006872:	230d      	movs	r3, #13
 8006874:	e0ea      	b.n	8006a4c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687e:	8952      	ldrh	r2, [r2, #10]
 8006880:	fbb3 f3f2 	udiv	r3, r3, r2
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <find_volume+0x2cc>
 800688c:	230d      	movs	r3, #13
 800688e:	e0dd      	b.n	8006a4c <find_volume+0x484>
 8006890:	20000318 	.word	0x20000318
		fmt = FS_FAT32;
 8006894:	2303      	movs	r3, #3
 8006896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d802      	bhi.n	80068aa <find_volume+0x2e2>
 80068a4:	2302      	movs	r3, #2
 80068a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d802      	bhi.n	80068ba <find_volume+0x2f2>
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	1c9a      	adds	r2, r3, #2
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80068c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068cc:	441a      	add	r2, r3
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80068d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	441a      	add	r2, r3
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80068dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d11e      	bne.n	8006922 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	3330      	adds	r3, #48	; 0x30
 80068e8:	332a      	adds	r3, #42	; 0x2a
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fc4e 	bl	800518c <ld_word>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <find_volume+0x332>
 80068f6:	230d      	movs	r3, #13
 80068f8:	e0a8      	b.n	8006a4c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	891b      	ldrh	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <find_volume+0x33e>
 8006902:	230d      	movs	r3, #13
 8006904:	e0a2      	b.n	8006a4c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	3330      	adds	r3, #48	; 0x30
 800690a:	332c      	adds	r3, #44	; 0x2c
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fc55 	bl	80051bc <ld_dword>
 8006912:	4602      	mov	r2, r0
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
 8006920:	e01f      	b.n	8006962 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	891b      	ldrh	r3, [r3, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <find_volume+0x366>
 800692a:	230d      	movs	r3, #13
 800692c:	e08e      	b.n	8006a4c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006934:	441a      	add	r2, r3
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800693a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800693e:	2b02      	cmp	r3, #2
 8006940:	d103      	bne.n	800694a <find_volume+0x382>
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	e00a      	b.n	8006960 <find_volume+0x398>
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	085a      	lsrs	r2, r3, #1
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006960:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006968:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800696c:	0a5b      	lsrs	r3, r3, #9
 800696e:	429a      	cmp	r2, r3
 8006970:	d201      	bcs.n	8006976 <find_volume+0x3ae>
 8006972:	230d      	movs	r3, #13
 8006974:	e06a      	b.n	8006a4c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	f04f 32ff 	mov.w	r2, #4294967295
 800697c:	611a      	str	r2, [r3, #16]
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800698c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006990:	2b03      	cmp	r3, #3
 8006992:	d149      	bne.n	8006a28 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	3330      	adds	r3, #48	; 0x30
 8006998:	3330      	adds	r3, #48	; 0x30
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fbf6 	bl	800518c <ld_word>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d140      	bne.n	8006a28 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	3301      	adds	r3, #1
 80069aa:	4619      	mov	r1, r3
 80069ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069ae:	f7fe fe9d 	bl	80056ec <move_window>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d137      	bne.n	8006a28 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	2200      	movs	r2, #0
 80069bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	3330      	adds	r3, #48	; 0x30
 80069c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fbe0 	bl	800518c <ld_word>
 80069cc:	4603      	mov	r3, r0
 80069ce:	461a      	mov	r2, r3
 80069d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d127      	bne.n	8006a28 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	3330      	adds	r3, #48	; 0x30
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fe fbed 	bl	80051bc <ld_dword>
 80069e2:	4603      	mov	r3, r0
 80069e4:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <find_volume+0x48c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d11e      	bne.n	8006a28 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	3330      	adds	r3, #48	; 0x30
 80069ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fbe2 	bl	80051bc <ld_dword>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <find_volume+0x490>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d113      	bne.n	8006a28 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	3330      	adds	r3, #48	; 0x30
 8006a04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fbd7 	bl	80051bc <ld_dword>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	3330      	adds	r3, #48	; 0x30
 8006a18:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fbcd 	bl	80051bc <ld_dword>
 8006a22:	4602      	mov	r2, r0
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006a2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <find_volume+0x494>)
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <find_volume+0x494>)
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <find_volume+0x494>)
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a46:	f7fe fde9 	bl	800561c <clear_lock>
#endif
	return FR_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3758      	adds	r7, #88	; 0x58
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	41615252 	.word	0x41615252
 8006a58:	61417272 	.word	0x61417272
 8006a5c:	2000031c 	.word	0x2000031c

08006a60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a6a:	2309      	movs	r3, #9
 8006a6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01c      	beq.n	8006aae <validate+0x4e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d018      	beq.n	8006aae <validate+0x4e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d013      	beq.n	8006aae <validate+0x4e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	889a      	ldrh	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	88db      	ldrh	r3, [r3, #6]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d10c      	bne.n	8006aae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fad8 	bl	8005050 <disk_status>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <validate+0x4e>
			res = FR_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <validate+0x5a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	e000      	b.n	8006abc <validate+0x5c>
 8006aba:	2300      	movs	r3, #0
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	6013      	str	r3, [r2, #0]
	return res;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006ade:	f107 0310 	add.w	r3, r7, #16
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fcd5 	bl	8006492 <get_ldnumber>
 8006ae8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da01      	bge.n	8006af4 <f_mount+0x28>
 8006af0:	230b      	movs	r3, #11
 8006af2:	e02b      	b.n	8006b4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006af4:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <f_mount+0x88>)
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b04:	69b8      	ldr	r0, [r7, #24]
 8006b06:	f7fe fd89 	bl	800561c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	490d      	ldr	r1, [pc, #52]	; (8006b54 <f_mount+0x88>)
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <f_mount+0x66>
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d001      	beq.n	8006b36 <f_mount+0x6a>
 8006b32:	2300      	movs	r3, #0
 8006b34:	e00a      	b.n	8006b4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006b36:	f107 010c 	add.w	r1, r7, #12
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fd41 	bl	80065c8 <find_volume>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000318 	.word	0x20000318

08006b58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b098      	sub	sp, #96	; 0x60
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <f_open+0x18>
 8006b6c:	2309      	movs	r3, #9
 8006b6e:	e1ad      	b.n	8006ecc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006b78:	79fa      	ldrb	r2, [r7, #7]
 8006b7a:	f107 0110 	add.w	r1, r7, #16
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fd20 	bl	80065c8 <find_volume>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006b8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f040 8191 	bne.w	8006eba <f_open+0x362>
		dj.obj.fs = fs;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	f107 0314 	add.w	r3, r7, #20
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fc03 	bl	80063b0 <follow_path>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11a      	bne.n	8006bee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006bb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da03      	bge.n	8006bca <f_open+0x72>
				res = FR_INVALID_NAME;
 8006bc2:	2306      	movs	r3, #6
 8006bc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006bc8:	e011      	b.n	8006bee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf14      	ite	ne
 8006bd4:	2301      	movne	r3, #1
 8006bd6:	2300      	moveq	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fbd2 	bl	800538c <chk_lock>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	f003 031c 	and.w	r3, r3, #28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d07f      	beq.n	8006cf8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d10e      	bne.n	8006c26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006c08:	f7fe fc1c 	bl	8005444 <enq_lock>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d006      	beq.n	8006c20 <f_open+0xc8>
 8006c12:	f107 0314 	add.w	r3, r7, #20
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fb03 	bl	8006222 <dir_register>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	e000      	b.n	8006c22 <f_open+0xca>
 8006c20:	2312      	movs	r3, #18
 8006c22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	f043 0308 	orr.w	r3, r3, #8
 8006c2c:	71fb      	strb	r3, [r7, #7]
 8006c2e:	e010      	b.n	8006c52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006c30:	7ebb      	ldrb	r3, [r7, #26]
 8006c32:	f003 0311 	and.w	r3, r3, #17
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <f_open+0xea>
					res = FR_DENIED;
 8006c3a:	2307      	movs	r3, #7
 8006c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c40:	e007      	b.n	8006c52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <f_open+0xfa>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d168      	bne.n	8006d2c <f_open+0x1d4>
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d063      	beq.n	8006d2c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006c64:	f7fd fcb6 	bl	80045d4 <get_fattime>
 8006c68:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	330e      	adds	r3, #14
 8006c6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fae1 	bl	8005238 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	3316      	adds	r3, #22
 8006c7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fadb 	bl	8005238 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c84:	330b      	adds	r3, #11
 8006c86:	2220      	movs	r2, #32
 8006c88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fa32 	bl	80060fa <ld_clust>
 8006c96:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fa4a 	bl	8006138 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	331c      	adds	r3, #28
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fac4 	bl	8005238 <st_dword>
					fs->wflag = 1;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d037      	beq.n	8006d2c <f_open+0x1d4>
						dw = fs->winsect;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006cc2:	f107 0314 	add.w	r3, r7, #20
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe ff5d 	bl	8005b8a <remove_chain>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d126      	bne.n	8006d2c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fd02 	bl	80056ec <move_window>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf2:	3a01      	subs	r2, #1
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	e019      	b.n	8006d2c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d115      	bne.n	8006d2c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006d00:	7ebb      	ldrb	r3, [r7, #26]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d10:	e00c      	b.n	8006d2c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <f_open+0x1d4>
 8006d1c:	7ebb      	ldrb	r3, [r7, #26]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <f_open+0x1d4>
						res = FR_DENIED;
 8006d26:	2307      	movs	r3, #7
 8006d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d128      	bne.n	8006d86 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	f023 0301 	bic.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	f107 0314 	add.w	r3, r7, #20
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fb8b 	bl	8005488 <inc_lock>
 8006d72:	4602      	mov	r2, r0
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <f_open+0x22e>
 8006d80:	2302      	movs	r3, #2
 8006d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 8095 	bne.w	8006eba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff f9af 	bl	80060fa <ld_clust>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	331c      	adds	r3, #28
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fa08 	bl	80051bc <ld_dword>
 8006dac:	4602      	mov	r2, r0
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	88da      	ldrh	r2, [r3, #6]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	79fa      	ldrb	r2, [r7, #7]
 8006dca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3330      	adds	r3, #48	; 0x30
 8006de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fa72 	bl	80052d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d060      	beq.n	8006eba <f_open+0x362>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05c      	beq.n	8006eba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	895b      	ldrh	r3, [r3, #10]
 8006e0c:	025b      	lsls	r3, r3, #9
 8006e0e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e1c:	e016      	b.n	8006e4c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fd1d 	bl	8005862 <get_fat>
 8006e28:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d802      	bhi.n	8006e36 <f_open+0x2de>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d102      	bne.n	8006e44 <f_open+0x2ec>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <f_open+0x304>
 8006e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d8e0      	bhi.n	8006e1e <f_open+0x2c6>
				}
				fp->clust = clst;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d127      	bne.n	8006eba <f_open+0x362>
 8006e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d022      	beq.n	8006eba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe fcd3 	bl	8005824 <clust2sect>
 8006e7e:	6478      	str	r0, [r7, #68]	; 0x44
 8006e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <f_open+0x336>
						res = FR_INT_ERR;
 8006e86:	2302      	movs	r3, #2
 8006e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e8c:	e015      	b.n	8006eba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e90:	0a5a      	lsrs	r2, r3, #9
 8006e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e94:	441a      	add	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	7858      	ldrb	r0, [r3, #1]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1a      	ldr	r2, [r3, #32]
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f7fe f911 	bl	80050d0 <disk_read>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <f_open+0x362>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <f_open+0x370>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3760      	adds	r7, #96	; 0x60
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08c      	sub	sp, #48	; 0x30
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f107 0210 	add.w	r2, r7, #16
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fdb3 	bl	8006a60 <validate>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <f_write+0x44>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	7d5b      	ldrb	r3, [r3, #21]
 8006f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <f_write+0x4a>
 8006f18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f1c:	e14b      	b.n	80071b6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	7d1b      	ldrb	r3, [r3, #20]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <f_write+0x5a>
 8006f2a:	2307      	movs	r3, #7
 8006f2c:	e143      	b.n	80071b6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	441a      	add	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f080 812d 	bcs.w	800719a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006f48:	e127      	b.n	800719a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 80e3 	bne.w	800711e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	0a5b      	lsrs	r3, r3, #9
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	8952      	ldrh	r2, [r2, #10]
 8006f62:	3a01      	subs	r2, #1
 8006f64:	4013      	ands	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d143      	bne.n	8006ff6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10c      	bne.n	8006f90 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d11a      	bne.n	8006fb8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fe64 	bl	8005c54 <create_chain>
 8006f8c:	62b8      	str	r0, [r7, #40]	; 0x28
 8006f8e:	e013      	b.n	8006fb8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7fe fef0 	bl	8005d84 <clmt_clust>
 8006fa4:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fa6:	e007      	b.n	8006fb8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fe fe4f 	bl	8005c54 <create_chain>
 8006fb6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80f2 	beq.w	80071a4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d104      	bne.n	8006fd0 <f_write+0xfc>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	755a      	strb	r2, [r3, #21]
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0f2      	b.n	80071b6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d104      	bne.n	8006fe2 <f_write+0x10e>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	755a      	strb	r2, [r3, #21]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e0e9      	b.n	80071b6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <f_write+0x122>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	7d1b      	ldrb	r3, [r3, #20]
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da18      	bge.n	8007032 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	7858      	ldrb	r0, [r3, #1]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1a      	ldr	r2, [r3, #32]
 800700e:	2301      	movs	r3, #1
 8007010:	f7fe f87e 	bl	8005110 <disk_write>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <f_write+0x150>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	755a      	strb	r2, [r3, #21]
 8007020:	2301      	movs	r3, #1
 8007022:	e0c8      	b.n	80071b6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	7d1b      	ldrb	r3, [r3, #20]
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fe fbf2 	bl	8005824 <clust2sect>
 8007040:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <f_write+0x17e>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2202      	movs	r2, #2
 800704c:	755a      	strb	r2, [r3, #21]
 800704e:	2302      	movs	r3, #2
 8007050:	e0b1      	b.n	80071b6 <f_write+0x2e2>
			sect += csect;
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	4413      	add	r3, r2
 8007058:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	0a5b      	lsrs	r3, r3, #9
 800705e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03c      	beq.n	80070e0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	4413      	add	r3, r2
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	8952      	ldrh	r2, [r2, #10]
 8007070:	4293      	cmp	r3, r2
 8007072:	d905      	bls.n	8007080 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	895b      	ldrh	r3, [r3, #10]
 8007078:	461a      	mov	r2, r3
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	7858      	ldrb	r0, [r3, #1]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	69f9      	ldr	r1, [r7, #28]
 800708a:	f7fe f841 	bl	8005110 <disk_write>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <f_write+0x1ca>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	755a      	strb	r2, [r3, #21]
 800709a:	2301      	movs	r3, #1
 800709c:	e08b      	b.n	80071b6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1a      	ldr	r2, [r3, #32]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	6a3a      	ldr	r2, [r7, #32]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d915      	bls.n	80070d8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1a      	ldr	r2, [r3, #32]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	025b      	lsls	r3, r3, #9
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c4:	4619      	mov	r1, r3
 80070c6:	f7fe f8e3 	bl	8005290 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	7d1b      	ldrb	r3, [r3, #20]
 80070ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	025b      	lsls	r3, r3, #9
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80070de:	e03f      	b.n	8007160 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d016      	beq.n	8007118 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d210      	bcs.n	8007118 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	7858      	ldrb	r0, [r3, #1]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007100:	2301      	movs	r3, #1
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	f7fd ffe4 	bl	80050d0 <disk_read>
 8007108:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	755a      	strb	r2, [r3, #21]
 8007114:	2301      	movs	r3, #1
 8007116:	e04e      	b.n	80071b6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d901      	bls.n	8007138 <f_write+0x264>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	4413      	add	r3, r2
 8007148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714a:	69f9      	ldr	r1, [r7, #28]
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe f89f 	bl	8005290 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7d1b      	ldrb	r3, [r3, #20]
 8007156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	4413      	add	r3, r2
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	441a      	add	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	619a      	str	r2, [r3, #24]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	bf38      	it	cc
 8007180:	461a      	movcc	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	441a      	add	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f47f aed4 	bne.w	8006f4a <f_write+0x76>
 80071a2:	e000      	b.n	80071a6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	7d1b      	ldrb	r3, [r3, #20]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3730      	adds	r7, #48	; 0x30
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f107 0208 	add.w	r2, r7, #8
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fc46 	bl	8006a60 <validate>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d168      	bne.n	80072b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7d1b      	ldrb	r3, [r3, #20]
 80071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d062      	beq.n	80072b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7d1b      	ldrb	r3, [r3, #20]
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da15      	bge.n	8007220 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	7858      	ldrb	r0, [r3, #1]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1a      	ldr	r2, [r3, #32]
 8007202:	2301      	movs	r3, #1
 8007204:	f7fd ff84 	bl	8005110 <disk_write>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <f_sync+0x54>
 800720e:	2301      	movs	r3, #1
 8007210:	e04f      	b.n	80072b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7d1b      	ldrb	r3, [r3, #20]
 8007216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721a:	b2da      	uxtb	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007220:	f7fd f9d8 	bl	80045d4 <get_fattime>
 8007224:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f7fe fa5c 	bl	80056ec <move_window>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d138      	bne.n	80072b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	330b      	adds	r3, #11
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	330b      	adds	r3, #11
 800724e:	f042 0220 	orr.w	r2, r2, #32
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	461a      	mov	r2, r3
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	f7fe ff69 	bl	8006138 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f103 021c 	add.w	r2, r3, #28
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fd ffe0 	bl	8005238 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3316      	adds	r3, #22
 800727c:	6939      	ldr	r1, [r7, #16]
 800727e:	4618      	mov	r0, r3
 8007280:	f7fd ffda 	bl	8005238 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3312      	adds	r3, #18
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f7fd ffb9 	bl	8005202 <st_word>
					fs->wflag = 1;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2201      	movs	r2, #1
 8007294:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fa55 	bl	8005748 <sync_fs>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7d1b      	ldrb	r3, [r3, #20]
 80072a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff ff7b 	bl	80071be <f_sync>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d118      	bne.n	8007304 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f107 0208 	add.w	r2, r7, #8
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff fbc0 	bl	8006a60 <validate>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10c      	bne.n	8007304 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe f958 	bl	80055a4 <dec_lock>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007326:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007328:	7a5b      	ldrb	r3, [r3, #9]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d131      	bne.n	8007394 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007330:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007332:	7a5b      	ldrb	r3, [r3, #9]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 800733a:	2100      	movs	r1, #0
 800733c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800733e:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007340:	7a5b      	ldrb	r3, [r3, #9]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4a17      	ldr	r2, [pc, #92]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800734e:	4b15      	ldr	r3, [pc, #84]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007350:	7a5b      	ldrb	r3, [r3, #9]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007358:	4413      	add	r3, r2
 800735a:	79fa      	ldrb	r2, [r7, #7]
 800735c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 8007360:	7a5b      	ldrb	r3, [r3, #9]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	b2d1      	uxtb	r1, r2
 8007368:	4a0e      	ldr	r2, [pc, #56]	; (80073a4 <FATFS_LinkDriverEx+0x94>)
 800736a:	7251      	strb	r1, [r2, #9]
 800736c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800736e:	7dbb      	ldrb	r3, [r7, #22]
 8007370:	3330      	adds	r3, #48	; 0x30
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	3301      	adds	r3, #1
 800737c:	223a      	movs	r2, #58	; 0x3a
 800737e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3302      	adds	r3, #2
 8007384:	222f      	movs	r2, #47	; 0x2f
 8007386:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	3303      	adds	r3, #3
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20000340 	.word	0x20000340

080073a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80073b2:	2200      	movs	r2, #0
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ffaa 	bl	8007310 <FATFS_LinkDriverEx>
 80073bc:	4603      	mov	r3, r0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <__errno>:
 80073c8:	4b01      	ldr	r3, [pc, #4]	; (80073d0 <__errno+0x8>)
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000024 	.word	0x20000024

080073d4 <__libc_init_array>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4d0d      	ldr	r5, [pc, #52]	; (800740c <__libc_init_array+0x38>)
 80073d8:	4c0d      	ldr	r4, [pc, #52]	; (8007410 <__libc_init_array+0x3c>)
 80073da:	1b64      	subs	r4, r4, r5
 80073dc:	10a4      	asrs	r4, r4, #2
 80073de:	2600      	movs	r6, #0
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	d109      	bne.n	80073f8 <__libc_init_array+0x24>
 80073e4:	4d0b      	ldr	r5, [pc, #44]	; (8007414 <__libc_init_array+0x40>)
 80073e6:	4c0c      	ldr	r4, [pc, #48]	; (8007418 <__libc_init_array+0x44>)
 80073e8:	f002 fed0 	bl	800a18c <_init>
 80073ec:	1b64      	subs	r4, r4, r5
 80073ee:	10a4      	asrs	r4, r4, #2
 80073f0:	2600      	movs	r6, #0
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	d105      	bne.n	8007402 <__libc_init_array+0x2e>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fc:	4798      	blx	r3
 80073fe:	3601      	adds	r6, #1
 8007400:	e7ee      	b.n	80073e0 <__libc_init_array+0xc>
 8007402:	f855 3b04 	ldr.w	r3, [r5], #4
 8007406:	4798      	blx	r3
 8007408:	3601      	adds	r6, #1
 800740a:	e7f2      	b.n	80073f2 <__libc_init_array+0x1e>
 800740c:	0800a91c 	.word	0x0800a91c
 8007410:	0800a91c 	.word	0x0800a91c
 8007414:	0800a91c 	.word	0x0800a91c
 8007418:	0800a920 	.word	0x0800a920

0800741c <memset>:
 800741c:	4402      	add	r2, r0
 800741e:	4603      	mov	r3, r0
 8007420:	4293      	cmp	r3, r2
 8007422:	d100      	bne.n	8007426 <memset+0xa>
 8007424:	4770      	bx	lr
 8007426:	f803 1b01 	strb.w	r1, [r3], #1
 800742a:	e7f9      	b.n	8007420 <memset+0x4>

0800742c <__cvt>:
 800742c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	ec55 4b10 	vmov	r4, r5, d0
 8007434:	2d00      	cmp	r5, #0
 8007436:	460e      	mov	r6, r1
 8007438:	4619      	mov	r1, r3
 800743a:	462b      	mov	r3, r5
 800743c:	bfbb      	ittet	lt
 800743e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007442:	461d      	movlt	r5, r3
 8007444:	2300      	movge	r3, #0
 8007446:	232d      	movlt	r3, #45	; 0x2d
 8007448:	700b      	strb	r3, [r1, #0]
 800744a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800744c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007450:	4691      	mov	r9, r2
 8007452:	f023 0820 	bic.w	r8, r3, #32
 8007456:	bfbc      	itt	lt
 8007458:	4622      	movlt	r2, r4
 800745a:	4614      	movlt	r4, r2
 800745c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007460:	d005      	beq.n	800746e <__cvt+0x42>
 8007462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007466:	d100      	bne.n	800746a <__cvt+0x3e>
 8007468:	3601      	adds	r6, #1
 800746a:	2102      	movs	r1, #2
 800746c:	e000      	b.n	8007470 <__cvt+0x44>
 800746e:	2103      	movs	r1, #3
 8007470:	ab03      	add	r3, sp, #12
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	ab02      	add	r3, sp, #8
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	ec45 4b10 	vmov	d0, r4, r5
 800747c:	4653      	mov	r3, sl
 800747e:	4632      	mov	r2, r6
 8007480:	f000 fd06 	bl	8007e90 <_dtoa_r>
 8007484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007488:	4607      	mov	r7, r0
 800748a:	d102      	bne.n	8007492 <__cvt+0x66>
 800748c:	f019 0f01 	tst.w	r9, #1
 8007490:	d022      	beq.n	80074d8 <__cvt+0xac>
 8007492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007496:	eb07 0906 	add.w	r9, r7, r6
 800749a:	d110      	bne.n	80074be <__cvt+0x92>
 800749c:	783b      	ldrb	r3, [r7, #0]
 800749e:	2b30      	cmp	r3, #48	; 0x30
 80074a0:	d10a      	bne.n	80074b8 <__cvt+0x8c>
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ae:	b918      	cbnz	r0, 80074b8 <__cvt+0x8c>
 80074b0:	f1c6 0601 	rsb	r6, r6, #1
 80074b4:	f8ca 6000 	str.w	r6, [sl]
 80074b8:	f8da 3000 	ldr.w	r3, [sl]
 80074bc:	4499      	add	r9, r3
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f9 faff 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ca:	b108      	cbz	r0, 80074d0 <__cvt+0xa4>
 80074cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80074d0:	2230      	movs	r2, #48	; 0x30
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	454b      	cmp	r3, r9
 80074d6:	d307      	bcc.n	80074e8 <__cvt+0xbc>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074dc:	1bdb      	subs	r3, r3, r7
 80074de:	4638      	mov	r0, r7
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	b004      	add	sp, #16
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	1c59      	adds	r1, r3, #1
 80074ea:	9103      	str	r1, [sp, #12]
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	e7f0      	b.n	80074d2 <__cvt+0xa6>

080074f0 <__exponent>:
 80074f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f2:	4603      	mov	r3, r0
 80074f4:	2900      	cmp	r1, #0
 80074f6:	bfb8      	it	lt
 80074f8:	4249      	neglt	r1, r1
 80074fa:	f803 2b02 	strb.w	r2, [r3], #2
 80074fe:	bfb4      	ite	lt
 8007500:	222d      	movlt	r2, #45	; 0x2d
 8007502:	222b      	movge	r2, #43	; 0x2b
 8007504:	2909      	cmp	r1, #9
 8007506:	7042      	strb	r2, [r0, #1]
 8007508:	dd2a      	ble.n	8007560 <__exponent+0x70>
 800750a:	f10d 0407 	add.w	r4, sp, #7
 800750e:	46a4      	mov	ip, r4
 8007510:	270a      	movs	r7, #10
 8007512:	46a6      	mov	lr, r4
 8007514:	460a      	mov	r2, r1
 8007516:	fb91 f6f7 	sdiv	r6, r1, r7
 800751a:	fb07 1516 	mls	r5, r7, r6, r1
 800751e:	3530      	adds	r5, #48	; 0x30
 8007520:	2a63      	cmp	r2, #99	; 0x63
 8007522:	f104 34ff 	add.w	r4, r4, #4294967295
 8007526:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800752a:	4631      	mov	r1, r6
 800752c:	dcf1      	bgt.n	8007512 <__exponent+0x22>
 800752e:	3130      	adds	r1, #48	; 0x30
 8007530:	f1ae 0502 	sub.w	r5, lr, #2
 8007534:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007538:	1c44      	adds	r4, r0, #1
 800753a:	4629      	mov	r1, r5
 800753c:	4561      	cmp	r1, ip
 800753e:	d30a      	bcc.n	8007556 <__exponent+0x66>
 8007540:	f10d 0209 	add.w	r2, sp, #9
 8007544:	eba2 020e 	sub.w	r2, r2, lr
 8007548:	4565      	cmp	r5, ip
 800754a:	bf88      	it	hi
 800754c:	2200      	movhi	r2, #0
 800754e:	4413      	add	r3, r2
 8007550:	1a18      	subs	r0, r3, r0
 8007552:	b003      	add	sp, #12
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800755e:	e7ed      	b.n	800753c <__exponent+0x4c>
 8007560:	2330      	movs	r3, #48	; 0x30
 8007562:	3130      	adds	r1, #48	; 0x30
 8007564:	7083      	strb	r3, [r0, #2]
 8007566:	70c1      	strb	r1, [r0, #3]
 8007568:	1d03      	adds	r3, r0, #4
 800756a:	e7f1      	b.n	8007550 <__exponent+0x60>

0800756c <_printf_float>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	ed2d 8b02 	vpush	{d8}
 8007574:	b08d      	sub	sp, #52	; 0x34
 8007576:	460c      	mov	r4, r1
 8007578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800757c:	4616      	mov	r6, r2
 800757e:	461f      	mov	r7, r3
 8007580:	4605      	mov	r5, r0
 8007582:	f001 fa71 	bl	8008a68 <_localeconv_r>
 8007586:	f8d0 a000 	ldr.w	sl, [r0]
 800758a:	4650      	mov	r0, sl
 800758c:	f7f8 fe20 	bl	80001d0 <strlen>
 8007590:	2300      	movs	r3, #0
 8007592:	930a      	str	r3, [sp, #40]	; 0x28
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	9305      	str	r3, [sp, #20]
 8007598:	f8d8 3000 	ldr.w	r3, [r8]
 800759c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075a0:	3307      	adds	r3, #7
 80075a2:	f023 0307 	bic.w	r3, r3, #7
 80075a6:	f103 0208 	add.w	r2, r3, #8
 80075aa:	f8c8 2000 	str.w	r2, [r8]
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80075c4:	ee08 0a10 	vmov	s16, r0
 80075c8:	4b9f      	ldr	r3, [pc, #636]	; (8007848 <_printf_float+0x2dc>)
 80075ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	f7f9 faab 	bl	8000b2c <__aeabi_dcmpun>
 80075d6:	bb88      	cbnz	r0, 800763c <_printf_float+0xd0>
 80075d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075dc:	4b9a      	ldr	r3, [pc, #616]	; (8007848 <_printf_float+0x2dc>)
 80075de:	f04f 32ff 	mov.w	r2, #4294967295
 80075e2:	f7f9 fa85 	bl	8000af0 <__aeabi_dcmple>
 80075e6:	bb48      	cbnz	r0, 800763c <_printf_float+0xd0>
 80075e8:	2200      	movs	r2, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 fa74 	bl	8000adc <__aeabi_dcmplt>
 80075f4:	b110      	cbz	r0, 80075fc <_printf_float+0x90>
 80075f6:	232d      	movs	r3, #45	; 0x2d
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fc:	4b93      	ldr	r3, [pc, #588]	; (800784c <_printf_float+0x2e0>)
 80075fe:	4894      	ldr	r0, [pc, #592]	; (8007850 <_printf_float+0x2e4>)
 8007600:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007604:	bf94      	ite	ls
 8007606:	4698      	movls	r8, r3
 8007608:	4680      	movhi	r8, r0
 800760a:	2303      	movs	r3, #3
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	f023 0204 	bic.w	r2, r3, #4
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	9700      	str	r7, [sp, #0]
 800761c:	4633      	mov	r3, r6
 800761e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007620:	4621      	mov	r1, r4
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f9d8 	bl	80079d8 <_printf_common>
 8007628:	3001      	adds	r0, #1
 800762a:	f040 8090 	bne.w	800774e <_printf_float+0x1e2>
 800762e:	f04f 30ff 	mov.w	r0, #4294967295
 8007632:	b00d      	add	sp, #52	; 0x34
 8007634:	ecbd 8b02 	vpop	{d8}
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	f7f9 fa72 	bl	8000b2c <__aeabi_dcmpun>
 8007648:	b140      	cbz	r0, 800765c <_printf_float+0xf0>
 800764a:	464b      	mov	r3, r9
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfbc      	itt	lt
 8007650:	232d      	movlt	r3, #45	; 0x2d
 8007652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007656:	487f      	ldr	r0, [pc, #508]	; (8007854 <_printf_float+0x2e8>)
 8007658:	4b7f      	ldr	r3, [pc, #508]	; (8007858 <_printf_float+0x2ec>)
 800765a:	e7d1      	b.n	8007600 <_printf_float+0x94>
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007662:	9206      	str	r2, [sp, #24]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	d13f      	bne.n	80076e8 <_printf_float+0x17c>
 8007668:	2306      	movs	r3, #6
 800766a:	6063      	str	r3, [r4, #4]
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	6861      	ldr	r1, [r4, #4]
 8007670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007674:	2300      	movs	r3, #0
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	ab0a      	add	r3, sp, #40	; 0x28
 800767a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800767e:	ab09      	add	r3, sp, #36	; 0x24
 8007680:	ec49 8b10 	vmov	d0, r8, r9
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6022      	str	r2, [r4, #0]
 8007688:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800768c:	4628      	mov	r0, r5
 800768e:	f7ff fecd 	bl	800742c <__cvt>
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007696:	2b47      	cmp	r3, #71	; 0x47
 8007698:	4680      	mov	r8, r0
 800769a:	d108      	bne.n	80076ae <_printf_float+0x142>
 800769c:	1cc8      	adds	r0, r1, #3
 800769e:	db02      	blt.n	80076a6 <_printf_float+0x13a>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	4299      	cmp	r1, r3
 80076a4:	dd41      	ble.n	800772a <_printf_float+0x1be>
 80076a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80076aa:	fa5f fb8b 	uxtb.w	fp, fp
 80076ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076b2:	d820      	bhi.n	80076f6 <_printf_float+0x18a>
 80076b4:	3901      	subs	r1, #1
 80076b6:	465a      	mov	r2, fp
 80076b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076bc:	9109      	str	r1, [sp, #36]	; 0x24
 80076be:	f7ff ff17 	bl	80074f0 <__exponent>
 80076c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c4:	1813      	adds	r3, r2, r0
 80076c6:	2a01      	cmp	r2, #1
 80076c8:	4681      	mov	r9, r0
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	dc02      	bgt.n	80076d4 <_printf_float+0x168>
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	07d2      	lsls	r2, r2, #31
 80076d2:	d501      	bpl.n	80076d8 <_printf_float+0x16c>
 80076d4:	3301      	adds	r3, #1
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d09c      	beq.n	800761a <_printf_float+0xae>
 80076e0:	232d      	movs	r3, #45	; 0x2d
 80076e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e6:	e798      	b.n	800761a <_printf_float+0xae>
 80076e8:	9a06      	ldr	r2, [sp, #24]
 80076ea:	2a47      	cmp	r2, #71	; 0x47
 80076ec:	d1be      	bne.n	800766c <_printf_float+0x100>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1bc      	bne.n	800766c <_printf_float+0x100>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e7b9      	b.n	800766a <_printf_float+0xfe>
 80076f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076fa:	d118      	bne.n	800772e <_printf_float+0x1c2>
 80076fc:	2900      	cmp	r1, #0
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	dd0b      	ble.n	800771a <_printf_float+0x1ae>
 8007702:	6121      	str	r1, [r4, #16]
 8007704:	b913      	cbnz	r3, 800770c <_printf_float+0x1a0>
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	07d0      	lsls	r0, r2, #31
 800770a:	d502      	bpl.n	8007712 <_printf_float+0x1a6>
 800770c:	3301      	adds	r3, #1
 800770e:	440b      	add	r3, r1
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	65a1      	str	r1, [r4, #88]	; 0x58
 8007714:	f04f 0900 	mov.w	r9, #0
 8007718:	e7de      	b.n	80076d8 <_printf_float+0x16c>
 800771a:	b913      	cbnz	r3, 8007722 <_printf_float+0x1b6>
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	07d2      	lsls	r2, r2, #31
 8007720:	d501      	bpl.n	8007726 <_printf_float+0x1ba>
 8007722:	3302      	adds	r3, #2
 8007724:	e7f4      	b.n	8007710 <_printf_float+0x1a4>
 8007726:	2301      	movs	r3, #1
 8007728:	e7f2      	b.n	8007710 <_printf_float+0x1a4>
 800772a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	4299      	cmp	r1, r3
 8007732:	db05      	blt.n	8007740 <_printf_float+0x1d4>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	6121      	str	r1, [r4, #16]
 8007738:	07d8      	lsls	r0, r3, #31
 800773a:	d5ea      	bpl.n	8007712 <_printf_float+0x1a6>
 800773c:	1c4b      	adds	r3, r1, #1
 800773e:	e7e7      	b.n	8007710 <_printf_float+0x1a4>
 8007740:	2900      	cmp	r1, #0
 8007742:	bfd4      	ite	le
 8007744:	f1c1 0202 	rsble	r2, r1, #2
 8007748:	2201      	movgt	r2, #1
 800774a:	4413      	add	r3, r2
 800774c:	e7e0      	b.n	8007710 <_printf_float+0x1a4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	055a      	lsls	r2, r3, #21
 8007752:	d407      	bmi.n	8007764 <_printf_float+0x1f8>
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	4642      	mov	r2, r8
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	d12c      	bne.n	80077bc <_printf_float+0x250>
 8007762:	e764      	b.n	800762e <_printf_float+0xc2>
 8007764:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007768:	f240 80e0 	bls.w	800792c <_printf_float+0x3c0>
 800776c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	f7f9 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007778:	2800      	cmp	r0, #0
 800777a:	d034      	beq.n	80077e6 <_printf_float+0x27a>
 800777c:	4a37      	ldr	r2, [pc, #220]	; (800785c <_printf_float+0x2f0>)
 800777e:	2301      	movs	r3, #1
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af51 	beq.w	800762e <_printf_float+0xc2>
 800778c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007790:	429a      	cmp	r2, r3
 8007792:	db02      	blt.n	800779a <_printf_float+0x22e>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	07d8      	lsls	r0, r3, #31
 8007798:	d510      	bpl.n	80077bc <_printf_float+0x250>
 800779a:	ee18 3a10 	vmov	r3, s16
 800779e:	4652      	mov	r2, sl
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f af41 	beq.w	800762e <_printf_float+0xc2>
 80077ac:	f04f 0800 	mov.w	r8, #0
 80077b0:	f104 091a 	add.w	r9, r4, #26
 80077b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4543      	cmp	r3, r8
 80077ba:	dc09      	bgt.n	80077d0 <_printf_float+0x264>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	079b      	lsls	r3, r3, #30
 80077c0:	f100 8105 	bmi.w	80079ce <_printf_float+0x462>
 80077c4:	68e0      	ldr	r0, [r4, #12]
 80077c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c8:	4298      	cmp	r0, r3
 80077ca:	bfb8      	it	lt
 80077cc:	4618      	movlt	r0, r3
 80077ce:	e730      	b.n	8007632 <_printf_float+0xc6>
 80077d0:	2301      	movs	r3, #1
 80077d2:	464a      	mov	r2, r9
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af27 	beq.w	800762e <_printf_float+0xc2>
 80077e0:	f108 0801 	add.w	r8, r8, #1
 80077e4:	e7e6      	b.n	80077b4 <_printf_float+0x248>
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dc39      	bgt.n	8007860 <_printf_float+0x2f4>
 80077ec:	4a1b      	ldr	r2, [pc, #108]	; (800785c <_printf_float+0x2f0>)
 80077ee:	2301      	movs	r3, #1
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af19 	beq.w	800762e <_printf_float+0xc2>
 80077fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007800:	4313      	orrs	r3, r2
 8007802:	d102      	bne.n	800780a <_printf_float+0x29e>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07d9      	lsls	r1, r3, #31
 8007808:	d5d8      	bpl.n	80077bc <_printf_float+0x250>
 800780a:	ee18 3a10 	vmov	r3, s16
 800780e:	4652      	mov	r2, sl
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af09 	beq.w	800762e <_printf_float+0xc2>
 800781c:	f04f 0900 	mov.w	r9, #0
 8007820:	f104 0a1a 	add.w	sl, r4, #26
 8007824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007826:	425b      	negs	r3, r3
 8007828:	454b      	cmp	r3, r9
 800782a:	dc01      	bgt.n	8007830 <_printf_float+0x2c4>
 800782c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782e:	e792      	b.n	8007756 <_printf_float+0x1ea>
 8007830:	2301      	movs	r3, #1
 8007832:	4652      	mov	r2, sl
 8007834:	4631      	mov	r1, r6
 8007836:	4628      	mov	r0, r5
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f aef7 	beq.w	800762e <_printf_float+0xc2>
 8007840:	f109 0901 	add.w	r9, r9, #1
 8007844:	e7ee      	b.n	8007824 <_printf_float+0x2b8>
 8007846:	bf00      	nop
 8007848:	7fefffff 	.word	0x7fefffff
 800784c:	0800a534 	.word	0x0800a534
 8007850:	0800a538 	.word	0x0800a538
 8007854:	0800a540 	.word	0x0800a540
 8007858:	0800a53c 	.word	0x0800a53c
 800785c:	0800a544 	.word	0x0800a544
 8007860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007864:	429a      	cmp	r2, r3
 8007866:	bfa8      	it	ge
 8007868:	461a      	movge	r2, r3
 800786a:	2a00      	cmp	r2, #0
 800786c:	4691      	mov	r9, r2
 800786e:	dc37      	bgt.n	80078e0 <_printf_float+0x374>
 8007870:	f04f 0b00 	mov.w	fp, #0
 8007874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007878:	f104 021a 	add.w	r2, r4, #26
 800787c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	eba3 0309 	sub.w	r3, r3, r9
 8007884:	455b      	cmp	r3, fp
 8007886:	dc33      	bgt.n	80078f0 <_printf_float+0x384>
 8007888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800788c:	429a      	cmp	r2, r3
 800788e:	db3b      	blt.n	8007908 <_printf_float+0x39c>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	07da      	lsls	r2, r3, #31
 8007894:	d438      	bmi.n	8007908 <_printf_float+0x39c>
 8007896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	eba2 0901 	sub.w	r9, r2, r1
 80078a2:	4599      	cmp	r9, r3
 80078a4:	bfa8      	it	ge
 80078a6:	4699      	movge	r9, r3
 80078a8:	f1b9 0f00 	cmp.w	r9, #0
 80078ac:	dc35      	bgt.n	800791a <_printf_float+0x3ae>
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078b6:	f104 0a1a 	add.w	sl, r4, #26
 80078ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	eba3 0309 	sub.w	r3, r3, r9
 80078c4:	4543      	cmp	r3, r8
 80078c6:	f77f af79 	ble.w	80077bc <_printf_float+0x250>
 80078ca:	2301      	movs	r3, #1
 80078cc:	4652      	mov	r2, sl
 80078ce:	4631      	mov	r1, r6
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b8      	blx	r7
 80078d4:	3001      	adds	r0, #1
 80078d6:	f43f aeaa 	beq.w	800762e <_printf_float+0xc2>
 80078da:	f108 0801 	add.w	r8, r8, #1
 80078de:	e7ec      	b.n	80078ba <_printf_float+0x34e>
 80078e0:	4613      	mov	r3, r2
 80078e2:	4631      	mov	r1, r6
 80078e4:	4642      	mov	r2, r8
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	d1c0      	bne.n	8007870 <_printf_float+0x304>
 80078ee:	e69e      	b.n	800762e <_printf_float+0xc2>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	9205      	str	r2, [sp, #20]
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f ae97 	beq.w	800762e <_printf_float+0xc2>
 8007900:	9a05      	ldr	r2, [sp, #20]
 8007902:	f10b 0b01 	add.w	fp, fp, #1
 8007906:	e7b9      	b.n	800787c <_printf_float+0x310>
 8007908:	ee18 3a10 	vmov	r3, s16
 800790c:	4652      	mov	r2, sl
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	d1be      	bne.n	8007896 <_printf_float+0x32a>
 8007918:	e689      	b.n	800762e <_printf_float+0xc2>
 800791a:	9a05      	ldr	r2, [sp, #20]
 800791c:	464b      	mov	r3, r9
 800791e:	4442      	add	r2, r8
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	d1c1      	bne.n	80078ae <_printf_float+0x342>
 800792a:	e680      	b.n	800762e <_printf_float+0xc2>
 800792c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792e:	2a01      	cmp	r2, #1
 8007930:	dc01      	bgt.n	8007936 <_printf_float+0x3ca>
 8007932:	07db      	lsls	r3, r3, #31
 8007934:	d538      	bpl.n	80079a8 <_printf_float+0x43c>
 8007936:	2301      	movs	r3, #1
 8007938:	4642      	mov	r2, r8
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f ae74 	beq.w	800762e <_printf_float+0xc2>
 8007946:	ee18 3a10 	vmov	r3, s16
 800794a:	4652      	mov	r2, sl
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f ae6b 	beq.w	800762e <_printf_float+0xc2>
 8007958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800795c:	2200      	movs	r2, #0
 800795e:	2300      	movs	r3, #0
 8007960:	f7f9 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007964:	b9d8      	cbnz	r0, 800799e <_printf_float+0x432>
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	f108 0201 	add.w	r2, r8, #1
 800796c:	3b01      	subs	r3, #1
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	d10e      	bne.n	8007996 <_printf_float+0x42a>
 8007978:	e659      	b.n	800762e <_printf_float+0xc2>
 800797a:	2301      	movs	r3, #1
 800797c:	4652      	mov	r2, sl
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	f43f ae52 	beq.w	800762e <_printf_float+0xc2>
 800798a:	f108 0801 	add.w	r8, r8, #1
 800798e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007990:	3b01      	subs	r3, #1
 8007992:	4543      	cmp	r3, r8
 8007994:	dcf1      	bgt.n	800797a <_printf_float+0x40e>
 8007996:	464b      	mov	r3, r9
 8007998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800799c:	e6dc      	b.n	8007758 <_printf_float+0x1ec>
 800799e:	f04f 0800 	mov.w	r8, #0
 80079a2:	f104 0a1a 	add.w	sl, r4, #26
 80079a6:	e7f2      	b.n	800798e <_printf_float+0x422>
 80079a8:	2301      	movs	r3, #1
 80079aa:	4642      	mov	r2, r8
 80079ac:	e7df      	b.n	800796e <_printf_float+0x402>
 80079ae:	2301      	movs	r3, #1
 80079b0:	464a      	mov	r2, r9
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	f43f ae38 	beq.w	800762e <_printf_float+0xc2>
 80079be:	f108 0801 	add.w	r8, r8, #1
 80079c2:	68e3      	ldr	r3, [r4, #12]
 80079c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079c6:	1a5b      	subs	r3, r3, r1
 80079c8:	4543      	cmp	r3, r8
 80079ca:	dcf0      	bgt.n	80079ae <_printf_float+0x442>
 80079cc:	e6fa      	b.n	80077c4 <_printf_float+0x258>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	f104 0919 	add.w	r9, r4, #25
 80079d6:	e7f4      	b.n	80079c2 <_printf_float+0x456>

080079d8 <_printf_common>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	4616      	mov	r6, r2
 80079de:	4699      	mov	r9, r3
 80079e0:	688a      	ldr	r2, [r1, #8]
 80079e2:	690b      	ldr	r3, [r1, #16]
 80079e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e8:	4293      	cmp	r3, r2
 80079ea:	bfb8      	it	lt
 80079ec:	4613      	movlt	r3, r2
 80079ee:	6033      	str	r3, [r6, #0]
 80079f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079f4:	4607      	mov	r7, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b10a      	cbz	r2, 80079fe <_printf_common+0x26>
 80079fa:	3301      	adds	r3, #1
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	0699      	lsls	r1, r3, #26
 8007a02:	bf42      	ittt	mi
 8007a04:	6833      	ldrmi	r3, [r6, #0]
 8007a06:	3302      	addmi	r3, #2
 8007a08:	6033      	strmi	r3, [r6, #0]
 8007a0a:	6825      	ldr	r5, [r4, #0]
 8007a0c:	f015 0506 	ands.w	r5, r5, #6
 8007a10:	d106      	bne.n	8007a20 <_printf_common+0x48>
 8007a12:	f104 0a19 	add.w	sl, r4, #25
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	6832      	ldr	r2, [r6, #0]
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc26      	bgt.n	8007a6e <_printf_common+0x96>
 8007a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a24:	1e13      	subs	r3, r2, #0
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	bf18      	it	ne
 8007a2a:	2301      	movne	r3, #1
 8007a2c:	0692      	lsls	r2, r2, #26
 8007a2e:	d42b      	bmi.n	8007a88 <_printf_common+0xb0>
 8007a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d01e      	beq.n	8007a7c <_printf_common+0xa4>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	68e5      	ldr	r5, [r4, #12]
 8007a42:	6832      	ldr	r2, [r6, #0]
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	bf08      	it	eq
 8007a4c:	1aad      	subeq	r5, r5, r2
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	bf0c      	ite	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	2500      	movne	r5, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	bfc4      	itt	gt
 8007a5e:	1a9b      	subgt	r3, r3, r2
 8007a60:	18ed      	addgt	r5, r5, r3
 8007a62:	2600      	movs	r6, #0
 8007a64:	341a      	adds	r4, #26
 8007a66:	42b5      	cmp	r5, r6
 8007a68:	d11a      	bne.n	8007aa0 <_printf_common+0xc8>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e008      	b.n	8007a80 <_printf_common+0xa8>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4652      	mov	r2, sl
 8007a72:	4649      	mov	r1, r9
 8007a74:	4638      	mov	r0, r7
 8007a76:	47c0      	blx	r8
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d103      	bne.n	8007a84 <_printf_common+0xac>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7c6      	b.n	8007a16 <_printf_common+0x3e>
 8007a88:	18e1      	adds	r1, r4, r3
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	2030      	movs	r0, #48	; 0x30
 8007a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a92:	4422      	add	r2, r4
 8007a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	e7c7      	b.n	8007a30 <_printf_common+0x58>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c0      	blx	r8
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d0e6      	beq.n	8007a7c <_printf_common+0xa4>
 8007aae:	3601      	adds	r6, #1
 8007ab0:	e7d9      	b.n	8007a66 <_printf_common+0x8e>
	...

08007ab4 <_printf_i>:
 8007ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	4691      	mov	r9, r2
 8007abc:	7e27      	ldrb	r7, [r4, #24]
 8007abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ac0:	2f78      	cmp	r7, #120	; 0x78
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	469a      	mov	sl, r3
 8007ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aca:	d807      	bhi.n	8007adc <_printf_i+0x28>
 8007acc:	2f62      	cmp	r7, #98	; 0x62
 8007ace:	d80a      	bhi.n	8007ae6 <_printf_i+0x32>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	f000 80d8 	beq.w	8007c86 <_printf_i+0x1d2>
 8007ad6:	2f58      	cmp	r7, #88	; 0x58
 8007ad8:	f000 80a3 	beq.w	8007c22 <_printf_i+0x16e>
 8007adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ae4:	e03a      	b.n	8007b5c <_printf_i+0xa8>
 8007ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aea:	2b15      	cmp	r3, #21
 8007aec:	d8f6      	bhi.n	8007adc <_printf_i+0x28>
 8007aee:	a001      	add	r0, pc, #4	; (adr r0, 8007af4 <_printf_i+0x40>)
 8007af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007af4:	08007b4d 	.word	0x08007b4d
 8007af8:	08007b61 	.word	0x08007b61
 8007afc:	08007add 	.word	0x08007add
 8007b00:	08007add 	.word	0x08007add
 8007b04:	08007add 	.word	0x08007add
 8007b08:	08007add 	.word	0x08007add
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007add 	.word	0x08007add
 8007b14:	08007add 	.word	0x08007add
 8007b18:	08007add 	.word	0x08007add
 8007b1c:	08007add 	.word	0x08007add
 8007b20:	08007c6d 	.word	0x08007c6d
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007c4f 	.word	0x08007c4f
 8007b2c:	08007add 	.word	0x08007add
 8007b30:	08007add 	.word	0x08007add
 8007b34:	08007c8f 	.word	0x08007c8f
 8007b38:	08007add 	.word	0x08007add
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007add 	.word	0x08007add
 8007b44:	08007add 	.word	0x08007add
 8007b48:	08007c57 	.word	0x08007c57
 8007b4c:	680b      	ldr	r3, [r1, #0]
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	600a      	str	r2, [r1, #0]
 8007b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e0a3      	b.n	8007ca8 <_printf_i+0x1f4>
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	6808      	ldr	r0, [r1, #0]
 8007b64:	062e      	lsls	r6, r5, #24
 8007b66:	f100 0304 	add.w	r3, r0, #4
 8007b6a:	d50a      	bpl.n	8007b82 <_printf_i+0xce>
 8007b6c:	6805      	ldr	r5, [r0, #0]
 8007b6e:	600b      	str	r3, [r1, #0]
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	da03      	bge.n	8007b7c <_printf_i+0xc8>
 8007b74:	232d      	movs	r3, #45	; 0x2d
 8007b76:	426d      	negs	r5, r5
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7c:	485e      	ldr	r0, [pc, #376]	; (8007cf8 <_printf_i+0x244>)
 8007b7e:	230a      	movs	r3, #10
 8007b80:	e019      	b.n	8007bb6 <_printf_i+0x102>
 8007b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b86:	6805      	ldr	r5, [r0, #0]
 8007b88:	600b      	str	r3, [r1, #0]
 8007b8a:	bf18      	it	ne
 8007b8c:	b22d      	sxthne	r5, r5
 8007b8e:	e7ef      	b.n	8007b70 <_printf_i+0xbc>
 8007b90:	680b      	ldr	r3, [r1, #0]
 8007b92:	6825      	ldr	r5, [r4, #0]
 8007b94:	1d18      	adds	r0, r3, #4
 8007b96:	6008      	str	r0, [r1, #0]
 8007b98:	0628      	lsls	r0, r5, #24
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0xec>
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0xf2>
 8007ba0:	0669      	lsls	r1, r5, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0xe8>
 8007ba4:	881d      	ldrh	r5, [r3, #0]
 8007ba6:	4854      	ldr	r0, [pc, #336]	; (8007cf8 <_printf_i+0x244>)
 8007ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8007baa:	bf0c      	ite	eq
 8007bac:	2308      	moveq	r3, #8
 8007bae:	230a      	movne	r3, #10
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bb6:	6866      	ldr	r6, [r4, #4]
 8007bb8:	60a6      	str	r6, [r4, #8]
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	bfa2      	ittt	ge
 8007bbe:	6821      	ldrge	r1, [r4, #0]
 8007bc0:	f021 0104 	bicge.w	r1, r1, #4
 8007bc4:	6021      	strge	r1, [r4, #0]
 8007bc6:	b90d      	cbnz	r5, 8007bcc <_printf_i+0x118>
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	d04d      	beq.n	8007c68 <_printf_i+0x1b4>
 8007bcc:	4616      	mov	r6, r2
 8007bce:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bd2:	fb03 5711 	mls	r7, r3, r1, r5
 8007bd6:	5dc7      	ldrb	r7, [r0, r7]
 8007bd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bdc:	462f      	mov	r7, r5
 8007bde:	42bb      	cmp	r3, r7
 8007be0:	460d      	mov	r5, r1
 8007be2:	d9f4      	bls.n	8007bce <_printf_i+0x11a>
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d10b      	bne.n	8007c00 <_printf_i+0x14c>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	07df      	lsls	r7, r3, #31
 8007bec:	d508      	bpl.n	8007c00 <_printf_i+0x14c>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	6861      	ldr	r1, [r4, #4]
 8007bf2:	4299      	cmp	r1, r3
 8007bf4:	bfde      	ittt	le
 8007bf6:	2330      	movle	r3, #48	; 0x30
 8007bf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c00:	1b92      	subs	r2, r2, r6
 8007c02:	6122      	str	r2, [r4, #16]
 8007c04:	f8cd a000 	str.w	sl, [sp]
 8007c08:	464b      	mov	r3, r9
 8007c0a:	aa03      	add	r2, sp, #12
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4640      	mov	r0, r8
 8007c10:	f7ff fee2 	bl	80079d8 <_printf_common>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d14c      	bne.n	8007cb2 <_printf_i+0x1fe>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	b004      	add	sp, #16
 8007c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c22:	4835      	ldr	r0, [pc, #212]	; (8007cf8 <_printf_i+0x244>)
 8007c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	680e      	ldr	r6, [r1, #0]
 8007c2c:	061f      	lsls	r7, r3, #24
 8007c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c32:	600e      	str	r6, [r1, #0]
 8007c34:	d514      	bpl.n	8007c60 <_printf_i+0x1ac>
 8007c36:	07d9      	lsls	r1, r3, #31
 8007c38:	bf44      	itt	mi
 8007c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c3e:	6023      	strmi	r3, [r4, #0]
 8007c40:	b91d      	cbnz	r5, 8007c4a <_printf_i+0x196>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	f023 0320 	bic.w	r3, r3, #32
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	2310      	movs	r3, #16
 8007c4c:	e7b0      	b.n	8007bb0 <_printf_i+0xfc>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f043 0320 	orr.w	r3, r3, #32
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	2378      	movs	r3, #120	; 0x78
 8007c58:	4828      	ldr	r0, [pc, #160]	; (8007cfc <_printf_i+0x248>)
 8007c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c5e:	e7e3      	b.n	8007c28 <_printf_i+0x174>
 8007c60:	065e      	lsls	r6, r3, #25
 8007c62:	bf48      	it	mi
 8007c64:	b2ad      	uxthmi	r5, r5
 8007c66:	e7e6      	b.n	8007c36 <_printf_i+0x182>
 8007c68:	4616      	mov	r6, r2
 8007c6a:	e7bb      	b.n	8007be4 <_printf_i+0x130>
 8007c6c:	680b      	ldr	r3, [r1, #0]
 8007c6e:	6826      	ldr	r6, [r4, #0]
 8007c70:	6960      	ldr	r0, [r4, #20]
 8007c72:	1d1d      	adds	r5, r3, #4
 8007c74:	600d      	str	r5, [r1, #0]
 8007c76:	0635      	lsls	r5, r6, #24
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	d501      	bpl.n	8007c80 <_printf_i+0x1cc>
 8007c7c:	6018      	str	r0, [r3, #0]
 8007c7e:	e002      	b.n	8007c86 <_printf_i+0x1d2>
 8007c80:	0671      	lsls	r1, r6, #25
 8007c82:	d5fb      	bpl.n	8007c7c <_printf_i+0x1c8>
 8007c84:	8018      	strh	r0, [r3, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	4616      	mov	r6, r2
 8007c8c:	e7ba      	b.n	8007c04 <_printf_i+0x150>
 8007c8e:	680b      	ldr	r3, [r1, #0]
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	600a      	str	r2, [r1, #0]
 8007c94:	681e      	ldr	r6, [r3, #0]
 8007c96:	6862      	ldr	r2, [r4, #4]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7f8 faa0 	bl	80001e0 <memchr>
 8007ca0:	b108      	cbz	r0, 8007ca6 <_printf_i+0x1f2>
 8007ca2:	1b80      	subs	r0, r0, r6
 8007ca4:	6060      	str	r0, [r4, #4]
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	2300      	movs	r3, #0
 8007cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb0:	e7a8      	b.n	8007c04 <_printf_i+0x150>
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	47d0      	blx	sl
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d0ab      	beq.n	8007c18 <_printf_i+0x164>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	079b      	lsls	r3, r3, #30
 8007cc4:	d413      	bmi.n	8007cee <_printf_i+0x23a>
 8007cc6:	68e0      	ldr	r0, [r4, #12]
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	4298      	cmp	r0, r3
 8007ccc:	bfb8      	it	lt
 8007cce:	4618      	movlt	r0, r3
 8007cd0:	e7a4      	b.n	8007c1c <_printf_i+0x168>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	4640      	mov	r0, r8
 8007cda:	47d0      	blx	sl
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d09b      	beq.n	8007c18 <_printf_i+0x164>
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	9903      	ldr	r1, [sp, #12]
 8007ce6:	1a5b      	subs	r3, r3, r1
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dcf2      	bgt.n	8007cd2 <_printf_i+0x21e>
 8007cec:	e7eb      	b.n	8007cc6 <_printf_i+0x212>
 8007cee:	2500      	movs	r5, #0
 8007cf0:	f104 0619 	add.w	r6, r4, #25
 8007cf4:	e7f5      	b.n	8007ce2 <_printf_i+0x22e>
 8007cf6:	bf00      	nop
 8007cf8:	0800a546 	.word	0x0800a546
 8007cfc:	0800a557 	.word	0x0800a557

08007d00 <_vsniprintf_r>:
 8007d00:	b530      	push	{r4, r5, lr}
 8007d02:	1e14      	subs	r4, r2, #0
 8007d04:	4605      	mov	r5, r0
 8007d06:	b09b      	sub	sp, #108	; 0x6c
 8007d08:	4618      	mov	r0, r3
 8007d0a:	da05      	bge.n	8007d18 <_vsniprintf_r+0x18>
 8007d0c:	238b      	movs	r3, #139	; 0x8b
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	b01b      	add	sp, #108	; 0x6c
 8007d16:	bd30      	pop	{r4, r5, pc}
 8007d18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007d20:	bf14      	ite	ne
 8007d22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d26:	4623      	moveq	r3, r4
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d30:	9100      	str	r1, [sp, #0]
 8007d32:	9104      	str	r1, [sp, #16]
 8007d34:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007d38:	4602      	mov	r2, r0
 8007d3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d3c:	4669      	mov	r1, sp
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f001 fb40 	bl	80093c4 <_svfiprintf_r>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	bfbc      	itt	lt
 8007d48:	238b      	movlt	r3, #139	; 0x8b
 8007d4a:	602b      	strlt	r3, [r5, #0]
 8007d4c:	2c00      	cmp	r4, #0
 8007d4e:	d0e1      	beq.n	8007d14 <_vsniprintf_r+0x14>
 8007d50:	9b00      	ldr	r3, [sp, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e7dd      	b.n	8007d14 <_vsniprintf_r+0x14>

08007d58 <vsniprintf>:
 8007d58:	b507      	push	{r0, r1, r2, lr}
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	460a      	mov	r2, r1
 8007d60:	4601      	mov	r1, r0
 8007d62:	4803      	ldr	r0, [pc, #12]	; (8007d70 <vsniprintf+0x18>)
 8007d64:	6800      	ldr	r0, [r0, #0]
 8007d66:	f7ff ffcb 	bl	8007d00 <_vsniprintf_r>
 8007d6a:	b003      	add	sp, #12
 8007d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d70:	20000024 	.word	0x20000024

08007d74 <quorem>:
 8007d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	6903      	ldr	r3, [r0, #16]
 8007d7a:	690c      	ldr	r4, [r1, #16]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	4607      	mov	r7, r0
 8007d80:	f2c0 8081 	blt.w	8007e86 <quorem+0x112>
 8007d84:	3c01      	subs	r4, #1
 8007d86:	f101 0814 	add.w	r8, r1, #20
 8007d8a:	f100 0514 	add.w	r5, r0, #20
 8007d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007da8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dac:	d331      	bcc.n	8007e12 <quorem+0x9e>
 8007dae:	f04f 0e00 	mov.w	lr, #0
 8007db2:	4640      	mov	r0, r8
 8007db4:	46ac      	mov	ip, r5
 8007db6:	46f2      	mov	sl, lr
 8007db8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dbc:	b293      	uxth	r3, r2
 8007dbe:	fb06 e303 	mla	r3, r6, r3, lr
 8007dc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007dcc:	0c12      	lsrs	r2, r2, #16
 8007dce:	f8dc a000 	ldr.w	sl, [ip]
 8007dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8007dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8007dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dde:	fa1f fa82 	uxth.w	sl, r2
 8007de2:	f8dc 2000 	ldr.w	r2, [ip]
 8007de6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007dea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007df4:	4581      	cmp	r9, r0
 8007df6:	f84c 3b04 	str.w	r3, [ip], #4
 8007dfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dfe:	d2db      	bcs.n	8007db8 <quorem+0x44>
 8007e00:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e04:	b92b      	cbnz	r3, 8007e12 <quorem+0x9e>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	d32e      	bcc.n	8007e6e <quorem+0xfa>
 8007e10:	613c      	str	r4, [r7, #16]
 8007e12:	4638      	mov	r0, r7
 8007e14:	f001 f8c0 	bl	8008f98 <__mcmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	db24      	blt.n	8007e66 <quorem+0xf2>
 8007e1c:	3601      	adds	r6, #1
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f04f 0c00 	mov.w	ip, #0
 8007e24:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e28:	f8d0 e000 	ldr.w	lr, [r0]
 8007e2c:	b293      	uxth	r3, r2
 8007e2e:	ebac 0303 	sub.w	r3, ip, r3
 8007e32:	0c12      	lsrs	r2, r2, #16
 8007e34:	fa13 f38e 	uxtah	r3, r3, lr
 8007e38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e46:	45c1      	cmp	r9, r8
 8007e48:	f840 3b04 	str.w	r3, [r0], #4
 8007e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e50:	d2e8      	bcs.n	8007e24 <quorem+0xb0>
 8007e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5a:	b922      	cbnz	r2, 8007e66 <quorem+0xf2>
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	d30a      	bcc.n	8007e7a <quorem+0x106>
 8007e64:	613c      	str	r4, [r7, #16]
 8007e66:	4630      	mov	r0, r6
 8007e68:	b003      	add	sp, #12
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	3b04      	subs	r3, #4
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	d1cc      	bne.n	8007e10 <quorem+0x9c>
 8007e76:	3c01      	subs	r4, #1
 8007e78:	e7c7      	b.n	8007e0a <quorem+0x96>
 8007e7a:	6812      	ldr	r2, [r2, #0]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d1f0      	bne.n	8007e64 <quorem+0xf0>
 8007e82:	3c01      	subs	r4, #1
 8007e84:	e7eb      	b.n	8007e5e <quorem+0xea>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e7ee      	b.n	8007e68 <quorem+0xf4>
 8007e8a:	0000      	movs	r0, r0
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <_dtoa_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	ed2d 8b02 	vpush	{d8}
 8007e98:	ec57 6b10 	vmov	r6, r7, d0
 8007e9c:	b095      	sub	sp, #84	; 0x54
 8007e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ea4:	9105      	str	r1, [sp, #20]
 8007ea6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007eaa:	4604      	mov	r4, r0
 8007eac:	9209      	str	r2, [sp, #36]	; 0x24
 8007eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb0:	b975      	cbnz	r5, 8007ed0 <_dtoa_r+0x40>
 8007eb2:	2010      	movs	r0, #16
 8007eb4:	f000 fddc 	bl	8008a70 <malloc>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6260      	str	r0, [r4, #36]	; 0x24
 8007ebc:	b920      	cbnz	r0, 8007ec8 <_dtoa_r+0x38>
 8007ebe:	4bb2      	ldr	r3, [pc, #712]	; (8008188 <_dtoa_r+0x2f8>)
 8007ec0:	21ea      	movs	r1, #234	; 0xea
 8007ec2:	48b2      	ldr	r0, [pc, #712]	; (800818c <_dtoa_r+0x2fc>)
 8007ec4:	f001 fb8e 	bl	80095e4 <__assert_func>
 8007ec8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ecc:	6005      	str	r5, [r0, #0]
 8007ece:	60c5      	str	r5, [r0, #12]
 8007ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	b151      	cbz	r1, 8007eec <_dtoa_r+0x5c>
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	604a      	str	r2, [r1, #4]
 8007eda:	2301      	movs	r3, #1
 8007edc:	4093      	lsls	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fe1b 	bl	8008b1c <_Bfree>
 8007ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	1e3b      	subs	r3, r7, #0
 8007eee:	bfb9      	ittee	lt
 8007ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ef4:	9303      	strlt	r3, [sp, #12]
 8007ef6:	2300      	movge	r3, #0
 8007ef8:	f8c8 3000 	strge.w	r3, [r8]
 8007efc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007f00:	4ba3      	ldr	r3, [pc, #652]	; (8008190 <_dtoa_r+0x300>)
 8007f02:	bfbc      	itt	lt
 8007f04:	2201      	movlt	r2, #1
 8007f06:	f8c8 2000 	strlt.w	r2, [r8]
 8007f0a:	ea33 0309 	bics.w	r3, r3, r9
 8007f0e:	d11b      	bne.n	8007f48 <_dtoa_r+0xb8>
 8007f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f12:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f1c:	4333      	orrs	r3, r6
 8007f1e:	f000 857a 	beq.w	8008a16 <_dtoa_r+0xb86>
 8007f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f24:	b963      	cbnz	r3, 8007f40 <_dtoa_r+0xb0>
 8007f26:	4b9b      	ldr	r3, [pc, #620]	; (8008194 <_dtoa_r+0x304>)
 8007f28:	e024      	b.n	8007f74 <_dtoa_r+0xe4>
 8007f2a:	4b9b      	ldr	r3, [pc, #620]	; (8008198 <_dtoa_r+0x308>)
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	9800      	ldr	r0, [sp, #0]
 8007f36:	b015      	add	sp, #84	; 0x54
 8007f38:	ecbd 8b02 	vpop	{d8}
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	4b94      	ldr	r3, [pc, #592]	; (8008194 <_dtoa_r+0x304>)
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	3303      	adds	r3, #3
 8007f46:	e7f3      	b.n	8007f30 <_dtoa_r+0xa0>
 8007f48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	ec51 0b17 	vmov	r0, r1, d7
 8007f52:	2300      	movs	r3, #0
 8007f54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f58:	f7f8 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	b158      	cbz	r0, 8007f78 <_dtoa_r+0xe8>
 8007f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f62:	2301      	movs	r3, #1
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 8551 	beq.w	8008a10 <_dtoa_r+0xb80>
 8007f6e:	488b      	ldr	r0, [pc, #556]	; (800819c <_dtoa_r+0x30c>)
 8007f70:	6018      	str	r0, [r3, #0]
 8007f72:	1e43      	subs	r3, r0, #1
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	e7dd      	b.n	8007f34 <_dtoa_r+0xa4>
 8007f78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f7c:	aa12      	add	r2, sp, #72	; 0x48
 8007f7e:	a913      	add	r1, sp, #76	; 0x4c
 8007f80:	4620      	mov	r0, r4
 8007f82:	f001 f8ad 	bl	80090e0 <__d2b>
 8007f86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f8a:	4683      	mov	fp, r0
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	d07c      	beq.n	800808a <_dtoa_r+0x1fa>
 8007f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007f9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007faa:	4b7d      	ldr	r3, [pc, #500]	; (80081a0 <_dtoa_r+0x310>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	4630      	mov	r0, r6
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	f7f8 f969 	bl	8000288 <__aeabi_dsub>
 8007fb6:	a36e      	add	r3, pc, #440	; (adr r3, 8008170 <_dtoa_r+0x2e0>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 fb1c 	bl	80005f8 <__aeabi_dmul>
 8007fc0:	a36d      	add	r3, pc, #436	; (adr r3, 8008178 <_dtoa_r+0x2e8>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 f961 	bl	800028c <__adddf3>
 8007fca:	4606      	mov	r6, r0
 8007fcc:	4628      	mov	r0, r5
 8007fce:	460f      	mov	r7, r1
 8007fd0:	f7f8 faa8 	bl	8000524 <__aeabi_i2d>
 8007fd4:	a36a      	add	r3, pc, #424	; (adr r3, 8008180 <_dtoa_r+0x2f0>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f7f8 fb0d 	bl	80005f8 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 f951 	bl	800028c <__adddf3>
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	f7f8 fdb3 	bl	8000b58 <__aeabi_d2iz>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 fd6e 	bl	8000adc <__aeabi_dcmplt>
 8008000:	b148      	cbz	r0, 8008016 <_dtoa_r+0x186>
 8008002:	4650      	mov	r0, sl
 8008004:	f7f8 fa8e 	bl	8000524 <__aeabi_i2d>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	f7f8 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008010:	b908      	cbnz	r0, 8008016 <_dtoa_r+0x186>
 8008012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008016:	f1ba 0f16 	cmp.w	sl, #22
 800801a:	d854      	bhi.n	80080c6 <_dtoa_r+0x236>
 800801c:	4b61      	ldr	r3, [pc, #388]	; (80081a4 <_dtoa_r+0x314>)
 800801e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800802a:	f7f8 fd57 	bl	8000adc <__aeabi_dcmplt>
 800802e:	2800      	cmp	r0, #0
 8008030:	d04b      	beq.n	80080ca <_dtoa_r+0x23a>
 8008032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008036:	2300      	movs	r3, #0
 8008038:	930e      	str	r3, [sp, #56]	; 0x38
 800803a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800803c:	1b5d      	subs	r5, r3, r5
 800803e:	1e6b      	subs	r3, r5, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	bf43      	ittte	mi
 8008044:	2300      	movmi	r3, #0
 8008046:	f1c5 0801 	rsbmi	r8, r5, #1
 800804a:	9304      	strmi	r3, [sp, #16]
 800804c:	f04f 0800 	movpl.w	r8, #0
 8008050:	f1ba 0f00 	cmp.w	sl, #0
 8008054:	db3b      	blt.n	80080ce <_dtoa_r+0x23e>
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800805c:	4453      	add	r3, sl
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	2300      	movs	r3, #0
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	9b05      	ldr	r3, [sp, #20]
 8008066:	2b09      	cmp	r3, #9
 8008068:	d869      	bhi.n	800813e <_dtoa_r+0x2ae>
 800806a:	2b05      	cmp	r3, #5
 800806c:	bfc4      	itt	gt
 800806e:	3b04      	subgt	r3, #4
 8008070:	9305      	strgt	r3, [sp, #20]
 8008072:	9b05      	ldr	r3, [sp, #20]
 8008074:	f1a3 0302 	sub.w	r3, r3, #2
 8008078:	bfcc      	ite	gt
 800807a:	2500      	movgt	r5, #0
 800807c:	2501      	movle	r5, #1
 800807e:	2b03      	cmp	r3, #3
 8008080:	d869      	bhi.n	8008156 <_dtoa_r+0x2c6>
 8008082:	e8df f003 	tbb	[pc, r3]
 8008086:	4e2c      	.short	0x4e2c
 8008088:	5a4c      	.short	0x5a4c
 800808a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800808e:	441d      	add	r5, r3
 8008090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008094:	2b20      	cmp	r3, #32
 8008096:	bfc1      	itttt	gt
 8008098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800809c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80080a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080a8:	bfda      	itte	le
 80080aa:	f1c3 0320 	rsble	r3, r3, #32
 80080ae:	fa06 f003 	lslle.w	r0, r6, r3
 80080b2:	4318      	orrgt	r0, r3
 80080b4:	f7f8 fa26 	bl	8000504 <__aeabi_ui2d>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4606      	mov	r6, r0
 80080bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080c0:	3d01      	subs	r5, #1
 80080c2:	9310      	str	r3, [sp, #64]	; 0x40
 80080c4:	e771      	b.n	8007faa <_dtoa_r+0x11a>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e7b6      	b.n	8008038 <_dtoa_r+0x1a8>
 80080ca:	900e      	str	r0, [sp, #56]	; 0x38
 80080cc:	e7b5      	b.n	800803a <_dtoa_r+0x1aa>
 80080ce:	f1ca 0300 	rsb	r3, sl, #0
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	2300      	movs	r3, #0
 80080d6:	eba8 080a 	sub.w	r8, r8, sl
 80080da:	930d      	str	r3, [sp, #52]	; 0x34
 80080dc:	e7c2      	b.n	8008064 <_dtoa_r+0x1d4>
 80080de:	2300      	movs	r3, #0
 80080e0:	9308      	str	r3, [sp, #32]
 80080e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dc39      	bgt.n	800815c <_dtoa_r+0x2cc>
 80080e8:	f04f 0901 	mov.w	r9, #1
 80080ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80080f0:	464b      	mov	r3, r9
 80080f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80080f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080f8:	2200      	movs	r2, #0
 80080fa:	6042      	str	r2, [r0, #4]
 80080fc:	2204      	movs	r2, #4
 80080fe:	f102 0614 	add.w	r6, r2, #20
 8008102:	429e      	cmp	r6, r3
 8008104:	6841      	ldr	r1, [r0, #4]
 8008106:	d92f      	bls.n	8008168 <_dtoa_r+0x2d8>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fcc7 	bl	8008a9c <_Balloc>
 800810e:	9000      	str	r0, [sp, #0]
 8008110:	2800      	cmp	r0, #0
 8008112:	d14b      	bne.n	80081ac <_dtoa_r+0x31c>
 8008114:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <_dtoa_r+0x318>)
 8008116:	4602      	mov	r2, r0
 8008118:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800811c:	e6d1      	b.n	8007ec2 <_dtoa_r+0x32>
 800811e:	2301      	movs	r3, #1
 8008120:	e7de      	b.n	80080e0 <_dtoa_r+0x250>
 8008122:	2300      	movs	r3, #0
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008128:	eb0a 0903 	add.w	r9, sl, r3
 800812c:	f109 0301 	add.w	r3, r9, #1
 8008130:	2b01      	cmp	r3, #1
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	bfb8      	it	lt
 8008136:	2301      	movlt	r3, #1
 8008138:	e7dd      	b.n	80080f6 <_dtoa_r+0x266>
 800813a:	2301      	movs	r3, #1
 800813c:	e7f2      	b.n	8008124 <_dtoa_r+0x294>
 800813e:	2501      	movs	r5, #1
 8008140:	2300      	movs	r3, #0
 8008142:	9305      	str	r3, [sp, #20]
 8008144:	9508      	str	r5, [sp, #32]
 8008146:	f04f 39ff 	mov.w	r9, #4294967295
 800814a:	2200      	movs	r2, #0
 800814c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008150:	2312      	movs	r3, #18
 8008152:	9209      	str	r2, [sp, #36]	; 0x24
 8008154:	e7cf      	b.n	80080f6 <_dtoa_r+0x266>
 8008156:	2301      	movs	r3, #1
 8008158:	9308      	str	r3, [sp, #32]
 800815a:	e7f4      	b.n	8008146 <_dtoa_r+0x2b6>
 800815c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008160:	f8cd 9004 	str.w	r9, [sp, #4]
 8008164:	464b      	mov	r3, r9
 8008166:	e7c6      	b.n	80080f6 <_dtoa_r+0x266>
 8008168:	3101      	adds	r1, #1
 800816a:	6041      	str	r1, [r0, #4]
 800816c:	0052      	lsls	r2, r2, #1
 800816e:	e7c6      	b.n	80080fe <_dtoa_r+0x26e>
 8008170:	636f4361 	.word	0x636f4361
 8008174:	3fd287a7 	.word	0x3fd287a7
 8008178:	8b60c8b3 	.word	0x8b60c8b3
 800817c:	3fc68a28 	.word	0x3fc68a28
 8008180:	509f79fb 	.word	0x509f79fb
 8008184:	3fd34413 	.word	0x3fd34413
 8008188:	0800a575 	.word	0x0800a575
 800818c:	0800a58c 	.word	0x0800a58c
 8008190:	7ff00000 	.word	0x7ff00000
 8008194:	0800a571 	.word	0x0800a571
 8008198:	0800a568 	.word	0x0800a568
 800819c:	0800a545 	.word	0x0800a545
 80081a0:	3ff80000 	.word	0x3ff80000
 80081a4:	0800a688 	.word	0x0800a688
 80081a8:	0800a5eb 	.word	0x0800a5eb
 80081ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ae:	9a00      	ldr	r2, [sp, #0]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	2b0e      	cmp	r3, #14
 80081b6:	f200 80ad 	bhi.w	8008314 <_dtoa_r+0x484>
 80081ba:	2d00      	cmp	r5, #0
 80081bc:	f000 80aa 	beq.w	8008314 <_dtoa_r+0x484>
 80081c0:	f1ba 0f00 	cmp.w	sl, #0
 80081c4:	dd36      	ble.n	8008234 <_dtoa_r+0x3a4>
 80081c6:	4ac3      	ldr	r2, [pc, #780]	; (80084d4 <_dtoa_r+0x644>)
 80081c8:	f00a 030f 	and.w	r3, sl, #15
 80081cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081d0:	ed93 7b00 	vldr	d7, [r3]
 80081d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80081d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80081dc:	eeb0 8a47 	vmov.f32	s16, s14
 80081e0:	eef0 8a67 	vmov.f32	s17, s15
 80081e4:	d016      	beq.n	8008214 <_dtoa_r+0x384>
 80081e6:	4bbc      	ldr	r3, [pc, #752]	; (80084d8 <_dtoa_r+0x648>)
 80081e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081f0:	f7f8 fb2c 	bl	800084c <__aeabi_ddiv>
 80081f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f8:	f007 070f 	and.w	r7, r7, #15
 80081fc:	2503      	movs	r5, #3
 80081fe:	4eb6      	ldr	r6, [pc, #728]	; (80084d8 <_dtoa_r+0x648>)
 8008200:	b957      	cbnz	r7, 8008218 <_dtoa_r+0x388>
 8008202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008206:	ec53 2b18 	vmov	r2, r3, d8
 800820a:	f7f8 fb1f 	bl	800084c <__aeabi_ddiv>
 800820e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008212:	e029      	b.n	8008268 <_dtoa_r+0x3d8>
 8008214:	2502      	movs	r5, #2
 8008216:	e7f2      	b.n	80081fe <_dtoa_r+0x36e>
 8008218:	07f9      	lsls	r1, r7, #31
 800821a:	d508      	bpl.n	800822e <_dtoa_r+0x39e>
 800821c:	ec51 0b18 	vmov	r0, r1, d8
 8008220:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008224:	f7f8 f9e8 	bl	80005f8 <__aeabi_dmul>
 8008228:	ec41 0b18 	vmov	d8, r0, r1
 800822c:	3501      	adds	r5, #1
 800822e:	107f      	asrs	r7, r7, #1
 8008230:	3608      	adds	r6, #8
 8008232:	e7e5      	b.n	8008200 <_dtoa_r+0x370>
 8008234:	f000 80a6 	beq.w	8008384 <_dtoa_r+0x4f4>
 8008238:	f1ca 0600 	rsb	r6, sl, #0
 800823c:	4ba5      	ldr	r3, [pc, #660]	; (80084d4 <_dtoa_r+0x644>)
 800823e:	4fa6      	ldr	r7, [pc, #664]	; (80084d8 <_dtoa_r+0x648>)
 8008240:	f006 020f 	and.w	r2, r6, #15
 8008244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008250:	f7f8 f9d2 	bl	80005f8 <__aeabi_dmul>
 8008254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008258:	1136      	asrs	r6, r6, #4
 800825a:	2300      	movs	r3, #0
 800825c:	2502      	movs	r5, #2
 800825e:	2e00      	cmp	r6, #0
 8008260:	f040 8085 	bne.w	800836e <_dtoa_r+0x4de>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1d2      	bne.n	800820e <_dtoa_r+0x37e>
 8008268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 808c 	beq.w	8008388 <_dtoa_r+0x4f8>
 8008270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008274:	4b99      	ldr	r3, [pc, #612]	; (80084dc <_dtoa_r+0x64c>)
 8008276:	2200      	movs	r2, #0
 8008278:	4630      	mov	r0, r6
 800827a:	4639      	mov	r1, r7
 800827c:	f7f8 fc2e 	bl	8000adc <__aeabi_dcmplt>
 8008280:	2800      	cmp	r0, #0
 8008282:	f000 8081 	beq.w	8008388 <_dtoa_r+0x4f8>
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d07d      	beq.n	8008388 <_dtoa_r+0x4f8>
 800828c:	f1b9 0f00 	cmp.w	r9, #0
 8008290:	dd3c      	ble.n	800830c <_dtoa_r+0x47c>
 8008292:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	2200      	movs	r2, #0
 800829a:	4b91      	ldr	r3, [pc, #580]	; (80084e0 <_dtoa_r+0x650>)
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f8 f9aa 	bl	80005f8 <__aeabi_dmul>
 80082a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082a8:	3501      	adds	r5, #1
 80082aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80082ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7f8 f936 	bl	8000524 <__aeabi_i2d>
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	4b88      	ldr	r3, [pc, #544]	; (80084e4 <_dtoa_r+0x654>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	f7f7 ffe2 	bl	800028c <__adddf3>
 80082c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80082cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d15c      	bne.n	8008392 <_dtoa_r+0x502>
 80082d8:	4b83      	ldr	r3, [pc, #524]	; (80084e8 <_dtoa_r+0x658>)
 80082da:	2200      	movs	r2, #0
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f7 ffd2 	bl	8000288 <__aeabi_dsub>
 80082e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082e8:	4606      	mov	r6, r0
 80082ea:	460f      	mov	r7, r1
 80082ec:	f7f8 fc14 	bl	8000b18 <__aeabi_dcmpgt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f040 8296 	bne.w	8008822 <_dtoa_r+0x992>
 80082f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082fa:	4630      	mov	r0, r6
 80082fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008300:	4639      	mov	r1, r7
 8008302:	f7f8 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8008306:	2800      	cmp	r0, #0
 8008308:	f040 8288 	bne.w	800881c <_dtoa_r+0x98c>
 800830c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008310:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008316:	2b00      	cmp	r3, #0
 8008318:	f2c0 8158 	blt.w	80085cc <_dtoa_r+0x73c>
 800831c:	f1ba 0f0e 	cmp.w	sl, #14
 8008320:	f300 8154 	bgt.w	80085cc <_dtoa_r+0x73c>
 8008324:	4b6b      	ldr	r3, [pc, #428]	; (80084d4 <_dtoa_r+0x644>)
 8008326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800832a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800832e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008330:	2b00      	cmp	r3, #0
 8008332:	f280 80e3 	bge.w	80084fc <_dtoa_r+0x66c>
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f300 80df 	bgt.w	80084fc <_dtoa_r+0x66c>
 800833e:	f040 826d 	bne.w	800881c <_dtoa_r+0x98c>
 8008342:	4b69      	ldr	r3, [pc, #420]	; (80084e8 <_dtoa_r+0x658>)
 8008344:	2200      	movs	r2, #0
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f8 f955 	bl	80005f8 <__aeabi_dmul>
 800834e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008352:	f7f8 fbd7 	bl	8000b04 <__aeabi_dcmpge>
 8008356:	9e01      	ldr	r6, [sp, #4]
 8008358:	4637      	mov	r7, r6
 800835a:	2800      	cmp	r0, #0
 800835c:	f040 8243 	bne.w	80087e6 <_dtoa_r+0x956>
 8008360:	9d00      	ldr	r5, [sp, #0]
 8008362:	2331      	movs	r3, #49	; 0x31
 8008364:	f805 3b01 	strb.w	r3, [r5], #1
 8008368:	f10a 0a01 	add.w	sl, sl, #1
 800836c:	e23f      	b.n	80087ee <_dtoa_r+0x95e>
 800836e:	07f2      	lsls	r2, r6, #31
 8008370:	d505      	bpl.n	800837e <_dtoa_r+0x4ee>
 8008372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008376:	f7f8 f93f 	bl	80005f8 <__aeabi_dmul>
 800837a:	3501      	adds	r5, #1
 800837c:	2301      	movs	r3, #1
 800837e:	1076      	asrs	r6, r6, #1
 8008380:	3708      	adds	r7, #8
 8008382:	e76c      	b.n	800825e <_dtoa_r+0x3ce>
 8008384:	2502      	movs	r5, #2
 8008386:	e76f      	b.n	8008268 <_dtoa_r+0x3d8>
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	f8cd a01c 	str.w	sl, [sp, #28]
 800838e:	930c      	str	r3, [sp, #48]	; 0x30
 8008390:	e78d      	b.n	80082ae <_dtoa_r+0x41e>
 8008392:	9900      	ldr	r1, [sp, #0]
 8008394:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008398:	4b4e      	ldr	r3, [pc, #312]	; (80084d4 <_dtoa_r+0x644>)
 800839a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800839e:	4401      	add	r1, r0
 80083a0:	9102      	str	r1, [sp, #8]
 80083a2:	9908      	ldr	r1, [sp, #32]
 80083a4:	eeb0 8a47 	vmov.f32	s16, s14
 80083a8:	eef0 8a67 	vmov.f32	s17, s15
 80083ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d045      	beq.n	8008444 <_dtoa_r+0x5b4>
 80083b8:	494c      	ldr	r1, [pc, #304]	; (80084ec <_dtoa_r+0x65c>)
 80083ba:	2000      	movs	r0, #0
 80083bc:	f7f8 fa46 	bl	800084c <__aeabi_ddiv>
 80083c0:	ec53 2b18 	vmov	r2, r3, d8
 80083c4:	f7f7 ff60 	bl	8000288 <__aeabi_dsub>
 80083c8:	9d00      	ldr	r5, [sp, #0]
 80083ca:	ec41 0b18 	vmov	d8, r0, r1
 80083ce:	4639      	mov	r1, r7
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7f8 fbc1 	bl	8000b58 <__aeabi_d2iz>
 80083d6:	900c      	str	r0, [sp, #48]	; 0x30
 80083d8:	f7f8 f8a4 	bl	8000524 <__aeabi_i2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f7 ff50 	bl	8000288 <__aeabi_dsub>
 80083e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ea:	3330      	adds	r3, #48	; 0x30
 80083ec:	f805 3b01 	strb.w	r3, [r5], #1
 80083f0:	ec53 2b18 	vmov	r2, r3, d8
 80083f4:	4606      	mov	r6, r0
 80083f6:	460f      	mov	r7, r1
 80083f8:	f7f8 fb70 	bl	8000adc <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d165      	bne.n	80084cc <_dtoa_r+0x63c>
 8008400:	4632      	mov	r2, r6
 8008402:	463b      	mov	r3, r7
 8008404:	4935      	ldr	r1, [pc, #212]	; (80084dc <_dtoa_r+0x64c>)
 8008406:	2000      	movs	r0, #0
 8008408:	f7f7 ff3e 	bl	8000288 <__aeabi_dsub>
 800840c:	ec53 2b18 	vmov	r2, r3, d8
 8008410:	f7f8 fb64 	bl	8000adc <__aeabi_dcmplt>
 8008414:	2800      	cmp	r0, #0
 8008416:	f040 80b9 	bne.w	800858c <_dtoa_r+0x6fc>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	429d      	cmp	r5, r3
 800841e:	f43f af75 	beq.w	800830c <_dtoa_r+0x47c>
 8008422:	4b2f      	ldr	r3, [pc, #188]	; (80084e0 <_dtoa_r+0x650>)
 8008424:	ec51 0b18 	vmov	r0, r1, d8
 8008428:	2200      	movs	r2, #0
 800842a:	f7f8 f8e5 	bl	80005f8 <__aeabi_dmul>
 800842e:	4b2c      	ldr	r3, [pc, #176]	; (80084e0 <_dtoa_r+0x650>)
 8008430:	ec41 0b18 	vmov	d8, r0, r1
 8008434:	2200      	movs	r2, #0
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 f8dd 	bl	80005f8 <__aeabi_dmul>
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	e7c4      	b.n	80083ce <_dtoa_r+0x53e>
 8008444:	ec51 0b17 	vmov	r0, r1, d7
 8008448:	f7f8 f8d6 	bl	80005f8 <__aeabi_dmul>
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	9d00      	ldr	r5, [sp, #0]
 8008450:	930c      	str	r3, [sp, #48]	; 0x30
 8008452:	ec41 0b18 	vmov	d8, r0, r1
 8008456:	4639      	mov	r1, r7
 8008458:	4630      	mov	r0, r6
 800845a:	f7f8 fb7d 	bl	8000b58 <__aeabi_d2iz>
 800845e:	9011      	str	r0, [sp, #68]	; 0x44
 8008460:	f7f8 f860 	bl	8000524 <__aeabi_i2d>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4630      	mov	r0, r6
 800846a:	4639      	mov	r1, r7
 800846c:	f7f7 ff0c 	bl	8000288 <__aeabi_dsub>
 8008470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008472:	3330      	adds	r3, #48	; 0x30
 8008474:	f805 3b01 	strb.w	r3, [r5], #1
 8008478:	9b02      	ldr	r3, [sp, #8]
 800847a:	429d      	cmp	r5, r3
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	d134      	bne.n	80084f0 <_dtoa_r+0x660>
 8008486:	4b19      	ldr	r3, [pc, #100]	; (80084ec <_dtoa_r+0x65c>)
 8008488:	ec51 0b18 	vmov	r0, r1, d8
 800848c:	f7f7 fefe 	bl	800028c <__adddf3>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4630      	mov	r0, r6
 8008496:	4639      	mov	r1, r7
 8008498:	f7f8 fb3e 	bl	8000b18 <__aeabi_dcmpgt>
 800849c:	2800      	cmp	r0, #0
 800849e:	d175      	bne.n	800858c <_dtoa_r+0x6fc>
 80084a0:	ec53 2b18 	vmov	r2, r3, d8
 80084a4:	4911      	ldr	r1, [pc, #68]	; (80084ec <_dtoa_r+0x65c>)
 80084a6:	2000      	movs	r0, #0
 80084a8:	f7f7 feee 	bl	8000288 <__aeabi_dsub>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f7f8 fb12 	bl	8000adc <__aeabi_dcmplt>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	f43f af27 	beq.w	800830c <_dtoa_r+0x47c>
 80084be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084c0:	1e6b      	subs	r3, r5, #1
 80084c2:	930c      	str	r3, [sp, #48]	; 0x30
 80084c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084c8:	2b30      	cmp	r3, #48	; 0x30
 80084ca:	d0f8      	beq.n	80084be <_dtoa_r+0x62e>
 80084cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084d0:	e04a      	b.n	8008568 <_dtoa_r+0x6d8>
 80084d2:	bf00      	nop
 80084d4:	0800a688 	.word	0x0800a688
 80084d8:	0800a660 	.word	0x0800a660
 80084dc:	3ff00000 	.word	0x3ff00000
 80084e0:	40240000 	.word	0x40240000
 80084e4:	401c0000 	.word	0x401c0000
 80084e8:	40140000 	.word	0x40140000
 80084ec:	3fe00000 	.word	0x3fe00000
 80084f0:	4baf      	ldr	r3, [pc, #700]	; (80087b0 <_dtoa_r+0x920>)
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	4606      	mov	r6, r0
 80084f8:	460f      	mov	r7, r1
 80084fa:	e7ac      	b.n	8008456 <_dtoa_r+0x5c6>
 80084fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008500:	9d00      	ldr	r5, [sp, #0]
 8008502:	4642      	mov	r2, r8
 8008504:	464b      	mov	r3, r9
 8008506:	4630      	mov	r0, r6
 8008508:	4639      	mov	r1, r7
 800850a:	f7f8 f99f 	bl	800084c <__aeabi_ddiv>
 800850e:	f7f8 fb23 	bl	8000b58 <__aeabi_d2iz>
 8008512:	9002      	str	r0, [sp, #8]
 8008514:	f7f8 f806 	bl	8000524 <__aeabi_i2d>
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	f7f8 f86c 	bl	80005f8 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f7 feae 	bl	8000288 <__aeabi_dsub>
 800852c:	9e02      	ldr	r6, [sp, #8]
 800852e:	9f01      	ldr	r7, [sp, #4]
 8008530:	3630      	adds	r6, #48	; 0x30
 8008532:	f805 6b01 	strb.w	r6, [r5], #1
 8008536:	9e00      	ldr	r6, [sp, #0]
 8008538:	1bae      	subs	r6, r5, r6
 800853a:	42b7      	cmp	r7, r6
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	d137      	bne.n	80085b2 <_dtoa_r+0x722>
 8008542:	f7f7 fea3 	bl	800028c <__adddf3>
 8008546:	4642      	mov	r2, r8
 8008548:	464b      	mov	r3, r9
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	f7f8 fae3 	bl	8000b18 <__aeabi_dcmpgt>
 8008552:	b9c8      	cbnz	r0, 8008588 <_dtoa_r+0x6f8>
 8008554:	4642      	mov	r2, r8
 8008556:	464b      	mov	r3, r9
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008560:	b110      	cbz	r0, 8008568 <_dtoa_r+0x6d8>
 8008562:	9b02      	ldr	r3, [sp, #8]
 8008564:	07d9      	lsls	r1, r3, #31
 8008566:	d40f      	bmi.n	8008588 <_dtoa_r+0x6f8>
 8008568:	4620      	mov	r0, r4
 800856a:	4659      	mov	r1, fp
 800856c:	f000 fad6 	bl	8008b1c <_Bfree>
 8008570:	2300      	movs	r3, #0
 8008572:	702b      	strb	r3, [r5, #0]
 8008574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008576:	f10a 0001 	add.w	r0, sl, #1
 800857a:	6018      	str	r0, [r3, #0]
 800857c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800857e:	2b00      	cmp	r3, #0
 8008580:	f43f acd8 	beq.w	8007f34 <_dtoa_r+0xa4>
 8008584:	601d      	str	r5, [r3, #0]
 8008586:	e4d5      	b.n	8007f34 <_dtoa_r+0xa4>
 8008588:	f8cd a01c 	str.w	sl, [sp, #28]
 800858c:	462b      	mov	r3, r5
 800858e:	461d      	mov	r5, r3
 8008590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008594:	2a39      	cmp	r2, #57	; 0x39
 8008596:	d108      	bne.n	80085aa <_dtoa_r+0x71a>
 8008598:	9a00      	ldr	r2, [sp, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d1f7      	bne.n	800858e <_dtoa_r+0x6fe>
 800859e:	9a07      	ldr	r2, [sp, #28]
 80085a0:	9900      	ldr	r1, [sp, #0]
 80085a2:	3201      	adds	r2, #1
 80085a4:	9207      	str	r2, [sp, #28]
 80085a6:	2230      	movs	r2, #48	; 0x30
 80085a8:	700a      	strb	r2, [r1, #0]
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	3201      	adds	r2, #1
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e78c      	b.n	80084cc <_dtoa_r+0x63c>
 80085b2:	4b7f      	ldr	r3, [pc, #508]	; (80087b0 <_dtoa_r+0x920>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	f7f8 f81f 	bl	80005f8 <__aeabi_dmul>
 80085ba:	2200      	movs	r2, #0
 80085bc:	2300      	movs	r3, #0
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	f7f8 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d09b      	beq.n	8008502 <_dtoa_r+0x672>
 80085ca:	e7cd      	b.n	8008568 <_dtoa_r+0x6d8>
 80085cc:	9a08      	ldr	r2, [sp, #32]
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	f000 80c4 	beq.w	800875c <_dtoa_r+0x8cc>
 80085d4:	9a05      	ldr	r2, [sp, #20]
 80085d6:	2a01      	cmp	r2, #1
 80085d8:	f300 80a8 	bgt.w	800872c <_dtoa_r+0x89c>
 80085dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085de:	2a00      	cmp	r2, #0
 80085e0:	f000 80a0 	beq.w	8008724 <_dtoa_r+0x894>
 80085e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085e8:	9e06      	ldr	r6, [sp, #24]
 80085ea:	4645      	mov	r5, r8
 80085ec:	9a04      	ldr	r2, [sp, #16]
 80085ee:	2101      	movs	r1, #1
 80085f0:	441a      	add	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	4498      	add	r8, r3
 80085f6:	9204      	str	r2, [sp, #16]
 80085f8:	f000 fb4c 	bl	8008c94 <__i2b>
 80085fc:	4607      	mov	r7, r0
 80085fe:	2d00      	cmp	r5, #0
 8008600:	dd0b      	ble.n	800861a <_dtoa_r+0x78a>
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd08      	ble.n	800861a <_dtoa_r+0x78a>
 8008608:	42ab      	cmp	r3, r5
 800860a:	9a04      	ldr	r2, [sp, #16]
 800860c:	bfa8      	it	ge
 800860e:	462b      	movge	r3, r5
 8008610:	eba8 0803 	sub.w	r8, r8, r3
 8008614:	1aed      	subs	r5, r5, r3
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	9b06      	ldr	r3, [sp, #24]
 800861c:	b1fb      	cbz	r3, 800865e <_dtoa_r+0x7ce>
 800861e:	9b08      	ldr	r3, [sp, #32]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 809f 	beq.w	8008764 <_dtoa_r+0x8d4>
 8008626:	2e00      	cmp	r6, #0
 8008628:	dd11      	ble.n	800864e <_dtoa_r+0x7be>
 800862a:	4639      	mov	r1, r7
 800862c:	4632      	mov	r2, r6
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fbec 	bl	8008e0c <__pow5mult>
 8008634:	465a      	mov	r2, fp
 8008636:	4601      	mov	r1, r0
 8008638:	4607      	mov	r7, r0
 800863a:	4620      	mov	r0, r4
 800863c:	f000 fb40 	bl	8008cc0 <__multiply>
 8008640:	4659      	mov	r1, fp
 8008642:	9007      	str	r0, [sp, #28]
 8008644:	4620      	mov	r0, r4
 8008646:	f000 fa69 	bl	8008b1c <_Bfree>
 800864a:	9b07      	ldr	r3, [sp, #28]
 800864c:	469b      	mov	fp, r3
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	1b9a      	subs	r2, r3, r6
 8008652:	d004      	beq.n	800865e <_dtoa_r+0x7ce>
 8008654:	4659      	mov	r1, fp
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fbd8 	bl	8008e0c <__pow5mult>
 800865c:	4683      	mov	fp, r0
 800865e:	2101      	movs	r1, #1
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fb17 	bl	8008c94 <__i2b>
 8008666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008668:	2b00      	cmp	r3, #0
 800866a:	4606      	mov	r6, r0
 800866c:	dd7c      	ble.n	8008768 <_dtoa_r+0x8d8>
 800866e:	461a      	mov	r2, r3
 8008670:	4601      	mov	r1, r0
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fbca 	bl	8008e0c <__pow5mult>
 8008678:	9b05      	ldr	r3, [sp, #20]
 800867a:	2b01      	cmp	r3, #1
 800867c:	4606      	mov	r6, r0
 800867e:	dd76      	ble.n	800876e <_dtoa_r+0x8de>
 8008680:	2300      	movs	r3, #0
 8008682:	9306      	str	r3, [sp, #24]
 8008684:	6933      	ldr	r3, [r6, #16]
 8008686:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800868a:	6918      	ldr	r0, [r3, #16]
 800868c:	f000 fab2 	bl	8008bf4 <__hi0bits>
 8008690:	f1c0 0020 	rsb	r0, r0, #32
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	4418      	add	r0, r3
 8008698:	f010 001f 	ands.w	r0, r0, #31
 800869c:	f000 8086 	beq.w	80087ac <_dtoa_r+0x91c>
 80086a0:	f1c0 0320 	rsb	r3, r0, #32
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	dd7f      	ble.n	80087a8 <_dtoa_r+0x918>
 80086a8:	f1c0 001c 	rsb	r0, r0, #28
 80086ac:	9b04      	ldr	r3, [sp, #16]
 80086ae:	4403      	add	r3, r0
 80086b0:	4480      	add	r8, r0
 80086b2:	4405      	add	r5, r0
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	f1b8 0f00 	cmp.w	r8, #0
 80086ba:	dd05      	ble.n	80086c8 <_dtoa_r+0x838>
 80086bc:	4659      	mov	r1, fp
 80086be:	4642      	mov	r2, r8
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 fbfd 	bl	8008ec0 <__lshift>
 80086c6:	4683      	mov	fp, r0
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd05      	ble.n	80086da <_dtoa_r+0x84a>
 80086ce:	4631      	mov	r1, r6
 80086d0:	461a      	mov	r2, r3
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fbf4 	bl	8008ec0 <__lshift>
 80086d8:	4606      	mov	r6, r0
 80086da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d069      	beq.n	80087b4 <_dtoa_r+0x924>
 80086e0:	4631      	mov	r1, r6
 80086e2:	4658      	mov	r0, fp
 80086e4:	f000 fc58 	bl	8008f98 <__mcmp>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	da63      	bge.n	80087b4 <_dtoa_r+0x924>
 80086ec:	2300      	movs	r3, #0
 80086ee:	4659      	mov	r1, fp
 80086f0:	220a      	movs	r2, #10
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fa34 	bl	8008b60 <__multadd>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fe:	4683      	mov	fp, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 818f 	beq.w	8008a24 <_dtoa_r+0xb94>
 8008706:	4639      	mov	r1, r7
 8008708:	2300      	movs	r3, #0
 800870a:	220a      	movs	r2, #10
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fa27 	bl	8008b60 <__multadd>
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	4607      	mov	r7, r0
 8008718:	f300 808e 	bgt.w	8008838 <_dtoa_r+0x9a8>
 800871c:	9b05      	ldr	r3, [sp, #20]
 800871e:	2b02      	cmp	r3, #2
 8008720:	dc50      	bgt.n	80087c4 <_dtoa_r+0x934>
 8008722:	e089      	b.n	8008838 <_dtoa_r+0x9a8>
 8008724:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800872a:	e75d      	b.n	80085e8 <_dtoa_r+0x758>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	1e5e      	subs	r6, r3, #1
 8008730:	9b06      	ldr	r3, [sp, #24]
 8008732:	42b3      	cmp	r3, r6
 8008734:	bfbf      	itttt	lt
 8008736:	9b06      	ldrlt	r3, [sp, #24]
 8008738:	9606      	strlt	r6, [sp, #24]
 800873a:	1af2      	sublt	r2, r6, r3
 800873c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800873e:	bfb6      	itet	lt
 8008740:	189b      	addlt	r3, r3, r2
 8008742:	1b9e      	subge	r6, r3, r6
 8008744:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	bfb8      	it	lt
 800874a:	2600      	movlt	r6, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfb5      	itete	lt
 8008750:	eba8 0503 	sublt.w	r5, r8, r3
 8008754:	9b01      	ldrge	r3, [sp, #4]
 8008756:	2300      	movlt	r3, #0
 8008758:	4645      	movge	r5, r8
 800875a:	e747      	b.n	80085ec <_dtoa_r+0x75c>
 800875c:	9e06      	ldr	r6, [sp, #24]
 800875e:	9f08      	ldr	r7, [sp, #32]
 8008760:	4645      	mov	r5, r8
 8008762:	e74c      	b.n	80085fe <_dtoa_r+0x76e>
 8008764:	9a06      	ldr	r2, [sp, #24]
 8008766:	e775      	b.n	8008654 <_dtoa_r+0x7c4>
 8008768:	9b05      	ldr	r3, [sp, #20]
 800876a:	2b01      	cmp	r3, #1
 800876c:	dc18      	bgt.n	80087a0 <_dtoa_r+0x910>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	b9b3      	cbnz	r3, 80087a0 <_dtoa_r+0x910>
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008778:	b9a3      	cbnz	r3, 80087a4 <_dtoa_r+0x914>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008780:	0d1b      	lsrs	r3, r3, #20
 8008782:	051b      	lsls	r3, r3, #20
 8008784:	b12b      	cbz	r3, 8008792 <_dtoa_r+0x902>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	3301      	adds	r3, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	f108 0801 	add.w	r8, r8, #1
 8008790:	2301      	movs	r3, #1
 8008792:	9306      	str	r3, [sp, #24]
 8008794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008796:	2b00      	cmp	r3, #0
 8008798:	f47f af74 	bne.w	8008684 <_dtoa_r+0x7f4>
 800879c:	2001      	movs	r0, #1
 800879e:	e779      	b.n	8008694 <_dtoa_r+0x804>
 80087a0:	2300      	movs	r3, #0
 80087a2:	e7f6      	b.n	8008792 <_dtoa_r+0x902>
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	e7f4      	b.n	8008792 <_dtoa_r+0x902>
 80087a8:	d085      	beq.n	80086b6 <_dtoa_r+0x826>
 80087aa:	4618      	mov	r0, r3
 80087ac:	301c      	adds	r0, #28
 80087ae:	e77d      	b.n	80086ac <_dtoa_r+0x81c>
 80087b0:	40240000 	.word	0x40240000
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dc38      	bgt.n	800882c <_dtoa_r+0x99c>
 80087ba:	9b05      	ldr	r3, [sp, #20]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	dd35      	ble.n	800882c <_dtoa_r+0x99c>
 80087c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087c4:	f1b9 0f00 	cmp.w	r9, #0
 80087c8:	d10d      	bne.n	80087e6 <_dtoa_r+0x956>
 80087ca:	4631      	mov	r1, r6
 80087cc:	464b      	mov	r3, r9
 80087ce:	2205      	movs	r2, #5
 80087d0:	4620      	mov	r0, r4
 80087d2:	f000 f9c5 	bl	8008b60 <__multadd>
 80087d6:	4601      	mov	r1, r0
 80087d8:	4606      	mov	r6, r0
 80087da:	4658      	mov	r0, fp
 80087dc:	f000 fbdc 	bl	8008f98 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	f73f adbd 	bgt.w	8008360 <_dtoa_r+0x4d0>
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	9d00      	ldr	r5, [sp, #0]
 80087ea:	ea6f 0a03 	mvn.w	sl, r3
 80087ee:	f04f 0800 	mov.w	r8, #0
 80087f2:	4631      	mov	r1, r6
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 f991 	bl	8008b1c <_Bfree>
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	f43f aeb4 	beq.w	8008568 <_dtoa_r+0x6d8>
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	d005      	beq.n	8008812 <_dtoa_r+0x982>
 8008806:	45b8      	cmp	r8, r7
 8008808:	d003      	beq.n	8008812 <_dtoa_r+0x982>
 800880a:	4641      	mov	r1, r8
 800880c:	4620      	mov	r0, r4
 800880e:	f000 f985 	bl	8008b1c <_Bfree>
 8008812:	4639      	mov	r1, r7
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f981 	bl	8008b1c <_Bfree>
 800881a:	e6a5      	b.n	8008568 <_dtoa_r+0x6d8>
 800881c:	2600      	movs	r6, #0
 800881e:	4637      	mov	r7, r6
 8008820:	e7e1      	b.n	80087e6 <_dtoa_r+0x956>
 8008822:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008828:	4637      	mov	r7, r6
 800882a:	e599      	b.n	8008360 <_dtoa_r+0x4d0>
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 80fd 	beq.w	8008a32 <_dtoa_r+0xba2>
 8008838:	2d00      	cmp	r5, #0
 800883a:	dd05      	ble.n	8008848 <_dtoa_r+0x9b8>
 800883c:	4639      	mov	r1, r7
 800883e:	462a      	mov	r2, r5
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fb3d 	bl	8008ec0 <__lshift>
 8008846:	4607      	mov	r7, r0
 8008848:	9b06      	ldr	r3, [sp, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d05c      	beq.n	8008908 <_dtoa_r+0xa78>
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 f923 	bl	8008a9c <_Balloc>
 8008856:	4605      	mov	r5, r0
 8008858:	b928      	cbnz	r0, 8008866 <_dtoa_r+0x9d6>
 800885a:	4b80      	ldr	r3, [pc, #512]	; (8008a5c <_dtoa_r+0xbcc>)
 800885c:	4602      	mov	r2, r0
 800885e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008862:	f7ff bb2e 	b.w	8007ec2 <_dtoa_r+0x32>
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	3202      	adds	r2, #2
 800886a:	0092      	lsls	r2, r2, #2
 800886c:	f107 010c 	add.w	r1, r7, #12
 8008870:	300c      	adds	r0, #12
 8008872:	f000 f905 	bl	8008a80 <memcpy>
 8008876:	2201      	movs	r2, #1
 8008878:	4629      	mov	r1, r5
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fb20 	bl	8008ec0 <__lshift>
 8008880:	9b00      	ldr	r3, [sp, #0]
 8008882:	3301      	adds	r3, #1
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	444b      	add	r3, r9
 800888a:	9307      	str	r3, [sp, #28]
 800888c:	9b02      	ldr	r3, [sp, #8]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	46b8      	mov	r8, r7
 8008894:	9306      	str	r3, [sp, #24]
 8008896:	4607      	mov	r7, r0
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	4631      	mov	r1, r6
 800889c:	3b01      	subs	r3, #1
 800889e:	4658      	mov	r0, fp
 80088a0:	9302      	str	r3, [sp, #8]
 80088a2:	f7ff fa67 	bl	8007d74 <quorem>
 80088a6:	4603      	mov	r3, r0
 80088a8:	3330      	adds	r3, #48	; 0x30
 80088aa:	9004      	str	r0, [sp, #16]
 80088ac:	4641      	mov	r1, r8
 80088ae:	4658      	mov	r0, fp
 80088b0:	9308      	str	r3, [sp, #32]
 80088b2:	f000 fb71 	bl	8008f98 <__mcmp>
 80088b6:	463a      	mov	r2, r7
 80088b8:	4681      	mov	r9, r0
 80088ba:	4631      	mov	r1, r6
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fb87 	bl	8008fd0 <__mdiff>
 80088c2:	68c2      	ldr	r2, [r0, #12]
 80088c4:	9b08      	ldr	r3, [sp, #32]
 80088c6:	4605      	mov	r5, r0
 80088c8:	bb02      	cbnz	r2, 800890c <_dtoa_r+0xa7c>
 80088ca:	4601      	mov	r1, r0
 80088cc:	4658      	mov	r0, fp
 80088ce:	f000 fb63 	bl	8008f98 <__mcmp>
 80088d2:	9b08      	ldr	r3, [sp, #32]
 80088d4:	4602      	mov	r2, r0
 80088d6:	4629      	mov	r1, r5
 80088d8:	4620      	mov	r0, r4
 80088da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80088de:	f000 f91d 	bl	8008b1c <_Bfree>
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e6:	9d01      	ldr	r5, [sp, #4]
 80088e8:	ea43 0102 	orr.w	r1, r3, r2
 80088ec:	9b06      	ldr	r3, [sp, #24]
 80088ee:	430b      	orrs	r3, r1
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	d10d      	bne.n	8008910 <_dtoa_r+0xa80>
 80088f4:	2b39      	cmp	r3, #57	; 0x39
 80088f6:	d029      	beq.n	800894c <_dtoa_r+0xabc>
 80088f8:	f1b9 0f00 	cmp.w	r9, #0
 80088fc:	dd01      	ble.n	8008902 <_dtoa_r+0xa72>
 80088fe:	9b04      	ldr	r3, [sp, #16]
 8008900:	3331      	adds	r3, #49	; 0x31
 8008902:	9a02      	ldr	r2, [sp, #8]
 8008904:	7013      	strb	r3, [r2, #0]
 8008906:	e774      	b.n	80087f2 <_dtoa_r+0x962>
 8008908:	4638      	mov	r0, r7
 800890a:	e7b9      	b.n	8008880 <_dtoa_r+0x9f0>
 800890c:	2201      	movs	r2, #1
 800890e:	e7e2      	b.n	80088d6 <_dtoa_r+0xa46>
 8008910:	f1b9 0f00 	cmp.w	r9, #0
 8008914:	db06      	blt.n	8008924 <_dtoa_r+0xa94>
 8008916:	9905      	ldr	r1, [sp, #20]
 8008918:	ea41 0909 	orr.w	r9, r1, r9
 800891c:	9906      	ldr	r1, [sp, #24]
 800891e:	ea59 0101 	orrs.w	r1, r9, r1
 8008922:	d120      	bne.n	8008966 <_dtoa_r+0xad6>
 8008924:	2a00      	cmp	r2, #0
 8008926:	ddec      	ble.n	8008902 <_dtoa_r+0xa72>
 8008928:	4659      	mov	r1, fp
 800892a:	2201      	movs	r2, #1
 800892c:	4620      	mov	r0, r4
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	f000 fac6 	bl	8008ec0 <__lshift>
 8008934:	4631      	mov	r1, r6
 8008936:	4683      	mov	fp, r0
 8008938:	f000 fb2e 	bl	8008f98 <__mcmp>
 800893c:	2800      	cmp	r0, #0
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	dc02      	bgt.n	8008948 <_dtoa_r+0xab8>
 8008942:	d1de      	bne.n	8008902 <_dtoa_r+0xa72>
 8008944:	07da      	lsls	r2, r3, #31
 8008946:	d5dc      	bpl.n	8008902 <_dtoa_r+0xa72>
 8008948:	2b39      	cmp	r3, #57	; 0x39
 800894a:	d1d8      	bne.n	80088fe <_dtoa_r+0xa6e>
 800894c:	9a02      	ldr	r2, [sp, #8]
 800894e:	2339      	movs	r3, #57	; 0x39
 8008950:	7013      	strb	r3, [r2, #0]
 8008952:	462b      	mov	r3, r5
 8008954:	461d      	mov	r5, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800895c:	2a39      	cmp	r2, #57	; 0x39
 800895e:	d050      	beq.n	8008a02 <_dtoa_r+0xb72>
 8008960:	3201      	adds	r2, #1
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	e745      	b.n	80087f2 <_dtoa_r+0x962>
 8008966:	2a00      	cmp	r2, #0
 8008968:	dd03      	ble.n	8008972 <_dtoa_r+0xae2>
 800896a:	2b39      	cmp	r3, #57	; 0x39
 800896c:	d0ee      	beq.n	800894c <_dtoa_r+0xabc>
 800896e:	3301      	adds	r3, #1
 8008970:	e7c7      	b.n	8008902 <_dtoa_r+0xa72>
 8008972:	9a01      	ldr	r2, [sp, #4]
 8008974:	9907      	ldr	r1, [sp, #28]
 8008976:	f802 3c01 	strb.w	r3, [r2, #-1]
 800897a:	428a      	cmp	r2, r1
 800897c:	d02a      	beq.n	80089d4 <_dtoa_r+0xb44>
 800897e:	4659      	mov	r1, fp
 8008980:	2300      	movs	r3, #0
 8008982:	220a      	movs	r2, #10
 8008984:	4620      	mov	r0, r4
 8008986:	f000 f8eb 	bl	8008b60 <__multadd>
 800898a:	45b8      	cmp	r8, r7
 800898c:	4683      	mov	fp, r0
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	f04f 020a 	mov.w	r2, #10
 8008996:	4641      	mov	r1, r8
 8008998:	4620      	mov	r0, r4
 800899a:	d107      	bne.n	80089ac <_dtoa_r+0xb1c>
 800899c:	f000 f8e0 	bl	8008b60 <__multadd>
 80089a0:	4680      	mov	r8, r0
 80089a2:	4607      	mov	r7, r0
 80089a4:	9b01      	ldr	r3, [sp, #4]
 80089a6:	3301      	adds	r3, #1
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	e775      	b.n	8008898 <_dtoa_r+0xa08>
 80089ac:	f000 f8d8 	bl	8008b60 <__multadd>
 80089b0:	4639      	mov	r1, r7
 80089b2:	4680      	mov	r8, r0
 80089b4:	2300      	movs	r3, #0
 80089b6:	220a      	movs	r2, #10
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f8d1 	bl	8008b60 <__multadd>
 80089be:	4607      	mov	r7, r0
 80089c0:	e7f0      	b.n	80089a4 <_dtoa_r+0xb14>
 80089c2:	f1b9 0f00 	cmp.w	r9, #0
 80089c6:	9a00      	ldr	r2, [sp, #0]
 80089c8:	bfcc      	ite	gt
 80089ca:	464d      	movgt	r5, r9
 80089cc:	2501      	movle	r5, #1
 80089ce:	4415      	add	r5, r2
 80089d0:	f04f 0800 	mov.w	r8, #0
 80089d4:	4659      	mov	r1, fp
 80089d6:	2201      	movs	r2, #1
 80089d8:	4620      	mov	r0, r4
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	f000 fa70 	bl	8008ec0 <__lshift>
 80089e0:	4631      	mov	r1, r6
 80089e2:	4683      	mov	fp, r0
 80089e4:	f000 fad8 	bl	8008f98 <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	dcb2      	bgt.n	8008952 <_dtoa_r+0xac2>
 80089ec:	d102      	bne.n	80089f4 <_dtoa_r+0xb64>
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	07db      	lsls	r3, r3, #31
 80089f2:	d4ae      	bmi.n	8008952 <_dtoa_r+0xac2>
 80089f4:	462b      	mov	r3, r5
 80089f6:	461d      	mov	r5, r3
 80089f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fc:	2a30      	cmp	r2, #48	; 0x30
 80089fe:	d0fa      	beq.n	80089f6 <_dtoa_r+0xb66>
 8008a00:	e6f7      	b.n	80087f2 <_dtoa_r+0x962>
 8008a02:	9a00      	ldr	r2, [sp, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d1a5      	bne.n	8008954 <_dtoa_r+0xac4>
 8008a08:	f10a 0a01 	add.w	sl, sl, #1
 8008a0c:	2331      	movs	r3, #49	; 0x31
 8008a0e:	e779      	b.n	8008904 <_dtoa_r+0xa74>
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <_dtoa_r+0xbd0>)
 8008a12:	f7ff baaf 	b.w	8007f74 <_dtoa_r+0xe4>
 8008a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f47f aa86 	bne.w	8007f2a <_dtoa_r+0x9a>
 8008a1e:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <_dtoa_r+0xbd4>)
 8008a20:	f7ff baa8 	b.w	8007f74 <_dtoa_r+0xe4>
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	dc03      	bgt.n	8008a32 <_dtoa_r+0xba2>
 8008a2a:	9b05      	ldr	r3, [sp, #20]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	f73f aec9 	bgt.w	80087c4 <_dtoa_r+0x934>
 8008a32:	9d00      	ldr	r5, [sp, #0]
 8008a34:	4631      	mov	r1, r6
 8008a36:	4658      	mov	r0, fp
 8008a38:	f7ff f99c 	bl	8007d74 <quorem>
 8008a3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a40:	f805 3b01 	strb.w	r3, [r5], #1
 8008a44:	9a00      	ldr	r2, [sp, #0]
 8008a46:	1aaa      	subs	r2, r5, r2
 8008a48:	4591      	cmp	r9, r2
 8008a4a:	ddba      	ble.n	80089c2 <_dtoa_r+0xb32>
 8008a4c:	4659      	mov	r1, fp
 8008a4e:	2300      	movs	r3, #0
 8008a50:	220a      	movs	r2, #10
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 f884 	bl	8008b60 <__multadd>
 8008a58:	4683      	mov	fp, r0
 8008a5a:	e7eb      	b.n	8008a34 <_dtoa_r+0xba4>
 8008a5c:	0800a5eb 	.word	0x0800a5eb
 8008a60:	0800a544 	.word	0x0800a544
 8008a64:	0800a568 	.word	0x0800a568

08008a68 <_localeconv_r>:
 8008a68:	4800      	ldr	r0, [pc, #0]	; (8008a6c <_localeconv_r+0x4>)
 8008a6a:	4770      	bx	lr
 8008a6c:	20000178 	.word	0x20000178

08008a70 <malloc>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <malloc+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f000 bbef 	b.w	8009258 <_malloc_r>
 8008a7a:	bf00      	nop
 8008a7c:	20000024 	.word	0x20000024

08008a80 <memcpy>:
 8008a80:	440a      	add	r2, r1
 8008a82:	4291      	cmp	r1, r2
 8008a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a88:	d100      	bne.n	8008a8c <memcpy+0xc>
 8008a8a:	4770      	bx	lr
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a96:	4291      	cmp	r1, r2
 8008a98:	d1f9      	bne.n	8008a8e <memcpy+0xe>
 8008a9a:	bd10      	pop	{r4, pc}

08008a9c <_Balloc>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	b976      	cbnz	r6, 8008ac4 <_Balloc+0x28>
 8008aa6:	2010      	movs	r0, #16
 8008aa8:	f7ff ffe2 	bl	8008a70 <malloc>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6260      	str	r0, [r4, #36]	; 0x24
 8008ab0:	b920      	cbnz	r0, 8008abc <_Balloc+0x20>
 8008ab2:	4b18      	ldr	r3, [pc, #96]	; (8008b14 <_Balloc+0x78>)
 8008ab4:	4818      	ldr	r0, [pc, #96]	; (8008b18 <_Balloc+0x7c>)
 8008ab6:	2166      	movs	r1, #102	; 0x66
 8008ab8:	f000 fd94 	bl	80095e4 <__assert_func>
 8008abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ac0:	6006      	str	r6, [r0, #0]
 8008ac2:	60c6      	str	r6, [r0, #12]
 8008ac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ac6:	68f3      	ldr	r3, [r6, #12]
 8008ac8:	b183      	cbz	r3, 8008aec <_Balloc+0x50>
 8008aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ad2:	b9b8      	cbnz	r0, 8008b04 <_Balloc+0x68>
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8008ada:	1d72      	adds	r2, r6, #5
 8008adc:	0092      	lsls	r2, r2, #2
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fb5a 	bl	8009198 <_calloc_r>
 8008ae4:	b160      	cbz	r0, 8008b00 <_Balloc+0x64>
 8008ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aea:	e00e      	b.n	8008b0a <_Balloc+0x6e>
 8008aec:	2221      	movs	r2, #33	; 0x21
 8008aee:	2104      	movs	r1, #4
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fb51 	bl	8009198 <_calloc_r>
 8008af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af8:	60f0      	str	r0, [r6, #12]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e4      	bne.n	8008aca <_Balloc+0x2e>
 8008b00:	2000      	movs	r0, #0
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	6802      	ldr	r2, [r0, #0]
 8008b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b10:	e7f7      	b.n	8008b02 <_Balloc+0x66>
 8008b12:	bf00      	nop
 8008b14:	0800a575 	.word	0x0800a575
 8008b18:	0800a5fc 	.word	0x0800a5fc

08008b1c <_Bfree>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b20:	4605      	mov	r5, r0
 8008b22:	460c      	mov	r4, r1
 8008b24:	b976      	cbnz	r6, 8008b44 <_Bfree+0x28>
 8008b26:	2010      	movs	r0, #16
 8008b28:	f7ff ffa2 	bl	8008a70 <malloc>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6268      	str	r0, [r5, #36]	; 0x24
 8008b30:	b920      	cbnz	r0, 8008b3c <_Bfree+0x20>
 8008b32:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <_Bfree+0x3c>)
 8008b34:	4809      	ldr	r0, [pc, #36]	; (8008b5c <_Bfree+0x40>)
 8008b36:	218a      	movs	r1, #138	; 0x8a
 8008b38:	f000 fd54 	bl	80095e4 <__assert_func>
 8008b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b40:	6006      	str	r6, [r0, #0]
 8008b42:	60c6      	str	r6, [r0, #12]
 8008b44:	b13c      	cbz	r4, 8008b56 <_Bfree+0x3a>
 8008b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b48:	6862      	ldr	r2, [r4, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b50:	6021      	str	r1, [r4, #0]
 8008b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	0800a575 	.word	0x0800a575
 8008b5c:	0800a5fc 	.word	0x0800a5fc

08008b60 <__multadd>:
 8008b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	690e      	ldr	r6, [r1, #16]
 8008b66:	4607      	mov	r7, r0
 8008b68:	4698      	mov	r8, r3
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	f101 0014 	add.w	r0, r1, #20
 8008b70:	2300      	movs	r3, #0
 8008b72:	6805      	ldr	r5, [r0, #0]
 8008b74:	b2a9      	uxth	r1, r5
 8008b76:	fb02 8101 	mla	r1, r2, r1, r8
 8008b7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008b7e:	0c2d      	lsrs	r5, r5, #16
 8008b80:	fb02 c505 	mla	r5, r2, r5, ip
 8008b84:	b289      	uxth	r1, r1
 8008b86:	3301      	adds	r3, #1
 8008b88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008b8c:	429e      	cmp	r6, r3
 8008b8e:	f840 1b04 	str.w	r1, [r0], #4
 8008b92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008b96:	dcec      	bgt.n	8008b72 <__multadd+0x12>
 8008b98:	f1b8 0f00 	cmp.w	r8, #0
 8008b9c:	d022      	beq.n	8008be4 <__multadd+0x84>
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	42b3      	cmp	r3, r6
 8008ba2:	dc19      	bgt.n	8008bd8 <__multadd+0x78>
 8008ba4:	6861      	ldr	r1, [r4, #4]
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	3101      	adds	r1, #1
 8008baa:	f7ff ff77 	bl	8008a9c <_Balloc>
 8008bae:	4605      	mov	r5, r0
 8008bb0:	b928      	cbnz	r0, 8008bbe <__multadd+0x5e>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b0d      	ldr	r3, [pc, #52]	; (8008bec <__multadd+0x8c>)
 8008bb6:	480e      	ldr	r0, [pc, #56]	; (8008bf0 <__multadd+0x90>)
 8008bb8:	21b5      	movs	r1, #181	; 0xb5
 8008bba:	f000 fd13 	bl	80095e4 <__assert_func>
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	3202      	adds	r2, #2
 8008bc2:	f104 010c 	add.w	r1, r4, #12
 8008bc6:	0092      	lsls	r2, r2, #2
 8008bc8:	300c      	adds	r0, #12
 8008bca:	f7ff ff59 	bl	8008a80 <memcpy>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f7ff ffa3 	bl	8008b1c <_Bfree>
 8008bd6:	462c      	mov	r4, r5
 8008bd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008bdc:	3601      	adds	r6, #1
 8008bde:	f8c3 8014 	str.w	r8, [r3, #20]
 8008be2:	6126      	str	r6, [r4, #16]
 8008be4:	4620      	mov	r0, r4
 8008be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bea:	bf00      	nop
 8008bec:	0800a5eb 	.word	0x0800a5eb
 8008bf0:	0800a5fc 	.word	0x0800a5fc

08008bf4 <__hi0bits>:
 8008bf4:	0c03      	lsrs	r3, r0, #16
 8008bf6:	041b      	lsls	r3, r3, #16
 8008bf8:	b9d3      	cbnz	r3, 8008c30 <__hi0bits+0x3c>
 8008bfa:	0400      	lsls	r0, r0, #16
 8008bfc:	2310      	movs	r3, #16
 8008bfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c02:	bf04      	itt	eq
 8008c04:	0200      	lsleq	r0, r0, #8
 8008c06:	3308      	addeq	r3, #8
 8008c08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c0c:	bf04      	itt	eq
 8008c0e:	0100      	lsleq	r0, r0, #4
 8008c10:	3304      	addeq	r3, #4
 8008c12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c16:	bf04      	itt	eq
 8008c18:	0080      	lsleq	r0, r0, #2
 8008c1a:	3302      	addeq	r3, #2
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	db05      	blt.n	8008c2c <__hi0bits+0x38>
 8008c20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c24:	f103 0301 	add.w	r3, r3, #1
 8008c28:	bf08      	it	eq
 8008c2a:	2320      	moveq	r3, #32
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4770      	bx	lr
 8008c30:	2300      	movs	r3, #0
 8008c32:	e7e4      	b.n	8008bfe <__hi0bits+0xa>

08008c34 <__lo0bits>:
 8008c34:	6803      	ldr	r3, [r0, #0]
 8008c36:	f013 0207 	ands.w	r2, r3, #7
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	d00b      	beq.n	8008c56 <__lo0bits+0x22>
 8008c3e:	07da      	lsls	r2, r3, #31
 8008c40:	d424      	bmi.n	8008c8c <__lo0bits+0x58>
 8008c42:	0798      	lsls	r0, r3, #30
 8008c44:	bf49      	itett	mi
 8008c46:	085b      	lsrmi	r3, r3, #1
 8008c48:	089b      	lsrpl	r3, r3, #2
 8008c4a:	2001      	movmi	r0, #1
 8008c4c:	600b      	strmi	r3, [r1, #0]
 8008c4e:	bf5c      	itt	pl
 8008c50:	600b      	strpl	r3, [r1, #0]
 8008c52:	2002      	movpl	r0, #2
 8008c54:	4770      	bx	lr
 8008c56:	b298      	uxth	r0, r3
 8008c58:	b9b0      	cbnz	r0, 8008c88 <__lo0bits+0x54>
 8008c5a:	0c1b      	lsrs	r3, r3, #16
 8008c5c:	2010      	movs	r0, #16
 8008c5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c62:	bf04      	itt	eq
 8008c64:	0a1b      	lsreq	r3, r3, #8
 8008c66:	3008      	addeq	r0, #8
 8008c68:	071a      	lsls	r2, r3, #28
 8008c6a:	bf04      	itt	eq
 8008c6c:	091b      	lsreq	r3, r3, #4
 8008c6e:	3004      	addeq	r0, #4
 8008c70:	079a      	lsls	r2, r3, #30
 8008c72:	bf04      	itt	eq
 8008c74:	089b      	lsreq	r3, r3, #2
 8008c76:	3002      	addeq	r0, #2
 8008c78:	07da      	lsls	r2, r3, #31
 8008c7a:	d403      	bmi.n	8008c84 <__lo0bits+0x50>
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	f100 0001 	add.w	r0, r0, #1
 8008c82:	d005      	beq.n	8008c90 <__lo0bits+0x5c>
 8008c84:	600b      	str	r3, [r1, #0]
 8008c86:	4770      	bx	lr
 8008c88:	4610      	mov	r0, r2
 8008c8a:	e7e8      	b.n	8008c5e <__lo0bits+0x2a>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4770      	bx	lr
 8008c90:	2020      	movs	r0, #32
 8008c92:	4770      	bx	lr

08008c94 <__i2b>:
 8008c94:	b510      	push	{r4, lr}
 8008c96:	460c      	mov	r4, r1
 8008c98:	2101      	movs	r1, #1
 8008c9a:	f7ff feff 	bl	8008a9c <_Balloc>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	b928      	cbnz	r0, 8008cae <__i2b+0x1a>
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <__i2b+0x24>)
 8008ca4:	4805      	ldr	r0, [pc, #20]	; (8008cbc <__i2b+0x28>)
 8008ca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008caa:	f000 fc9b 	bl	80095e4 <__assert_func>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	6144      	str	r4, [r0, #20]
 8008cb2:	6103      	str	r3, [r0, #16]
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	bf00      	nop
 8008cb8:	0800a5eb 	.word	0x0800a5eb
 8008cbc:	0800a5fc 	.word	0x0800a5fc

08008cc0 <__multiply>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	690a      	ldr	r2, [r1, #16]
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	bfb8      	it	lt
 8008cce:	460b      	movlt	r3, r1
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	bfbc      	itt	lt
 8008cd4:	4625      	movlt	r5, r4
 8008cd6:	461c      	movlt	r4, r3
 8008cd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008cdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ce0:	68ab      	ldr	r3, [r5, #8]
 8008ce2:	6869      	ldr	r1, [r5, #4]
 8008ce4:	eb0a 0709 	add.w	r7, sl, r9
 8008ce8:	42bb      	cmp	r3, r7
 8008cea:	b085      	sub	sp, #20
 8008cec:	bfb8      	it	lt
 8008cee:	3101      	addlt	r1, #1
 8008cf0:	f7ff fed4 	bl	8008a9c <_Balloc>
 8008cf4:	b930      	cbnz	r0, 8008d04 <__multiply+0x44>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <__multiply+0x144>)
 8008cfa:	4843      	ldr	r0, [pc, #268]	; (8008e08 <__multiply+0x148>)
 8008cfc:	f240 115d 	movw	r1, #349	; 0x15d
 8008d00:	f000 fc70 	bl	80095e4 <__assert_func>
 8008d04:	f100 0614 	add.w	r6, r0, #20
 8008d08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d0c:	4633      	mov	r3, r6
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4543      	cmp	r3, r8
 8008d12:	d31e      	bcc.n	8008d52 <__multiply+0x92>
 8008d14:	f105 0c14 	add.w	ip, r5, #20
 8008d18:	f104 0314 	add.w	r3, r4, #20
 8008d1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d24:	9202      	str	r2, [sp, #8]
 8008d26:	ebac 0205 	sub.w	r2, ip, r5
 8008d2a:	3a15      	subs	r2, #21
 8008d2c:	f022 0203 	bic.w	r2, r2, #3
 8008d30:	3204      	adds	r2, #4
 8008d32:	f105 0115 	add.w	r1, r5, #21
 8008d36:	458c      	cmp	ip, r1
 8008d38:	bf38      	it	cc
 8008d3a:	2204      	movcc	r2, #4
 8008d3c:	9201      	str	r2, [sp, #4]
 8008d3e:	9a02      	ldr	r2, [sp, #8]
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d808      	bhi.n	8008d58 <__multiply+0x98>
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	dc55      	bgt.n	8008df6 <__multiply+0x136>
 8008d4a:	6107      	str	r7, [r0, #16]
 8008d4c:	b005      	add	sp, #20
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	f843 2b04 	str.w	r2, [r3], #4
 8008d56:	e7db      	b.n	8008d10 <__multiply+0x50>
 8008d58:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d5c:	f1ba 0f00 	cmp.w	sl, #0
 8008d60:	d020      	beq.n	8008da4 <__multiply+0xe4>
 8008d62:	f105 0e14 	add.w	lr, r5, #20
 8008d66:	46b1      	mov	r9, r6
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d6e:	f8d9 b000 	ldr.w	fp, [r9]
 8008d72:	b2a1      	uxth	r1, r4
 8008d74:	fa1f fb8b 	uxth.w	fp, fp
 8008d78:	fb0a b101 	mla	r1, sl, r1, fp
 8008d7c:	4411      	add	r1, r2
 8008d7e:	f8d9 2000 	ldr.w	r2, [r9]
 8008d82:	0c24      	lsrs	r4, r4, #16
 8008d84:	0c12      	lsrs	r2, r2, #16
 8008d86:	fb0a 2404 	mla	r4, sl, r4, r2
 8008d8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008d8e:	b289      	uxth	r1, r1
 8008d90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d94:	45f4      	cmp	ip, lr
 8008d96:	f849 1b04 	str.w	r1, [r9], #4
 8008d9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008d9e:	d8e4      	bhi.n	8008d6a <__multiply+0xaa>
 8008da0:	9901      	ldr	r1, [sp, #4]
 8008da2:	5072      	str	r2, [r6, r1]
 8008da4:	9a03      	ldr	r2, [sp, #12]
 8008da6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008daa:	3304      	adds	r3, #4
 8008dac:	f1b9 0f00 	cmp.w	r9, #0
 8008db0:	d01f      	beq.n	8008df2 <__multiply+0x132>
 8008db2:	6834      	ldr	r4, [r6, #0]
 8008db4:	f105 0114 	add.w	r1, r5, #20
 8008db8:	46b6      	mov	lr, r6
 8008dba:	f04f 0a00 	mov.w	sl, #0
 8008dbe:	880a      	ldrh	r2, [r1, #0]
 8008dc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008dc4:	fb09 b202 	mla	r2, r9, r2, fp
 8008dc8:	4492      	add	sl, r2
 8008dca:	b2a4      	uxth	r4, r4
 8008dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008dd0:	f84e 4b04 	str.w	r4, [lr], #4
 8008dd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008dd8:	f8be 2000 	ldrh.w	r2, [lr]
 8008ddc:	0c24      	lsrs	r4, r4, #16
 8008dde:	fb09 2404 	mla	r4, r9, r4, r2
 8008de2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008de6:	458c      	cmp	ip, r1
 8008de8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dec:	d8e7      	bhi.n	8008dbe <__multiply+0xfe>
 8008dee:	9a01      	ldr	r2, [sp, #4]
 8008df0:	50b4      	str	r4, [r6, r2]
 8008df2:	3604      	adds	r6, #4
 8008df4:	e7a3      	b.n	8008d3e <__multiply+0x7e>
 8008df6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1a5      	bne.n	8008d4a <__multiply+0x8a>
 8008dfe:	3f01      	subs	r7, #1
 8008e00:	e7a1      	b.n	8008d46 <__multiply+0x86>
 8008e02:	bf00      	nop
 8008e04:	0800a5eb 	.word	0x0800a5eb
 8008e08:	0800a5fc 	.word	0x0800a5fc

08008e0c <__pow5mult>:
 8008e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4615      	mov	r5, r2
 8008e12:	f012 0203 	ands.w	r2, r2, #3
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	d007      	beq.n	8008e2c <__pow5mult+0x20>
 8008e1c:	4c25      	ldr	r4, [pc, #148]	; (8008eb4 <__pow5mult+0xa8>)
 8008e1e:	3a01      	subs	r2, #1
 8008e20:	2300      	movs	r3, #0
 8008e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e26:	f7ff fe9b 	bl	8008b60 <__multadd>
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	10ad      	asrs	r5, r5, #2
 8008e2e:	d03d      	beq.n	8008eac <__pow5mult+0xa0>
 8008e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e32:	b97c      	cbnz	r4, 8008e54 <__pow5mult+0x48>
 8008e34:	2010      	movs	r0, #16
 8008e36:	f7ff fe1b 	bl	8008a70 <malloc>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8008e3e:	b928      	cbnz	r0, 8008e4c <__pow5mult+0x40>
 8008e40:	4b1d      	ldr	r3, [pc, #116]	; (8008eb8 <__pow5mult+0xac>)
 8008e42:	481e      	ldr	r0, [pc, #120]	; (8008ebc <__pow5mult+0xb0>)
 8008e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e48:	f000 fbcc 	bl	80095e4 <__assert_func>
 8008e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e50:	6004      	str	r4, [r0, #0]
 8008e52:	60c4      	str	r4, [r0, #12]
 8008e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e5c:	b94c      	cbnz	r4, 8008e72 <__pow5mult+0x66>
 8008e5e:	f240 2171 	movw	r1, #625	; 0x271
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff ff16 	bl	8008c94 <__i2b>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e6e:	4604      	mov	r4, r0
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	f04f 0900 	mov.w	r9, #0
 8008e76:	07eb      	lsls	r3, r5, #31
 8008e78:	d50a      	bpl.n	8008e90 <__pow5mult+0x84>
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7ff ff1e 	bl	8008cc0 <__multiply>
 8008e84:	4639      	mov	r1, r7
 8008e86:	4680      	mov	r8, r0
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff fe47 	bl	8008b1c <_Bfree>
 8008e8e:	4647      	mov	r7, r8
 8008e90:	106d      	asrs	r5, r5, #1
 8008e92:	d00b      	beq.n	8008eac <__pow5mult+0xa0>
 8008e94:	6820      	ldr	r0, [r4, #0]
 8008e96:	b938      	cbnz	r0, 8008ea8 <__pow5mult+0x9c>
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff ff0f 	bl	8008cc0 <__multiply>
 8008ea2:	6020      	str	r0, [r4, #0]
 8008ea4:	f8c0 9000 	str.w	r9, [r0]
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	e7e4      	b.n	8008e76 <__pow5mult+0x6a>
 8008eac:	4638      	mov	r0, r7
 8008eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0800a750 	.word	0x0800a750
 8008eb8:	0800a575 	.word	0x0800a575
 8008ebc:	0800a5fc 	.word	0x0800a5fc

08008ec0 <__lshift>:
 8008ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	6849      	ldr	r1, [r1, #4]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	4691      	mov	r9, r2
 8008ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ed8:	f108 0601 	add.w	r6, r8, #1
 8008edc:	42b3      	cmp	r3, r6
 8008ede:	db0b      	blt.n	8008ef8 <__lshift+0x38>
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff fddb 	bl	8008a9c <_Balloc>
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	b948      	cbnz	r0, 8008efe <__lshift+0x3e>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b28      	ldr	r3, [pc, #160]	; (8008f90 <__lshift+0xd0>)
 8008eee:	4829      	ldr	r0, [pc, #164]	; (8008f94 <__lshift+0xd4>)
 8008ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ef4:	f000 fb76 	bl	80095e4 <__assert_func>
 8008ef8:	3101      	adds	r1, #1
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	e7ee      	b.n	8008edc <__lshift+0x1c>
 8008efe:	2300      	movs	r3, #0
 8008f00:	f100 0114 	add.w	r1, r0, #20
 8008f04:	f100 0210 	add.w	r2, r0, #16
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4553      	cmp	r3, sl
 8008f0c:	db33      	blt.n	8008f76 <__lshift+0xb6>
 8008f0e:	6920      	ldr	r0, [r4, #16]
 8008f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f14:	f104 0314 	add.w	r3, r4, #20
 8008f18:	f019 091f 	ands.w	r9, r9, #31
 8008f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f24:	d02b      	beq.n	8008f7e <__lshift+0xbe>
 8008f26:	f1c9 0e20 	rsb	lr, r9, #32
 8008f2a:	468a      	mov	sl, r1
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	fa00 f009 	lsl.w	r0, r0, r9
 8008f34:	4302      	orrs	r2, r0
 8008f36:	f84a 2b04 	str.w	r2, [sl], #4
 8008f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3e:	459c      	cmp	ip, r3
 8008f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f44:	d8f3      	bhi.n	8008f2e <__lshift+0x6e>
 8008f46:	ebac 0304 	sub.w	r3, ip, r4
 8008f4a:	3b15      	subs	r3, #21
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	3304      	adds	r3, #4
 8008f52:	f104 0015 	add.w	r0, r4, #21
 8008f56:	4584      	cmp	ip, r0
 8008f58:	bf38      	it	cc
 8008f5a:	2304      	movcc	r3, #4
 8008f5c:	50ca      	str	r2, [r1, r3]
 8008f5e:	b10a      	cbz	r2, 8008f64 <__lshift+0xa4>
 8008f60:	f108 0602 	add.w	r6, r8, #2
 8008f64:	3e01      	subs	r6, #1
 8008f66:	4638      	mov	r0, r7
 8008f68:	612e      	str	r6, [r5, #16]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f7ff fdd6 	bl	8008b1c <_Bfree>
 8008f70:	4628      	mov	r0, r5
 8008f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	e7c5      	b.n	8008f0a <__lshift+0x4a>
 8008f7e:	3904      	subs	r1, #4
 8008f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f88:	459c      	cmp	ip, r3
 8008f8a:	d8f9      	bhi.n	8008f80 <__lshift+0xc0>
 8008f8c:	e7ea      	b.n	8008f64 <__lshift+0xa4>
 8008f8e:	bf00      	nop
 8008f90:	0800a5eb 	.word	0x0800a5eb
 8008f94:	0800a5fc 	.word	0x0800a5fc

08008f98 <__mcmp>:
 8008f98:	b530      	push	{r4, r5, lr}
 8008f9a:	6902      	ldr	r2, [r0, #16]
 8008f9c:	690c      	ldr	r4, [r1, #16]
 8008f9e:	1b12      	subs	r2, r2, r4
 8008fa0:	d10e      	bne.n	8008fc0 <__mcmp+0x28>
 8008fa2:	f100 0314 	add.w	r3, r0, #20
 8008fa6:	3114      	adds	r1, #20
 8008fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	d003      	beq.n	8008fc4 <__mcmp+0x2c>
 8008fbc:	d305      	bcc.n	8008fca <__mcmp+0x32>
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	bd30      	pop	{r4, r5, pc}
 8008fc4:	4283      	cmp	r3, r0
 8008fc6:	d3f3      	bcc.n	8008fb0 <__mcmp+0x18>
 8008fc8:	e7fa      	b.n	8008fc0 <__mcmp+0x28>
 8008fca:	f04f 32ff 	mov.w	r2, #4294967295
 8008fce:	e7f7      	b.n	8008fc0 <__mcmp+0x28>

08008fd0 <__mdiff>:
 8008fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4617      	mov	r7, r2
 8008fde:	f7ff ffdb 	bl	8008f98 <__mcmp>
 8008fe2:	1e05      	subs	r5, r0, #0
 8008fe4:	d110      	bne.n	8009008 <__mdiff+0x38>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff fd57 	bl	8008a9c <_Balloc>
 8008fee:	b930      	cbnz	r0, 8008ffe <__mdiff+0x2e>
 8008ff0:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <__mdiff+0x108>)
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	f240 2132 	movw	r1, #562	; 0x232
 8008ff8:	4838      	ldr	r0, [pc, #224]	; (80090dc <__mdiff+0x10c>)
 8008ffa:	f000 faf3 	bl	80095e4 <__assert_func>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009008:	bfa4      	itt	ge
 800900a:	463b      	movge	r3, r7
 800900c:	4627      	movge	r7, r4
 800900e:	4630      	mov	r0, r6
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	bfa6      	itte	ge
 8009014:	461c      	movge	r4, r3
 8009016:	2500      	movge	r5, #0
 8009018:	2501      	movlt	r5, #1
 800901a:	f7ff fd3f 	bl	8008a9c <_Balloc>
 800901e:	b920      	cbnz	r0, 800902a <__mdiff+0x5a>
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <__mdiff+0x108>)
 8009022:	4602      	mov	r2, r0
 8009024:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009028:	e7e6      	b.n	8008ff8 <__mdiff+0x28>
 800902a:	693e      	ldr	r6, [r7, #16]
 800902c:	60c5      	str	r5, [r0, #12]
 800902e:	6925      	ldr	r5, [r4, #16]
 8009030:	f107 0114 	add.w	r1, r7, #20
 8009034:	f104 0914 	add.w	r9, r4, #20
 8009038:	f100 0e14 	add.w	lr, r0, #20
 800903c:	f107 0210 	add.w	r2, r7, #16
 8009040:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009044:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009048:	46f2      	mov	sl, lr
 800904a:	2700      	movs	r7, #0
 800904c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009054:	fa1f f883 	uxth.w	r8, r3
 8009058:	fa17 f78b 	uxtah	r7, r7, fp
 800905c:	0c1b      	lsrs	r3, r3, #16
 800905e:	eba7 0808 	sub.w	r8, r7, r8
 8009062:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009066:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800906a:	fa1f f888 	uxth.w	r8, r8
 800906e:	141f      	asrs	r7, r3, #16
 8009070:	454d      	cmp	r5, r9
 8009072:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009076:	f84a 3b04 	str.w	r3, [sl], #4
 800907a:	d8e7      	bhi.n	800904c <__mdiff+0x7c>
 800907c:	1b2b      	subs	r3, r5, r4
 800907e:	3b15      	subs	r3, #21
 8009080:	f023 0303 	bic.w	r3, r3, #3
 8009084:	3304      	adds	r3, #4
 8009086:	3415      	adds	r4, #21
 8009088:	42a5      	cmp	r5, r4
 800908a:	bf38      	it	cc
 800908c:	2304      	movcc	r3, #4
 800908e:	4419      	add	r1, r3
 8009090:	4473      	add	r3, lr
 8009092:	469e      	mov	lr, r3
 8009094:	460d      	mov	r5, r1
 8009096:	4565      	cmp	r5, ip
 8009098:	d30e      	bcc.n	80090b8 <__mdiff+0xe8>
 800909a:	f10c 0203 	add.w	r2, ip, #3
 800909e:	1a52      	subs	r2, r2, r1
 80090a0:	f022 0203 	bic.w	r2, r2, #3
 80090a4:	3903      	subs	r1, #3
 80090a6:	458c      	cmp	ip, r1
 80090a8:	bf38      	it	cc
 80090aa:	2200      	movcc	r2, #0
 80090ac:	441a      	add	r2, r3
 80090ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090b2:	b17b      	cbz	r3, 80090d4 <__mdiff+0x104>
 80090b4:	6106      	str	r6, [r0, #16]
 80090b6:	e7a5      	b.n	8009004 <__mdiff+0x34>
 80090b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80090bc:	fa17 f488 	uxtah	r4, r7, r8
 80090c0:	1422      	asrs	r2, r4, #16
 80090c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80090c6:	b2a4      	uxth	r4, r4
 80090c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090cc:	f84e 4b04 	str.w	r4, [lr], #4
 80090d0:	1417      	asrs	r7, r2, #16
 80090d2:	e7e0      	b.n	8009096 <__mdiff+0xc6>
 80090d4:	3e01      	subs	r6, #1
 80090d6:	e7ea      	b.n	80090ae <__mdiff+0xde>
 80090d8:	0800a5eb 	.word	0x0800a5eb
 80090dc:	0800a5fc 	.word	0x0800a5fc

080090e0 <__d2b>:
 80090e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090e4:	4689      	mov	r9, r1
 80090e6:	2101      	movs	r1, #1
 80090e8:	ec57 6b10 	vmov	r6, r7, d0
 80090ec:	4690      	mov	r8, r2
 80090ee:	f7ff fcd5 	bl	8008a9c <_Balloc>
 80090f2:	4604      	mov	r4, r0
 80090f4:	b930      	cbnz	r0, 8009104 <__d2b+0x24>
 80090f6:	4602      	mov	r2, r0
 80090f8:	4b25      	ldr	r3, [pc, #148]	; (8009190 <__d2b+0xb0>)
 80090fa:	4826      	ldr	r0, [pc, #152]	; (8009194 <__d2b+0xb4>)
 80090fc:	f240 310a 	movw	r1, #778	; 0x30a
 8009100:	f000 fa70 	bl	80095e4 <__assert_func>
 8009104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800910c:	bb35      	cbnz	r5, 800915c <__d2b+0x7c>
 800910e:	2e00      	cmp	r6, #0
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	d028      	beq.n	8009166 <__d2b+0x86>
 8009114:	4668      	mov	r0, sp
 8009116:	9600      	str	r6, [sp, #0]
 8009118:	f7ff fd8c 	bl	8008c34 <__lo0bits>
 800911c:	9900      	ldr	r1, [sp, #0]
 800911e:	b300      	cbz	r0, 8009162 <__d2b+0x82>
 8009120:	9a01      	ldr	r2, [sp, #4]
 8009122:	f1c0 0320 	rsb	r3, r0, #32
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	430b      	orrs	r3, r1
 800912c:	40c2      	lsrs	r2, r0
 800912e:	6163      	str	r3, [r4, #20]
 8009130:	9201      	str	r2, [sp, #4]
 8009132:	9b01      	ldr	r3, [sp, #4]
 8009134:	61a3      	str	r3, [r4, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	bf14      	ite	ne
 800913a:	2202      	movne	r2, #2
 800913c:	2201      	moveq	r2, #1
 800913e:	6122      	str	r2, [r4, #16]
 8009140:	b1d5      	cbz	r5, 8009178 <__d2b+0x98>
 8009142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009146:	4405      	add	r5, r0
 8009148:	f8c9 5000 	str.w	r5, [r9]
 800914c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009150:	f8c8 0000 	str.w	r0, [r8]
 8009154:	4620      	mov	r0, r4
 8009156:	b003      	add	sp, #12
 8009158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800915c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009160:	e7d5      	b.n	800910e <__d2b+0x2e>
 8009162:	6161      	str	r1, [r4, #20]
 8009164:	e7e5      	b.n	8009132 <__d2b+0x52>
 8009166:	a801      	add	r0, sp, #4
 8009168:	f7ff fd64 	bl	8008c34 <__lo0bits>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	6163      	str	r3, [r4, #20]
 8009170:	2201      	movs	r2, #1
 8009172:	6122      	str	r2, [r4, #16]
 8009174:	3020      	adds	r0, #32
 8009176:	e7e3      	b.n	8009140 <__d2b+0x60>
 8009178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800917c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009180:	f8c9 0000 	str.w	r0, [r9]
 8009184:	6918      	ldr	r0, [r3, #16]
 8009186:	f7ff fd35 	bl	8008bf4 <__hi0bits>
 800918a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800918e:	e7df      	b.n	8009150 <__d2b+0x70>
 8009190:	0800a5eb 	.word	0x0800a5eb
 8009194:	0800a5fc 	.word	0x0800a5fc

08009198 <_calloc_r>:
 8009198:	b513      	push	{r0, r1, r4, lr}
 800919a:	434a      	muls	r2, r1
 800919c:	4611      	mov	r1, r2
 800919e:	9201      	str	r2, [sp, #4]
 80091a0:	f000 f85a 	bl	8009258 <_malloc_r>
 80091a4:	4604      	mov	r4, r0
 80091a6:	b118      	cbz	r0, 80091b0 <_calloc_r+0x18>
 80091a8:	9a01      	ldr	r2, [sp, #4]
 80091aa:	2100      	movs	r1, #0
 80091ac:	f7fe f936 	bl	800741c <memset>
 80091b0:	4620      	mov	r0, r4
 80091b2:	b002      	add	sp, #8
 80091b4:	bd10      	pop	{r4, pc}
	...

080091b8 <_free_r>:
 80091b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ba:	2900      	cmp	r1, #0
 80091bc:	d048      	beq.n	8009250 <_free_r+0x98>
 80091be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c2:	9001      	str	r0, [sp, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f1a1 0404 	sub.w	r4, r1, #4
 80091ca:	bfb8      	it	lt
 80091cc:	18e4      	addlt	r4, r4, r3
 80091ce:	f000 fa65 	bl	800969c <__malloc_lock>
 80091d2:	4a20      	ldr	r2, [pc, #128]	; (8009254 <_free_r+0x9c>)
 80091d4:	9801      	ldr	r0, [sp, #4]
 80091d6:	6813      	ldr	r3, [r2, #0]
 80091d8:	4615      	mov	r5, r2
 80091da:	b933      	cbnz	r3, 80091ea <_free_r+0x32>
 80091dc:	6063      	str	r3, [r4, #4]
 80091de:	6014      	str	r4, [r2, #0]
 80091e0:	b003      	add	sp, #12
 80091e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e6:	f000 ba5f 	b.w	80096a8 <__malloc_unlock>
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	d90b      	bls.n	8009206 <_free_r+0x4e>
 80091ee:	6821      	ldr	r1, [r4, #0]
 80091f0:	1862      	adds	r2, r4, r1
 80091f2:	4293      	cmp	r3, r2
 80091f4:	bf04      	itt	eq
 80091f6:	681a      	ldreq	r2, [r3, #0]
 80091f8:	685b      	ldreq	r3, [r3, #4]
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	bf04      	itt	eq
 80091fe:	1852      	addeq	r2, r2, r1
 8009200:	6022      	streq	r2, [r4, #0]
 8009202:	602c      	str	r4, [r5, #0]
 8009204:	e7ec      	b.n	80091e0 <_free_r+0x28>
 8009206:	461a      	mov	r2, r3
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	b10b      	cbz	r3, 8009210 <_free_r+0x58>
 800920c:	42a3      	cmp	r3, r4
 800920e:	d9fa      	bls.n	8009206 <_free_r+0x4e>
 8009210:	6811      	ldr	r1, [r2, #0]
 8009212:	1855      	adds	r5, r2, r1
 8009214:	42a5      	cmp	r5, r4
 8009216:	d10b      	bne.n	8009230 <_free_r+0x78>
 8009218:	6824      	ldr	r4, [r4, #0]
 800921a:	4421      	add	r1, r4
 800921c:	1854      	adds	r4, r2, r1
 800921e:	42a3      	cmp	r3, r4
 8009220:	6011      	str	r1, [r2, #0]
 8009222:	d1dd      	bne.n	80091e0 <_free_r+0x28>
 8009224:	681c      	ldr	r4, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	6053      	str	r3, [r2, #4]
 800922a:	4421      	add	r1, r4
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	e7d7      	b.n	80091e0 <_free_r+0x28>
 8009230:	d902      	bls.n	8009238 <_free_r+0x80>
 8009232:	230c      	movs	r3, #12
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	e7d3      	b.n	80091e0 <_free_r+0x28>
 8009238:	6825      	ldr	r5, [r4, #0]
 800923a:	1961      	adds	r1, r4, r5
 800923c:	428b      	cmp	r3, r1
 800923e:	bf04      	itt	eq
 8009240:	6819      	ldreq	r1, [r3, #0]
 8009242:	685b      	ldreq	r3, [r3, #4]
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	bf04      	itt	eq
 8009248:	1949      	addeq	r1, r1, r5
 800924a:	6021      	streq	r1, [r4, #0]
 800924c:	6054      	str	r4, [r2, #4]
 800924e:	e7c7      	b.n	80091e0 <_free_r+0x28>
 8009250:	b003      	add	sp, #12
 8009252:	bd30      	pop	{r4, r5, pc}
 8009254:	2000034c 	.word	0x2000034c

08009258 <_malloc_r>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	1ccd      	adds	r5, r1, #3
 800925c:	f025 0503 	bic.w	r5, r5, #3
 8009260:	3508      	adds	r5, #8
 8009262:	2d0c      	cmp	r5, #12
 8009264:	bf38      	it	cc
 8009266:	250c      	movcc	r5, #12
 8009268:	2d00      	cmp	r5, #0
 800926a:	4606      	mov	r6, r0
 800926c:	db01      	blt.n	8009272 <_malloc_r+0x1a>
 800926e:	42a9      	cmp	r1, r5
 8009270:	d903      	bls.n	800927a <_malloc_r+0x22>
 8009272:	230c      	movs	r3, #12
 8009274:	6033      	str	r3, [r6, #0]
 8009276:	2000      	movs	r0, #0
 8009278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927a:	f000 fa0f 	bl	800969c <__malloc_lock>
 800927e:	4921      	ldr	r1, [pc, #132]	; (8009304 <_malloc_r+0xac>)
 8009280:	680a      	ldr	r2, [r1, #0]
 8009282:	4614      	mov	r4, r2
 8009284:	b99c      	cbnz	r4, 80092ae <_malloc_r+0x56>
 8009286:	4f20      	ldr	r7, [pc, #128]	; (8009308 <_malloc_r+0xb0>)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	b923      	cbnz	r3, 8009296 <_malloc_r+0x3e>
 800928c:	4621      	mov	r1, r4
 800928e:	4630      	mov	r0, r6
 8009290:	f000 f998 	bl	80095c4 <_sbrk_r>
 8009294:	6038      	str	r0, [r7, #0]
 8009296:	4629      	mov	r1, r5
 8009298:	4630      	mov	r0, r6
 800929a:	f000 f993 	bl	80095c4 <_sbrk_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d123      	bne.n	80092ea <_malloc_r+0x92>
 80092a2:	230c      	movs	r3, #12
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	4630      	mov	r0, r6
 80092a8:	f000 f9fe 	bl	80096a8 <__malloc_unlock>
 80092ac:	e7e3      	b.n	8009276 <_malloc_r+0x1e>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	1b5b      	subs	r3, r3, r5
 80092b2:	d417      	bmi.n	80092e4 <_malloc_r+0x8c>
 80092b4:	2b0b      	cmp	r3, #11
 80092b6:	d903      	bls.n	80092c0 <_malloc_r+0x68>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	441c      	add	r4, r3
 80092bc:	6025      	str	r5, [r4, #0]
 80092be:	e004      	b.n	80092ca <_malloc_r+0x72>
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	42a2      	cmp	r2, r4
 80092c4:	bf0c      	ite	eq
 80092c6:	600b      	streq	r3, [r1, #0]
 80092c8:	6053      	strne	r3, [r2, #4]
 80092ca:	4630      	mov	r0, r6
 80092cc:	f000 f9ec 	bl	80096a8 <__malloc_unlock>
 80092d0:	f104 000b 	add.w	r0, r4, #11
 80092d4:	1d23      	adds	r3, r4, #4
 80092d6:	f020 0007 	bic.w	r0, r0, #7
 80092da:	1ac2      	subs	r2, r0, r3
 80092dc:	d0cc      	beq.n	8009278 <_malloc_r+0x20>
 80092de:	1a1b      	subs	r3, r3, r0
 80092e0:	50a3      	str	r3, [r4, r2]
 80092e2:	e7c9      	b.n	8009278 <_malloc_r+0x20>
 80092e4:	4622      	mov	r2, r4
 80092e6:	6864      	ldr	r4, [r4, #4]
 80092e8:	e7cc      	b.n	8009284 <_malloc_r+0x2c>
 80092ea:	1cc4      	adds	r4, r0, #3
 80092ec:	f024 0403 	bic.w	r4, r4, #3
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d0e3      	beq.n	80092bc <_malloc_r+0x64>
 80092f4:	1a21      	subs	r1, r4, r0
 80092f6:	4630      	mov	r0, r6
 80092f8:	f000 f964 	bl	80095c4 <_sbrk_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d1dd      	bne.n	80092bc <_malloc_r+0x64>
 8009300:	e7cf      	b.n	80092a2 <_malloc_r+0x4a>
 8009302:	bf00      	nop
 8009304:	2000034c 	.word	0x2000034c
 8009308:	20000350 	.word	0x20000350

0800930c <__ssputs_r>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	688e      	ldr	r6, [r1, #8]
 8009312:	429e      	cmp	r6, r3
 8009314:	4682      	mov	sl, r0
 8009316:	460c      	mov	r4, r1
 8009318:	4690      	mov	r8, r2
 800931a:	461f      	mov	r7, r3
 800931c:	d838      	bhi.n	8009390 <__ssputs_r+0x84>
 800931e:	898a      	ldrh	r2, [r1, #12]
 8009320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009324:	d032      	beq.n	800938c <__ssputs_r+0x80>
 8009326:	6825      	ldr	r5, [r4, #0]
 8009328:	6909      	ldr	r1, [r1, #16]
 800932a:	eba5 0901 	sub.w	r9, r5, r1
 800932e:	6965      	ldr	r5, [r4, #20]
 8009330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009338:	3301      	adds	r3, #1
 800933a:	444b      	add	r3, r9
 800933c:	106d      	asrs	r5, r5, #1
 800933e:	429d      	cmp	r5, r3
 8009340:	bf38      	it	cc
 8009342:	461d      	movcc	r5, r3
 8009344:	0553      	lsls	r3, r2, #21
 8009346:	d531      	bpl.n	80093ac <__ssputs_r+0xa0>
 8009348:	4629      	mov	r1, r5
 800934a:	f7ff ff85 	bl	8009258 <_malloc_r>
 800934e:	4606      	mov	r6, r0
 8009350:	b950      	cbnz	r0, 8009368 <__ssputs_r+0x5c>
 8009352:	230c      	movs	r3, #12
 8009354:	f8ca 3000 	str.w	r3, [sl]
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	6921      	ldr	r1, [r4, #16]
 800936a:	464a      	mov	r2, r9
 800936c:	f7ff fb88 	bl	8008a80 <memcpy>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937a:	81a3      	strh	r3, [r4, #12]
 800937c:	6126      	str	r6, [r4, #16]
 800937e:	6165      	str	r5, [r4, #20]
 8009380:	444e      	add	r6, r9
 8009382:	eba5 0509 	sub.w	r5, r5, r9
 8009386:	6026      	str	r6, [r4, #0]
 8009388:	60a5      	str	r5, [r4, #8]
 800938a:	463e      	mov	r6, r7
 800938c:	42be      	cmp	r6, r7
 800938e:	d900      	bls.n	8009392 <__ssputs_r+0x86>
 8009390:	463e      	mov	r6, r7
 8009392:	4632      	mov	r2, r6
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	4641      	mov	r1, r8
 8009398:	f000 f966 	bl	8009668 <memmove>
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	1b9b      	subs	r3, r3, r6
 80093a2:	4432      	add	r2, r6
 80093a4:	60a3      	str	r3, [r4, #8]
 80093a6:	6022      	str	r2, [r4, #0]
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7db      	b.n	8009364 <__ssputs_r+0x58>
 80093ac:	462a      	mov	r2, r5
 80093ae:	f000 f981 	bl	80096b4 <_realloc_r>
 80093b2:	4606      	mov	r6, r0
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1e1      	bne.n	800937c <__ssputs_r+0x70>
 80093b8:	6921      	ldr	r1, [r4, #16]
 80093ba:	4650      	mov	r0, sl
 80093bc:	f7ff fefc 	bl	80091b8 <_free_r>
 80093c0:	e7c7      	b.n	8009352 <__ssputs_r+0x46>
	...

080093c4 <_svfiprintf_r>:
 80093c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	4698      	mov	r8, r3
 80093ca:	898b      	ldrh	r3, [r1, #12]
 80093cc:	061b      	lsls	r3, r3, #24
 80093ce:	b09d      	sub	sp, #116	; 0x74
 80093d0:	4607      	mov	r7, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	d50e      	bpl.n	80093f6 <_svfiprintf_r+0x32>
 80093d8:	690b      	ldr	r3, [r1, #16]
 80093da:	b963      	cbnz	r3, 80093f6 <_svfiprintf_r+0x32>
 80093dc:	2140      	movs	r1, #64	; 0x40
 80093de:	f7ff ff3b 	bl	8009258 <_malloc_r>
 80093e2:	6028      	str	r0, [r5, #0]
 80093e4:	6128      	str	r0, [r5, #16]
 80093e6:	b920      	cbnz	r0, 80093f2 <_svfiprintf_r+0x2e>
 80093e8:	230c      	movs	r3, #12
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	e0d1      	b.n	8009596 <_svfiprintf_r+0x1d2>
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	616b      	str	r3, [r5, #20]
 80093f6:	2300      	movs	r3, #0
 80093f8:	9309      	str	r3, [sp, #36]	; 0x24
 80093fa:	2320      	movs	r3, #32
 80093fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009400:	f8cd 800c 	str.w	r8, [sp, #12]
 8009404:	2330      	movs	r3, #48	; 0x30
 8009406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095b0 <_svfiprintf_r+0x1ec>
 800940a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800940e:	f04f 0901 	mov.w	r9, #1
 8009412:	4623      	mov	r3, r4
 8009414:	469a      	mov	sl, r3
 8009416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941a:	b10a      	cbz	r2, 8009420 <_svfiprintf_r+0x5c>
 800941c:	2a25      	cmp	r2, #37	; 0x25
 800941e:	d1f9      	bne.n	8009414 <_svfiprintf_r+0x50>
 8009420:	ebba 0b04 	subs.w	fp, sl, r4
 8009424:	d00b      	beq.n	800943e <_svfiprintf_r+0x7a>
 8009426:	465b      	mov	r3, fp
 8009428:	4622      	mov	r2, r4
 800942a:	4629      	mov	r1, r5
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ff6d 	bl	800930c <__ssputs_r>
 8009432:	3001      	adds	r0, #1
 8009434:	f000 80aa 	beq.w	800958c <_svfiprintf_r+0x1c8>
 8009438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943a:	445a      	add	r2, fp
 800943c:	9209      	str	r2, [sp, #36]	; 0x24
 800943e:	f89a 3000 	ldrb.w	r3, [sl]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 80a2 	beq.w	800958c <_svfiprintf_r+0x1c8>
 8009448:	2300      	movs	r3, #0
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009452:	f10a 0a01 	add.w	sl, sl, #1
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	9307      	str	r3, [sp, #28]
 800945a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800945e:	931a      	str	r3, [sp, #104]	; 0x68
 8009460:	4654      	mov	r4, sl
 8009462:	2205      	movs	r2, #5
 8009464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009468:	4851      	ldr	r0, [pc, #324]	; (80095b0 <_svfiprintf_r+0x1ec>)
 800946a:	f7f6 feb9 	bl	80001e0 <memchr>
 800946e:	9a04      	ldr	r2, [sp, #16]
 8009470:	b9d8      	cbnz	r0, 80094aa <_svfiprintf_r+0xe6>
 8009472:	06d0      	lsls	r0, r2, #27
 8009474:	bf44      	itt	mi
 8009476:	2320      	movmi	r3, #32
 8009478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947c:	0711      	lsls	r1, r2, #28
 800947e:	bf44      	itt	mi
 8009480:	232b      	movmi	r3, #43	; 0x2b
 8009482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009486:	f89a 3000 	ldrb.w	r3, [sl]
 800948a:	2b2a      	cmp	r3, #42	; 0x2a
 800948c:	d015      	beq.n	80094ba <_svfiprintf_r+0xf6>
 800948e:	9a07      	ldr	r2, [sp, #28]
 8009490:	4654      	mov	r4, sl
 8009492:	2000      	movs	r0, #0
 8009494:	f04f 0c0a 	mov.w	ip, #10
 8009498:	4621      	mov	r1, r4
 800949a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800949e:	3b30      	subs	r3, #48	; 0x30
 80094a0:	2b09      	cmp	r3, #9
 80094a2:	d94e      	bls.n	8009542 <_svfiprintf_r+0x17e>
 80094a4:	b1b0      	cbz	r0, 80094d4 <_svfiprintf_r+0x110>
 80094a6:	9207      	str	r2, [sp, #28]
 80094a8:	e014      	b.n	80094d4 <_svfiprintf_r+0x110>
 80094aa:	eba0 0308 	sub.w	r3, r0, r8
 80094ae:	fa09 f303 	lsl.w	r3, r9, r3
 80094b2:	4313      	orrs	r3, r2
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	46a2      	mov	sl, r4
 80094b8:	e7d2      	b.n	8009460 <_svfiprintf_r+0x9c>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	1d19      	adds	r1, r3, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9103      	str	r1, [sp, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	bfbb      	ittet	lt
 80094c6:	425b      	neglt	r3, r3
 80094c8:	f042 0202 	orrlt.w	r2, r2, #2
 80094cc:	9307      	strge	r3, [sp, #28]
 80094ce:	9307      	strlt	r3, [sp, #28]
 80094d0:	bfb8      	it	lt
 80094d2:	9204      	strlt	r2, [sp, #16]
 80094d4:	7823      	ldrb	r3, [r4, #0]
 80094d6:	2b2e      	cmp	r3, #46	; 0x2e
 80094d8:	d10c      	bne.n	80094f4 <_svfiprintf_r+0x130>
 80094da:	7863      	ldrb	r3, [r4, #1]
 80094dc:	2b2a      	cmp	r3, #42	; 0x2a
 80094de:	d135      	bne.n	800954c <_svfiprintf_r+0x188>
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	9203      	str	r2, [sp, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bfb8      	it	lt
 80094ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80094f0:	3402      	adds	r4, #2
 80094f2:	9305      	str	r3, [sp, #20]
 80094f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095c0 <_svfiprintf_r+0x1fc>
 80094f8:	7821      	ldrb	r1, [r4, #0]
 80094fa:	2203      	movs	r2, #3
 80094fc:	4650      	mov	r0, sl
 80094fe:	f7f6 fe6f 	bl	80001e0 <memchr>
 8009502:	b140      	cbz	r0, 8009516 <_svfiprintf_r+0x152>
 8009504:	2340      	movs	r3, #64	; 0x40
 8009506:	eba0 000a 	sub.w	r0, r0, sl
 800950a:	fa03 f000 	lsl.w	r0, r3, r0
 800950e:	9b04      	ldr	r3, [sp, #16]
 8009510:	4303      	orrs	r3, r0
 8009512:	3401      	adds	r4, #1
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951a:	4826      	ldr	r0, [pc, #152]	; (80095b4 <_svfiprintf_r+0x1f0>)
 800951c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009520:	2206      	movs	r2, #6
 8009522:	f7f6 fe5d 	bl	80001e0 <memchr>
 8009526:	2800      	cmp	r0, #0
 8009528:	d038      	beq.n	800959c <_svfiprintf_r+0x1d8>
 800952a:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <_svfiprintf_r+0x1f4>)
 800952c:	bb1b      	cbnz	r3, 8009576 <_svfiprintf_r+0x1b2>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	3307      	adds	r3, #7
 8009532:	f023 0307 	bic.w	r3, r3, #7
 8009536:	3308      	adds	r3, #8
 8009538:	9303      	str	r3, [sp, #12]
 800953a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953c:	4433      	add	r3, r6
 800953e:	9309      	str	r3, [sp, #36]	; 0x24
 8009540:	e767      	b.n	8009412 <_svfiprintf_r+0x4e>
 8009542:	fb0c 3202 	mla	r2, ip, r2, r3
 8009546:	460c      	mov	r4, r1
 8009548:	2001      	movs	r0, #1
 800954a:	e7a5      	b.n	8009498 <_svfiprintf_r+0xd4>
 800954c:	2300      	movs	r3, #0
 800954e:	3401      	adds	r4, #1
 8009550:	9305      	str	r3, [sp, #20]
 8009552:	4619      	mov	r1, r3
 8009554:	f04f 0c0a 	mov.w	ip, #10
 8009558:	4620      	mov	r0, r4
 800955a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800955e:	3a30      	subs	r2, #48	; 0x30
 8009560:	2a09      	cmp	r2, #9
 8009562:	d903      	bls.n	800956c <_svfiprintf_r+0x1a8>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0c5      	beq.n	80094f4 <_svfiprintf_r+0x130>
 8009568:	9105      	str	r1, [sp, #20]
 800956a:	e7c3      	b.n	80094f4 <_svfiprintf_r+0x130>
 800956c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009570:	4604      	mov	r4, r0
 8009572:	2301      	movs	r3, #1
 8009574:	e7f0      	b.n	8009558 <_svfiprintf_r+0x194>
 8009576:	ab03      	add	r3, sp, #12
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	462a      	mov	r2, r5
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <_svfiprintf_r+0x1f8>)
 800957e:	a904      	add	r1, sp, #16
 8009580:	4638      	mov	r0, r7
 8009582:	f7fd fff3 	bl	800756c <_printf_float>
 8009586:	1c42      	adds	r2, r0, #1
 8009588:	4606      	mov	r6, r0
 800958a:	d1d6      	bne.n	800953a <_svfiprintf_r+0x176>
 800958c:	89ab      	ldrh	r3, [r5, #12]
 800958e:	065b      	lsls	r3, r3, #25
 8009590:	f53f af2c 	bmi.w	80093ec <_svfiprintf_r+0x28>
 8009594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009596:	b01d      	add	sp, #116	; 0x74
 8009598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959c:	ab03      	add	r3, sp, #12
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	462a      	mov	r2, r5
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <_svfiprintf_r+0x1f8>)
 80095a4:	a904      	add	r1, sp, #16
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7fe fa84 	bl	8007ab4 <_printf_i>
 80095ac:	e7eb      	b.n	8009586 <_svfiprintf_r+0x1c2>
 80095ae:	bf00      	nop
 80095b0:	0800a75c 	.word	0x0800a75c
 80095b4:	0800a766 	.word	0x0800a766
 80095b8:	0800756d 	.word	0x0800756d
 80095bc:	0800930d 	.word	0x0800930d
 80095c0:	0800a762 	.word	0x0800a762

080095c4 <_sbrk_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d06      	ldr	r5, [pc, #24]	; (80095e0 <_sbrk_r+0x1c>)
 80095c8:	2300      	movs	r3, #0
 80095ca:	4604      	mov	r4, r0
 80095cc:	4608      	mov	r0, r1
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	f7f8 fbb0 	bl	8001d34 <_sbrk>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_sbrk_r+0x1a>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_sbrk_r+0x1a>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20000958 	.word	0x20000958

080095e4 <__assert_func>:
 80095e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095e6:	4614      	mov	r4, r2
 80095e8:	461a      	mov	r2, r3
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <__assert_func+0x2c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4605      	mov	r5, r0
 80095f0:	68d8      	ldr	r0, [r3, #12]
 80095f2:	b14c      	cbz	r4, 8009608 <__assert_func+0x24>
 80095f4:	4b07      	ldr	r3, [pc, #28]	; (8009614 <__assert_func+0x30>)
 80095f6:	9100      	str	r1, [sp, #0]
 80095f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095fc:	4906      	ldr	r1, [pc, #24]	; (8009618 <__assert_func+0x34>)
 80095fe:	462b      	mov	r3, r5
 8009600:	f000 f80e 	bl	8009620 <fiprintf>
 8009604:	f000 faa4 	bl	8009b50 <abort>
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <__assert_func+0x38>)
 800960a:	461c      	mov	r4, r3
 800960c:	e7f3      	b.n	80095f6 <__assert_func+0x12>
 800960e:	bf00      	nop
 8009610:	20000024 	.word	0x20000024
 8009614:	0800a76d 	.word	0x0800a76d
 8009618:	0800a77a 	.word	0x0800a77a
 800961c:	0800a7a8 	.word	0x0800a7a8

08009620 <fiprintf>:
 8009620:	b40e      	push	{r1, r2, r3}
 8009622:	b503      	push	{r0, r1, lr}
 8009624:	4601      	mov	r1, r0
 8009626:	ab03      	add	r3, sp, #12
 8009628:	4805      	ldr	r0, [pc, #20]	; (8009640 <fiprintf+0x20>)
 800962a:	f853 2b04 	ldr.w	r2, [r3], #4
 800962e:	6800      	ldr	r0, [r0, #0]
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	f000 f88f 	bl	8009754 <_vfiprintf_r>
 8009636:	b002      	add	sp, #8
 8009638:	f85d eb04 	ldr.w	lr, [sp], #4
 800963c:	b003      	add	sp, #12
 800963e:	4770      	bx	lr
 8009640:	20000024 	.word	0x20000024

08009644 <__ascii_mbtowc>:
 8009644:	b082      	sub	sp, #8
 8009646:	b901      	cbnz	r1, 800964a <__ascii_mbtowc+0x6>
 8009648:	a901      	add	r1, sp, #4
 800964a:	b142      	cbz	r2, 800965e <__ascii_mbtowc+0x1a>
 800964c:	b14b      	cbz	r3, 8009662 <__ascii_mbtowc+0x1e>
 800964e:	7813      	ldrb	r3, [r2, #0]
 8009650:	600b      	str	r3, [r1, #0]
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	1e10      	subs	r0, r2, #0
 8009656:	bf18      	it	ne
 8009658:	2001      	movne	r0, #1
 800965a:	b002      	add	sp, #8
 800965c:	4770      	bx	lr
 800965e:	4610      	mov	r0, r2
 8009660:	e7fb      	b.n	800965a <__ascii_mbtowc+0x16>
 8009662:	f06f 0001 	mvn.w	r0, #1
 8009666:	e7f8      	b.n	800965a <__ascii_mbtowc+0x16>

08009668 <memmove>:
 8009668:	4288      	cmp	r0, r1
 800966a:	b510      	push	{r4, lr}
 800966c:	eb01 0402 	add.w	r4, r1, r2
 8009670:	d902      	bls.n	8009678 <memmove+0x10>
 8009672:	4284      	cmp	r4, r0
 8009674:	4623      	mov	r3, r4
 8009676:	d807      	bhi.n	8009688 <memmove+0x20>
 8009678:	1e43      	subs	r3, r0, #1
 800967a:	42a1      	cmp	r1, r4
 800967c:	d008      	beq.n	8009690 <memmove+0x28>
 800967e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009686:	e7f8      	b.n	800967a <memmove+0x12>
 8009688:	4402      	add	r2, r0
 800968a:	4601      	mov	r1, r0
 800968c:	428a      	cmp	r2, r1
 800968e:	d100      	bne.n	8009692 <memmove+0x2a>
 8009690:	bd10      	pop	{r4, pc}
 8009692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800969a:	e7f7      	b.n	800968c <memmove+0x24>

0800969c <__malloc_lock>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__malloc_lock+0x8>)
 800969e:	f000 bc17 	b.w	8009ed0 <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	20000960 	.word	0x20000960

080096a8 <__malloc_unlock>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__malloc_unlock+0x8>)
 80096aa:	f000 bc12 	b.w	8009ed2 <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	20000960 	.word	0x20000960

080096b4 <_realloc_r>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	4607      	mov	r7, r0
 80096b8:	4614      	mov	r4, r2
 80096ba:	460e      	mov	r6, r1
 80096bc:	b921      	cbnz	r1, 80096c8 <_realloc_r+0x14>
 80096be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096c2:	4611      	mov	r1, r2
 80096c4:	f7ff bdc8 	b.w	8009258 <_malloc_r>
 80096c8:	b922      	cbnz	r2, 80096d4 <_realloc_r+0x20>
 80096ca:	f7ff fd75 	bl	80091b8 <_free_r>
 80096ce:	4625      	mov	r5, r4
 80096d0:	4628      	mov	r0, r5
 80096d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d4:	f000 fc62 	bl	8009f9c <_malloc_usable_size_r>
 80096d8:	42a0      	cmp	r0, r4
 80096da:	d20f      	bcs.n	80096fc <_realloc_r+0x48>
 80096dc:	4621      	mov	r1, r4
 80096de:	4638      	mov	r0, r7
 80096e0:	f7ff fdba 	bl	8009258 <_malloc_r>
 80096e4:	4605      	mov	r5, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0f2      	beq.n	80096d0 <_realloc_r+0x1c>
 80096ea:	4631      	mov	r1, r6
 80096ec:	4622      	mov	r2, r4
 80096ee:	f7ff f9c7 	bl	8008a80 <memcpy>
 80096f2:	4631      	mov	r1, r6
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff fd5f 	bl	80091b8 <_free_r>
 80096fa:	e7e9      	b.n	80096d0 <_realloc_r+0x1c>
 80096fc:	4635      	mov	r5, r6
 80096fe:	e7e7      	b.n	80096d0 <_realloc_r+0x1c>

08009700 <__sfputc_r>:
 8009700:	6893      	ldr	r3, [r2, #8]
 8009702:	3b01      	subs	r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	b410      	push	{r4}
 8009708:	6093      	str	r3, [r2, #8]
 800970a:	da08      	bge.n	800971e <__sfputc_r+0x1e>
 800970c:	6994      	ldr	r4, [r2, #24]
 800970e:	42a3      	cmp	r3, r4
 8009710:	db01      	blt.n	8009716 <__sfputc_r+0x16>
 8009712:	290a      	cmp	r1, #10
 8009714:	d103      	bne.n	800971e <__sfputc_r+0x1e>
 8009716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800971a:	f000 b94b 	b.w	80099b4 <__swbuf_r>
 800971e:	6813      	ldr	r3, [r2, #0]
 8009720:	1c58      	adds	r0, r3, #1
 8009722:	6010      	str	r0, [r2, #0]
 8009724:	7019      	strb	r1, [r3, #0]
 8009726:	4608      	mov	r0, r1
 8009728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972c:	4770      	bx	lr

0800972e <__sfputs_r>:
 800972e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009730:	4606      	mov	r6, r0
 8009732:	460f      	mov	r7, r1
 8009734:	4614      	mov	r4, r2
 8009736:	18d5      	adds	r5, r2, r3
 8009738:	42ac      	cmp	r4, r5
 800973a:	d101      	bne.n	8009740 <__sfputs_r+0x12>
 800973c:	2000      	movs	r0, #0
 800973e:	e007      	b.n	8009750 <__sfputs_r+0x22>
 8009740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009744:	463a      	mov	r2, r7
 8009746:	4630      	mov	r0, r6
 8009748:	f7ff ffda 	bl	8009700 <__sfputc_r>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d1f3      	bne.n	8009738 <__sfputs_r+0xa>
 8009750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009754 <_vfiprintf_r>:
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	460d      	mov	r5, r1
 800975a:	b09d      	sub	sp, #116	; 0x74
 800975c:	4614      	mov	r4, r2
 800975e:	4698      	mov	r8, r3
 8009760:	4606      	mov	r6, r0
 8009762:	b118      	cbz	r0, 800976c <_vfiprintf_r+0x18>
 8009764:	6983      	ldr	r3, [r0, #24]
 8009766:	b90b      	cbnz	r3, 800976c <_vfiprintf_r+0x18>
 8009768:	f000 fb14 	bl	8009d94 <__sinit>
 800976c:	4b89      	ldr	r3, [pc, #548]	; (8009994 <_vfiprintf_r+0x240>)
 800976e:	429d      	cmp	r5, r3
 8009770:	d11b      	bne.n	80097aa <_vfiprintf_r+0x56>
 8009772:	6875      	ldr	r5, [r6, #4]
 8009774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009776:	07d9      	lsls	r1, r3, #31
 8009778:	d405      	bmi.n	8009786 <_vfiprintf_r+0x32>
 800977a:	89ab      	ldrh	r3, [r5, #12]
 800977c:	059a      	lsls	r2, r3, #22
 800977e:	d402      	bmi.n	8009786 <_vfiprintf_r+0x32>
 8009780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009782:	f000 fba5 	bl	8009ed0 <__retarget_lock_acquire_recursive>
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	071b      	lsls	r3, r3, #28
 800978a:	d501      	bpl.n	8009790 <_vfiprintf_r+0x3c>
 800978c:	692b      	ldr	r3, [r5, #16]
 800978e:	b9eb      	cbnz	r3, 80097cc <_vfiprintf_r+0x78>
 8009790:	4629      	mov	r1, r5
 8009792:	4630      	mov	r0, r6
 8009794:	f000 f96e 	bl	8009a74 <__swsetup_r>
 8009798:	b1c0      	cbz	r0, 80097cc <_vfiprintf_r+0x78>
 800979a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979c:	07dc      	lsls	r4, r3, #31
 800979e:	d50e      	bpl.n	80097be <_vfiprintf_r+0x6a>
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	b01d      	add	sp, #116	; 0x74
 80097a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097aa:	4b7b      	ldr	r3, [pc, #492]	; (8009998 <_vfiprintf_r+0x244>)
 80097ac:	429d      	cmp	r5, r3
 80097ae:	d101      	bne.n	80097b4 <_vfiprintf_r+0x60>
 80097b0:	68b5      	ldr	r5, [r6, #8]
 80097b2:	e7df      	b.n	8009774 <_vfiprintf_r+0x20>
 80097b4:	4b79      	ldr	r3, [pc, #484]	; (800999c <_vfiprintf_r+0x248>)
 80097b6:	429d      	cmp	r5, r3
 80097b8:	bf08      	it	eq
 80097ba:	68f5      	ldreq	r5, [r6, #12]
 80097bc:	e7da      	b.n	8009774 <_vfiprintf_r+0x20>
 80097be:	89ab      	ldrh	r3, [r5, #12]
 80097c0:	0598      	lsls	r0, r3, #22
 80097c2:	d4ed      	bmi.n	80097a0 <_vfiprintf_r+0x4c>
 80097c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c6:	f000 fb84 	bl	8009ed2 <__retarget_lock_release_recursive>
 80097ca:	e7e9      	b.n	80097a0 <_vfiprintf_r+0x4c>
 80097cc:	2300      	movs	r3, #0
 80097ce:	9309      	str	r3, [sp, #36]	; 0x24
 80097d0:	2320      	movs	r3, #32
 80097d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097da:	2330      	movs	r3, #48	; 0x30
 80097dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099a0 <_vfiprintf_r+0x24c>
 80097e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e4:	f04f 0901 	mov.w	r9, #1
 80097e8:	4623      	mov	r3, r4
 80097ea:	469a      	mov	sl, r3
 80097ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f0:	b10a      	cbz	r2, 80097f6 <_vfiprintf_r+0xa2>
 80097f2:	2a25      	cmp	r2, #37	; 0x25
 80097f4:	d1f9      	bne.n	80097ea <_vfiprintf_r+0x96>
 80097f6:	ebba 0b04 	subs.w	fp, sl, r4
 80097fa:	d00b      	beq.n	8009814 <_vfiprintf_r+0xc0>
 80097fc:	465b      	mov	r3, fp
 80097fe:	4622      	mov	r2, r4
 8009800:	4629      	mov	r1, r5
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ff93 	bl	800972e <__sfputs_r>
 8009808:	3001      	adds	r0, #1
 800980a:	f000 80aa 	beq.w	8009962 <_vfiprintf_r+0x20e>
 800980e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009810:	445a      	add	r2, fp
 8009812:	9209      	str	r2, [sp, #36]	; 0x24
 8009814:	f89a 3000 	ldrb.w	r3, [sl]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80a2 	beq.w	8009962 <_vfiprintf_r+0x20e>
 800981e:	2300      	movs	r3, #0
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009828:	f10a 0a01 	add.w	sl, sl, #1
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009834:	931a      	str	r3, [sp, #104]	; 0x68
 8009836:	4654      	mov	r4, sl
 8009838:	2205      	movs	r2, #5
 800983a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983e:	4858      	ldr	r0, [pc, #352]	; (80099a0 <_vfiprintf_r+0x24c>)
 8009840:	f7f6 fcce 	bl	80001e0 <memchr>
 8009844:	9a04      	ldr	r2, [sp, #16]
 8009846:	b9d8      	cbnz	r0, 8009880 <_vfiprintf_r+0x12c>
 8009848:	06d1      	lsls	r1, r2, #27
 800984a:	bf44      	itt	mi
 800984c:	2320      	movmi	r3, #32
 800984e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009852:	0713      	lsls	r3, r2, #28
 8009854:	bf44      	itt	mi
 8009856:	232b      	movmi	r3, #43	; 0x2b
 8009858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800985c:	f89a 3000 	ldrb.w	r3, [sl]
 8009860:	2b2a      	cmp	r3, #42	; 0x2a
 8009862:	d015      	beq.n	8009890 <_vfiprintf_r+0x13c>
 8009864:	9a07      	ldr	r2, [sp, #28]
 8009866:	4654      	mov	r4, sl
 8009868:	2000      	movs	r0, #0
 800986a:	f04f 0c0a 	mov.w	ip, #10
 800986e:	4621      	mov	r1, r4
 8009870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009874:	3b30      	subs	r3, #48	; 0x30
 8009876:	2b09      	cmp	r3, #9
 8009878:	d94e      	bls.n	8009918 <_vfiprintf_r+0x1c4>
 800987a:	b1b0      	cbz	r0, 80098aa <_vfiprintf_r+0x156>
 800987c:	9207      	str	r2, [sp, #28]
 800987e:	e014      	b.n	80098aa <_vfiprintf_r+0x156>
 8009880:	eba0 0308 	sub.w	r3, r0, r8
 8009884:	fa09 f303 	lsl.w	r3, r9, r3
 8009888:	4313      	orrs	r3, r2
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	46a2      	mov	sl, r4
 800988e:	e7d2      	b.n	8009836 <_vfiprintf_r+0xe2>
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	1d19      	adds	r1, r3, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	9103      	str	r1, [sp, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfbb      	ittet	lt
 800989c:	425b      	neglt	r3, r3
 800989e:	f042 0202 	orrlt.w	r2, r2, #2
 80098a2:	9307      	strge	r3, [sp, #28]
 80098a4:	9307      	strlt	r3, [sp, #28]
 80098a6:	bfb8      	it	lt
 80098a8:	9204      	strlt	r2, [sp, #16]
 80098aa:	7823      	ldrb	r3, [r4, #0]
 80098ac:	2b2e      	cmp	r3, #46	; 0x2e
 80098ae:	d10c      	bne.n	80098ca <_vfiprintf_r+0x176>
 80098b0:	7863      	ldrb	r3, [r4, #1]
 80098b2:	2b2a      	cmp	r3, #42	; 0x2a
 80098b4:	d135      	bne.n	8009922 <_vfiprintf_r+0x1ce>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	1d1a      	adds	r2, r3, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	9203      	str	r2, [sp, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bfb8      	it	lt
 80098c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80098c6:	3402      	adds	r4, #2
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099b0 <_vfiprintf_r+0x25c>
 80098ce:	7821      	ldrb	r1, [r4, #0]
 80098d0:	2203      	movs	r2, #3
 80098d2:	4650      	mov	r0, sl
 80098d4:	f7f6 fc84 	bl	80001e0 <memchr>
 80098d8:	b140      	cbz	r0, 80098ec <_vfiprintf_r+0x198>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	eba0 000a 	sub.w	r0, r0, sl
 80098e0:	fa03 f000 	lsl.w	r0, r3, r0
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	4303      	orrs	r3, r0
 80098e8:	3401      	adds	r4, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f0:	482c      	ldr	r0, [pc, #176]	; (80099a4 <_vfiprintf_r+0x250>)
 80098f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098f6:	2206      	movs	r2, #6
 80098f8:	f7f6 fc72 	bl	80001e0 <memchr>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d03f      	beq.n	8009980 <_vfiprintf_r+0x22c>
 8009900:	4b29      	ldr	r3, [pc, #164]	; (80099a8 <_vfiprintf_r+0x254>)
 8009902:	bb1b      	cbnz	r3, 800994c <_vfiprintf_r+0x1f8>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	3307      	adds	r3, #7
 8009908:	f023 0307 	bic.w	r3, r3, #7
 800990c:	3308      	adds	r3, #8
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009912:	443b      	add	r3, r7
 8009914:	9309      	str	r3, [sp, #36]	; 0x24
 8009916:	e767      	b.n	80097e8 <_vfiprintf_r+0x94>
 8009918:	fb0c 3202 	mla	r2, ip, r2, r3
 800991c:	460c      	mov	r4, r1
 800991e:	2001      	movs	r0, #1
 8009920:	e7a5      	b.n	800986e <_vfiprintf_r+0x11a>
 8009922:	2300      	movs	r3, #0
 8009924:	3401      	adds	r4, #1
 8009926:	9305      	str	r3, [sp, #20]
 8009928:	4619      	mov	r1, r3
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4620      	mov	r0, r4
 8009930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009934:	3a30      	subs	r2, #48	; 0x30
 8009936:	2a09      	cmp	r2, #9
 8009938:	d903      	bls.n	8009942 <_vfiprintf_r+0x1ee>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c5      	beq.n	80098ca <_vfiprintf_r+0x176>
 800993e:	9105      	str	r1, [sp, #20]
 8009940:	e7c3      	b.n	80098ca <_vfiprintf_r+0x176>
 8009942:	fb0c 2101 	mla	r1, ip, r1, r2
 8009946:	4604      	mov	r4, r0
 8009948:	2301      	movs	r3, #1
 800994a:	e7f0      	b.n	800992e <_vfiprintf_r+0x1da>
 800994c:	ab03      	add	r3, sp, #12
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	462a      	mov	r2, r5
 8009952:	4b16      	ldr	r3, [pc, #88]	; (80099ac <_vfiprintf_r+0x258>)
 8009954:	a904      	add	r1, sp, #16
 8009956:	4630      	mov	r0, r6
 8009958:	f7fd fe08 	bl	800756c <_printf_float>
 800995c:	4607      	mov	r7, r0
 800995e:	1c78      	adds	r0, r7, #1
 8009960:	d1d6      	bne.n	8009910 <_vfiprintf_r+0x1bc>
 8009962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009964:	07d9      	lsls	r1, r3, #31
 8009966:	d405      	bmi.n	8009974 <_vfiprintf_r+0x220>
 8009968:	89ab      	ldrh	r3, [r5, #12]
 800996a:	059a      	lsls	r2, r3, #22
 800996c:	d402      	bmi.n	8009974 <_vfiprintf_r+0x220>
 800996e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009970:	f000 faaf 	bl	8009ed2 <__retarget_lock_release_recursive>
 8009974:	89ab      	ldrh	r3, [r5, #12]
 8009976:	065b      	lsls	r3, r3, #25
 8009978:	f53f af12 	bmi.w	80097a0 <_vfiprintf_r+0x4c>
 800997c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800997e:	e711      	b.n	80097a4 <_vfiprintf_r+0x50>
 8009980:	ab03      	add	r3, sp, #12
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	462a      	mov	r2, r5
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <_vfiprintf_r+0x258>)
 8009988:	a904      	add	r1, sp, #16
 800998a:	4630      	mov	r0, r6
 800998c:	f7fe f892 	bl	8007ab4 <_printf_i>
 8009990:	e7e4      	b.n	800995c <_vfiprintf_r+0x208>
 8009992:	bf00      	nop
 8009994:	0800a8d4 	.word	0x0800a8d4
 8009998:	0800a8f4 	.word	0x0800a8f4
 800999c:	0800a8b4 	.word	0x0800a8b4
 80099a0:	0800a75c 	.word	0x0800a75c
 80099a4:	0800a766 	.word	0x0800a766
 80099a8:	0800756d 	.word	0x0800756d
 80099ac:	0800972f 	.word	0x0800972f
 80099b0:	0800a762 	.word	0x0800a762

080099b4 <__swbuf_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	460e      	mov	r6, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	4605      	mov	r5, r0
 80099bc:	b118      	cbz	r0, 80099c6 <__swbuf_r+0x12>
 80099be:	6983      	ldr	r3, [r0, #24]
 80099c0:	b90b      	cbnz	r3, 80099c6 <__swbuf_r+0x12>
 80099c2:	f000 f9e7 	bl	8009d94 <__sinit>
 80099c6:	4b21      	ldr	r3, [pc, #132]	; (8009a4c <__swbuf_r+0x98>)
 80099c8:	429c      	cmp	r4, r3
 80099ca:	d12b      	bne.n	8009a24 <__swbuf_r+0x70>
 80099cc:	686c      	ldr	r4, [r5, #4]
 80099ce:	69a3      	ldr	r3, [r4, #24]
 80099d0:	60a3      	str	r3, [r4, #8]
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	071a      	lsls	r2, r3, #28
 80099d6:	d52f      	bpl.n	8009a38 <__swbuf_r+0x84>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	b36b      	cbz	r3, 8009a38 <__swbuf_r+0x84>
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	1ac0      	subs	r0, r0, r3
 80099e2:	6963      	ldr	r3, [r4, #20]
 80099e4:	b2f6      	uxtb	r6, r6
 80099e6:	4283      	cmp	r3, r0
 80099e8:	4637      	mov	r7, r6
 80099ea:	dc04      	bgt.n	80099f6 <__swbuf_r+0x42>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4628      	mov	r0, r5
 80099f0:	f000 f93c 	bl	8009c6c <_fflush_r>
 80099f4:	bb30      	cbnz	r0, 8009a44 <__swbuf_r+0x90>
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	6022      	str	r2, [r4, #0]
 8009a02:	701e      	strb	r6, [r3, #0]
 8009a04:	6963      	ldr	r3, [r4, #20]
 8009a06:	3001      	adds	r0, #1
 8009a08:	4283      	cmp	r3, r0
 8009a0a:	d004      	beq.n	8009a16 <__swbuf_r+0x62>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	07db      	lsls	r3, r3, #31
 8009a10:	d506      	bpl.n	8009a20 <__swbuf_r+0x6c>
 8009a12:	2e0a      	cmp	r6, #10
 8009a14:	d104      	bne.n	8009a20 <__swbuf_r+0x6c>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f000 f927 	bl	8009c6c <_fflush_r>
 8009a1e:	b988      	cbnz	r0, 8009a44 <__swbuf_r+0x90>
 8009a20:	4638      	mov	r0, r7
 8009a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <__swbuf_r+0x9c>)
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d101      	bne.n	8009a2e <__swbuf_r+0x7a>
 8009a2a:	68ac      	ldr	r4, [r5, #8]
 8009a2c:	e7cf      	b.n	80099ce <__swbuf_r+0x1a>
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <__swbuf_r+0xa0>)
 8009a30:	429c      	cmp	r4, r3
 8009a32:	bf08      	it	eq
 8009a34:	68ec      	ldreq	r4, [r5, #12]
 8009a36:	e7ca      	b.n	80099ce <__swbuf_r+0x1a>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f000 f81a 	bl	8009a74 <__swsetup_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d0cb      	beq.n	80099dc <__swbuf_r+0x28>
 8009a44:	f04f 37ff 	mov.w	r7, #4294967295
 8009a48:	e7ea      	b.n	8009a20 <__swbuf_r+0x6c>
 8009a4a:	bf00      	nop
 8009a4c:	0800a8d4 	.word	0x0800a8d4
 8009a50:	0800a8f4 	.word	0x0800a8f4
 8009a54:	0800a8b4 	.word	0x0800a8b4

08009a58 <__ascii_wctomb>:
 8009a58:	b149      	cbz	r1, 8009a6e <__ascii_wctomb+0x16>
 8009a5a:	2aff      	cmp	r2, #255	; 0xff
 8009a5c:	bf85      	ittet	hi
 8009a5e:	238a      	movhi	r3, #138	; 0x8a
 8009a60:	6003      	strhi	r3, [r0, #0]
 8009a62:	700a      	strbls	r2, [r1, #0]
 8009a64:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a68:	bf98      	it	ls
 8009a6a:	2001      	movls	r0, #1
 8009a6c:	4770      	bx	lr
 8009a6e:	4608      	mov	r0, r1
 8009a70:	4770      	bx	lr
	...

08009a74 <__swsetup_r>:
 8009a74:	4b32      	ldr	r3, [pc, #200]	; (8009b40 <__swsetup_r+0xcc>)
 8009a76:	b570      	push	{r4, r5, r6, lr}
 8009a78:	681d      	ldr	r5, [r3, #0]
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	b125      	cbz	r5, 8009a8a <__swsetup_r+0x16>
 8009a80:	69ab      	ldr	r3, [r5, #24]
 8009a82:	b913      	cbnz	r3, 8009a8a <__swsetup_r+0x16>
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 f985 	bl	8009d94 <__sinit>
 8009a8a:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <__swsetup_r+0xd0>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	d10f      	bne.n	8009ab0 <__swsetup_r+0x3c>
 8009a90:	686c      	ldr	r4, [r5, #4]
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a98:	0719      	lsls	r1, r3, #28
 8009a9a:	d42c      	bmi.n	8009af6 <__swsetup_r+0x82>
 8009a9c:	06dd      	lsls	r5, r3, #27
 8009a9e:	d411      	bmi.n	8009ac4 <__swsetup_r+0x50>
 8009aa0:	2309      	movs	r3, #9
 8009aa2:	6033      	str	r3, [r6, #0]
 8009aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009aae:	e03e      	b.n	8009b2e <__swsetup_r+0xba>
 8009ab0:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <__swsetup_r+0xd4>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <__swsetup_r+0x46>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7eb      	b.n	8009a92 <__swsetup_r+0x1e>
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <__swsetup_r+0xd8>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7e6      	b.n	8009a92 <__swsetup_r+0x1e>
 8009ac4:	0758      	lsls	r0, r3, #29
 8009ac6:	d512      	bpl.n	8009aee <__swsetup_r+0x7a>
 8009ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aca:	b141      	cbz	r1, 8009ade <__swsetup_r+0x6a>
 8009acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d002      	beq.n	8009ada <__swsetup_r+0x66>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7ff fb6f 	bl	80091b8 <_free_r>
 8009ada:	2300      	movs	r3, #0
 8009adc:	6363      	str	r3, [r4, #52]	; 0x34
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6063      	str	r3, [r4, #4]
 8009aea:	6923      	ldr	r3, [r4, #16]
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f043 0308 	orr.w	r3, r3, #8
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	b94b      	cbnz	r3, 8009b0e <__swsetup_r+0x9a>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b04:	d003      	beq.n	8009b0e <__swsetup_r+0x9a>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 fa07 	bl	8009f1c <__smakebuf_r>
 8009b0e:	89a0      	ldrh	r0, [r4, #12]
 8009b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b14:	f010 0301 	ands.w	r3, r0, #1
 8009b18:	d00a      	beq.n	8009b30 <__swsetup_r+0xbc>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60a3      	str	r3, [r4, #8]
 8009b1e:	6963      	ldr	r3, [r4, #20]
 8009b20:	425b      	negs	r3, r3
 8009b22:	61a3      	str	r3, [r4, #24]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	b943      	cbnz	r3, 8009b3a <__swsetup_r+0xc6>
 8009b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b2c:	d1ba      	bne.n	8009aa4 <__swsetup_r+0x30>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	0781      	lsls	r1, r0, #30
 8009b32:	bf58      	it	pl
 8009b34:	6963      	ldrpl	r3, [r4, #20]
 8009b36:	60a3      	str	r3, [r4, #8]
 8009b38:	e7f4      	b.n	8009b24 <__swsetup_r+0xb0>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e7f7      	b.n	8009b2e <__swsetup_r+0xba>
 8009b3e:	bf00      	nop
 8009b40:	20000024 	.word	0x20000024
 8009b44:	0800a8d4 	.word	0x0800a8d4
 8009b48:	0800a8f4 	.word	0x0800a8f4
 8009b4c:	0800a8b4 	.word	0x0800a8b4

08009b50 <abort>:
 8009b50:	b508      	push	{r3, lr}
 8009b52:	2006      	movs	r0, #6
 8009b54:	f000 fa52 	bl	8009ffc <raise>
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f7f8 f873 	bl	8001c44 <_exit>
	...

08009b60 <__sflush_r>:
 8009b60:	898a      	ldrh	r2, [r1, #12]
 8009b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b66:	4605      	mov	r5, r0
 8009b68:	0710      	lsls	r0, r2, #28
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	d458      	bmi.n	8009c20 <__sflush_r+0xc0>
 8009b6e:	684b      	ldr	r3, [r1, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dc05      	bgt.n	8009b80 <__sflush_r+0x20>
 8009b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dc02      	bgt.n	8009b80 <__sflush_r+0x20>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b82:	2e00      	cmp	r6, #0
 8009b84:	d0f9      	beq.n	8009b7a <__sflush_r+0x1a>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b8c:	682f      	ldr	r7, [r5, #0]
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	d032      	beq.n	8009bf8 <__sflush_r+0x98>
 8009b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	075a      	lsls	r2, r3, #29
 8009b98:	d505      	bpl.n	8009ba6 <__sflush_r+0x46>
 8009b9a:	6863      	ldr	r3, [r4, #4]
 8009b9c:	1ac0      	subs	r0, r0, r3
 8009b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba0:	b10b      	cbz	r3, 8009ba6 <__sflush_r+0x46>
 8009ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ba4:	1ac0      	subs	r0, r0, r3
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b0      	blx	r6
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	d106      	bne.n	8009bc6 <__sflush_r+0x66>
 8009bb8:	6829      	ldr	r1, [r5, #0]
 8009bba:	291d      	cmp	r1, #29
 8009bbc:	d82c      	bhi.n	8009c18 <__sflush_r+0xb8>
 8009bbe:	4a2a      	ldr	r2, [pc, #168]	; (8009c68 <__sflush_r+0x108>)
 8009bc0:	40ca      	lsrs	r2, r1
 8009bc2:	07d6      	lsls	r6, r2, #31
 8009bc4:	d528      	bpl.n	8009c18 <__sflush_r+0xb8>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	6062      	str	r2, [r4, #4]
 8009bca:	04d9      	lsls	r1, r3, #19
 8009bcc:	6922      	ldr	r2, [r4, #16]
 8009bce:	6022      	str	r2, [r4, #0]
 8009bd0:	d504      	bpl.n	8009bdc <__sflush_r+0x7c>
 8009bd2:	1c42      	adds	r2, r0, #1
 8009bd4:	d101      	bne.n	8009bda <__sflush_r+0x7a>
 8009bd6:	682b      	ldr	r3, [r5, #0]
 8009bd8:	b903      	cbnz	r3, 8009bdc <__sflush_r+0x7c>
 8009bda:	6560      	str	r0, [r4, #84]	; 0x54
 8009bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bde:	602f      	str	r7, [r5, #0]
 8009be0:	2900      	cmp	r1, #0
 8009be2:	d0ca      	beq.n	8009b7a <__sflush_r+0x1a>
 8009be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009be8:	4299      	cmp	r1, r3
 8009bea:	d002      	beq.n	8009bf2 <__sflush_r+0x92>
 8009bec:	4628      	mov	r0, r5
 8009bee:	f7ff fae3 	bl	80091b8 <_free_r>
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8009bf6:	e7c1      	b.n	8009b7c <__sflush_r+0x1c>
 8009bf8:	6a21      	ldr	r1, [r4, #32]
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	47b0      	blx	r6
 8009c00:	1c41      	adds	r1, r0, #1
 8009c02:	d1c7      	bne.n	8009b94 <__sflush_r+0x34>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0c4      	beq.n	8009b94 <__sflush_r+0x34>
 8009c0a:	2b1d      	cmp	r3, #29
 8009c0c:	d001      	beq.n	8009c12 <__sflush_r+0xb2>
 8009c0e:	2b16      	cmp	r3, #22
 8009c10:	d101      	bne.n	8009c16 <__sflush_r+0xb6>
 8009c12:	602f      	str	r7, [r5, #0]
 8009c14:	e7b1      	b.n	8009b7a <__sflush_r+0x1a>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	e7ad      	b.n	8009b7c <__sflush_r+0x1c>
 8009c20:	690f      	ldr	r7, [r1, #16]
 8009c22:	2f00      	cmp	r7, #0
 8009c24:	d0a9      	beq.n	8009b7a <__sflush_r+0x1a>
 8009c26:	0793      	lsls	r3, r2, #30
 8009c28:	680e      	ldr	r6, [r1, #0]
 8009c2a:	bf08      	it	eq
 8009c2c:	694b      	ldreq	r3, [r1, #20]
 8009c2e:	600f      	str	r7, [r1, #0]
 8009c30:	bf18      	it	ne
 8009c32:	2300      	movne	r3, #0
 8009c34:	eba6 0807 	sub.w	r8, r6, r7
 8009c38:	608b      	str	r3, [r1, #8]
 8009c3a:	f1b8 0f00 	cmp.w	r8, #0
 8009c3e:	dd9c      	ble.n	8009b7a <__sflush_r+0x1a>
 8009c40:	6a21      	ldr	r1, [r4, #32]
 8009c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c44:	4643      	mov	r3, r8
 8009c46:	463a      	mov	r2, r7
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b0      	blx	r6
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	dc06      	bgt.n	8009c5e <__sflush_r+0xfe>
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	e78e      	b.n	8009b7c <__sflush_r+0x1c>
 8009c5e:	4407      	add	r7, r0
 8009c60:	eba8 0800 	sub.w	r8, r8, r0
 8009c64:	e7e9      	b.n	8009c3a <__sflush_r+0xda>
 8009c66:	bf00      	nop
 8009c68:	20400001 	.word	0x20400001

08009c6c <_fflush_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	690b      	ldr	r3, [r1, #16]
 8009c70:	4605      	mov	r5, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	b913      	cbnz	r3, 8009c7c <_fflush_r+0x10>
 8009c76:	2500      	movs	r5, #0
 8009c78:	4628      	mov	r0, r5
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	b118      	cbz	r0, 8009c86 <_fflush_r+0x1a>
 8009c7e:	6983      	ldr	r3, [r0, #24]
 8009c80:	b90b      	cbnz	r3, 8009c86 <_fflush_r+0x1a>
 8009c82:	f000 f887 	bl	8009d94 <__sinit>
 8009c86:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <_fflush_r+0x6c>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	d11b      	bne.n	8009cc4 <_fflush_r+0x58>
 8009c8c:	686c      	ldr	r4, [r5, #4]
 8009c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0ef      	beq.n	8009c76 <_fflush_r+0xa>
 8009c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c98:	07d0      	lsls	r0, r2, #31
 8009c9a:	d404      	bmi.n	8009ca6 <_fflush_r+0x3a>
 8009c9c:	0599      	lsls	r1, r3, #22
 8009c9e:	d402      	bmi.n	8009ca6 <_fflush_r+0x3a>
 8009ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca2:	f000 f915 	bl	8009ed0 <__retarget_lock_acquire_recursive>
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	4621      	mov	r1, r4
 8009caa:	f7ff ff59 	bl	8009b60 <__sflush_r>
 8009cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cb0:	07da      	lsls	r2, r3, #31
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	d4e0      	bmi.n	8009c78 <_fflush_r+0xc>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	059b      	lsls	r3, r3, #22
 8009cba:	d4dd      	bmi.n	8009c78 <_fflush_r+0xc>
 8009cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cbe:	f000 f908 	bl	8009ed2 <__retarget_lock_release_recursive>
 8009cc2:	e7d9      	b.n	8009c78 <_fflush_r+0xc>
 8009cc4:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <_fflush_r+0x70>)
 8009cc6:	429c      	cmp	r4, r3
 8009cc8:	d101      	bne.n	8009cce <_fflush_r+0x62>
 8009cca:	68ac      	ldr	r4, [r5, #8]
 8009ccc:	e7df      	b.n	8009c8e <_fflush_r+0x22>
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <_fflush_r+0x74>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	bf08      	it	eq
 8009cd4:	68ec      	ldreq	r4, [r5, #12]
 8009cd6:	e7da      	b.n	8009c8e <_fflush_r+0x22>
 8009cd8:	0800a8d4 	.word	0x0800a8d4
 8009cdc:	0800a8f4 	.word	0x0800a8f4
 8009ce0:	0800a8b4 	.word	0x0800a8b4

08009ce4 <std>:
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	4604      	mov	r4, r0
 8009cea:	e9c0 3300 	strd	r3, r3, [r0]
 8009cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cf2:	6083      	str	r3, [r0, #8]
 8009cf4:	8181      	strh	r1, [r0, #12]
 8009cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8009cf8:	81c2      	strh	r2, [r0, #14]
 8009cfa:	6183      	str	r3, [r0, #24]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	2208      	movs	r2, #8
 8009d00:	305c      	adds	r0, #92	; 0x5c
 8009d02:	f7fd fb8b 	bl	800741c <memset>
 8009d06:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <std+0x38>)
 8009d08:	6263      	str	r3, [r4, #36]	; 0x24
 8009d0a:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <std+0x3c>)
 8009d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <std+0x40>)
 8009d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <std+0x44>)
 8009d14:	6224      	str	r4, [r4, #32]
 8009d16:	6323      	str	r3, [r4, #48]	; 0x30
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	bf00      	nop
 8009d1c:	0800a035 	.word	0x0800a035
 8009d20:	0800a057 	.word	0x0800a057
 8009d24:	0800a08f 	.word	0x0800a08f
 8009d28:	0800a0b3 	.word	0x0800a0b3

08009d2c <_cleanup_r>:
 8009d2c:	4901      	ldr	r1, [pc, #4]	; (8009d34 <_cleanup_r+0x8>)
 8009d2e:	f000 b8af 	b.w	8009e90 <_fwalk_reent>
 8009d32:	bf00      	nop
 8009d34:	08009c6d 	.word	0x08009c6d

08009d38 <__sfmoreglue>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	1e4a      	subs	r2, r1, #1
 8009d3c:	2568      	movs	r5, #104	; 0x68
 8009d3e:	4355      	muls	r5, r2
 8009d40:	460e      	mov	r6, r1
 8009d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d46:	f7ff fa87 	bl	8009258 <_malloc_r>
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	b140      	cbz	r0, 8009d60 <__sfmoreglue+0x28>
 8009d4e:	2100      	movs	r1, #0
 8009d50:	e9c0 1600 	strd	r1, r6, [r0]
 8009d54:	300c      	adds	r0, #12
 8009d56:	60a0      	str	r0, [r4, #8]
 8009d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d5c:	f7fd fb5e 	bl	800741c <memset>
 8009d60:	4620      	mov	r0, r4
 8009d62:	bd70      	pop	{r4, r5, r6, pc}

08009d64 <__sfp_lock_acquire>:
 8009d64:	4801      	ldr	r0, [pc, #4]	; (8009d6c <__sfp_lock_acquire+0x8>)
 8009d66:	f000 b8b3 	b.w	8009ed0 <__retarget_lock_acquire_recursive>
 8009d6a:	bf00      	nop
 8009d6c:	20000964 	.word	0x20000964

08009d70 <__sfp_lock_release>:
 8009d70:	4801      	ldr	r0, [pc, #4]	; (8009d78 <__sfp_lock_release+0x8>)
 8009d72:	f000 b8ae 	b.w	8009ed2 <__retarget_lock_release_recursive>
 8009d76:	bf00      	nop
 8009d78:	20000964 	.word	0x20000964

08009d7c <__sinit_lock_acquire>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__sinit_lock_acquire+0x8>)
 8009d7e:	f000 b8a7 	b.w	8009ed0 <__retarget_lock_acquire_recursive>
 8009d82:	bf00      	nop
 8009d84:	2000095f 	.word	0x2000095f

08009d88 <__sinit_lock_release>:
 8009d88:	4801      	ldr	r0, [pc, #4]	; (8009d90 <__sinit_lock_release+0x8>)
 8009d8a:	f000 b8a2 	b.w	8009ed2 <__retarget_lock_release_recursive>
 8009d8e:	bf00      	nop
 8009d90:	2000095f 	.word	0x2000095f

08009d94 <__sinit>:
 8009d94:	b510      	push	{r4, lr}
 8009d96:	4604      	mov	r4, r0
 8009d98:	f7ff fff0 	bl	8009d7c <__sinit_lock_acquire>
 8009d9c:	69a3      	ldr	r3, [r4, #24]
 8009d9e:	b11b      	cbz	r3, 8009da8 <__sinit+0x14>
 8009da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da4:	f7ff bff0 	b.w	8009d88 <__sinit_lock_release>
 8009da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dac:	6523      	str	r3, [r4, #80]	; 0x50
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <__sinit+0x68>)
 8009db0:	4a13      	ldr	r2, [pc, #76]	; (8009e00 <__sinit+0x6c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	bf04      	itt	eq
 8009dba:	2301      	moveq	r3, #1
 8009dbc:	61a3      	streq	r3, [r4, #24]
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 f820 	bl	8009e04 <__sfp>
 8009dc4:	6060      	str	r0, [r4, #4]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 f81c 	bl	8009e04 <__sfp>
 8009dcc:	60a0      	str	r0, [r4, #8]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 f818 	bl	8009e04 <__sfp>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	60e0      	str	r0, [r4, #12]
 8009dd8:	2104      	movs	r1, #4
 8009dda:	6860      	ldr	r0, [r4, #4]
 8009ddc:	f7ff ff82 	bl	8009ce4 <std>
 8009de0:	68a0      	ldr	r0, [r4, #8]
 8009de2:	2201      	movs	r2, #1
 8009de4:	2109      	movs	r1, #9
 8009de6:	f7ff ff7d 	bl	8009ce4 <std>
 8009dea:	68e0      	ldr	r0, [r4, #12]
 8009dec:	2202      	movs	r2, #2
 8009dee:	2112      	movs	r1, #18
 8009df0:	f7ff ff78 	bl	8009ce4 <std>
 8009df4:	2301      	movs	r3, #1
 8009df6:	61a3      	str	r3, [r4, #24]
 8009df8:	e7d2      	b.n	8009da0 <__sinit+0xc>
 8009dfa:	bf00      	nop
 8009dfc:	0800a530 	.word	0x0800a530
 8009e00:	08009d2d 	.word	0x08009d2d

08009e04 <__sfp>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	4607      	mov	r7, r0
 8009e08:	f7ff ffac 	bl	8009d64 <__sfp_lock_acquire>
 8009e0c:	4b1e      	ldr	r3, [pc, #120]	; (8009e88 <__sfp+0x84>)
 8009e0e:	681e      	ldr	r6, [r3, #0]
 8009e10:	69b3      	ldr	r3, [r6, #24]
 8009e12:	b913      	cbnz	r3, 8009e1a <__sfp+0x16>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff ffbd 	bl	8009d94 <__sinit>
 8009e1a:	3648      	adds	r6, #72	; 0x48
 8009e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	d503      	bpl.n	8009e2c <__sfp+0x28>
 8009e24:	6833      	ldr	r3, [r6, #0]
 8009e26:	b30b      	cbz	r3, 8009e6c <__sfp+0x68>
 8009e28:	6836      	ldr	r6, [r6, #0]
 8009e2a:	e7f7      	b.n	8009e1c <__sfp+0x18>
 8009e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e30:	b9d5      	cbnz	r5, 8009e68 <__sfp+0x64>
 8009e32:	4b16      	ldr	r3, [pc, #88]	; (8009e8c <__sfp+0x88>)
 8009e34:	60e3      	str	r3, [r4, #12]
 8009e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8009e3c:	f000 f847 	bl	8009ece <__retarget_lock_init_recursive>
 8009e40:	f7ff ff96 	bl	8009d70 <__sfp_lock_release>
 8009e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e4c:	6025      	str	r5, [r4, #0]
 8009e4e:	61a5      	str	r5, [r4, #24]
 8009e50:	2208      	movs	r2, #8
 8009e52:	4629      	mov	r1, r5
 8009e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e58:	f7fd fae0 	bl	800741c <memset>
 8009e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e64:	4620      	mov	r0, r4
 8009e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e68:	3468      	adds	r4, #104	; 0x68
 8009e6a:	e7d9      	b.n	8009e20 <__sfp+0x1c>
 8009e6c:	2104      	movs	r1, #4
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f7ff ff62 	bl	8009d38 <__sfmoreglue>
 8009e74:	4604      	mov	r4, r0
 8009e76:	6030      	str	r0, [r6, #0]
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d1d5      	bne.n	8009e28 <__sfp+0x24>
 8009e7c:	f7ff ff78 	bl	8009d70 <__sfp_lock_release>
 8009e80:	230c      	movs	r3, #12
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	e7ee      	b.n	8009e64 <__sfp+0x60>
 8009e86:	bf00      	nop
 8009e88:	0800a530 	.word	0x0800a530
 8009e8c:	ffff0001 	.word	0xffff0001

08009e90 <_fwalk_reent>:
 8009e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e94:	4606      	mov	r6, r0
 8009e96:	4688      	mov	r8, r1
 8009e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e9c:	2700      	movs	r7, #0
 8009e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ea6:	d505      	bpl.n	8009eb4 <_fwalk_reent+0x24>
 8009ea8:	6824      	ldr	r4, [r4, #0]
 8009eaa:	2c00      	cmp	r4, #0
 8009eac:	d1f7      	bne.n	8009e9e <_fwalk_reent+0xe>
 8009eae:	4638      	mov	r0, r7
 8009eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb4:	89ab      	ldrh	r3, [r5, #12]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d907      	bls.n	8009eca <_fwalk_reent+0x3a>
 8009eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	d003      	beq.n	8009eca <_fwalk_reent+0x3a>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	47c0      	blx	r8
 8009ec8:	4307      	orrs	r7, r0
 8009eca:	3568      	adds	r5, #104	; 0x68
 8009ecc:	e7e9      	b.n	8009ea2 <_fwalk_reent+0x12>

08009ece <__retarget_lock_init_recursive>:
 8009ece:	4770      	bx	lr

08009ed0 <__retarget_lock_acquire_recursive>:
 8009ed0:	4770      	bx	lr

08009ed2 <__retarget_lock_release_recursive>:
 8009ed2:	4770      	bx	lr

08009ed4 <__swhatbuf_r>:
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	460e      	mov	r6, r1
 8009ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009edc:	2900      	cmp	r1, #0
 8009ede:	b096      	sub	sp, #88	; 0x58
 8009ee0:	4614      	mov	r4, r2
 8009ee2:	461d      	mov	r5, r3
 8009ee4:	da07      	bge.n	8009ef6 <__swhatbuf_r+0x22>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	89b3      	ldrh	r3, [r6, #12]
 8009eec:	061a      	lsls	r2, r3, #24
 8009eee:	d410      	bmi.n	8009f12 <__swhatbuf_r+0x3e>
 8009ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ef4:	e00e      	b.n	8009f14 <__swhatbuf_r+0x40>
 8009ef6:	466a      	mov	r2, sp
 8009ef8:	f000 f902 	bl	800a100 <_fstat_r>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	dbf2      	blt.n	8009ee6 <__swhatbuf_r+0x12>
 8009f00:	9a01      	ldr	r2, [sp, #4]
 8009f02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f0a:	425a      	negs	r2, r3
 8009f0c:	415a      	adcs	r2, r3
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	e7ee      	b.n	8009ef0 <__swhatbuf_r+0x1c>
 8009f12:	2340      	movs	r3, #64	; 0x40
 8009f14:	2000      	movs	r0, #0
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	b016      	add	sp, #88	; 0x58
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}

08009f1c <__smakebuf_r>:
 8009f1c:	898b      	ldrh	r3, [r1, #12]
 8009f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f20:	079d      	lsls	r5, r3, #30
 8009f22:	4606      	mov	r6, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	d507      	bpl.n	8009f38 <__smakebuf_r+0x1c>
 8009f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	6123      	str	r3, [r4, #16]
 8009f30:	2301      	movs	r3, #1
 8009f32:	6163      	str	r3, [r4, #20]
 8009f34:	b002      	add	sp, #8
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	ab01      	add	r3, sp, #4
 8009f3a:	466a      	mov	r2, sp
 8009f3c:	f7ff ffca 	bl	8009ed4 <__swhatbuf_r>
 8009f40:	9900      	ldr	r1, [sp, #0]
 8009f42:	4605      	mov	r5, r0
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff f987 	bl	8009258 <_malloc_r>
 8009f4a:	b948      	cbnz	r0, 8009f60 <__smakebuf_r+0x44>
 8009f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f50:	059a      	lsls	r2, r3, #22
 8009f52:	d4ef      	bmi.n	8009f34 <__smakebuf_r+0x18>
 8009f54:	f023 0303 	bic.w	r3, r3, #3
 8009f58:	f043 0302 	orr.w	r3, r3, #2
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	e7e3      	b.n	8009f28 <__smakebuf_r+0xc>
 8009f60:	4b0d      	ldr	r3, [pc, #52]	; (8009f98 <__smakebuf_r+0x7c>)
 8009f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	6020      	str	r0, [r4, #0]
 8009f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	9b00      	ldr	r3, [sp, #0]
 8009f70:	6163      	str	r3, [r4, #20]
 8009f72:	9b01      	ldr	r3, [sp, #4]
 8009f74:	6120      	str	r0, [r4, #16]
 8009f76:	b15b      	cbz	r3, 8009f90 <__smakebuf_r+0x74>
 8009f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f000 f8d1 	bl	800a124 <_isatty_r>
 8009f82:	b128      	cbz	r0, 8009f90 <__smakebuf_r+0x74>
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	81a3      	strh	r3, [r4, #12]
 8009f90:	89a0      	ldrh	r0, [r4, #12]
 8009f92:	4305      	orrs	r5, r0
 8009f94:	81a5      	strh	r5, [r4, #12]
 8009f96:	e7cd      	b.n	8009f34 <__smakebuf_r+0x18>
 8009f98:	08009d2d 	.word	0x08009d2d

08009f9c <_malloc_usable_size_r>:
 8009f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa0:	1f18      	subs	r0, r3, #4
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfbc      	itt	lt
 8009fa6:	580b      	ldrlt	r3, [r1, r0]
 8009fa8:	18c0      	addlt	r0, r0, r3
 8009faa:	4770      	bx	lr

08009fac <_raise_r>:
 8009fac:	291f      	cmp	r1, #31
 8009fae:	b538      	push	{r3, r4, r5, lr}
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	d904      	bls.n	8009fc0 <_raise_r+0x14>
 8009fb6:	2316      	movs	r3, #22
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fc2:	b112      	cbz	r2, 8009fca <_raise_r+0x1e>
 8009fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fc8:	b94b      	cbnz	r3, 8009fde <_raise_r+0x32>
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 f830 	bl	800a030 <_getpid_r>
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fda:	f000 b817 	b.w	800a00c <_kill_r>
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d00a      	beq.n	8009ff8 <_raise_r+0x4c>
 8009fe2:	1c59      	adds	r1, r3, #1
 8009fe4:	d103      	bne.n	8009fee <_raise_r+0x42>
 8009fe6:	2316      	movs	r3, #22
 8009fe8:	6003      	str	r3, [r0, #0]
 8009fea:	2001      	movs	r0, #1
 8009fec:	e7e7      	b.n	8009fbe <_raise_r+0x12>
 8009fee:	2400      	movs	r4, #0
 8009ff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	4798      	blx	r3
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e7e0      	b.n	8009fbe <_raise_r+0x12>

08009ffc <raise>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <raise+0xc>)
 8009ffe:	4601      	mov	r1, r0
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f7ff bfd3 	b.w	8009fac <_raise_r>
 800a006:	bf00      	nop
 800a008:	20000024 	.word	0x20000024

0800a00c <_kill_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d07      	ldr	r5, [pc, #28]	; (800a02c <_kill_r+0x20>)
 800a010:	2300      	movs	r3, #0
 800a012:	4604      	mov	r4, r0
 800a014:	4608      	mov	r0, r1
 800a016:	4611      	mov	r1, r2
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	f7f7 fe03 	bl	8001c24 <_kill>
 800a01e:	1c43      	adds	r3, r0, #1
 800a020:	d102      	bne.n	800a028 <_kill_r+0x1c>
 800a022:	682b      	ldr	r3, [r5, #0]
 800a024:	b103      	cbz	r3, 800a028 <_kill_r+0x1c>
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	bf00      	nop
 800a02c:	20000958 	.word	0x20000958

0800a030 <_getpid_r>:
 800a030:	f7f7 bdf0 	b.w	8001c14 <_getpid>

0800a034 <__sread>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a03c:	f000 f894 	bl	800a168 <_read_r>
 800a040:	2800      	cmp	r0, #0
 800a042:	bfab      	itete	ge
 800a044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a046:	89a3      	ldrhlt	r3, [r4, #12]
 800a048:	181b      	addge	r3, r3, r0
 800a04a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a04e:	bfac      	ite	ge
 800a050:	6563      	strge	r3, [r4, #84]	; 0x54
 800a052:	81a3      	strhlt	r3, [r4, #12]
 800a054:	bd10      	pop	{r4, pc}

0800a056 <__swrite>:
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	461f      	mov	r7, r3
 800a05c:	898b      	ldrh	r3, [r1, #12]
 800a05e:	05db      	lsls	r3, r3, #23
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	4616      	mov	r6, r2
 800a066:	d505      	bpl.n	800a074 <__swrite+0x1e>
 800a068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06c:	2302      	movs	r3, #2
 800a06e:	2200      	movs	r2, #0
 800a070:	f000 f868 	bl	800a144 <_lseek_r>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a07a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	4632      	mov	r2, r6
 800a082:	463b      	mov	r3, r7
 800a084:	4628      	mov	r0, r5
 800a086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a08a:	f000 b817 	b.w	800a0bc <_write_r>

0800a08e <__sseek>:
 800a08e:	b510      	push	{r4, lr}
 800a090:	460c      	mov	r4, r1
 800a092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a096:	f000 f855 	bl	800a144 <_lseek_r>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	bf15      	itete	ne
 800a0a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0aa:	81a3      	strheq	r3, [r4, #12]
 800a0ac:	bf18      	it	ne
 800a0ae:	81a3      	strhne	r3, [r4, #12]
 800a0b0:	bd10      	pop	{r4, pc}

0800a0b2 <__sclose>:
 800a0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b6:	f000 b813 	b.w	800a0e0 <_close_r>
	...

0800a0bc <_write_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	; (800a0dc <_write_r+0x20>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	602a      	str	r2, [r5, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7f7 fde1 	bl	8001c92 <_write>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_write_r+0x1e>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_write_r+0x1e>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20000958 	.word	0x20000958

0800a0e0 <_close_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_close_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f7 fded 	bl	8001cca <_close>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_close_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_close_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20000958 	.word	0x20000958

0800a100 <_fstat_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d07      	ldr	r5, [pc, #28]	; (800a120 <_fstat_r+0x20>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f7f7 fde8 	bl	8001ce2 <_fstat>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d102      	bne.n	800a11c <_fstat_r+0x1c>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	b103      	cbz	r3, 800a11c <_fstat_r+0x1c>
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	bf00      	nop
 800a120:	20000958 	.word	0x20000958

0800a124 <_isatty_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d06      	ldr	r5, [pc, #24]	; (800a140 <_isatty_r+0x1c>)
 800a128:	2300      	movs	r3, #0
 800a12a:	4604      	mov	r4, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	f7f7 fde7 	bl	8001d02 <_isatty>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_isatty_r+0x1a>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_isatty_r+0x1a>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	20000958 	.word	0x20000958

0800a144 <_lseek_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d07      	ldr	r5, [pc, #28]	; (800a164 <_lseek_r+0x20>)
 800a148:	4604      	mov	r4, r0
 800a14a:	4608      	mov	r0, r1
 800a14c:	4611      	mov	r1, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	602a      	str	r2, [r5, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	f7f7 fde0 	bl	8001d18 <_lseek>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_lseek_r+0x1e>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_lseek_r+0x1e>
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	20000958 	.word	0x20000958

0800a168 <_read_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d07      	ldr	r5, [pc, #28]	; (800a188 <_read_r+0x20>)
 800a16c:	4604      	mov	r4, r0
 800a16e:	4608      	mov	r0, r1
 800a170:	4611      	mov	r1, r2
 800a172:	2200      	movs	r2, #0
 800a174:	602a      	str	r2, [r5, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	f7f7 fd6e 	bl	8001c58 <_read>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_read_r+0x1e>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_read_r+0x1e>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	20000958 	.word	0x20000958

0800a18c <_init>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr

0800a198 <_fini>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr
