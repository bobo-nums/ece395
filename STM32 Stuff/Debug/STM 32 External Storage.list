
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08007bd0  08007bd0  00017bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ec  080080ec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f4  080080f4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080080fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          000006f4  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013866  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd0  00000000  00000000  00033a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  00037350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004abc  00000000  00000000  00037f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109a9  00000000  00000000  0003c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd082  00000000  00000000  0004d38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011a40f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004554  00000000  00000000  0011a464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bb4 	.word	0x08007bb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08007bb4 	.word	0x08007bb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <BME_init>:
 *      Author: bobox
 */

#include "bme.h"

bool BME_init(SPI_HandleTypeDef* spi){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(BME_read8(spi, BME280_REGISTER_CHIPID) != 0x60){
 8000ea8:	21d0      	movs	r1, #208	; 0xd0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f8cc 	bl	8001048 <BME_read8>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b60      	cmp	r3, #96	; 0x60
 8000eb4:	d001      	beq.n	8000eba <BME_init+0x1a>
    return false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e01b      	b.n	8000ef2 <BME_init+0x52>
  }
  BME_write8(spi, BME280_REGISTER_SOFTRESET, 0xB6);
 8000eba:	22b6      	movs	r2, #182	; 0xb6
 8000ebc:	21e0      	movs	r1, #224	; 0xe0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f81c 	bl	8000efc <BME_write8>
  HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f000 fec5 	bl	8001c54 <HAL_Delay>
  while(isReadingCalibration(spi)){
 8000eca:	e002      	b.n	8000ed2 <BME_init+0x32>
    HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f000 fec1 	bl	8001c54 <HAL_Delay>
  while(isReadingCalibration(spi)){
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f838 	bl	8000f48 <isReadingCalibration>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f6      	bne.n	8000ecc <BME_init+0x2c>
  }
  readCoefficients(spi);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f848 	bl	8000f74 <readCoefficients>
  setSampling(spi);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f867 	bl	8000fb8 <setSampling>
  HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f000 feb2 	bl	8001c54 <HAL_Delay>
  return true;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <BME_write8>:

void BME_write8(SPI_HandleTypeDef* spi, uint8_t addr, uint8_t val){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	70bb      	strb	r3, [r7, #2]
  uint8_t buf[2];
  buf[0] = addr & ~0x80;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	733b      	strb	r3, [r7, #12]
  buf[1] = val;
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <BME_write8+0x48>)
 8000f20:	f001 f93e 	bl	80021a0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi, &buf, 2, 100);
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f002 f985 	bl	800323c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <BME_write8+0x48>)
 8000f38:	f001 f932 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <isReadingCalibration>:

bool isReadingCalibration(SPI_HandleTypeDef* spi){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint8_t const rStatus = BME_read8(spi, BME280_REGISTER_STATUS);
 8000f50:	21f3      	movs	r1, #243	; 0xf3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f878 	bl	8001048 <BME_read8>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
  return (rStatus & (1 << 0)) != 0;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <readCoefficients>:

void readCoefficients(SPI_HandleTypeDef* spi){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  _bme280_calib.dig_T1 = BME_read16_LE(spi, BME280_REGISTER_DIG_T1);
 8000f7c:	2188      	movs	r1, #136	; 0x88
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f836 	bl	8000ff0 <BME_read16_LE>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <readCoefficients+0x40>)
 8000f8a:	801a      	strh	r2, [r3, #0]
  _bme280_calib.dig_T2 = BME_readS16_LE(spi, BME280_REGISTER_DIG_T2);
 8000f8c:	218a      	movs	r1, #138	; 0x8a
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f849 	bl	8001026 <BME_readS16_LE>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <readCoefficients+0x40>)
 8000f9a:	805a      	strh	r2, [r3, #2]
  _bme280_calib.dig_T3 = BME_readS16_LE(spi, BME280_REGISTER_DIG_T3);
 8000f9c:	218c      	movs	r1, #140	; 0x8c
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f841 	bl	8001026 <BME_readS16_LE>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <readCoefficients+0x40>)
 8000faa:	809a      	strh	r2, [r3, #4]
  // _bme280_calib.dig_H3 = BME_read8(spi, BME280_REGISTER_DIG_H3);

  // _bme280_calib.dig_H4 = ((int8_t)BME_read8(spi, BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
  // _bme280_calib.dig_H5 = ((int8_t)BME_read8(spi, BME280_REGISTER_DIG_H5 + 1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
  // _bme280_calib.dig_H6 = (int8_t)BME_read8(spi, BME280_REGISTER_DIG_H6);
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000032c 	.word	0x2000032c

08000fb8 <setSampling>:
                   sensor_sampling pressSampling = SAMPLING_X16,
                   sensor_sampling humSampling = SAMPLING_X16,
                   sensor_filter filter = FILTER_OFF,
                   standby_duration duration = STANDBY_MS_0_5);
*/
void setSampling(SPI_HandleTypeDef* spi){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  BME_write8(spi, BME280_REGISTER_CONTROL, MODE_SLEEP);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	21f4      	movs	r1, #244	; 0xf4
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff99 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONTROLHUMID, SAMPLING_X16);
 8000fca:	2205      	movs	r2, #5
 8000fcc:	21f2      	movs	r1, #242	; 0xf2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff94 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONFIG, (STANDBY_MS_0_5 << 5) | (FILTER_OFF << 2) | 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21f5      	movs	r1, #245	; 0xf5
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff8f 	bl	8000efc <BME_write8>
  BME_write8(spi, BME280_REGISTER_CONTROL, (SAMPLING_X16 << 5) | (SAMPLING_X16 << 2) | MODE_NORMAL);
 8000fde:	22b7      	movs	r2, #183	; 0xb7
 8000fe0:	21f4      	movs	r1, #244	; 0xf4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff8a 	bl	8000efc <BME_write8>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <BME_read16_LE>:

uint16_t BME_read16_LE(SPI_HandleTypeDef* spi, uint8_t addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  uint16_t temp = BME_read16(spi, addr);
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f84b 	bl	800109c <BME_read16>
 8001006:	4603      	mov	r3, r0
 8001008:	81fb      	strh	r3, [r7, #14]
  return (temp >> 8) | (temp << 8);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <BME_readS16_LE>:

int16_t BME_readS16_LE(SPI_HandleTypeDef* spi, uint8_t addr){
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
  return (int16_t)BME_read16_LE(spi, addr);
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffda 	bl	8000ff0 <BME_read16_LE>
 800103c:	4603      	mov	r3, r0
 800103e:	b21b      	sxth	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <BME_read8>:

uint8_t BME_read8(SPI_HandleTypeDef* spi, uint8_t addr){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];
    addr = (uint8_t)(addr | 0x80);
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105a:	b2db      	uxtb	r3, r3
 800105c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <BME_read8+0x50>)
 8001064:	f001 f89c 	bl	80021a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 8001068:	1cf9      	adds	r1, r7, #3
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	2201      	movs	r2, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 f8e4 	bl	800323c <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 1, 100);
 8001074:	f107 010c 	add.w	r1, r7, #12
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	2201      	movs	r2, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f002 fa19 	bl	80034b4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <BME_read8+0x50>)
 8001088:	f001 f88a 	bl	80021a0 <HAL_GPIO_WritePin>
    return buf[0];
 800108c:	7b3b      	ldrb	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800

0800109c <BME_read16>:

uint16_t BME_read16(SPI_HandleTypeDef* spi, uint8_t addr){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  uint8_t buf[2];
  addr = (uint8_t)(addr | 0x80);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <BME_read16+0x5c>)
 80010b8:	f001 f872 	bl	80021a0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi, &addr, 1, 100);
 80010bc:	1cf9      	adds	r1, r7, #3
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	2201      	movs	r2, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f002 f8ba 	bl	800323c <HAL_SPI_Transmit>
  HAL_SPI_Receive(spi, buf, 3, 100);
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2203      	movs	r2, #3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f002 f9ef 	bl	80034b4 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <BME_read16+0x5c>)
 80010dc:	f001 f860 	bl	80021a0 <HAL_GPIO_WritePin>
  return (uint16_t)(buf[0]) << 8 | (uint16_t)(buf[1]);
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020800 	.word	0x40020800

080010fc <BME_read24>:

uint32_t BME_read24(SPI_HandleTypeDef* spi, uint8_t addr){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[3];
    addr = (uint8_t)(addr | 0x80);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110e:	b2db      	uxtb	r3, r3
 8001110:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4810      	ldr	r0, [pc, #64]	; (8001158 <BME_read24+0x5c>)
 8001118:	f001 f842 	bl	80021a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr, 1, 100);
 800111c:	1cf9      	adds	r1, r7, #3
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	2201      	movs	r2, #1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f002 f88a 	bl	800323c <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, buf, 3, 100);
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	2203      	movs	r2, #3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f002 f9bf 	bl	80034b4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <BME_read24+0x5c>)
 800113c:	f001 f830 	bl	80021a0 <HAL_GPIO_WritePin>
    return (uint32_t)buf[0] << 16 | (uint32_t)buf[1] << 8 | (uint32_t)buf[2];
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4313      	orrs	r3, r2
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	4313      	orrs	r3, r2
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020800 	.word	0x40020800

0800115c <BME_readTemperature>:

float BME_readTemperature(SPI_HandleTypeDef* spi) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = BME_read24(spi, BME280_REGISTER_TEMPDATA);
 8001164:	21fa      	movs	r1, #250	; 0xfa
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffc8 	bl	80010fc <BME_read24>
 800116c:	4603      	mov	r3, r0
 800116e:	61fb      	str	r3, [r7, #28]
  if (adc_T == 0x800000){ // value in case temp measurement was disabled
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001176:	d102      	bne.n	800117e <BME_readTemperature+0x22>
    return -1;
 8001178:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800117c:	e050      	b.n	8001220 <BME_readTemperature+0xc4>
  }
  adc_T >>= 4;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	111b      	asrs	r3, r3, #4
 8001182:	61fb      	str	r3, [r7, #28]

  var1 = (int32_t)((adc_T / 8) - ((int32_t)_bme280_calib.dig_T1 * 2));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <BME_readTemperature+0x30>
 800118a:	3307      	adds	r3, #7
 800118c:	10db      	asrs	r3, r3, #3
 800118e:	461a      	mov	r2, r3
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <BME_readTemperature+0xd4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	61bb      	str	r3, [r7, #24]
  var1 = (var1 * ((int32_t)_bme280_calib.dig_T2)) / 2048;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <BME_readTemperature+0xd4>)
 800119c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a0:	461a      	mov	r2, r3
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	fb03 f302 	mul.w	r3, r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da01      	bge.n	80011b0 <BME_readTemperature+0x54>
 80011ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011b0:	12db      	asrs	r3, r3, #11
 80011b2:	61bb      	str	r3, [r7, #24]
  var2 = (int32_t)((adc_T / 16) - ((int32_t)_bme280_calib.dig_T1));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da00      	bge.n	80011bc <BME_readTemperature+0x60>
 80011ba:	330f      	adds	r3, #15
 80011bc:	111b      	asrs	r3, r3, #4
 80011be:	461a      	mov	r2, r3
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <BME_readTemperature+0xd4>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  var2 = (((var2 * var2) / 4096) * ((int32_t)_bme280_calib.dig_T3)) / 16384;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fb03 f303 	mul.w	r3, r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da01      	bge.n	80011d6 <BME_readTemperature+0x7a>
 80011d2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80011d6:	131b      	asrs	r3, r3, #12
 80011d8:	461a      	mov	r2, r3
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <BME_readTemperature+0xd4>)
 80011dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011e0:	fb03 f302 	mul.w	r3, r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da02      	bge.n	80011ee <BME_readTemperature+0x92>
 80011e8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80011ec:	333f      	adds	r3, #63	; 0x3f
 80011ee:	139b      	asrs	r3, r3, #14
 80011f0:	617b      	str	r3, [r7, #20]

  int32_t t_fine = var1 + var2;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]

  int32_t T = (t_fine * 5 + 128) / 256;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3380      	adds	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <BME_readTemperature+0xae>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	60fb      	str	r3, [r7, #12]

  return (float)T / 100;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001234 <BME_readTemperature+0xd8>
 800121c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001220:	eef0 7a47 	vmov.f32	s15, s14
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000032c 	.word	0x2000032c
 8001234:	42c80000 	.word	0x42c80000

08001238 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8001238:	b40f      	push	{r0, r1, r2, r3}
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <myprintf+0x44>)
 8001250:	f004 fa96 	bl	8005780 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <myprintf+0x44>)
 8001256:	f7fe ffbb 	bl	80001d0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	b29a      	uxth	r2, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	4905      	ldr	r1, [pc, #20]	; (800127c <myprintf+0x44>)
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <myprintf+0x48>)
 800126a:	f002 fd54 	bl	8003d16 <HAL_UART_Transmit>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001278:	b004      	add	sp, #16
 800127a:	4770      	bx	lr
 800127c:	20000210 	.word	0x20000210
 8001280:	20000420 	.word	0x20000420

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f000 fc71 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f825 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001292:	f000 f97b 	bl	800158c <MX_GPIO_Init>
  MX_FATFS_Init();
 8001296:	f003 f807 	bl	80042a8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800129a:	f000 f94d 	bl	8001538 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800129e:	f000 f915 	bl	80014cc <MX_SPI3_Init>
  MX_RTC_Init();
 80012a2:	f000 f87b 	bl	800139c <MX_RTC_Init>
  MX_SPI2_Init();
 80012a6:	f000 f8d9 	bl	800145c <MX_SPI2_Init>

  // reset timer to 0
  // if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x0000){
  //   rtc_set_time(&hrtc);
  // }
  BME_init(&hspi3);
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <main+0x50>)
 80012ac:	f7ff fdf8 	bl	8000ea0 <BME_init>
    // HALL_read(&hspi2, &buf[0]);
    // myprintf("%x %x %x %x | ", buf[0], buf[1], buf[2], buf[3]);
    // HAL_Delay(500);

    float temp;
    temp = BME_readTemperature(&hspi3);
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <main+0x50>)
 80012b2:	f7ff ff53 	bl	800115c <BME_readTemperature>
 80012b6:	ed87 0a01 	vstr	s0, [r7, #4]
    myprintf("%.6f   ", temp);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f944 	bl	8000548 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <main+0x54>)
 80012c6:	f7ff ffb7 	bl	8001238 <myprintf>
    HAL_Delay(1000);
 80012ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ce:	f000 fcc1 	bl	8001c54 <HAL_Delay>
  {
 80012d2:	e7ed      	b.n	80012b0 <main+0x2c>
 80012d4:	200003a8 	.word	0x200003a8
 80012d8:	08007ce8 	.word	0x08007ce8

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	; 0x50
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	2230      	movs	r2, #48	; 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fdaa 	bl	8004e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <SystemClock_Config+0xb8>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a22      	ldr	r2, [pc, #136]	; (8001394 <SystemClock_Config+0xb8>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <SystemClock_Config+0xb8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <SystemClock_Config+0xbc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <SystemClock_Config+0xbc>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <SystemClock_Config+0xbc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001338:	230a      	movs	r3, #10
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4618      	mov	r0, r3
 8001352:	f000 ff3f 	bl	80021d4 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800135c:	f000 f9bc 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f9a2 	bl	80026c4 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001386:	f000 f9a7 	bl	80016d8 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	; 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_RTC_Init+0xb8>)
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <MX_RTC_Init+0xbc>)
 80013b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_RTC_Init+0xb8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_RTC_Init+0xb8>)
 80013c2:	227f      	movs	r2, #127	; 0x7f
 80013c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_RTC_Init+0xb8>)
 80013c8:	22ff      	movs	r2, #255	; 0xff
 80013ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_RTC_Init+0xb8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_RTC_Init+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_RTC_Init+0xb8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <MX_RTC_Init+0xb8>)
 80013e0:	f001 fc22 	bl	8002c28 <HAL_RTC_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 f975 	bl	80016d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	4812      	ldr	r0, [pc, #72]	; (8001454 <MX_RTC_Init+0xb8>)
 800140a:	f001 fc9e 	bl	8002d4a <HAL_RTC_SetTime>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001414:	f000 f960 	bl	80016d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001418:	2301      	movs	r3, #1
 800141a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800141c:	2301      	movs	r3, #1
 800141e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001420:	2301      	movs	r3, #1
 8001422:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001424:	2300      	movs	r3, #0
 8001426:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <MX_RTC_Init+0xb8>)
 8001430:	f001 fd48 	bl	8002ec4 <HAL_RTC_SetDate>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800143a:	f000 f94d 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register 
 800143e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001442:	2101      	movs	r1, #1
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_RTC_Init+0xb8>)
 8001446:	f001 fe56 	bl	80030f6 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000400 	.word	0x20000400
 8001458:	40002800 	.word	0x40002800

0800145c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <MX_SPI2_Init+0x6c>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001470:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001474:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI2_Init+0x68>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI2_Init+0x68>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001492:	2238      	movs	r2, #56	; 0x38
 8001494:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI2_Init+0x68>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_SPI2_Init+0x68>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI2_Init+0x68>)
 80014aa:	220a      	movs	r2, #10
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_SPI2_Init+0x68>)
 80014b0:	f001 fe3b 	bl	800312a <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80014ba:	f000 f90d 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000350 	.word	0x20000350
 80014c8:	40003800 	.word	0x40003800

080014cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_SPI3_Init+0x64>)
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <MX_SPI3_Init+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI3_Init+0x64>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI3_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_SPI3_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI3_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI3_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI3_Init+0x64>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI3_Init+0x64>)
 8001500:	2238      	movs	r2, #56	; 0x38
 8001502:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_SPI3_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI3_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_SPI3_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI3_Init+0x64>)
 8001518:	220a      	movs	r2, #10
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_SPI3_Init+0x64>)
 800151e:	f001 fe04 	bl	800312a <HAL_SPI_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001528:	f000 f8d6 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200003a8 	.word	0x200003a8
 8001534:	40003c00 	.word	0x40003c00

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001570:	f002 fb84 	bl	8003c7c <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f8ad 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000420 	.word	0x20000420
 8001588:	40004400 	.word	0x40004400

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b45      	ldr	r3, [pc, #276]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a40      	ldr	r2, [pc, #256]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <MX_GPIO_Init+0x13c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <MX_GPIO_Init+0x13c>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <MX_GPIO_Init+0x13c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_GPIO_Init+0x13c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a2b      	ldr	r2, [pc, #172]	; (80016c8 <MX_GPIO_Init+0x13c>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <MX_GPIO_Init+0x13c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001634:	4825      	ldr	r0, [pc, #148]	; (80016cc <MX_GPIO_Init+0x140>)
 8001636:	f000 fdb3 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AMT_CS_Pin|BME_CS_Pin|HALL_CS_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <MX_GPIO_Init+0x144>)
 8001642:	f000 fdad 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2102      	movs	r1, #2
 800164a:	4822      	ldr	r0, [pc, #136]	; (80016d4 <MX_GPIO_Init+0x148>)
 800164c:	f000 fda8 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	481c      	ldr	r0, [pc, #112]	; (80016d4 <MX_GPIO_Init+0x148>)
 8001664:	f000 fc00 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_CS_Pin */
  GPIO_InitStruct.Pin = INA_CS_Pin;
 8001668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INA_CS_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <MX_GPIO_Init+0x140>)
 8001682:	f000 fbf1 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMT_CS_Pin BME_CS_Pin HALL_CS_Pin */
  GPIO_InitStruct.Pin = AMT_CS_Pin|BME_CS_Pin|HALL_CS_Pin;
 8001686:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_GPIO_Init+0x144>)
 80016a0:	f000 fbe2 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_GPIO_Init+0x148>)
 80016bc:	f000 fbd4 	bl	8001e68 <HAL_GPIO_Init>

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40021000 	.word	0x40021000

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x4c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_RTC_MspInit+0x4c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d111      	bne.n	8001778 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001754:	2302      	movs	r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800175c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f97e 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800176e:	f7ff ffb3 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_RTC_MspInit+0x50>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40002800 	.word	0x40002800
 8001784:	42470e3c 	.word	0x42470e3c

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_SPI_MspInit+0xec>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12d      	bne.n	8001806 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f4:	2305      	movs	r3, #5
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	481f      	ldr	r0, [pc, #124]	; (800187c <HAL_SPI_MspInit+0xf4>)
 8001800:	f000 fb32 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001804:	e031      	b.n	800186a <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_SPI_MspInit+0xf8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d12c      	bne.n	800186a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 800181a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_SPI_MspInit+0xf0>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001848:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185a:	2306      	movs	r3, #6
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <HAL_SPI_MspInit+0xfc>)
 8001866:	f000 faff 	bl	8001e68 <HAL_GPIO_Init>
}
 800186a:	bf00      	nop
 800186c:	3730      	adds	r7, #48	; 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40003800 	.word	0x40003800
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400
 8001880:	40003c00 	.word	0x40003c00
 8001884:	40020800 	.word	0x40020800

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_UART_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e2:	230c      	movs	r3, #12
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x8c>)
 80018fe:	f000 fab3 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004400 	.word	0x40004400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f956 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	return 1;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_kill>:

int _kill(int pid, int sig)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001986:	f003 fa33 	bl	8004df0 <__errno>
 800198a:	4603      	mov	r3, r0
 800198c:	2216      	movs	r2, #22
 800198e:	601a      	str	r2, [r3, #0]
	return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_exit>:

void _exit (int status)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ffe7 	bl	800197c <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ae:	e7fe      	b.n	80019ae <_exit+0x12>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
	}

return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_write+0x12>
	}
	return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_close>:

int _close(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
	return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f003 f998 	bl	8004df0 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20020000 	.word	0x20020000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	20000310 	.word	0x20000310
 8001af4:	200008e8 	.word	0x200008e8

08001af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
 8001b26:	2300      	movs	r3, #0
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:
 8001b2a:	58d4      	ldr	r4, [r2, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:
 8001b30:	18c4      	adds	r4, r0, r3
 8001b32:	428c      	cmp	r4, r1
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:
 8001b42:	42a2      	cmp	r2, r4
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>
 8001b46:	f7ff ffd7 	bl	8001af8 <SystemInit>
 8001b4a:	f003 f957 	bl	8004dfc <__libc_init_array>
 8001b4e:	f7ff fb99 	bl	8001284 <main>
 8001b52:	4770      	bx	lr
 8001b54:	20020000 	.word	0x20020000
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	200001f4 	.word	0x200001f4
 8001b60:	080080fc 	.word	0x080080fc
 8001b64:	200001f4 	.word	0x200001f4
 8001b68:	200008e8 	.word	0x200008e8

08001b6c <ADC_IRQHandler>:
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_Init+0x40>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_Init+0x40>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x40>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 f931 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	200f      	movs	r0, #15
 8001ba0:	f000 f808 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fd9e 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f93b 	bl	8001e4e <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 f911 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000464 	.word	0x20000464

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000464 	.word	0x20000464

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff47 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff5c 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffb0 	bl	8001dbc <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e16b      	b.n	800215c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 815a 	bne.w	8002156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80b4 	beq.w	8002156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b60      	ldr	r3, [pc, #384]	; (8002174 <HAL_GPIO_Init+0x30c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a5f      	ldr	r2, [pc, #380]	; (8002174 <HAL_GPIO_Init+0x30c>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_GPIO_Init+0x30c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200a:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <HAL_GPIO_Init+0x310>)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_GPIO_Init+0x314>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <HAL_GPIO_Init+0x226>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a51      	ldr	r2, [pc, #324]	; (8002180 <HAL_GPIO_Init+0x318>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_Init+0x222>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a50      	ldr	r2, [pc, #320]	; (8002184 <HAL_GPIO_Init+0x31c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x21e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4f      	ldr	r2, [pc, #316]	; (8002188 <HAL_GPIO_Init+0x320>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x21a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4e      	ldr	r2, [pc, #312]	; (800218c <HAL_GPIO_Init+0x324>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x216>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4d      	ldr	r2, [pc, #308]	; (8002190 <HAL_GPIO_Init+0x328>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x212>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_GPIO_Init+0x32c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4b      	ldr	r2, [pc, #300]	; (8002198 <HAL_GPIO_Init+0x330>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x20a>
 800206e:	2307      	movs	r3, #7
 8002070:	e00e      	b.n	8002090 <HAL_GPIO_Init+0x228>
 8002072:	2308      	movs	r3, #8
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x228>
 8002076:	2306      	movs	r3, #6
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x228>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x228>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x228>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x228>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x228>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x228>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x310>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_GPIO_Init+0x334>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_GPIO_Init+0x334>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_GPIO_Init+0x334>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_GPIO_Init+0x334>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_GPIO_Init+0x334>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_GPIO_Init+0x334>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_GPIO_Init+0x334>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a12      	ldr	r2, [pc, #72]	; (800219c <HAL_GPIO_Init+0x334>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae90 	bls.w	8001e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40021c00 	.word	0x40021c00
 800219c:	40013c00 	.word	0x40013c00

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	619a      	str	r2, [r3, #24]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e264      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d075      	beq.n	80022de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f2:	4ba3      	ldr	r3, [pc, #652]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d00c      	beq.n	8002218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fe:	4ba0      	ldr	r3, [pc, #640]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002206:	2b08      	cmp	r3, #8
 8002208:	d112      	bne.n	8002230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220a:	4b9d      	ldr	r3, [pc, #628]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002216:	d10b      	bne.n	8002230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	4b99      	ldr	r3, [pc, #612]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d05b      	beq.n	80022dc <HAL_RCC_OscConfig+0x108>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d157      	bne.n	80022dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e23f      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d106      	bne.n	8002248 <HAL_RCC_OscConfig+0x74>
 800223a:	4b91      	ldr	r3, [pc, #580]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a90      	ldr	r2, [pc, #576]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e01d      	b.n	8002284 <HAL_RCC_OscConfig+0xb0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x98>
 8002252:	4b8b      	ldr	r3, [pc, #556]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a8a      	ldr	r2, [pc, #552]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b88      	ldr	r3, [pc, #544]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a87      	ldr	r2, [pc, #540]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0xb0>
 800226c:	4b84      	ldr	r3, [pc, #528]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a83      	ldr	r2, [pc, #524]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b81      	ldr	r3, [pc, #516]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a80      	ldr	r2, [pc, #512]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fcd6 	bl	8001c3c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fcd2 	bl	8001c3c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e204      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0xc0>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fcc2 	bl	8001c3c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fcbe 	bl	8001c3c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1f0      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	4b6c      	ldr	r3, [pc, #432]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0xe8>
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d063      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f6:	4b62      	ldr	r3, [pc, #392]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d11c      	bne.n	800233c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d116      	bne.n	800233c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	4b5c      	ldr	r3, [pc, #368]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_RCC_OscConfig+0x152>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1c4      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b56      	ldr	r3, [pc, #344]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4952      	ldr	r1, [pc, #328]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	e03a      	b.n	80023b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x2b0>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7ff fc77 	bl	8001c3c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002352:	f7ff fc73 	bl	8001c3c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1a5      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4940      	ldr	r1, [pc, #256]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_OscConfig+0x2b0>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff fc56 	bl	8001c3c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002394:	f7ff fc52 	bl	8001c3c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e184      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d030      	beq.n	8002420 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCC_OscConfig+0x2b4>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7ff fc36 	bl	8001c3c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff fc32 	bl	8001c3c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e164      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x200>
 80023f2:	e015      	b.n	8002420 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x2b4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7ff fc1f 	bl	8001c3c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002402:	f7ff fc1b 	bl	8001c3c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e14d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a0 	beq.w	800256e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_OscConfig+0x2b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d121      	bne.n	80024ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_RCC_OscConfig+0x2b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_RCC_OscConfig+0x2b8>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002476:	f7ff fbe1 	bl	8001c3c <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e011      	b.n	80024a2 <HAL_RCC_OscConfig+0x2ce>
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	42470000 	.word	0x42470000
 8002488:	42470e80 	.word	0x42470e80
 800248c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7ff fbd4 	bl	8001c3c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e106      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b85      	ldr	r3, [pc, #532]	; (80026b8 <HAL_RCC_OscConfig+0x4e4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
 80024b6:	4b81      	ldr	r3, [pc, #516]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a80      	ldr	r2, [pc, #512]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x32a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x312>
 80024cc:	4b7b      	ldr	r3, [pc, #492]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a7a      	ldr	r2, [pc, #488]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	4b78      	ldr	r3, [pc, #480]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a77      	ldr	r2, [pc, #476]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x32a>
 80024e6:	4b75      	ldr	r3, [pc, #468]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a74      	ldr	r2, [pc, #464]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	4b72      	ldr	r3, [pc, #456]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a71      	ldr	r2, [pc, #452]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff fb99 	bl	8001c3c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff fb95 	bl	8001c3c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0c5      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b65      	ldr	r3, [pc, #404]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x33a>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb83 	bl	8001c3c <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb7f 	bl	8001c3c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0af      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a55      	ldr	r2, [pc, #340]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 809b 	beq.w	80026ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d05c      	beq.n	800263e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d141      	bne.n	8002610 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x4ec>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff fb53 	bl	8001c3c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff fb4f 	bl	8001c3c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e081      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	019b      	lsls	r3, r3, #6
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	3b01      	subs	r3, #1
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	4937      	ldr	r1, [pc, #220]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x4ec>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fb28 	bl	8001c3c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7ff fb24 	bl	8001c3c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e056      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x41c>
 800260e:	e04e      	b.n	80026ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x4ec>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fb11 	bl	8001c3c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff fb0d 	bl	8001c3c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e03f      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x44a>
 800263c:	e037      	b.n	80026ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e032      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_RCC_OscConfig+0x4e8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d028      	beq.n	80026aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d121      	bne.n	80026aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d11a      	bne.n	80026aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002680:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	3b01      	subs	r3, #1
 8002694:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d107      	bne.n	80026aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40007000 	.word	0x40007000
 80026bc:	40023800 	.word	0x40023800
 80026c0:	42470060 	.word	0x42470060

080026c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0cc      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b68      	ldr	r3, [pc, #416]	; (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d90c      	bls.n	8002700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b65      	ldr	r3, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d044      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d003      	beq.n	8002782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	2b03      	cmp	r3, #3
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e067      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b37      	ldr	r3, [pc, #220]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4934      	ldr	r1, [pc, #208]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b4:	f7ff fa42 	bl	8001c3c <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7ff fa3e 	bl	8001c3c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e04f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d20c      	bcs.n	800280c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f9a2 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00
 8002880:	40023800 	.word	0x40023800
 8002884:	08007cf0 	.word	0x08007cf0
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002896:	2100      	movs	r1, #0
 8002898:	6079      	str	r1, [r7, #4]
 800289a:	2100      	movs	r1, #0
 800289c:	60f9      	str	r1, [r7, #12]
 800289e:	2100      	movs	r1, #0
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028a2:	2100      	movs	r1, #0
 80028a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a6:	4952      	ldr	r1, [pc, #328]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028a8:	6889      	ldr	r1, [r1, #8]
 80028aa:	f001 010c 	and.w	r1, r1, #12
 80028ae:	2908      	cmp	r1, #8
 80028b0:	d00d      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x3e>
 80028b2:	2908      	cmp	r1, #8
 80028b4:	f200 8094 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x150>
 80028b8:	2900      	cmp	r1, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x32>
 80028bc:	2904      	cmp	r1, #4
 80028be:	d003      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x38>
 80028c0:	e08e      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c2:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80028c4:	60bb      	str	r3, [r7, #8]
       break;
 80028c6:	e08e      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80028ca:	60bb      	str	r3, [r7, #8]
      break;
 80028cc:	e08b      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ce:	4948      	ldr	r1, [pc, #288]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028d0:	6849      	ldr	r1, [r1, #4]
 80028d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80028d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d8:	4945      	ldr	r1, [pc, #276]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028da:	6849      	ldr	r1, [r1, #4]
 80028dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80028e0:	2900      	cmp	r1, #0
 80028e2:	d024      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e4:	4942      	ldr	r1, [pc, #264]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028e6:	6849      	ldr	r1, [r1, #4]
 80028e8:	0989      	lsrs	r1, r1, #6
 80028ea:	4608      	mov	r0, r1
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80028f4:	f04f 0500 	mov.w	r5, #0
 80028f8:	ea00 0204 	and.w	r2, r0, r4
 80028fc:	ea01 0305 	and.w	r3, r1, r5
 8002900:	493d      	ldr	r1, [pc, #244]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002902:	fb01 f003 	mul.w	r0, r1, r3
 8002906:	2100      	movs	r1, #0
 8002908:	fb01 f102 	mul.w	r1, r1, r2
 800290c:	1844      	adds	r4, r0, r1
 800290e:	493a      	ldr	r1, [pc, #232]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002910:	fba2 0101 	umull	r0, r1, r2, r1
 8002914:	1863      	adds	r3, r4, r1
 8002916:	4619      	mov	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f7fe f942 	bl	8000ba8 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e04a      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	461a      	mov	r2, r3
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	ea02 0400 	and.w	r4, r2, r0
 8002946:	ea03 0501 	and.w	r5, r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	014b      	lsls	r3, r1, #5
 8002958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800295c:	0142      	lsls	r2, r0, #5
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	1b00      	subs	r0, r0, r4
 8002964:	eb61 0105 	sbc.w	r1, r1, r5
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	018b      	lsls	r3, r1, #6
 8002972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002976:	0182      	lsls	r2, r0, #6
 8002978:	1a12      	subs	r2, r2, r0
 800297a:	eb63 0301 	sbc.w	r3, r3, r1
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	00d9      	lsls	r1, r3, #3
 8002988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800298c:	00d0      	lsls	r0, r2, #3
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	1912      	adds	r2, r2, r4
 8002994:	eb45 0303 	adc.w	r3, r5, r3
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0299      	lsls	r1, r3, #10
 80029a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029a6:	0290      	lsls	r0, r2, #10
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f7fe f8f6 	bl	8000ba8 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	60bb      	str	r3, [r7, #8]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80029e2:	60bb      	str	r3, [r7, #8]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	68bb      	ldr	r3, [r7, #8]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdb0      	pop	{r4, r5, r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	017d7840 	.word	0x017d7840

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000000 	.word	0x20000000

08002a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a18:	f7ff fff0 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0a9b      	lsrs	r3, r3, #10
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08007d00 	.word	0x08007d00

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a40:	f7ff ffdc 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0b5b      	lsrs	r3, r3, #13
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4903      	ldr	r1, [pc, #12]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08007d00 	.word	0x08007d00

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d035      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a92:	f7ff f8d3 	bl	8001c3c <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a9a:	f7ff f8cf 	bl	8001c3c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0b0      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	019a      	lsls	r2, r3, #6
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	071b      	lsls	r3, r3, #28
 8002ac4:	4955      	ldr	r1, [pc, #340]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002acc:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad2:	f7ff f8b3 	bl	8001c3c <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ada:	f7ff f8af 	bl	8001c3c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e090      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8083 	beq.w	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a43      	ldr	r2, [pc, #268]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b22:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a3e      	ldr	r2, [pc, #248]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b2e:	f7ff f885 	bl	8001c3c <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7ff f881 	bl	8001c3c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e062      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b48:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d028      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b88:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d114      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7ff f84f 	bl	8001c3c <HAL_GetTick>
 8002b9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7ff f84b 	bl	8001c3c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e02a      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ee      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd0:	d10d      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	490d      	ldr	r1, [pc, #52]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]
 8002bec:	e005      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bf4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bf8:	6093      	str	r3, [r2, #8]
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	4905      	ldr	r1, [pc, #20]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	42470068 	.word	0x42470068
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000
 8002c24:	42470e40 	.word	0x42470e40

08002c28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e083      	b.n	8002d42 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7f5b      	ldrb	r3, [r3, #29]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fd72 	bl	8001734 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22ca      	movs	r2, #202	; 0xca
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2253      	movs	r2, #83	; 0x53
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9fb 	bl	8003062 <RTC_EnterInitMode>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e05e      	b.n	8002d42 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6899      	ldr	r1, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	041a      	lsls	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10e      	bne.n	8002d10 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f98d 	bl	8003012 <HAL_RTC_WaitForSynchro>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	22ff      	movs	r2, #255	; 0xff
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e018      	b.n	8002d42 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	7f1b      	ldrb	r3, [r3, #28]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_RTC_SetTime+0x1c>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0aa      	b.n	8002ebc <HAL_RTC_SetTime+0x172>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d126      	bne.n	8002dc6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f992 	bl	80030ba <RTC_ByteToBcd2>
 8002d96:	4603      	mov	r3, r0
 8002d98:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f98b 	bl	80030ba <RTC_ByteToBcd2>
 8002da4:	4603      	mov	r3, r0
 8002da6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002da8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	789b      	ldrb	r3, [r3, #2]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f983 	bl	80030ba <RTC_ByteToBcd2>
 8002db4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002db6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	78db      	ldrb	r3, [r3, #3]
 8002dbe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e018      	b.n	8002df8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002de6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	78db      	ldrb	r3, [r3, #3]
 8002df2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22ca      	movs	r2, #202	; 0xca
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2253      	movs	r2, #83	; 0x53
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f92a 	bl	8003062 <RTC_EnterInitMode>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e047      	b.n	8002ebc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e4a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d111      	bne.n	8002ea6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8c5 	bl	8003012 <HAL_RTC_WaitForSynchro>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00a      	b.n	8002ebc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	22ff      	movs	r2, #255	; 0xff
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002eba:	2300      	movs	r3, #0
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	7f1b      	ldrb	r3, [r3, #28]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_RTC_SetDate+0x1c>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e094      	b.n	800300a <HAL_RTC_SetDate+0x146>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <HAL_RTC_SetDate+0x4c>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	785b      	ldrb	r3, [r3, #1]
 8002f02:	f023 0310 	bic.w	r3, r3, #16
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	330a      	adds	r3, #10
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11c      	bne.n	8002f50 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	78db      	ldrb	r3, [r3, #3]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f8cd 	bl	80030ba <RTC_ByteToBcd2>
 8002f20:	4603      	mov	r3, r0
 8002f22:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f8c6 	bl	80030ba <RTC_ByteToBcd2>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f32:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	789b      	ldrb	r3, [r3, #2]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f8be 	bl	80030ba <RTC_ByteToBcd2>
 8002f3e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f40:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e00e      	b.n	8002f6e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	78db      	ldrb	r3, [r3, #3]
 8002f54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f5c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	22ca      	movs	r2, #202	; 0xca
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2253      	movs	r2, #83	; 0x53
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f86f 	bl	8003062 <RTC_EnterInitMode>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2204      	movs	r2, #4
 8002f96:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e033      	b.n	800300a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fb0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f81e 	bl	8003012 <HAL_RTC_WaitForSynchro>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00a      	b.n	800300a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	22ff      	movs	r2, #255	; 0xff
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}

08003012 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800302c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800302e:	f7fe fe05 	bl	8001c3c <HAL_GetTick>
 8003032:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003034:	e009      	b.n	800304a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003036:	f7fe fe01 	bl	8001c3c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003044:	d901      	bls.n	800304a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e007      	b.n	800305a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ee      	beq.n	8003036 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d119      	bne.n	80030b0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003086:	f7fe fdd9 	bl	8001c3c <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800308c:	e009      	b.n	80030a2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800308e:	f7fe fdd5 	bl	8001c3c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309c:	d901      	bls.n	80030a2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e007      	b.n	80030b2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ee      	beq.n	800308e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80030c8:	e005      	b.n	80030d6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	3b0a      	subs	r3, #10
 80030d4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d8f6      	bhi.n	80030ca <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b2db      	uxtb	r3, r3
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3350      	adds	r3, #80	; 0x50
 800310c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07b      	b.n	8003234 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314c:	d009      	beq.n	8003162 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
 8003154:	e005      	b.n	8003162 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fe fb03 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003198:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	ea42 0103 	orr.w	r1, r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0104 	and.w	r1, r3, #4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f003 0210 	and.w	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003222:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_SPI_Transmit+0x22>
 800325a:	2302      	movs	r3, #2
 800325c:	e126      	b.n	80034ac <HAL_SPI_Transmit+0x270>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003266:	f7fe fce9 	bl	8001c3c <HAL_GetTick>
 800326a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003280:	e10b      	b.n	800349a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_SPI_Transmit+0x52>
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003292:	e102      	b.n	800349a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2203      	movs	r2, #3
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	d10f      	bne.n	80032fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d007      	beq.n	800331a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	d14b      	bne.n	80033bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_SPI_Transmit+0xf6>
 800332c:	8afb      	ldrh	r3, [r7, #22]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d13e      	bne.n	80033b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003356:	e02b      	b.n	80033b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d112      	bne.n	800338c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	1c9a      	adds	r2, r3, #2
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	86da      	strh	r2, [r3, #54]	; 0x36
 800338a:	e011      	b.n	80033b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338c:	f7fe fc56 	bl	8001c3c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d803      	bhi.n	80033a4 <HAL_SPI_Transmit+0x168>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d102      	bne.n	80033aa <HAL_SPI_Transmit+0x16e>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033ae:	e074      	b.n	800349a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ce      	bne.n	8003358 <HAL_SPI_Transmit+0x11c>
 80033ba:	e04c      	b.n	8003456 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_SPI_Transmit+0x18e>
 80033c4:	8afb      	ldrh	r3, [r7, #22]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d140      	bne.n	800344c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033f0:	e02c      	b.n	800344c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d113      	bne.n	8003428 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	7812      	ldrb	r2, [r2, #0]
 800340c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	86da      	strh	r2, [r3, #54]	; 0x36
 8003426:	e011      	b.n	800344c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003428:	f7fe fc08 	bl	8001c3c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d803      	bhi.n	8003440 <HAL_SPI_Transmit+0x204>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x20a>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	77fb      	strb	r3, [r7, #31]
          goto error;
 800344a:	e026      	b.n	800349a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1cd      	bne.n	80033f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fbcc 	bl	8003bf8 <SPI_EndRxTxTransaction>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e000      	b.n	800349a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d0:	d112      	bne.n	80034f8 <HAL_SPI_Receive+0x44>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2204      	movs	r2, #4
 80034de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8f1 	bl	80036d6 <HAL_SPI_TransmitReceive>
 80034f4:	4603      	mov	r3, r0
 80034f6:	e0ea      	b.n	80036ce <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_SPI_Receive+0x52>
 8003502:	2302      	movs	r3, #2
 8003504:	e0e3      	b.n	80036ce <HAL_SPI_Receive+0x21a>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800350e:	f7fe fb95 	bl	8001c3c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003520:	2302      	movs	r3, #2
 8003522:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003524:	e0ca      	b.n	80036bc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Receive+0x7e>
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003536:	e0c1      	b.n	80036bc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2204      	movs	r2, #4
 800353c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357e:	d10f      	bne.n	80035a0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d007      	beq.n	80035be <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d162      	bne.n	800368c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035c6:	e02e      	b.n	8003626 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d115      	bne.n	8003602 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f103 020c 	add.w	r2, r3, #12
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003600:	e011      	b.n	8003626 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003602:	f7fe fb1b 	bl	8001c3c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d803      	bhi.n	800361a <HAL_SPI_Receive+0x166>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d102      	bne.n	8003620 <HAL_SPI_Receive+0x16c>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003624:	e04a      	b.n	80036bc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1cb      	bne.n	80035c8 <HAL_SPI_Receive+0x114>
 8003630:	e031      	b.n	8003696 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d113      	bne.n	8003668 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	b292      	uxth	r2, r2
 800364c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	1c9a      	adds	r2, r3, #2
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003666:	e011      	b.n	800368c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003668:	f7fe fae8 	bl	8001c3c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d803      	bhi.n	8003680 <HAL_SPI_Receive+0x1cc>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d102      	bne.n	8003686 <HAL_SPI_Receive+0x1d2>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	75fb      	strb	r3, [r7, #23]
          goto error;
 800368a:	e017      	b.n	80036bc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cd      	bne.n	8003632 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa46 	bl	8003b2c <SPI_EndRxTransaction>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Receive+0x208>
  }

error :
 80036ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b08c      	sub	sp, #48	; 0x30
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036e4:	2301      	movs	r3, #1
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x26>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e18a      	b.n	8003a12 <HAL_SPI_TransmitReceive+0x33c>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003704:	f7fe fa9a 	bl	8001c3c <HAL_GetTick>
 8003708:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800371e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00f      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x70>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372c:	d107      	bne.n	800373e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <HAL_SPI_TransmitReceive+0x68>
 8003736:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003744:	e15b      	b.n	80039fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x82>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x82>
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800375e:	e14e      	b.n	80039fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b04      	cmp	r3, #4
 800376a:	d003      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2205      	movs	r2, #5
 8003770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	887a      	ldrh	r2, [r7, #2]
 8003796:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	d178      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x10a>
 80037da:	8b7b      	ldrh	r3, [r7, #26]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d166      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003804:	e053      	b.n	80038ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d11b      	bne.n	800384c <HAL_SPI_TransmitReceive+0x176>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_SPI_TransmitReceive+0x176>
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d113      	bne.n	800384c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	1c9a      	adds	r2, r3, #2
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d119      	bne.n	800388e <HAL_SPI_TransmitReceive+0x1b8>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d014      	beq.n	800388e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	b292      	uxth	r2, r2
 8003870:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800388a:	2301      	movs	r3, #1
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800388e:	f7fe f9d5 	bl	8001c3c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389a:	429a      	cmp	r2, r3
 800389c:	d807      	bhi.n	80038ae <HAL_SPI_TransmitReceive+0x1d8>
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d003      	beq.n	80038ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ac:	e0a7      	b.n	80039fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1a6      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x130>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1a1      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x130>
 80038c2:	e07c      	b.n	80039be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x1fc>
 80038cc:	8b7b      	ldrh	r3, [r7, #26]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d16b      	bne.n	80039aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	7812      	ldrb	r2, [r2, #0]
 80038de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f8:	e057      	b.n	80039aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d11c      	bne.n	8003942 <HAL_SPI_TransmitReceive+0x26c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_SPI_TransmitReceive+0x26c>
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d114      	bne.n	8003942 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d119      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x2ae>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d014      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003980:	2301      	movs	r3, #1
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003984:	f7fe f95a 	bl	8001c3c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003990:	429a      	cmp	r2, r3
 8003992:	d803      	bhi.n	800399c <HAL_SPI_TransmitReceive+0x2c6>
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399a:	d102      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x2cc>
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039a8:	e029      	b.n	80039fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1a2      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x224>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d19d      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f918 	bl	8003bf8 <SPI_EndRxTxTransaction>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039da:	e010      	b.n	80039fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	e000      	b.n	80039fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3730      	adds	r7, #48	; 0x30
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a2c:	f7fe f906 	bl	8001c3c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	4413      	add	r3, r2
 8003a3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a3c:	f7fe f8fe 	bl	8001c3c <HAL_GetTick>
 8003a40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a42:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	015b      	lsls	r3, r3, #5
 8003a48:	0d1b      	lsrs	r3, r3, #20
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a52:	e054      	b.n	8003afe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d050      	beq.n	8003afe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a5c:	f7fe f8ee 	bl	8001c3c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d902      	bls.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d13d      	bne.n	8003aee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8a:	d111      	bne.n	8003ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a94:	d004      	beq.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9e:	d107      	bne.n	8003ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d10f      	bne.n	8003ada <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e017      	b.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4013      	ands	r3, r2
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d19b      	bne.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000000 	.word	0x20000000

08003b2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b40:	d111      	bne.n	8003b66 <SPI_EndRxTransaction+0x3a>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	d004      	beq.n	8003b56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b54:	d107      	bne.n	8003b66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6e:	d12a      	bne.n	8003bc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b78:	d012      	beq.n	8003ba0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff ff49 	bl	8003a1c <SPI_WaitFlagStateUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02d      	beq.n	8003bec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e026      	b.n	8003bee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2101      	movs	r1, #1
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff ff36 	bl	8003a1c <SPI_WaitFlagStateUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01a      	beq.n	8003bec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f043 0220 	orr.w	r2, r3, #32
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e013      	b.n	8003bee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2101      	movs	r1, #1
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff ff23 	bl	8003a1c <SPI_WaitFlagStateUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e000      	b.n	8003bee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <SPI_EndRxTxTransaction+0x7c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <SPI_EndRxTxTransaction+0x80>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0d5b      	lsrs	r3, r3, #21
 8003c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c22:	d112      	bne.n	8003c4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff fef4 	bl	8003a1c <SPI_WaitFlagStateUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e00f      	b.n	8003c6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d0f2      	beq.n	8003c4a <SPI_EndRxTxTransaction+0x52>
 8003c64:	e000      	b.n	8003c68 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c66:	bf00      	nop
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000
 8003c78:	165e9f81 	.word	0x165e9f81

08003c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e03f      	b.n	8003d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd fdf0 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	; 0x24
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f929 	bl	8003f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08a      	sub	sp, #40	; 0x28
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d17c      	bne.n	8003e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_UART_Transmit+0x2c>
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e075      	b.n	8003e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_UART_Transmit+0x3e>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e06e      	b.n	8003e32 <HAL_UART_Transmit+0x11c>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2221      	movs	r2, #33	; 0x21
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d6a:	f7fd ff67 	bl	8001c3c <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	88fa      	ldrh	r2, [r7, #6]
 8003d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	88fa      	ldrh	r2, [r7, #6]
 8003d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d84:	d108      	bne.n	8003d98 <HAL_UART_Transmit+0x82>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d104      	bne.n	8003d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e003      	b.n	8003da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003da8:	e02a      	b.n	8003e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f840 	bl	8003e3a <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e036      	b.n	8003e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	3302      	adds	r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e007      	b.n	8003df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	3301      	adds	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1cf      	bne.n	8003daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f810 	bl	8003e3a <UART_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e006      	b.n	8003e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b090      	sub	sp, #64	; 0x40
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	4613      	mov	r3, r2
 8003e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	e050      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d04c      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	f7fd feef 	bl	8001c3c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d241      	bcs.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	613b      	str	r3, [r7, #16]
   return(result);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ebe:	623a      	str	r2, [r7, #32]
 8003ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	69f9      	ldr	r1, [r7, #28]
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e00f      	b.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d09f      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3740      	adds	r7, #64	; 0x40
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1c:	b09f      	sub	sp, #124	; 0x7c
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	68d9      	ldr	r1, [r3, #12]
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	ea40 0301 	orr.w	r3, r0, r1
 8003f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f5c:	f021 010c 	bic.w	r1, r1, #12
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f66:	430b      	orrs	r3, r1
 8003f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	6999      	ldr	r1, [r3, #24]
 8003f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	ea40 0301 	orr.w	r3, r0, r1
 8003f80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4bc5      	ldr	r3, [pc, #788]	; (800429c <UART_SetConfig+0x384>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d004      	beq.n	8003f96 <UART_SetConfig+0x7e>
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4bc3      	ldr	r3, [pc, #780]	; (80042a0 <UART_SetConfig+0x388>)
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d103      	bne.n	8003f9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f96:	f7fe fd51 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003f9a:	6778      	str	r0, [r7, #116]	; 0x74
 8003f9c:	e002      	b.n	8003fa4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f9e:	f7fe fd39 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 8003fa2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	f040 80b6 	bne.w	800411c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb2:	461c      	mov	r4, r3
 8003fb4:	f04f 0500 	mov.w	r5, #0
 8003fb8:	4622      	mov	r2, r4
 8003fba:	462b      	mov	r3, r5
 8003fbc:	1891      	adds	r1, r2, r2
 8003fbe:	6439      	str	r1, [r7, #64]	; 0x40
 8003fc0:	415b      	adcs	r3, r3
 8003fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fc8:	1912      	adds	r2, r2, r4
 8003fca:	eb45 0303 	adc.w	r3, r5, r3
 8003fce:	f04f 0000 	mov.w	r0, #0
 8003fd2:	f04f 0100 	mov.w	r1, #0
 8003fd6:	00d9      	lsls	r1, r3, #3
 8003fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fdc:	00d0      	lsls	r0, r2, #3
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	1911      	adds	r1, r2, r4
 8003fe4:	6639      	str	r1, [r7, #96]	; 0x60
 8003fe6:	416b      	adcs	r3, r5
 8003fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8003fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004000:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004004:	f7fc fdd0 	bl	8000ba8 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <UART_SetConfig+0x38c>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011e      	lsls	r6, r3, #4
 8004016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004018:	461c      	mov	r4, r3
 800401a:	f04f 0500 	mov.w	r5, #0
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	1891      	adds	r1, r2, r2
 8004024:	6339      	str	r1, [r7, #48]	; 0x30
 8004026:	415b      	adcs	r3, r3
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
 800402a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800402e:	1912      	adds	r2, r2, r4
 8004030:	eb45 0303 	adc.w	r3, r5, r3
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	00d9      	lsls	r1, r3, #3
 800403e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004042:	00d0      	lsls	r0, r2, #3
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	1911      	adds	r1, r2, r4
 800404a:	65b9      	str	r1, [r7, #88]	; 0x58
 800404c:	416b      	adcs	r3, r5
 800404e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	461a      	mov	r2, r3
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	1891      	adds	r1, r2, r2
 800405c:	62b9      	str	r1, [r7, #40]	; 0x28
 800405e:	415b      	adcs	r3, r3
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004066:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800406a:	f7fc fd9d 	bl	8000ba8 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4b8c      	ldr	r3, [pc, #560]	; (80042a4 <UART_SetConfig+0x38c>)
 8004074:	fba3 1302 	umull	r1, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	2164      	movs	r1, #100	; 0x64
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	3332      	adds	r3, #50	; 0x32
 8004086:	4a87      	ldr	r2, [pc, #540]	; (80042a4 <UART_SetConfig+0x38c>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004094:	441e      	add	r6, r3
 8004096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004098:	4618      	mov	r0, r3
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	1894      	adds	r4, r2, r2
 80040a4:	623c      	str	r4, [r7, #32]
 80040a6:	415b      	adcs	r3, r3
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
 80040aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ae:	1812      	adds	r2, r2, r0
 80040b0:	eb41 0303 	adc.w	r3, r1, r3
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	f04f 0500 	mov.w	r5, #0
 80040bc:	00dd      	lsls	r5, r3, #3
 80040be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040c2:	00d4      	lsls	r4, r2, #3
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	1814      	adds	r4, r2, r0
 80040ca:	653c      	str	r4, [r7, #80]	; 0x50
 80040cc:	414b      	adcs	r3, r1
 80040ce:	657b      	str	r3, [r7, #84]	; 0x54
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	1891      	adds	r1, r2, r2
 80040dc:	61b9      	str	r1, [r7, #24]
 80040de:	415b      	adcs	r3, r3
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040ea:	f7fc fd5d 	bl	8000ba8 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b6c      	ldr	r3, [pc, #432]	; (80042a4 <UART_SetConfig+0x38c>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <UART_SetConfig+0x38c>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 0207 	and.w	r2, r3, #7
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4432      	add	r2, r6
 8004118:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800411a:	e0b9      	b.n	8004290 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800411c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411e:	461c      	mov	r4, r3
 8004120:	f04f 0500 	mov.w	r5, #0
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	1891      	adds	r1, r2, r2
 800412a:	6139      	str	r1, [r7, #16]
 800412c:	415b      	adcs	r3, r3
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004134:	1912      	adds	r2, r2, r4
 8004136:	eb45 0303 	adc.w	r3, r5, r3
 800413a:	f04f 0000 	mov.w	r0, #0
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	00d9      	lsls	r1, r3, #3
 8004144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004148:	00d0      	lsls	r0, r2, #3
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	eb12 0804 	adds.w	r8, r2, r4
 8004152:	eb43 0905 	adc.w	r9, r3, r5
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800416e:	0082      	lsls	r2, r0, #2
 8004170:	4640      	mov	r0, r8
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc fd18 	bl	8000ba8 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <UART_SetConfig+0x38c>)
 800417e:	fba3 2302 	umull	r2, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	011e      	lsls	r6, r3, #4
 8004186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004188:	4618      	mov	r0, r3
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	1894      	adds	r4, r2, r2
 8004194:	60bc      	str	r4, [r7, #8]
 8004196:	415b      	adcs	r3, r3
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800419e:	1812      	adds	r2, r2, r0
 80041a0:	eb41 0303 	adc.w	r3, r1, r3
 80041a4:	f04f 0400 	mov.w	r4, #0
 80041a8:	f04f 0500 	mov.w	r5, #0
 80041ac:	00dd      	lsls	r5, r3, #3
 80041ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041b2:	00d4      	lsls	r4, r2, #3
 80041b4:	4622      	mov	r2, r4
 80041b6:	462b      	mov	r3, r5
 80041b8:	1814      	adds	r4, r2, r0
 80041ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80041bc:	414b      	adcs	r3, r1
 80041be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f04f 0100 	mov.w	r1, #0
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	008b      	lsls	r3, r1, #2
 80041d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041d8:	0082      	lsls	r2, r0, #2
 80041da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80041de:	f7fc fce3 	bl	8000ba8 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <UART_SetConfig+0x38c>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	; 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	3332      	adds	r3, #50	; 0x32
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <UART_SetConfig+0x38c>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004206:	441e      	add	r6, r3
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	4618      	mov	r0, r3
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	1894      	adds	r4, r2, r2
 8004216:	603c      	str	r4, [r7, #0]
 8004218:	415b      	adcs	r3, r3
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004220:	1812      	adds	r2, r2, r0
 8004222:	eb41 0303 	adc.w	r3, r1, r3
 8004226:	f04f 0400 	mov.w	r4, #0
 800422a:	f04f 0500 	mov.w	r5, #0
 800422e:	00dd      	lsls	r5, r3, #3
 8004230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004234:	00d4      	lsls	r4, r2, #3
 8004236:	4622      	mov	r2, r4
 8004238:	462b      	mov	r3, r5
 800423a:	eb12 0a00 	adds.w	sl, r2, r0
 800423e:	eb43 0b01 	adc.w	fp, r3, r1
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	008b      	lsls	r3, r1, #2
 8004256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800425a:	0082      	lsls	r2, r0, #2
 800425c:	4650      	mov	r0, sl
 800425e:	4659      	mov	r1, fp
 8004260:	f7fc fca2 	bl	8000ba8 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <UART_SetConfig+0x38c>)
 800426a:	fba3 1302 	umull	r1, r3, r3, r2
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2164      	movs	r1, #100	; 0x64
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	3332      	adds	r3, #50	; 0x32
 800427c:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <UART_SetConfig+0x38c>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4432      	add	r2, r6
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	377c      	adds	r7, #124	; 0x7c
 8004294:	46bd      	mov	sp, r7
 8004296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429a:	bf00      	nop
 800429c:	40011000 	.word	0x40011000
 80042a0:	40011400 	.word	0x40011400
 80042a4:	51eb851f 	.word	0x51eb851f

080042a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80042ac:	4904      	ldr	r1, [pc, #16]	; (80042c0 <MX_FATFS_Init+0x18>)
 80042ae:	4805      	ldr	r0, [pc, #20]	; (80042c4 <MX_FATFS_Init+0x1c>)
 80042b0:	f000 fd8e 	bl	8004dd0 <FATFS_LinkDriver>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <MX_FATFS_Init+0x20>)
 80042ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000468 	.word	0x20000468
 80042c4:	2000000c 	.word	0x2000000c
 80042c8:	2000046c 	.word	0x2000046c

080042cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f9d9 	bl	8004690 <USER_SPI_initialize>
 80042de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fab7 	bl	8004868 <USER_SPI_status>
 80042fa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4603      	mov	r3, r0
 8004312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004314:	7bf8      	ldrb	r0, [r7, #15]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	f000 faba 	bl	8004894 <USER_SPI_read>
 8004320:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800433a:	7bf8      	ldrb	r0, [r7, #15]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	f000 fb0d 	bl	8004960 <USER_SPI_write>
 8004346:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	603a      	str	r2, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
 800435c:	460b      	mov	r3, r1
 800435e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004360:	79b9      	ldrb	r1, [r7, #6]
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb76 	bl	8004a58 <USER_SPI_ioctl>
 800436c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004380:	f7fd fc5c 	bl	8001c3c <HAL_GetTick>
 8004384:	4603      	mov	r3, r0
 8004386:	4a04      	ldr	r2, [pc, #16]	; (8004398 <SPI_Timer_On+0x20>)
 8004388:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800438a:	4a04      	ldr	r2, [pc, #16]	; (800439c <SPI_Timer_On+0x24>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6013      	str	r3, [r2, #0]
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	200008d0 	.word	0x200008d0
 800439c:	200008d4 	.word	0x200008d4

080043a0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80043a4:	f7fd fc4a 	bl	8001c3c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <SPI_Timer_Status+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <SPI_Timer_Status+0x28>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	bf34      	ite	cc
 80043b8:	2301      	movcc	r3, #1
 80043ba:	2300      	movcs	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
}
 80043be:	4618      	mov	r0, r3
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200008d0 	.word	0x200008d0
 80043c8:	200008d4 	.word	0x200008d4

080043cc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80043d6:	f107 020f 	add.w	r2, r7, #15
 80043da:	1df9      	adds	r1, r7, #7
 80043dc:	2332      	movs	r3, #50	; 0x32
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2301      	movs	r3, #1
 80043e2:	4804      	ldr	r0, [pc, #16]	; (80043f4 <xchg_spi+0x28>)
 80043e4:	f7ff f977 	bl	80036d6 <HAL_SPI_TransmitReceive>
    return rxDat;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200003a8 	.word	0x200003a8

080043f8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e00a      	b.n	800441e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	18d4      	adds	r4, r2, r3
 800440e:	20ff      	movs	r0, #255	; 0xff
 8004410:	f7ff ffdc 	bl	80043cc <xchg_spi>
 8004414:	4603      	mov	r3, r0
 8004416:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d3f0      	bcc.n	8004408 <rcvr_spi_multi+0x10>
	}
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}

08004430 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e009      	b.n	8004454 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ffbf 	bl	80043cc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d3f1      	bcc.n	8004440 <xmit_spi_multi+0x10>
	}
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800446e:	f7fd fbe5 	bl	8001c3c <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004478:	20ff      	movs	r0, #255	; 0xff
 800447a:	f7ff ffa7 	bl	80043cc <xchg_spi>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2bff      	cmp	r3, #255	; 0xff
 8004486:	d007      	beq.n	8004498 <wait_ready+0x32>
 8004488:	f7fd fbd8 	bl	8001c3c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	429a      	cmp	r2, r3
 8004496:	d8ef      	bhi.n	8004478 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2bff      	cmp	r3, #255	; 0xff
 800449c:	bf0c      	ite	eq
 800449e:	2301      	moveq	r3, #1
 80044a0:	2300      	movne	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80044b0:	2201      	movs	r2, #1
 80044b2:	2102      	movs	r1, #2
 80044b4:	4803      	ldr	r0, [pc, #12]	; (80044c4 <despiselect+0x18>)
 80044b6:	f7fd fe73 	bl	80021a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80044ba:	20ff      	movs	r0, #255	; 0xff
 80044bc:	f7ff ff86 	bl	80043cc <xchg_spi>

}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000

080044c8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80044cc:	2200      	movs	r2, #0
 80044ce:	2102      	movs	r1, #2
 80044d0:	4809      	ldr	r0, [pc, #36]	; (80044f8 <spiselect+0x30>)
 80044d2:	f7fd fe65 	bl	80021a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80044d6:	20ff      	movs	r0, #255	; 0xff
 80044d8:	f7ff ff78 	bl	80043cc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80044dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044e0:	f7ff ffc1 	bl	8004466 <wait_ready>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <spiselect+0x26>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e002      	b.n	80044f4 <spiselect+0x2c>

	despiselect();
 80044ee:	f7ff ffdd 	bl	80044ac <despiselect>
	return 0;	/* Timeout */
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000

080044fc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004506:	20c8      	movs	r0, #200	; 0xc8
 8004508:	f7ff ff36 	bl	8004378 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800450c:	20ff      	movs	r0, #255	; 0xff
 800450e:	f7ff ff5d 	bl	80043cc <xchg_spi>
 8004512:	4603      	mov	r3, r0
 8004514:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2bff      	cmp	r3, #255	; 0xff
 800451a:	d104      	bne.n	8004526 <rcvr_datablock+0x2a>
 800451c:	f7ff ff40 	bl	80043a0 <SPI_Timer_Status>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f2      	bne.n	800450c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2bfe      	cmp	r3, #254	; 0xfe
 800452a:	d001      	beq.n	8004530 <rcvr_datablock+0x34>
 800452c:	2300      	movs	r3, #0
 800452e:	e00a      	b.n	8004546 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff60 	bl	80043f8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004538:	20ff      	movs	r0, #255	; 0xff
 800453a:	f7ff ff47 	bl	80043cc <xchg_spi>
 800453e:	20ff      	movs	r0, #255	; 0xff
 8004540:	f7ff ff44 	bl	80043cc <xchg_spi>

	return 1;						/* Function succeeded */
 8004544:	2301      	movs	r3, #1
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800455a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800455e:	f7ff ff82 	bl	8004466 <wait_ready>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <xmit_datablock+0x1e>
 8004568:	2300      	movs	r3, #0
 800456a:	e01e      	b.n	80045aa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ff2c 	bl	80043cc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	2bfd      	cmp	r3, #253	; 0xfd
 8004578:	d016      	beq.n	80045a8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800457a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff56 	bl	8004430 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004584:	20ff      	movs	r0, #255	; 0xff
 8004586:	f7ff ff21 	bl	80043cc <xchg_spi>
 800458a:	20ff      	movs	r0, #255	; 0xff
 800458c:	f7ff ff1e 	bl	80043cc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004590:	20ff      	movs	r0, #255	; 0xff
 8004592:	f7ff ff1b 	bl	80043cc <xchg_spi>
 8004596:	4603      	mov	r3, r0
 8004598:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d001      	beq.n	80045a8 <xmit_datablock+0x5a>
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <xmit_datablock+0x5c>
	}
	return 1;
 80045a8:	2301      	movs	r3, #1
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	6039      	str	r1, [r7, #0]
 80045bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da0e      	bge.n	80045e4 <send_cmd+0x32>
		cmd &= 0x7F;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045cc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80045ce:	2100      	movs	r1, #0
 80045d0:	2037      	movs	r0, #55	; 0x37
 80045d2:	f7ff ffee 	bl	80045b2 <send_cmd>
 80045d6:	4603      	mov	r3, r0
 80045d8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80045da:	7bbb      	ldrb	r3, [r7, #14]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d901      	bls.n	80045e4 <send_cmd+0x32>
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	e051      	b.n	8004688 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d008      	beq.n	80045fc <send_cmd+0x4a>
		despiselect();
 80045ea:	f7ff ff5f 	bl	80044ac <despiselect>
		if (!spiselect()) return 0xFF;
 80045ee:	f7ff ff6b 	bl	80044c8 <spiselect>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <send_cmd+0x4a>
 80045f8:	23ff      	movs	r3, #255	; 0xff
 80045fa:	e045      	b.n	8004688 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004602:	b2db      	uxtb	r3, r3
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fee1 	bl	80043cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	0e1b      	lsrs	r3, r3, #24
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fedb 	bl	80043cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fed5 	bl	80043cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	0a1b      	lsrs	r3, r3, #8
 8004626:	b2db      	uxtb	r3, r3
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fecf 	bl	80043cc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff feca 	bl	80043cc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <send_cmd+0x94>
 8004642:	2395      	movs	r3, #149	; 0x95
 8004644:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d101      	bne.n	8004650 <send_cmd+0x9e>
 800464c:	2387      	movs	r3, #135	; 0x87
 800464e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff feba 	bl	80043cc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d102      	bne.n	8004664 <send_cmd+0xb2>
 800465e:	20ff      	movs	r0, #255	; 0xff
 8004660:	f7ff feb4 	bl	80043cc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004664:	230a      	movs	r3, #10
 8004666:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004668:	20ff      	movs	r0, #255	; 0xff
 800466a:	f7ff feaf 	bl	80043cc <xchg_spi>
 800466e:	4603      	mov	r3, r0
 8004670:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004676:	2b00      	cmp	r3, #0
 8004678:	da05      	bge.n	8004686 <send_cmd+0xd4>
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	3b01      	subs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004686:	7bbb      	ldrb	r3, [r7, #14]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <USER_SPI_initialize+0x14>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0d6      	b.n	8004852 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80046a4:	4b6d      	ldr	r3, [pc, #436]	; (800485c <USER_SPI_initialize+0x1cc>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <USER_SPI_initialize+0x2a>
 80046b2:	4b6a      	ldr	r3, [pc, #424]	; (800485c <USER_SPI_initialize+0x1cc>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e0cb      	b.n	8004852 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80046ba:	4b69      	ldr	r3, [pc, #420]	; (8004860 <USER_SPI_initialize+0x1d0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80046c4:	4b66      	ldr	r3, [pc, #408]	; (8004860 <USER_SPI_initialize+0x1d0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80046cc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80046ce:	230a      	movs	r3, #10
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	e005      	b.n	80046e0 <USER_SPI_initialize+0x50>
 80046d4:	20ff      	movs	r0, #255	; 0xff
 80046d6:	f7ff fe79 	bl	80043cc <xchg_spi>
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	3b01      	subs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f6      	bne.n	80046d4 <USER_SPI_initialize+0x44>

	ty = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80046ea:	2100      	movs	r1, #0
 80046ec:	2000      	movs	r0, #0
 80046ee:	f7ff ff60 	bl	80045b2 <send_cmd>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 808b 	bne.w	8004810 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80046fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046fe:	f7ff fe3b 	bl	8004378 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004702:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004706:	2008      	movs	r0, #8
 8004708:	f7ff ff53 	bl	80045b2 <send_cmd>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d151      	bne.n	80047b6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	e00d      	b.n	8004734 <USER_SPI_initialize+0xa4>
 8004718:	7bfc      	ldrb	r4, [r7, #15]
 800471a:	20ff      	movs	r0, #255	; 0xff
 800471c:	f7ff fe56 	bl	80043cc <xchg_spi>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	f107 0310 	add.w	r3, r7, #16
 8004728:	4423      	add	r3, r4
 800472a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	3301      	adds	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d9ee      	bls.n	8004718 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800473a:	7abb      	ldrb	r3, [r7, #10]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d167      	bne.n	8004810 <USER_SPI_initialize+0x180>
 8004740:	7afb      	ldrb	r3, [r7, #11]
 8004742:	2baa      	cmp	r3, #170	; 0xaa
 8004744:	d164      	bne.n	8004810 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004746:	bf00      	nop
 8004748:	f7ff fe2a 	bl	80043a0 <SPI_Timer_Status>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <USER_SPI_initialize+0xd2>
 8004752:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004756:	20a9      	movs	r0, #169	; 0xa9
 8004758:	f7ff ff2b 	bl	80045b2 <send_cmd>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004762:	f7ff fe1d 	bl	80043a0 <SPI_Timer_Status>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d051      	beq.n	8004810 <USER_SPI_initialize+0x180>
 800476c:	2100      	movs	r1, #0
 800476e:	203a      	movs	r0, #58	; 0x3a
 8004770:	f7ff ff1f 	bl	80045b2 <send_cmd>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d14a      	bne.n	8004810 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	e00d      	b.n	800479c <USER_SPI_initialize+0x10c>
 8004780:	7bfc      	ldrb	r4, [r7, #15]
 8004782:	20ff      	movs	r0, #255	; 0xff
 8004784:	f7ff fe22 	bl	80043cc <xchg_spi>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	4423      	add	r3, r4
 8004792:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	3301      	adds	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d9ee      	bls.n	8004780 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80047a2:	7a3b      	ldrb	r3, [r7, #8]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <USER_SPI_initialize+0x120>
 80047ac:	230c      	movs	r3, #12
 80047ae:	e000      	b.n	80047b2 <USER_SPI_initialize+0x122>
 80047b0:	2304      	movs	r3, #4
 80047b2:	737b      	strb	r3, [r7, #13]
 80047b4:	e02c      	b.n	8004810 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80047b6:	2100      	movs	r1, #0
 80047b8:	20a9      	movs	r0, #169	; 0xa9
 80047ba:	f7ff fefa 	bl	80045b2 <send_cmd>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d804      	bhi.n	80047ce <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80047c4:	2302      	movs	r3, #2
 80047c6:	737b      	strb	r3, [r7, #13]
 80047c8:	23a9      	movs	r3, #169	; 0xa9
 80047ca:	73bb      	strb	r3, [r7, #14]
 80047cc:	e003      	b.n	80047d6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80047ce:	2301      	movs	r3, #1
 80047d0:	737b      	strb	r3, [r7, #13]
 80047d2:	2301      	movs	r3, #1
 80047d4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80047d6:	bf00      	nop
 80047d8:	f7ff fde2 	bl	80043a0 <SPI_Timer_Status>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <USER_SPI_initialize+0x162>
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fee3 	bl	80045b2 <send_cmd>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80047f2:	f7ff fdd5 	bl	80043a0 <SPI_Timer_Status>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <USER_SPI_initialize+0x17c>
 80047fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004800:	2010      	movs	r0, #16
 8004802:	f7ff fed6 	bl	80045b2 <send_cmd>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <USER_SPI_initialize+0x180>
				ty = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004810:	4a14      	ldr	r2, [pc, #80]	; (8004864 <USER_SPI_initialize+0x1d4>)
 8004812:	7b7b      	ldrb	r3, [r7, #13]
 8004814:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004816:	f7ff fe49 	bl	80044ac <despiselect>

	if (ty) {			/* OK */
 800481a:	7b7b      	ldrb	r3, [r7, #13]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <USER_SPI_initialize+0x1d0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800482a:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <USER_SPI_initialize+0x1d0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0208 	orr.w	r2, r2, #8
 8004832:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <USER_SPI_initialize+0x1cc>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <USER_SPI_initialize+0x1cc>)
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e002      	b.n	800484c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <USER_SPI_initialize+0x1cc>)
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <USER_SPI_initialize+0x1cc>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bd90      	pop	{r4, r7, pc}
 800485a:	bf00      	nop
 800485c:	20000020 	.word	0x20000020
 8004860:	200003a8 	.word	0x200003a8
 8004864:	20000314 	.word	0x20000314

08004868 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <USER_SPI_status+0x14>
 8004878:	2301      	movs	r3, #1
 800487a:	e002      	b.n	8004882 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <USER_SPI_status+0x28>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000020 	.word	0x20000020

08004894 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <USER_SPI_read+0x1c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <USER_SPI_read+0x20>
 80048b0:	2304      	movs	r3, #4
 80048b2:	e04d      	b.n	8004950 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <USER_SPI_read+0xc4>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <USER_SPI_read+0x32>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e044      	b.n	8004950 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80048c6:	4b25      	ldr	r3, [pc, #148]	; (800495c <USER_SPI_read+0xc8>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <USER_SPI_read+0x44>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	025b      	lsls	r3, r3, #9
 80048d6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d111      	bne.n	8004902 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	2011      	movs	r0, #17
 80048e2:	f7ff fe66 	bl	80045b2 <send_cmd>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d129      	bne.n	8004940 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80048ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f7ff fe03 	bl	80044fc <rcvr_datablock>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d021      	beq.n	8004940 <USER_SPI_read+0xac>
			count = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	e01e      	b.n	8004940 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	2012      	movs	r0, #18
 8004906:	f7ff fe54 	bl	80045b2 <send_cmd>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d117      	bne.n	8004940 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004914:	68b8      	ldr	r0, [r7, #8]
 8004916:	f7ff fdf1 	bl	80044fc <rcvr_datablock>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <USER_SPI_read+0xa2>
				buff += 512;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004926:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	3b01      	subs	r3, #1
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ed      	bne.n	8004910 <USER_SPI_read+0x7c>
 8004934:	e000      	b.n	8004938 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004936:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004938:	2100      	movs	r1, #0
 800493a:	200c      	movs	r0, #12
 800493c:	f7ff fe39 	bl	80045b2 <send_cmd>
		}
	}
	despiselect();
 8004940:	f7ff fdb4 	bl	80044ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000020 	.word	0x20000020
 800495c:	20000314 	.word	0x20000314

08004960 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <USER_SPI_write+0x1c>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <USER_SPI_write+0x20>
 800497c:	2304      	movs	r3, #4
 800497e:	e063      	b.n	8004a48 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004980:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <USER_SPI_write+0xf0>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <USER_SPI_write+0x32>
 800498e:	2303      	movs	r3, #3
 8004990:	e05a      	b.n	8004a48 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004992:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <USER_SPI_write+0xf0>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <USER_SPI_write+0x44>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e051      	b.n	8004a48 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <USER_SPI_write+0xf4>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <USER_SPI_write+0x56>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	025b      	lsls	r3, r3, #9
 80049b4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d110      	bne.n	80049de <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	2018      	movs	r0, #24
 80049c0:	f7ff fdf7 	bl	80045b2 <send_cmd>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d136      	bne.n	8004a38 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80049ca:	21fe      	movs	r1, #254	; 0xfe
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f7ff fdbe 	bl	800454e <xmit_datablock>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02f      	beq.n	8004a38 <USER_SPI_write+0xd8>
			count = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	e02c      	b.n	8004a38 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <USER_SPI_write+0xf4>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f003 0306 	and.w	r3, r3, #6
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <USER_SPI_write+0x92>
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	2097      	movs	r0, #151	; 0x97
 80049ee:	f7ff fde0 	bl	80045b2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	2019      	movs	r0, #25
 80049f6:	f7ff fddc 	bl	80045b2 <send_cmd>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11b      	bne.n	8004a38 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a00:	21fc      	movs	r1, #252	; 0xfc
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7ff fda3 	bl	800454e <xmit_datablock>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <USER_SPI_write+0xc4>
				buff += 512;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a14:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ee      	bne.n	8004a00 <USER_SPI_write+0xa0>
 8004a22:	e000      	b.n	8004a26 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a24:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004a26:	21fd      	movs	r1, #253	; 0xfd
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7ff fd90 	bl	800454e <xmit_datablock>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <USER_SPI_write+0xd8>
 8004a34:	2301      	movs	r3, #1
 8004a36:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004a38:	f7ff fd38 	bl	80044ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf14      	ite	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2300      	moveq	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000020 	.word	0x20000020
 8004a54:	20000314 	.word	0x20000314

08004a58 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	; 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	603a      	str	r2, [r7, #0]
 8004a62:	71fb      	strb	r3, [r7, #7]
 8004a64:	460b      	mov	r3, r1
 8004a66:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <USER_SPI_ioctl+0x1a>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	e15a      	b.n	8004d28 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004a72:	4baf      	ldr	r3, [pc, #700]	; (8004d30 <USER_SPI_ioctl+0x2d8>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <USER_SPI_ioctl+0x2c>
 8004a80:	2303      	movs	r3, #3
 8004a82:	e151      	b.n	8004d28 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004a8a:	79bb      	ldrb	r3, [r7, #6]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	f200 8136 	bhi.w	8004cfe <USER_SPI_ioctl+0x2a6>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <USER_SPI_ioctl+0x40>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aad 	.word	0x08004aad
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004cff 	.word	0x08004cff
 8004aa4:	08004b6d 	.word	0x08004b6d
 8004aa8:	08004c63 	.word	0x08004c63
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004aac:	f7ff fd0c 	bl	80044c8 <spiselect>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8127 	beq.w	8004d06 <USER_SPI_ioctl+0x2ae>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004abe:	e122      	b.n	8004d06 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2009      	movs	r0, #9
 8004ac4:	f7ff fd75 	bl	80045b2 <send_cmd>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 811d 	bne.w	8004d0a <USER_SPI_ioctl+0x2b2>
 8004ad0:	f107 030c 	add.w	r3, r7, #12
 8004ad4:	2110      	movs	r1, #16
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fd10 	bl	80044fc <rcvr_datablock>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8113 	beq.w	8004d0a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004ae4:	7b3b      	ldrb	r3, [r7, #12]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d111      	bne.n	8004b12 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004aee:	7d7b      	ldrb	r3, [r7, #21]
 8004af0:	461a      	mov	r2, r3
 8004af2:	7d3b      	ldrb	r3, [r7, #20]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	4413      	add	r3, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004b02:	4413      	add	r3, r2
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	029a      	lsls	r2, r3, #10
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e028      	b.n	8004b64 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004b12:	7c7b      	ldrb	r3, [r7, #17]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	7dbb      	ldrb	r3, [r7, #22]
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	7d7b      	ldrb	r3, [r7, #21]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0306 	and.w	r3, r3, #6
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3302      	adds	r3, #2
 8004b36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004b3a:	7d3b      	ldrb	r3, [r7, #20]
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	7cbb      	ldrb	r3, [r7, #18]
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b50:	4413      	add	r3, r2
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004b56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b5a:	3b09      	subs	r3, #9
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004b6a:	e0ce      	b.n	8004d0a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004b6c:	4b71      	ldr	r3, [pc, #452]	; (8004d34 <USER_SPI_ioctl+0x2dc>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d031      	beq.n	8004bdc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004b78:	2100      	movs	r1, #0
 8004b7a:	208d      	movs	r0, #141	; 0x8d
 8004b7c:	f7ff fd19 	bl	80045b2 <send_cmd>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 80c3 	bne.w	8004d0e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004b88:	20ff      	movs	r0, #255	; 0xff
 8004b8a:	f7ff fc1f 	bl	80043cc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004b8e:	f107 030c 	add.w	r3, r7, #12
 8004b92:	2110      	movs	r1, #16
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fcb1 	bl	80044fc <rcvr_datablock>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80b6 	beq.w	8004d0e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004ba2:	2330      	movs	r3, #48	; 0x30
 8004ba4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004ba8:	e007      	b.n	8004bba <USER_SPI_ioctl+0x162>
 8004baa:	20ff      	movs	r0, #255	; 0xff
 8004bac:	f7ff fc0e 	bl	80043cc <xchg_spi>
 8004bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004bba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f3      	bne.n	8004baa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004bc2:	7dbb      	ldrb	r3, [r7, #22]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2310      	movs	r3, #16
 8004bcc:	fa03 f202 	lsl.w	r2, r3, r2
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004bda:	e098      	b.n	8004d0e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004bdc:	2100      	movs	r1, #0
 8004bde:	2009      	movs	r0, #9
 8004be0:	f7ff fce7 	bl	80045b2 <send_cmd>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 8091 	bne.w	8004d0e <USER_SPI_ioctl+0x2b6>
 8004bec:	f107 030c 	add.w	r3, r7, #12
 8004bf0:	2110      	movs	r1, #16
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fc82 	bl	80044fc <rcvr_datablock>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8087 	beq.w	8004d0e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004c00:	4b4c      	ldr	r3, [pc, #304]	; (8004d34 <USER_SPI_ioctl+0x2dc>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004c0c:	7dbb      	ldrb	r3, [r7, #22]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004c14:	7dfa      	ldrb	r2, [r7, #23]
 8004c16:	09d2      	lsrs	r2, r2, #7
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	7e7b      	ldrb	r3, [r7, #25]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e013      	b.n	8004c5a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004c32:	7dbb      	ldrb	r3, [r7, #22]
 8004c34:	109b      	asrs	r3, r3, #2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	7dfa      	ldrb	r2, [r7, #23]
 8004c40:	00d2      	lsls	r2, r2, #3
 8004c42:	f002 0218 	and.w	r2, r2, #24
 8004c46:	7df9      	ldrb	r1, [r7, #23]
 8004c48:	0949      	lsrs	r1, r1, #5
 8004c4a:	b2c9      	uxtb	r1, r1
 8004c4c:	440a      	add	r2, r1
 8004c4e:	3201      	adds	r2, #1
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004c60:	e055      	b.n	8004d0e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004c62:	4b34      	ldr	r3, [pc, #208]	; (8004d34 <USER_SPI_ioctl+0x2dc>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d051      	beq.n	8004d12 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004c6e:	f107 020c 	add.w	r2, r7, #12
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	210b      	movs	r1, #11
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff feee 	bl	8004a58 <USER_SPI_ioctl>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d149      	bne.n	8004d16 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004c82:	7b3b      	ldrb	r3, [r7, #12]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <USER_SPI_ioctl+0x23e>
 8004c8c:	7dbb      	ldrb	r3, [r7, #22]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d041      	beq.n	8004d1a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <USER_SPI_ioctl+0x2dc>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d105      	bne.n	8004cbe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	025b      	lsls	r3, r3, #9
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	025b      	lsls	r3, r3, #9
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc0:	2020      	movs	r0, #32
 8004cc2:	f7ff fc76 	bl	80045b2 <send_cmd>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d128      	bne.n	8004d1e <USER_SPI_ioctl+0x2c6>
 8004ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cce:	2021      	movs	r0, #33	; 0x21
 8004cd0:	f7ff fc6f 	bl	80045b2 <send_cmd>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d121      	bne.n	8004d1e <USER_SPI_ioctl+0x2c6>
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2026      	movs	r0, #38	; 0x26
 8004cde:	f7ff fc68 	bl	80045b2 <send_cmd>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11a      	bne.n	8004d1e <USER_SPI_ioctl+0x2c6>
 8004ce8:	f247 5030 	movw	r0, #30000	; 0x7530
 8004cec:	f7ff fbbb 	bl	8004466 <wait_ready>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d013      	beq.n	8004d1e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004cfc:	e00f      	b.n	8004d1e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004cfe:	2304      	movs	r3, #4
 8004d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d04:	e00c      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		break;
 8004d06:	bf00      	nop
 8004d08:	e00a      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		break;
 8004d0a:	bf00      	nop
 8004d0c:	e008      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		break;
 8004d0e:	bf00      	nop
 8004d10:	e006      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <USER_SPI_ioctl+0x2c8>
		break;
 8004d1e:	bf00      	nop
	}

	despiselect();
 8004d20:	f7ff fbc4 	bl	80044ac <despiselect>

	return res;
 8004d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000020 	.word	0x20000020
 8004d34:	20000314 	.word	0x20000314

08004d38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004d4e:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d50:	7a5b      	ldrb	r3, [r3, #9]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d131      	bne.n	8004dbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004d58:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d5a:	7a5b      	ldrb	r3, [r3, #9]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d62:	2100      	movs	r1, #0
 8004d64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004d66:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d68:	7a5b      	ldrb	r3, [r3, #9]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d78:	7a5b      	ldrb	r3, [r3, #9]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d80:	4413      	add	r3, r2
 8004d82:	79fa      	ldrb	r2, [r7, #7]
 8004d84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d88:	7a5b      	ldrb	r3, [r3, #9]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	b2d1      	uxtb	r1, r2
 8004d90:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <FATFS_LinkDriverEx+0x94>)
 8004d92:	7251      	strb	r1, [r2, #9]
 8004d94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004d96:	7dbb      	ldrb	r3, [r7, #22]
 8004d98:	3330      	adds	r3, #48	; 0x30
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	3301      	adds	r3, #1
 8004da4:	223a      	movs	r2, #58	; 0x3a
 8004da6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	3302      	adds	r3, #2
 8004dac:	222f      	movs	r2, #47	; 0x2f
 8004dae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	3303      	adds	r3, #3
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000318 	.word	0x20000318

08004dd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ffaa 	bl	8004d38 <FATFS_LinkDriverEx>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <__errno>:
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <__errno+0x8>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000024 	.word	0x20000024

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	; (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	; (8004e40 <__libc_init_array+0x44>)
 8004e10:	f002 fed0 	bl	8007bb4 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	080080f4 	.word	0x080080f4
 8004e38:	080080f4 	.word	0x080080f4
 8004e3c:	080080f4 	.word	0x080080f4
 8004e40:	080080f8 	.word	0x080080f8

08004e44 <memset>:
 8004e44:	4402      	add	r2, r0
 8004e46:	4603      	mov	r3, r0
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <memset+0xa>
 8004e4c:	4770      	bx	lr
 8004e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e52:	e7f9      	b.n	8004e48 <memset+0x4>

08004e54 <__cvt>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	ec55 4b10 	vmov	r4, r5, d0
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	460e      	mov	r6, r1
 8004e60:	4619      	mov	r1, r3
 8004e62:	462b      	mov	r3, r5
 8004e64:	bfbb      	ittet	lt
 8004e66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e6a:	461d      	movlt	r5, r3
 8004e6c:	2300      	movge	r3, #0
 8004e6e:	232d      	movlt	r3, #45	; 0x2d
 8004e70:	700b      	strb	r3, [r1, #0]
 8004e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e78:	4691      	mov	r9, r2
 8004e7a:	f023 0820 	bic.w	r8, r3, #32
 8004e7e:	bfbc      	itt	lt
 8004e80:	4622      	movlt	r2, r4
 8004e82:	4614      	movlt	r4, r2
 8004e84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e88:	d005      	beq.n	8004e96 <__cvt+0x42>
 8004e8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e8e:	d100      	bne.n	8004e92 <__cvt+0x3e>
 8004e90:	3601      	adds	r6, #1
 8004e92:	2102      	movs	r1, #2
 8004e94:	e000      	b.n	8004e98 <__cvt+0x44>
 8004e96:	2103      	movs	r1, #3
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	ab02      	add	r3, sp, #8
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	ec45 4b10 	vmov	d0, r4, r5
 8004ea4:	4653      	mov	r3, sl
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	f000 fd06 	bl	80058b8 <_dtoa_r>
 8004eac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	d102      	bne.n	8004eba <__cvt+0x66>
 8004eb4:	f019 0f01 	tst.w	r9, #1
 8004eb8:	d022      	beq.n	8004f00 <__cvt+0xac>
 8004eba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ebe:	eb07 0906 	add.w	r9, r7, r6
 8004ec2:	d110      	bne.n	8004ee6 <__cvt+0x92>
 8004ec4:	783b      	ldrb	r3, [r7, #0]
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d10a      	bne.n	8004ee0 <__cvt+0x8c>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed6:	b918      	cbnz	r0, 8004ee0 <__cvt+0x8c>
 8004ed8:	f1c6 0601 	rsb	r6, r6, #1
 8004edc:	f8ca 6000 	str.w	r6, [sl]
 8004ee0:	f8da 3000 	ldr.w	r3, [sl]
 8004ee4:	4499      	add	r9, r3
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4620      	mov	r0, r4
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7fb fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ef2:	b108      	cbz	r0, 8004ef8 <__cvt+0xa4>
 8004ef4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef8:	2230      	movs	r2, #48	; 0x30
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	454b      	cmp	r3, r9
 8004efe:	d307      	bcc.n	8004f10 <__cvt+0xbc>
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f04:	1bdb      	subs	r3, r3, r7
 8004f06:	4638      	mov	r0, r7
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	b004      	add	sp, #16
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	9103      	str	r1, [sp, #12]
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e7f0      	b.n	8004efa <__cvt+0xa6>

08004f18 <__exponent>:
 8004f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	bfb8      	it	lt
 8004f20:	4249      	neglt	r1, r1
 8004f22:	f803 2b02 	strb.w	r2, [r3], #2
 8004f26:	bfb4      	ite	lt
 8004f28:	222d      	movlt	r2, #45	; 0x2d
 8004f2a:	222b      	movge	r2, #43	; 0x2b
 8004f2c:	2909      	cmp	r1, #9
 8004f2e:	7042      	strb	r2, [r0, #1]
 8004f30:	dd2a      	ble.n	8004f88 <__exponent+0x70>
 8004f32:	f10d 0407 	add.w	r4, sp, #7
 8004f36:	46a4      	mov	ip, r4
 8004f38:	270a      	movs	r7, #10
 8004f3a:	46a6      	mov	lr, r4
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f42:	fb07 1516 	mls	r5, r7, r6, r1
 8004f46:	3530      	adds	r5, #48	; 0x30
 8004f48:	2a63      	cmp	r2, #99	; 0x63
 8004f4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f52:	4631      	mov	r1, r6
 8004f54:	dcf1      	bgt.n	8004f3a <__exponent+0x22>
 8004f56:	3130      	adds	r1, #48	; 0x30
 8004f58:	f1ae 0502 	sub.w	r5, lr, #2
 8004f5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f60:	1c44      	adds	r4, r0, #1
 8004f62:	4629      	mov	r1, r5
 8004f64:	4561      	cmp	r1, ip
 8004f66:	d30a      	bcc.n	8004f7e <__exponent+0x66>
 8004f68:	f10d 0209 	add.w	r2, sp, #9
 8004f6c:	eba2 020e 	sub.w	r2, r2, lr
 8004f70:	4565      	cmp	r5, ip
 8004f72:	bf88      	it	hi
 8004f74:	2200      	movhi	r2, #0
 8004f76:	4413      	add	r3, r2
 8004f78:	1a18      	subs	r0, r3, r0
 8004f7a:	b003      	add	sp, #12
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f86:	e7ed      	b.n	8004f64 <__exponent+0x4c>
 8004f88:	2330      	movs	r3, #48	; 0x30
 8004f8a:	3130      	adds	r1, #48	; 0x30
 8004f8c:	7083      	strb	r3, [r0, #2]
 8004f8e:	70c1      	strb	r1, [r0, #3]
 8004f90:	1d03      	adds	r3, r0, #4
 8004f92:	e7f1      	b.n	8004f78 <__exponent+0x60>

08004f94 <_printf_float>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	ed2d 8b02 	vpush	{d8}
 8004f9c:	b08d      	sub	sp, #52	; 0x34
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	4605      	mov	r5, r0
 8004faa:	f001 fa71 	bl	8006490 <_localeconv_r>
 8004fae:	f8d0 a000 	ldr.w	sl, [r0]
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	f7fb f90c 	bl	80001d0 <strlen>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	930a      	str	r3, [sp, #40]	; 0x28
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	f103 0208 	add.w	r2, r3, #8
 8004fd2:	f8c8 2000 	str.w	r2, [r8]
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fec:	ee08 0a10 	vmov	s16, r0
 8004ff0:	4b9f      	ldr	r3, [pc, #636]	; (8005270 <_printf_float+0x2dc>)
 8004ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	f7fb fd97 	bl	8000b2c <__aeabi_dcmpun>
 8004ffe:	bb88      	cbnz	r0, 8005064 <_printf_float+0xd0>
 8005000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005004:	4b9a      	ldr	r3, [pc, #616]	; (8005270 <_printf_float+0x2dc>)
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	f7fb fd71 	bl	8000af0 <__aeabi_dcmple>
 800500e:	bb48      	cbnz	r0, 8005064 <_printf_float+0xd0>
 8005010:	2200      	movs	r2, #0
 8005012:	2300      	movs	r3, #0
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fd60 	bl	8000adc <__aeabi_dcmplt>
 800501c:	b110      	cbz	r0, 8005024 <_printf_float+0x90>
 800501e:	232d      	movs	r3, #45	; 0x2d
 8005020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005024:	4b93      	ldr	r3, [pc, #588]	; (8005274 <_printf_float+0x2e0>)
 8005026:	4894      	ldr	r0, [pc, #592]	; (8005278 <_printf_float+0x2e4>)
 8005028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800502c:	bf94      	ite	ls
 800502e:	4698      	movls	r8, r3
 8005030:	4680      	movhi	r8, r0
 8005032:	2303      	movs	r3, #3
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	f023 0204 	bic.w	r2, r3, #4
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	f04f 0900 	mov.w	r9, #0
 8005042:	9700      	str	r7, [sp, #0]
 8005044:	4633      	mov	r3, r6
 8005046:	aa0b      	add	r2, sp, #44	; 0x2c
 8005048:	4621      	mov	r1, r4
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f9d8 	bl	8005400 <_printf_common>
 8005050:	3001      	adds	r0, #1
 8005052:	f040 8090 	bne.w	8005176 <_printf_float+0x1e2>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	b00d      	add	sp, #52	; 0x34
 800505c:	ecbd 8b02 	vpop	{d8}
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb fd5e 	bl	8000b2c <__aeabi_dcmpun>
 8005070:	b140      	cbz	r0, 8005084 <_printf_float+0xf0>
 8005072:	464b      	mov	r3, r9
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfbc      	itt	lt
 8005078:	232d      	movlt	r3, #45	; 0x2d
 800507a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800507e:	487f      	ldr	r0, [pc, #508]	; (800527c <_printf_float+0x2e8>)
 8005080:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <_printf_float+0x2ec>)
 8005082:	e7d1      	b.n	8005028 <_printf_float+0x94>
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800508a:	9206      	str	r2, [sp, #24]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	d13f      	bne.n	8005110 <_printf_float+0x17c>
 8005090:	2306      	movs	r3, #6
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	9b05      	ldr	r3, [sp, #20]
 8005096:	6861      	ldr	r1, [r4, #4]
 8005098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800509c:	2300      	movs	r3, #0
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	ab0a      	add	r3, sp, #40	; 0x28
 80050a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050a6:	ab09      	add	r3, sp, #36	; 0x24
 80050a8:	ec49 8b10 	vmov	d0, r8, r9
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7ff fecd 	bl	8004e54 <__cvt>
 80050ba:	9b06      	ldr	r3, [sp, #24]
 80050bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050be:	2b47      	cmp	r3, #71	; 0x47
 80050c0:	4680      	mov	r8, r0
 80050c2:	d108      	bne.n	80050d6 <_printf_float+0x142>
 80050c4:	1cc8      	adds	r0, r1, #3
 80050c6:	db02      	blt.n	80050ce <_printf_float+0x13a>
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	4299      	cmp	r1, r3
 80050cc:	dd41      	ble.n	8005152 <_printf_float+0x1be>
 80050ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80050d2:	fa5f fb8b 	uxtb.w	fp, fp
 80050d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050da:	d820      	bhi.n	800511e <_printf_float+0x18a>
 80050dc:	3901      	subs	r1, #1
 80050de:	465a      	mov	r2, fp
 80050e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e4:	9109      	str	r1, [sp, #36]	; 0x24
 80050e6:	f7ff ff17 	bl	8004f18 <__exponent>
 80050ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ec:	1813      	adds	r3, r2, r0
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	4681      	mov	r9, r0
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	dc02      	bgt.n	80050fc <_printf_float+0x168>
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	07d2      	lsls	r2, r2, #31
 80050fa:	d501      	bpl.n	8005100 <_printf_float+0x16c>
 80050fc:	3301      	adds	r3, #1
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005104:	2b00      	cmp	r3, #0
 8005106:	d09c      	beq.n	8005042 <_printf_float+0xae>
 8005108:	232d      	movs	r3, #45	; 0x2d
 800510a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510e:	e798      	b.n	8005042 <_printf_float+0xae>
 8005110:	9a06      	ldr	r2, [sp, #24]
 8005112:	2a47      	cmp	r2, #71	; 0x47
 8005114:	d1be      	bne.n	8005094 <_printf_float+0x100>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1bc      	bne.n	8005094 <_printf_float+0x100>
 800511a:	2301      	movs	r3, #1
 800511c:	e7b9      	b.n	8005092 <_printf_float+0xfe>
 800511e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005122:	d118      	bne.n	8005156 <_printf_float+0x1c2>
 8005124:	2900      	cmp	r1, #0
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	dd0b      	ble.n	8005142 <_printf_float+0x1ae>
 800512a:	6121      	str	r1, [r4, #16]
 800512c:	b913      	cbnz	r3, 8005134 <_printf_float+0x1a0>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d502      	bpl.n	800513a <_printf_float+0x1a6>
 8005134:	3301      	adds	r3, #1
 8005136:	440b      	add	r3, r1
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	65a1      	str	r1, [r4, #88]	; 0x58
 800513c:	f04f 0900 	mov.w	r9, #0
 8005140:	e7de      	b.n	8005100 <_printf_float+0x16c>
 8005142:	b913      	cbnz	r3, 800514a <_printf_float+0x1b6>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	07d2      	lsls	r2, r2, #31
 8005148:	d501      	bpl.n	800514e <_printf_float+0x1ba>
 800514a:	3302      	adds	r3, #2
 800514c:	e7f4      	b.n	8005138 <_printf_float+0x1a4>
 800514e:	2301      	movs	r3, #1
 8005150:	e7f2      	b.n	8005138 <_printf_float+0x1a4>
 8005152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005158:	4299      	cmp	r1, r3
 800515a:	db05      	blt.n	8005168 <_printf_float+0x1d4>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6121      	str	r1, [r4, #16]
 8005160:	07d8      	lsls	r0, r3, #31
 8005162:	d5ea      	bpl.n	800513a <_printf_float+0x1a6>
 8005164:	1c4b      	adds	r3, r1, #1
 8005166:	e7e7      	b.n	8005138 <_printf_float+0x1a4>
 8005168:	2900      	cmp	r1, #0
 800516a:	bfd4      	ite	le
 800516c:	f1c1 0202 	rsble	r2, r1, #2
 8005170:	2201      	movgt	r2, #1
 8005172:	4413      	add	r3, r2
 8005174:	e7e0      	b.n	8005138 <_printf_float+0x1a4>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	055a      	lsls	r2, r3, #21
 800517a:	d407      	bmi.n	800518c <_printf_float+0x1f8>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	4642      	mov	r2, r8
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	d12c      	bne.n	80051e4 <_printf_float+0x250>
 800518a:	e764      	b.n	8005056 <_printf_float+0xc2>
 800518c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005190:	f240 80e0 	bls.w	8005354 <_printf_float+0x3c0>
 8005194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	f7fb fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d034      	beq.n	800520e <_printf_float+0x27a>
 80051a4:	4a37      	ldr	r2, [pc, #220]	; (8005284 <_printf_float+0x2f0>)
 80051a6:	2301      	movs	r3, #1
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af51 	beq.w	8005056 <_printf_float+0xc2>
 80051b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b8:	429a      	cmp	r2, r3
 80051ba:	db02      	blt.n	80051c2 <_printf_float+0x22e>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07d8      	lsls	r0, r3, #31
 80051c0:	d510      	bpl.n	80051e4 <_printf_float+0x250>
 80051c2:	ee18 3a10 	vmov	r3, s16
 80051c6:	4652      	mov	r2, sl
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f af41 	beq.w	8005056 <_printf_float+0xc2>
 80051d4:	f04f 0800 	mov.w	r8, #0
 80051d8:	f104 091a 	add.w	r9, r4, #26
 80051dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	4543      	cmp	r3, r8
 80051e2:	dc09      	bgt.n	80051f8 <_printf_float+0x264>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	079b      	lsls	r3, r3, #30
 80051e8:	f100 8105 	bmi.w	80053f6 <_printf_float+0x462>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e730      	b.n	800505a <_printf_float+0xc6>
 80051f8:	2301      	movs	r3, #1
 80051fa:	464a      	mov	r2, r9
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af27 	beq.w	8005056 <_printf_float+0xc2>
 8005208:	f108 0801 	add.w	r8, r8, #1
 800520c:	e7e6      	b.n	80051dc <_printf_float+0x248>
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc39      	bgt.n	8005288 <_printf_float+0x2f4>
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <_printf_float+0x2f0>)
 8005216:	2301      	movs	r3, #1
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f af19 	beq.w	8005056 <_printf_float+0xc2>
 8005224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005228:	4313      	orrs	r3, r2
 800522a:	d102      	bne.n	8005232 <_printf_float+0x29e>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	d5d8      	bpl.n	80051e4 <_printf_float+0x250>
 8005232:	ee18 3a10 	vmov	r3, s16
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af09 	beq.w	8005056 <_printf_float+0xc2>
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	f104 0a1a 	add.w	sl, r4, #26
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	425b      	negs	r3, r3
 8005250:	454b      	cmp	r3, r9
 8005252:	dc01      	bgt.n	8005258 <_printf_float+0x2c4>
 8005254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005256:	e792      	b.n	800517e <_printf_float+0x1ea>
 8005258:	2301      	movs	r3, #1
 800525a:	4652      	mov	r2, sl
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f aef7 	beq.w	8005056 <_printf_float+0xc2>
 8005268:	f109 0901 	add.w	r9, r9, #1
 800526c:	e7ee      	b.n	800524c <_printf_float+0x2b8>
 800526e:	bf00      	nop
 8005270:	7fefffff 	.word	0x7fefffff
 8005274:	08007d0c 	.word	0x08007d0c
 8005278:	08007d10 	.word	0x08007d10
 800527c:	08007d18 	.word	0x08007d18
 8005280:	08007d14 	.word	0x08007d14
 8005284:	08007d1c 	.word	0x08007d1c
 8005288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800528a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800528c:	429a      	cmp	r2, r3
 800528e:	bfa8      	it	ge
 8005290:	461a      	movge	r2, r3
 8005292:	2a00      	cmp	r2, #0
 8005294:	4691      	mov	r9, r2
 8005296:	dc37      	bgt.n	8005308 <_printf_float+0x374>
 8005298:	f04f 0b00 	mov.w	fp, #0
 800529c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a0:	f104 021a 	add.w	r2, r4, #26
 80052a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	eba3 0309 	sub.w	r3, r3, r9
 80052ac:	455b      	cmp	r3, fp
 80052ae:	dc33      	bgt.n	8005318 <_printf_float+0x384>
 80052b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052b4:	429a      	cmp	r2, r3
 80052b6:	db3b      	blt.n	8005330 <_printf_float+0x39c>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	07da      	lsls	r2, r3, #31
 80052bc:	d438      	bmi.n	8005330 <_printf_float+0x39c>
 80052be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052c0:	9b05      	ldr	r3, [sp, #20]
 80052c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	eba2 0901 	sub.w	r9, r2, r1
 80052ca:	4599      	cmp	r9, r3
 80052cc:	bfa8      	it	ge
 80052ce:	4699      	movge	r9, r3
 80052d0:	f1b9 0f00 	cmp.w	r9, #0
 80052d4:	dc35      	bgt.n	8005342 <_printf_float+0x3ae>
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052de:	f104 0a1a 	add.w	sl, r4, #26
 80052e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	eba3 0309 	sub.w	r3, r3, r9
 80052ec:	4543      	cmp	r3, r8
 80052ee:	f77f af79 	ble.w	80051e4 <_printf_float+0x250>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4652      	mov	r2, sl
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f aeaa 	beq.w	8005056 <_printf_float+0xc2>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	e7ec      	b.n	80052e2 <_printf_float+0x34e>
 8005308:	4613      	mov	r3, r2
 800530a:	4631      	mov	r1, r6
 800530c:	4642      	mov	r2, r8
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d1c0      	bne.n	8005298 <_printf_float+0x304>
 8005316:	e69e      	b.n	8005056 <_printf_float+0xc2>
 8005318:	2301      	movs	r3, #1
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	9205      	str	r2, [sp, #20]
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f ae97 	beq.w	8005056 <_printf_float+0xc2>
 8005328:	9a05      	ldr	r2, [sp, #20]
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	e7b9      	b.n	80052a4 <_printf_float+0x310>
 8005330:	ee18 3a10 	vmov	r3, s16
 8005334:	4652      	mov	r2, sl
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	d1be      	bne.n	80052be <_printf_float+0x32a>
 8005340:	e689      	b.n	8005056 <_printf_float+0xc2>
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	464b      	mov	r3, r9
 8005346:	4442      	add	r2, r8
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	d1c1      	bne.n	80052d6 <_printf_float+0x342>
 8005352:	e680      	b.n	8005056 <_printf_float+0xc2>
 8005354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005356:	2a01      	cmp	r2, #1
 8005358:	dc01      	bgt.n	800535e <_printf_float+0x3ca>
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d538      	bpl.n	80053d0 <_printf_float+0x43c>
 800535e:	2301      	movs	r3, #1
 8005360:	4642      	mov	r2, r8
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae74 	beq.w	8005056 <_printf_float+0xc2>
 800536e:	ee18 3a10 	vmov	r3, s16
 8005372:	4652      	mov	r2, sl
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f ae6b 	beq.w	8005056 <_printf_float+0xc2>
 8005380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	f7fb fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800538c:	b9d8      	cbnz	r0, 80053c6 <_printf_float+0x432>
 800538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005390:	f108 0201 	add.w	r2, r8, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	d10e      	bne.n	80053be <_printf_float+0x42a>
 80053a0:	e659      	b.n	8005056 <_printf_float+0xc2>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	f43f ae52 	beq.w	8005056 <_printf_float+0xc2>
 80053b2:	f108 0801 	add.w	r8, r8, #1
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4543      	cmp	r3, r8
 80053bc:	dcf1      	bgt.n	80053a2 <_printf_float+0x40e>
 80053be:	464b      	mov	r3, r9
 80053c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c4:	e6dc      	b.n	8005180 <_printf_float+0x1ec>
 80053c6:	f04f 0800 	mov.w	r8, #0
 80053ca:	f104 0a1a 	add.w	sl, r4, #26
 80053ce:	e7f2      	b.n	80053b6 <_printf_float+0x422>
 80053d0:	2301      	movs	r3, #1
 80053d2:	4642      	mov	r2, r8
 80053d4:	e7df      	b.n	8005396 <_printf_float+0x402>
 80053d6:	2301      	movs	r3, #1
 80053d8:	464a      	mov	r2, r9
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae38 	beq.w	8005056 <_printf_float+0xc2>
 80053e6:	f108 0801 	add.w	r8, r8, #1
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ee:	1a5b      	subs	r3, r3, r1
 80053f0:	4543      	cmp	r3, r8
 80053f2:	dcf0      	bgt.n	80053d6 <_printf_float+0x442>
 80053f4:	e6fa      	b.n	80051ec <_printf_float+0x258>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	f104 0919 	add.w	r9, r4, #25
 80053fe:	e7f4      	b.n	80053ea <_printf_float+0x456>

08005400 <_printf_common>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	4699      	mov	r9, r3
 8005408:	688a      	ldr	r2, [r1, #8]
 800540a:	690b      	ldr	r3, [r1, #16]
 800540c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005410:	4293      	cmp	r3, r2
 8005412:	bfb8      	it	lt
 8005414:	4613      	movlt	r3, r2
 8005416:	6033      	str	r3, [r6, #0]
 8005418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800541c:	4607      	mov	r7, r0
 800541e:	460c      	mov	r4, r1
 8005420:	b10a      	cbz	r2, 8005426 <_printf_common+0x26>
 8005422:	3301      	adds	r3, #1
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	0699      	lsls	r1, r3, #26
 800542a:	bf42      	ittt	mi
 800542c:	6833      	ldrmi	r3, [r6, #0]
 800542e:	3302      	addmi	r3, #2
 8005430:	6033      	strmi	r3, [r6, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	f015 0506 	ands.w	r5, r5, #6
 8005438:	d106      	bne.n	8005448 <_printf_common+0x48>
 800543a:	f104 0a19 	add.w	sl, r4, #25
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	6832      	ldr	r2, [r6, #0]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ab      	cmp	r3, r5
 8005446:	dc26      	bgt.n	8005496 <_printf_common+0x96>
 8005448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800544c:	1e13      	subs	r3, r2, #0
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	bf18      	it	ne
 8005452:	2301      	movne	r3, #1
 8005454:	0692      	lsls	r2, r2, #26
 8005456:	d42b      	bmi.n	80054b0 <_printf_common+0xb0>
 8005458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d01e      	beq.n	80054a4 <_printf_common+0xa4>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	68e5      	ldr	r5, [r4, #12]
 800546a:	6832      	ldr	r2, [r6, #0]
 800546c:	f003 0306 	and.w	r3, r3, #6
 8005470:	2b04      	cmp	r3, #4
 8005472:	bf08      	it	eq
 8005474:	1aad      	subeq	r5, r5, r2
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	bf0c      	ite	eq
 800547c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005480:	2500      	movne	r5, #0
 8005482:	4293      	cmp	r3, r2
 8005484:	bfc4      	itt	gt
 8005486:	1a9b      	subgt	r3, r3, r2
 8005488:	18ed      	addgt	r5, r5, r3
 800548a:	2600      	movs	r6, #0
 800548c:	341a      	adds	r4, #26
 800548e:	42b5      	cmp	r5, r6
 8005490:	d11a      	bne.n	80054c8 <_printf_common+0xc8>
 8005492:	2000      	movs	r0, #0
 8005494:	e008      	b.n	80054a8 <_printf_common+0xa8>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4649      	mov	r1, r9
 800549c:	4638      	mov	r0, r7
 800549e:	47c0      	blx	r8
 80054a0:	3001      	adds	r0, #1
 80054a2:	d103      	bne.n	80054ac <_printf_common+0xac>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	3501      	adds	r5, #1
 80054ae:	e7c6      	b.n	800543e <_printf_common+0x3e>
 80054b0:	18e1      	adds	r1, r4, r3
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	2030      	movs	r0, #48	; 0x30
 80054b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ba:	4422      	add	r2, r4
 80054bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c4:	3302      	adds	r3, #2
 80054c6:	e7c7      	b.n	8005458 <_printf_common+0x58>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4622      	mov	r2, r4
 80054cc:	4649      	mov	r1, r9
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d0e6      	beq.n	80054a4 <_printf_common+0xa4>
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7d9      	b.n	800548e <_printf_common+0x8e>
	...

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	4691      	mov	r9, r2
 80054e4:	7e27      	ldrb	r7, [r4, #24]
 80054e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054e8:	2f78      	cmp	r7, #120	; 0x78
 80054ea:	4680      	mov	r8, r0
 80054ec:	469a      	mov	sl, r3
 80054ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	; 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d8 	beq.w	80056ae <_printf_i+0x1d2>
 80054fe:	2f58      	cmp	r7, #88	; 0x58
 8005500:	f000 80a3 	beq.w	800564a <_printf_i+0x16e>
 8005504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a001      	add	r0, pc, #4	; (adr r0, 800551c <_printf_i+0x40>)
 8005518:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	08005695 	.word	0x08005695
 800554c:	080055b9 	.word	0x080055b9
 8005550:	08005677 	.word	0x08005677
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056b7 	.word	0x080056b7
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	0800567f 	.word	0x0800567f
 8005574:	680b      	ldr	r3, [r1, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	600a      	str	r2, [r1, #0]
 800557c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e0a3      	b.n	80056d0 <_printf_i+0x1f4>
 8005588:	6825      	ldr	r5, [r4, #0]
 800558a:	6808      	ldr	r0, [r1, #0]
 800558c:	062e      	lsls	r6, r5, #24
 800558e:	f100 0304 	add.w	r3, r0, #4
 8005592:	d50a      	bpl.n	80055aa <_printf_i+0xce>
 8005594:	6805      	ldr	r5, [r0, #0]
 8005596:	600b      	str	r3, [r1, #0]
 8005598:	2d00      	cmp	r5, #0
 800559a:	da03      	bge.n	80055a4 <_printf_i+0xc8>
 800559c:	232d      	movs	r3, #45	; 0x2d
 800559e:	426d      	negs	r5, r5
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	485e      	ldr	r0, [pc, #376]	; (8005720 <_printf_i+0x244>)
 80055a6:	230a      	movs	r3, #10
 80055a8:	e019      	b.n	80055de <_printf_i+0x102>
 80055aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055ae:	6805      	ldr	r5, [r0, #0]
 80055b0:	600b      	str	r3, [r1, #0]
 80055b2:	bf18      	it	ne
 80055b4:	b22d      	sxthne	r5, r5
 80055b6:	e7ef      	b.n	8005598 <_printf_i+0xbc>
 80055b8:	680b      	ldr	r3, [r1, #0]
 80055ba:	6825      	ldr	r5, [r4, #0]
 80055bc:	1d18      	adds	r0, r3, #4
 80055be:	6008      	str	r0, [r1, #0]
 80055c0:	0628      	lsls	r0, r5, #24
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0xec>
 80055c4:	681d      	ldr	r5, [r3, #0]
 80055c6:	e002      	b.n	80055ce <_printf_i+0xf2>
 80055c8:	0669      	lsls	r1, r5, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0xe8>
 80055cc:	881d      	ldrh	r5, [r3, #0]
 80055ce:	4854      	ldr	r0, [pc, #336]	; (8005720 <_printf_i+0x244>)
 80055d0:	2f6f      	cmp	r7, #111	; 0x6f
 80055d2:	bf0c      	ite	eq
 80055d4:	2308      	moveq	r3, #8
 80055d6:	230a      	movne	r3, #10
 80055d8:	2100      	movs	r1, #0
 80055da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055de:	6866      	ldr	r6, [r4, #4]
 80055e0:	60a6      	str	r6, [r4, #8]
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	bfa2      	ittt	ge
 80055e6:	6821      	ldrge	r1, [r4, #0]
 80055e8:	f021 0104 	bicge.w	r1, r1, #4
 80055ec:	6021      	strge	r1, [r4, #0]
 80055ee:	b90d      	cbnz	r5, 80055f4 <_printf_i+0x118>
 80055f0:	2e00      	cmp	r6, #0
 80055f2:	d04d      	beq.n	8005690 <_printf_i+0x1b4>
 80055f4:	4616      	mov	r6, r2
 80055f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80055fa:	fb03 5711 	mls	r7, r3, r1, r5
 80055fe:	5dc7      	ldrb	r7, [r0, r7]
 8005600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005604:	462f      	mov	r7, r5
 8005606:	42bb      	cmp	r3, r7
 8005608:	460d      	mov	r5, r1
 800560a:	d9f4      	bls.n	80055f6 <_printf_i+0x11a>
 800560c:	2b08      	cmp	r3, #8
 800560e:	d10b      	bne.n	8005628 <_printf_i+0x14c>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	07df      	lsls	r7, r3, #31
 8005614:	d508      	bpl.n	8005628 <_printf_i+0x14c>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6861      	ldr	r1, [r4, #4]
 800561a:	4299      	cmp	r1, r3
 800561c:	bfde      	ittt	le
 800561e:	2330      	movle	r3, #48	; 0x30
 8005620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005628:	1b92      	subs	r2, r2, r6
 800562a:	6122      	str	r2, [r4, #16]
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	464b      	mov	r3, r9
 8005632:	aa03      	add	r2, sp, #12
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fee2 	bl	8005400 <_printf_common>
 800563c:	3001      	adds	r0, #1
 800563e:	d14c      	bne.n	80056da <_printf_i+0x1fe>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	b004      	add	sp, #16
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	4835      	ldr	r0, [pc, #212]	; (8005720 <_printf_i+0x244>)
 800564c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	680e      	ldr	r6, [r1, #0]
 8005654:	061f      	lsls	r7, r3, #24
 8005656:	f856 5b04 	ldr.w	r5, [r6], #4
 800565a:	600e      	str	r6, [r1, #0]
 800565c:	d514      	bpl.n	8005688 <_printf_i+0x1ac>
 800565e:	07d9      	lsls	r1, r3, #31
 8005660:	bf44      	itt	mi
 8005662:	f043 0320 	orrmi.w	r3, r3, #32
 8005666:	6023      	strmi	r3, [r4, #0]
 8005668:	b91d      	cbnz	r5, 8005672 <_printf_i+0x196>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	f023 0320 	bic.w	r3, r3, #32
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	2310      	movs	r3, #16
 8005674:	e7b0      	b.n	80055d8 <_printf_i+0xfc>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f043 0320 	orr.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	2378      	movs	r3, #120	; 0x78
 8005680:	4828      	ldr	r0, [pc, #160]	; (8005724 <_printf_i+0x248>)
 8005682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005686:	e7e3      	b.n	8005650 <_printf_i+0x174>
 8005688:	065e      	lsls	r6, r3, #25
 800568a:	bf48      	it	mi
 800568c:	b2ad      	uxthmi	r5, r5
 800568e:	e7e6      	b.n	800565e <_printf_i+0x182>
 8005690:	4616      	mov	r6, r2
 8005692:	e7bb      	b.n	800560c <_printf_i+0x130>
 8005694:	680b      	ldr	r3, [r1, #0]
 8005696:	6826      	ldr	r6, [r4, #0]
 8005698:	6960      	ldr	r0, [r4, #20]
 800569a:	1d1d      	adds	r5, r3, #4
 800569c:	600d      	str	r5, [r1, #0]
 800569e:	0635      	lsls	r5, r6, #24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	d501      	bpl.n	80056a8 <_printf_i+0x1cc>
 80056a4:	6018      	str	r0, [r3, #0]
 80056a6:	e002      	b.n	80056ae <_printf_i+0x1d2>
 80056a8:	0671      	lsls	r1, r6, #25
 80056aa:	d5fb      	bpl.n	80056a4 <_printf_i+0x1c8>
 80056ac:	8018      	strh	r0, [r3, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	4616      	mov	r6, r2
 80056b4:	e7ba      	b.n	800562c <_printf_i+0x150>
 80056b6:	680b      	ldr	r3, [r1, #0]
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	600a      	str	r2, [r1, #0]
 80056bc:	681e      	ldr	r6, [r3, #0]
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	2100      	movs	r1, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7fa fd8c 	bl	80001e0 <memchr>
 80056c8:	b108      	cbz	r0, 80056ce <_printf_i+0x1f2>
 80056ca:	1b80      	subs	r0, r0, r6
 80056cc:	6060      	str	r0, [r4, #4]
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	2300      	movs	r3, #0
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d8:	e7a8      	b.n	800562c <_printf_i+0x150>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	4632      	mov	r2, r6
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0ab      	beq.n	8005640 <_printf_i+0x164>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	079b      	lsls	r3, r3, #30
 80056ec:	d413      	bmi.n	8005716 <_printf_i+0x23a>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	4298      	cmp	r0, r3
 80056f4:	bfb8      	it	lt
 80056f6:	4618      	movlt	r0, r3
 80056f8:	e7a4      	b.n	8005644 <_printf_i+0x168>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4632      	mov	r2, r6
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	47d0      	blx	sl
 8005704:	3001      	adds	r0, #1
 8005706:	d09b      	beq.n	8005640 <_printf_i+0x164>
 8005708:	3501      	adds	r5, #1
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	9903      	ldr	r1, [sp, #12]
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	42ab      	cmp	r3, r5
 8005712:	dcf2      	bgt.n	80056fa <_printf_i+0x21e>
 8005714:	e7eb      	b.n	80056ee <_printf_i+0x212>
 8005716:	2500      	movs	r5, #0
 8005718:	f104 0619 	add.w	r6, r4, #25
 800571c:	e7f5      	b.n	800570a <_printf_i+0x22e>
 800571e:	bf00      	nop
 8005720:	08007d1e 	.word	0x08007d1e
 8005724:	08007d2f 	.word	0x08007d2f

08005728 <_vsniprintf_r>:
 8005728:	b530      	push	{r4, r5, lr}
 800572a:	1e14      	subs	r4, r2, #0
 800572c:	4605      	mov	r5, r0
 800572e:	b09b      	sub	sp, #108	; 0x6c
 8005730:	4618      	mov	r0, r3
 8005732:	da05      	bge.n	8005740 <_vsniprintf_r+0x18>
 8005734:	238b      	movs	r3, #139	; 0x8b
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	b01b      	add	sp, #108	; 0x6c
 800573e:	bd30      	pop	{r4, r5, pc}
 8005740:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005744:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005748:	bf14      	ite	ne
 800574a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800574e:	4623      	moveq	r3, r4
 8005750:	9302      	str	r3, [sp, #8]
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005758:	9100      	str	r1, [sp, #0]
 800575a:	9104      	str	r1, [sp, #16]
 800575c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005760:	4602      	mov	r2, r0
 8005762:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005764:	4669      	mov	r1, sp
 8005766:	4628      	mov	r0, r5
 8005768:	f001 fb40 	bl	8006dec <_svfiprintf_r>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	bfbc      	itt	lt
 8005770:	238b      	movlt	r3, #139	; 0x8b
 8005772:	602b      	strlt	r3, [r5, #0]
 8005774:	2c00      	cmp	r4, #0
 8005776:	d0e1      	beq.n	800573c <_vsniprintf_r+0x14>
 8005778:	9b00      	ldr	r3, [sp, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e7dd      	b.n	800573c <_vsniprintf_r+0x14>

08005780 <vsniprintf>:
 8005780:	b507      	push	{r0, r1, r2, lr}
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	460a      	mov	r2, r1
 8005788:	4601      	mov	r1, r0
 800578a:	4803      	ldr	r0, [pc, #12]	; (8005798 <vsniprintf+0x18>)
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f7ff ffcb 	bl	8005728 <_vsniprintf_r>
 8005792:	b003      	add	sp, #12
 8005794:	f85d fb04 	ldr.w	pc, [sp], #4
 8005798:	20000024 	.word	0x20000024

0800579c <quorem>:
 800579c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	6903      	ldr	r3, [r0, #16]
 80057a2:	690c      	ldr	r4, [r1, #16]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	4607      	mov	r7, r0
 80057a8:	f2c0 8081 	blt.w	80058ae <quorem+0x112>
 80057ac:	3c01      	subs	r4, #1
 80057ae:	f101 0814 	add.w	r8, r1, #20
 80057b2:	f100 0514 	add.w	r5, r0, #20
 80057b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057c4:	3301      	adds	r3, #1
 80057c6:	429a      	cmp	r2, r3
 80057c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80057d4:	d331      	bcc.n	800583a <quorem+0x9e>
 80057d6:	f04f 0e00 	mov.w	lr, #0
 80057da:	4640      	mov	r0, r8
 80057dc:	46ac      	mov	ip, r5
 80057de:	46f2      	mov	sl, lr
 80057e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80057e4:	b293      	uxth	r3, r2
 80057e6:	fb06 e303 	mla	r3, r6, r3, lr
 80057ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	ebaa 0303 	sub.w	r3, sl, r3
 80057f4:	0c12      	lsrs	r2, r2, #16
 80057f6:	f8dc a000 	ldr.w	sl, [ip]
 80057fa:	fb06 e202 	mla	r2, r6, r2, lr
 80057fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005806:	fa1f fa82 	uxth.w	sl, r2
 800580a:	f8dc 2000 	ldr.w	r2, [ip]
 800580e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800581c:	4581      	cmp	r9, r0
 800581e:	f84c 3b04 	str.w	r3, [ip], #4
 8005822:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005826:	d2db      	bcs.n	80057e0 <quorem+0x44>
 8005828:	f855 300b 	ldr.w	r3, [r5, fp]
 800582c:	b92b      	cbnz	r3, 800583a <quorem+0x9e>
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	3b04      	subs	r3, #4
 8005832:	429d      	cmp	r5, r3
 8005834:	461a      	mov	r2, r3
 8005836:	d32e      	bcc.n	8005896 <quorem+0xfa>
 8005838:	613c      	str	r4, [r7, #16]
 800583a:	4638      	mov	r0, r7
 800583c:	f001 f8c0 	bl	80069c0 <__mcmp>
 8005840:	2800      	cmp	r0, #0
 8005842:	db24      	blt.n	800588e <quorem+0xf2>
 8005844:	3601      	adds	r6, #1
 8005846:	4628      	mov	r0, r5
 8005848:	f04f 0c00 	mov.w	ip, #0
 800584c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005850:	f8d0 e000 	ldr.w	lr, [r0]
 8005854:	b293      	uxth	r3, r2
 8005856:	ebac 0303 	sub.w	r3, ip, r3
 800585a:	0c12      	lsrs	r2, r2, #16
 800585c:	fa13 f38e 	uxtah	r3, r3, lr
 8005860:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005864:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005868:	b29b      	uxth	r3, r3
 800586a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800586e:	45c1      	cmp	r9, r8
 8005870:	f840 3b04 	str.w	r3, [r0], #4
 8005874:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005878:	d2e8      	bcs.n	800584c <quorem+0xb0>
 800587a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800587e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005882:	b922      	cbnz	r2, 800588e <quorem+0xf2>
 8005884:	3b04      	subs	r3, #4
 8005886:	429d      	cmp	r5, r3
 8005888:	461a      	mov	r2, r3
 800588a:	d30a      	bcc.n	80058a2 <quorem+0x106>
 800588c:	613c      	str	r4, [r7, #16]
 800588e:	4630      	mov	r0, r6
 8005890:	b003      	add	sp, #12
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	3b04      	subs	r3, #4
 800589a:	2a00      	cmp	r2, #0
 800589c:	d1cc      	bne.n	8005838 <quorem+0x9c>
 800589e:	3c01      	subs	r4, #1
 80058a0:	e7c7      	b.n	8005832 <quorem+0x96>
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	d1f0      	bne.n	800588c <quorem+0xf0>
 80058aa:	3c01      	subs	r4, #1
 80058ac:	e7eb      	b.n	8005886 <quorem+0xea>
 80058ae:	2000      	movs	r0, #0
 80058b0:	e7ee      	b.n	8005890 <quorem+0xf4>
 80058b2:	0000      	movs	r0, r0
 80058b4:	0000      	movs	r0, r0
	...

080058b8 <_dtoa_r>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	ed2d 8b02 	vpush	{d8}
 80058c0:	ec57 6b10 	vmov	r6, r7, d0
 80058c4:	b095      	sub	sp, #84	; 0x54
 80058c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058cc:	9105      	str	r1, [sp, #20]
 80058ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80058d2:	4604      	mov	r4, r0
 80058d4:	9209      	str	r2, [sp, #36]	; 0x24
 80058d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d8:	b975      	cbnz	r5, 80058f8 <_dtoa_r+0x40>
 80058da:	2010      	movs	r0, #16
 80058dc:	f000 fddc 	bl	8006498 <malloc>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6260      	str	r0, [r4, #36]	; 0x24
 80058e4:	b920      	cbnz	r0, 80058f0 <_dtoa_r+0x38>
 80058e6:	4bb2      	ldr	r3, [pc, #712]	; (8005bb0 <_dtoa_r+0x2f8>)
 80058e8:	21ea      	movs	r1, #234	; 0xea
 80058ea:	48b2      	ldr	r0, [pc, #712]	; (8005bb4 <_dtoa_r+0x2fc>)
 80058ec:	f001 fb8e 	bl	800700c <__assert_func>
 80058f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058f4:	6005      	str	r5, [r0, #0]
 80058f6:	60c5      	str	r5, [r0, #12]
 80058f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058fa:	6819      	ldr	r1, [r3, #0]
 80058fc:	b151      	cbz	r1, 8005914 <_dtoa_r+0x5c>
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	604a      	str	r2, [r1, #4]
 8005902:	2301      	movs	r3, #1
 8005904:	4093      	lsls	r3, r2
 8005906:	608b      	str	r3, [r1, #8]
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fe1b 	bl	8006544 <_Bfree>
 800590e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	1e3b      	subs	r3, r7, #0
 8005916:	bfb9      	ittee	lt
 8005918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800591c:	9303      	strlt	r3, [sp, #12]
 800591e:	2300      	movge	r3, #0
 8005920:	f8c8 3000 	strge.w	r3, [r8]
 8005924:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005928:	4ba3      	ldr	r3, [pc, #652]	; (8005bb8 <_dtoa_r+0x300>)
 800592a:	bfbc      	itt	lt
 800592c:	2201      	movlt	r2, #1
 800592e:	f8c8 2000 	strlt.w	r2, [r8]
 8005932:	ea33 0309 	bics.w	r3, r3, r9
 8005936:	d11b      	bne.n	8005970 <_dtoa_r+0xb8>
 8005938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800593a:	f242 730f 	movw	r3, #9999	; 0x270f
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005944:	4333      	orrs	r3, r6
 8005946:	f000 857a 	beq.w	800643e <_dtoa_r+0xb86>
 800594a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800594c:	b963      	cbnz	r3, 8005968 <_dtoa_r+0xb0>
 800594e:	4b9b      	ldr	r3, [pc, #620]	; (8005bbc <_dtoa_r+0x304>)
 8005950:	e024      	b.n	800599c <_dtoa_r+0xe4>
 8005952:	4b9b      	ldr	r3, [pc, #620]	; (8005bc0 <_dtoa_r+0x308>)
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	9800      	ldr	r0, [sp, #0]
 800595e:	b015      	add	sp, #84	; 0x54
 8005960:	ecbd 8b02 	vpop	{d8}
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005968:	4b94      	ldr	r3, [pc, #592]	; (8005bbc <_dtoa_r+0x304>)
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	3303      	adds	r3, #3
 800596e:	e7f3      	b.n	8005958 <_dtoa_r+0xa0>
 8005970:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	ec51 0b17 	vmov	r0, r1, d7
 800597a:	2300      	movs	r3, #0
 800597c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005980:	f7fb f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005984:	4680      	mov	r8, r0
 8005986:	b158      	cbz	r0, 80059a0 <_dtoa_r+0xe8>
 8005988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800598a:	2301      	movs	r3, #1
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8551 	beq.w	8006438 <_dtoa_r+0xb80>
 8005996:	488b      	ldr	r0, [pc, #556]	; (8005bc4 <_dtoa_r+0x30c>)
 8005998:	6018      	str	r0, [r3, #0]
 800599a:	1e43      	subs	r3, r0, #1
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	e7dd      	b.n	800595c <_dtoa_r+0xa4>
 80059a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80059a4:	aa12      	add	r2, sp, #72	; 0x48
 80059a6:	a913      	add	r1, sp, #76	; 0x4c
 80059a8:	4620      	mov	r0, r4
 80059aa:	f001 f8ad 	bl	8006b08 <__d2b>
 80059ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059b2:	4683      	mov	fp, r0
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	d07c      	beq.n	8005ab2 <_dtoa_r+0x1fa>
 80059b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80059be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80059c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059d2:	4b7d      	ldr	r3, [pc, #500]	; (8005bc8 <_dtoa_r+0x310>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fa fc55 	bl	8000288 <__aeabi_dsub>
 80059de:	a36e      	add	r3, pc, #440	; (adr r3, 8005b98 <_dtoa_r+0x2e0>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f7fa fe08 	bl	80005f8 <__aeabi_dmul>
 80059e8:	a36d      	add	r3, pc, #436	; (adr r3, 8005ba0 <_dtoa_r+0x2e8>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fc4d 	bl	800028c <__adddf3>
 80059f2:	4606      	mov	r6, r0
 80059f4:	4628      	mov	r0, r5
 80059f6:	460f      	mov	r7, r1
 80059f8:	f7fa fd94 	bl	8000524 <__aeabi_i2d>
 80059fc:	a36a      	add	r3, pc, #424	; (adr r3, 8005ba8 <_dtoa_r+0x2f0>)
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f7fa fdf9 	bl	80005f8 <__aeabi_dmul>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fa fc3d 	bl	800028c <__adddf3>
 8005a12:	4606      	mov	r6, r0
 8005a14:	460f      	mov	r7, r1
 8005a16:	f7fb f89f 	bl	8000b58 <__aeabi_d2iz>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4682      	mov	sl, r0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fb f85a 	bl	8000adc <__aeabi_dcmplt>
 8005a28:	b148      	cbz	r0, 8005a3e <_dtoa_r+0x186>
 8005a2a:	4650      	mov	r0, sl
 8005a2c:	f7fa fd7a 	bl	8000524 <__aeabi_i2d>
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	f7fb f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a38:	b908      	cbnz	r0, 8005a3e <_dtoa_r+0x186>
 8005a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a3e:	f1ba 0f16 	cmp.w	sl, #22
 8005a42:	d854      	bhi.n	8005aee <_dtoa_r+0x236>
 8005a44:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <_dtoa_r+0x314>)
 8005a46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a52:	f7fb f843 	bl	8000adc <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d04b      	beq.n	8005af2 <_dtoa_r+0x23a>
 8005a5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a5e:	2300      	movs	r3, #0
 8005a60:	930e      	str	r3, [sp, #56]	; 0x38
 8005a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a64:	1b5d      	subs	r5, r3, r5
 8005a66:	1e6b      	subs	r3, r5, #1
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	bf43      	ittte	mi
 8005a6c:	2300      	movmi	r3, #0
 8005a6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005a72:	9304      	strmi	r3, [sp, #16]
 8005a74:	f04f 0800 	movpl.w	r8, #0
 8005a78:	f1ba 0f00 	cmp.w	sl, #0
 8005a7c:	db3b      	blt.n	8005af6 <_dtoa_r+0x23e>
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005a84:	4453      	add	r3, sl
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9306      	str	r3, [sp, #24]
 8005a8c:	9b05      	ldr	r3, [sp, #20]
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d869      	bhi.n	8005b66 <_dtoa_r+0x2ae>
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	bfc4      	itt	gt
 8005a96:	3b04      	subgt	r3, #4
 8005a98:	9305      	strgt	r3, [sp, #20]
 8005a9a:	9b05      	ldr	r3, [sp, #20]
 8005a9c:	f1a3 0302 	sub.w	r3, r3, #2
 8005aa0:	bfcc      	ite	gt
 8005aa2:	2500      	movgt	r5, #0
 8005aa4:	2501      	movle	r5, #1
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d869      	bhi.n	8005b7e <_dtoa_r+0x2c6>
 8005aaa:	e8df f003 	tbb	[pc, r3]
 8005aae:	4e2c      	.short	0x4e2c
 8005ab0:	5a4c      	.short	0x5a4c
 8005ab2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005ab6:	441d      	add	r5, r3
 8005ab8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	bfc1      	itttt	gt
 8005ac0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ac4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ac8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005acc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ad0:	bfda      	itte	le
 8005ad2:	f1c3 0320 	rsble	r3, r3, #32
 8005ad6:	fa06 f003 	lslle.w	r0, r6, r3
 8005ada:	4318      	orrgt	r0, r3
 8005adc:	f7fa fd12 	bl	8000504 <__aeabi_ui2d>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ae8:	3d01      	subs	r5, #1
 8005aea:	9310      	str	r3, [sp, #64]	; 0x40
 8005aec:	e771      	b.n	80059d2 <_dtoa_r+0x11a>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e7b6      	b.n	8005a60 <_dtoa_r+0x1a8>
 8005af2:	900e      	str	r0, [sp, #56]	; 0x38
 8005af4:	e7b5      	b.n	8005a62 <_dtoa_r+0x1aa>
 8005af6:	f1ca 0300 	rsb	r3, sl, #0
 8005afa:	9306      	str	r3, [sp, #24]
 8005afc:	2300      	movs	r3, #0
 8005afe:	eba8 080a 	sub.w	r8, r8, sl
 8005b02:	930d      	str	r3, [sp, #52]	; 0x34
 8005b04:	e7c2      	b.n	8005a8c <_dtoa_r+0x1d4>
 8005b06:	2300      	movs	r3, #0
 8005b08:	9308      	str	r3, [sp, #32]
 8005b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc39      	bgt.n	8005b84 <_dtoa_r+0x2cc>
 8005b10:	f04f 0901 	mov.w	r9, #1
 8005b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b18:	464b      	mov	r3, r9
 8005b1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b20:	2200      	movs	r2, #0
 8005b22:	6042      	str	r2, [r0, #4]
 8005b24:	2204      	movs	r2, #4
 8005b26:	f102 0614 	add.w	r6, r2, #20
 8005b2a:	429e      	cmp	r6, r3
 8005b2c:	6841      	ldr	r1, [r0, #4]
 8005b2e:	d92f      	bls.n	8005b90 <_dtoa_r+0x2d8>
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fcc7 	bl	80064c4 <_Balloc>
 8005b36:	9000      	str	r0, [sp, #0]
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d14b      	bne.n	8005bd4 <_dtoa_r+0x31c>
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <_dtoa_r+0x318>)
 8005b3e:	4602      	mov	r2, r0
 8005b40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b44:	e6d1      	b.n	80058ea <_dtoa_r+0x32>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e7de      	b.n	8005b08 <_dtoa_r+0x250>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9308      	str	r3, [sp, #32]
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	eb0a 0903 	add.w	r9, sl, r3
 8005b54:	f109 0301 	add.w	r3, r9, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	bfb8      	it	lt
 8005b5e:	2301      	movlt	r3, #1
 8005b60:	e7dd      	b.n	8005b1e <_dtoa_r+0x266>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e7f2      	b.n	8005b4c <_dtoa_r+0x294>
 8005b66:	2501      	movs	r5, #1
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	9508      	str	r5, [sp, #32]
 8005b6e:	f04f 39ff 	mov.w	r9, #4294967295
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b78:	2312      	movs	r3, #18
 8005b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b7c:	e7cf      	b.n	8005b1e <_dtoa_r+0x266>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	9308      	str	r3, [sp, #32]
 8005b82:	e7f4      	b.n	8005b6e <_dtoa_r+0x2b6>
 8005b84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	e7c6      	b.n	8005b1e <_dtoa_r+0x266>
 8005b90:	3101      	adds	r1, #1
 8005b92:	6041      	str	r1, [r0, #4]
 8005b94:	0052      	lsls	r2, r2, #1
 8005b96:	e7c6      	b.n	8005b26 <_dtoa_r+0x26e>
 8005b98:	636f4361 	.word	0x636f4361
 8005b9c:	3fd287a7 	.word	0x3fd287a7
 8005ba0:	8b60c8b3 	.word	0x8b60c8b3
 8005ba4:	3fc68a28 	.word	0x3fc68a28
 8005ba8:	509f79fb 	.word	0x509f79fb
 8005bac:	3fd34413 	.word	0x3fd34413
 8005bb0:	08007d4d 	.word	0x08007d4d
 8005bb4:	08007d64 	.word	0x08007d64
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	08007d49 	.word	0x08007d49
 8005bc0:	08007d40 	.word	0x08007d40
 8005bc4:	08007d1d 	.word	0x08007d1d
 8005bc8:	3ff80000 	.word	0x3ff80000
 8005bcc:	08007e60 	.word	0x08007e60
 8005bd0:	08007dc3 	.word	0x08007dc3
 8005bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd6:	9a00      	ldr	r2, [sp, #0]
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	2b0e      	cmp	r3, #14
 8005bde:	f200 80ad 	bhi.w	8005d3c <_dtoa_r+0x484>
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	f000 80aa 	beq.w	8005d3c <_dtoa_r+0x484>
 8005be8:	f1ba 0f00 	cmp.w	sl, #0
 8005bec:	dd36      	ble.n	8005c5c <_dtoa_r+0x3a4>
 8005bee:	4ac3      	ldr	r2, [pc, #780]	; (8005efc <_dtoa_r+0x644>)
 8005bf0:	f00a 030f 	and.w	r3, sl, #15
 8005bf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bf8:	ed93 7b00 	vldr	d7, [r3]
 8005bfc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005c04:	eeb0 8a47 	vmov.f32	s16, s14
 8005c08:	eef0 8a67 	vmov.f32	s17, s15
 8005c0c:	d016      	beq.n	8005c3c <_dtoa_r+0x384>
 8005c0e:	4bbc      	ldr	r3, [pc, #752]	; (8005f00 <_dtoa_r+0x648>)
 8005c10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c18:	f7fa fe18 	bl	800084c <__aeabi_ddiv>
 8005c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c20:	f007 070f 	and.w	r7, r7, #15
 8005c24:	2503      	movs	r5, #3
 8005c26:	4eb6      	ldr	r6, [pc, #728]	; (8005f00 <_dtoa_r+0x648>)
 8005c28:	b957      	cbnz	r7, 8005c40 <_dtoa_r+0x388>
 8005c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2e:	ec53 2b18 	vmov	r2, r3, d8
 8005c32:	f7fa fe0b 	bl	800084c <__aeabi_ddiv>
 8005c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c3a:	e029      	b.n	8005c90 <_dtoa_r+0x3d8>
 8005c3c:	2502      	movs	r5, #2
 8005c3e:	e7f2      	b.n	8005c26 <_dtoa_r+0x36e>
 8005c40:	07f9      	lsls	r1, r7, #31
 8005c42:	d508      	bpl.n	8005c56 <_dtoa_r+0x39e>
 8005c44:	ec51 0b18 	vmov	r0, r1, d8
 8005c48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c4c:	f7fa fcd4 	bl	80005f8 <__aeabi_dmul>
 8005c50:	ec41 0b18 	vmov	d8, r0, r1
 8005c54:	3501      	adds	r5, #1
 8005c56:	107f      	asrs	r7, r7, #1
 8005c58:	3608      	adds	r6, #8
 8005c5a:	e7e5      	b.n	8005c28 <_dtoa_r+0x370>
 8005c5c:	f000 80a6 	beq.w	8005dac <_dtoa_r+0x4f4>
 8005c60:	f1ca 0600 	rsb	r6, sl, #0
 8005c64:	4ba5      	ldr	r3, [pc, #660]	; (8005efc <_dtoa_r+0x644>)
 8005c66:	4fa6      	ldr	r7, [pc, #664]	; (8005f00 <_dtoa_r+0x648>)
 8005c68:	f006 020f 	and.w	r2, r6, #15
 8005c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c78:	f7fa fcbe 	bl	80005f8 <__aeabi_dmul>
 8005c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c80:	1136      	asrs	r6, r6, #4
 8005c82:	2300      	movs	r3, #0
 8005c84:	2502      	movs	r5, #2
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	f040 8085 	bne.w	8005d96 <_dtoa_r+0x4de>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1d2      	bne.n	8005c36 <_dtoa_r+0x37e>
 8005c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 808c 	beq.w	8005db0 <_dtoa_r+0x4f8>
 8005c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c9c:	4b99      	ldr	r3, [pc, #612]	; (8005f04 <_dtoa_r+0x64c>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa ff1a 	bl	8000adc <__aeabi_dcmplt>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f000 8081 	beq.w	8005db0 <_dtoa_r+0x4f8>
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d07d      	beq.n	8005db0 <_dtoa_r+0x4f8>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	dd3c      	ble.n	8005d34 <_dtoa_r+0x47c>
 8005cba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005cbe:	9307      	str	r3, [sp, #28]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	4b91      	ldr	r3, [pc, #580]	; (8005f08 <_dtoa_r+0x650>)
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	f7fa fc96 	bl	80005f8 <__aeabi_dmul>
 8005ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005cd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f7fa fc22 	bl	8000524 <__aeabi_i2d>
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	f7fa fc88 	bl	80005f8 <__aeabi_dmul>
 8005ce8:	4b88      	ldr	r3, [pc, #544]	; (8005f0c <_dtoa_r+0x654>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	f7fa face 	bl	800028c <__adddf3>
 8005cf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf8:	9303      	str	r3, [sp, #12]
 8005cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d15c      	bne.n	8005dba <_dtoa_r+0x502>
 8005d00:	4b83      	ldr	r3, [pc, #524]	; (8005f10 <_dtoa_r+0x658>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	4630      	mov	r0, r6
 8005d06:	4639      	mov	r1, r7
 8005d08:	f7fa fabe 	bl	8000288 <__aeabi_dsub>
 8005d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d10:	4606      	mov	r6, r0
 8005d12:	460f      	mov	r7, r1
 8005d14:	f7fa ff00 	bl	8000b18 <__aeabi_dcmpgt>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f040 8296 	bne.w	800624a <_dtoa_r+0x992>
 8005d1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d22:	4630      	mov	r0, r6
 8005d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa fed7 	bl	8000adc <__aeabi_dcmplt>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f040 8288 	bne.w	8006244 <_dtoa_r+0x98c>
 8005d34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f2c0 8158 	blt.w	8005ff4 <_dtoa_r+0x73c>
 8005d44:	f1ba 0f0e 	cmp.w	sl, #14
 8005d48:	f300 8154 	bgt.w	8005ff4 <_dtoa_r+0x73c>
 8005d4c:	4b6b      	ldr	r3, [pc, #428]	; (8005efc <_dtoa_r+0x644>)
 8005d4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f280 80e3 	bge.w	8005f24 <_dtoa_r+0x66c>
 8005d5e:	9b01      	ldr	r3, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f300 80df 	bgt.w	8005f24 <_dtoa_r+0x66c>
 8005d66:	f040 826d 	bne.w	8006244 <_dtoa_r+0x98c>
 8005d6a:	4b69      	ldr	r3, [pc, #420]	; (8005f10 <_dtoa_r+0x658>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4649      	mov	r1, r9
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d7a:	f7fa fec3 	bl	8000b04 <__aeabi_dcmpge>
 8005d7e:	9e01      	ldr	r6, [sp, #4]
 8005d80:	4637      	mov	r7, r6
 8005d82:	2800      	cmp	r0, #0
 8005d84:	f040 8243 	bne.w	800620e <_dtoa_r+0x956>
 8005d88:	9d00      	ldr	r5, [sp, #0]
 8005d8a:	2331      	movs	r3, #49	; 0x31
 8005d8c:	f805 3b01 	strb.w	r3, [r5], #1
 8005d90:	f10a 0a01 	add.w	sl, sl, #1
 8005d94:	e23f      	b.n	8006216 <_dtoa_r+0x95e>
 8005d96:	07f2      	lsls	r2, r6, #31
 8005d98:	d505      	bpl.n	8005da6 <_dtoa_r+0x4ee>
 8005d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d9e:	f7fa fc2b 	bl	80005f8 <__aeabi_dmul>
 8005da2:	3501      	adds	r5, #1
 8005da4:	2301      	movs	r3, #1
 8005da6:	1076      	asrs	r6, r6, #1
 8005da8:	3708      	adds	r7, #8
 8005daa:	e76c      	b.n	8005c86 <_dtoa_r+0x3ce>
 8005dac:	2502      	movs	r5, #2
 8005dae:	e76f      	b.n	8005c90 <_dtoa_r+0x3d8>
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005db6:	930c      	str	r3, [sp, #48]	; 0x30
 8005db8:	e78d      	b.n	8005cd6 <_dtoa_r+0x41e>
 8005dba:	9900      	ldr	r1, [sp, #0]
 8005dbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	; (8005efc <_dtoa_r+0x644>)
 8005dc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dc6:	4401      	add	r1, r0
 8005dc8:	9102      	str	r1, [sp, #8]
 8005dca:	9908      	ldr	r1, [sp, #32]
 8005dcc:	eeb0 8a47 	vmov.f32	s16, s14
 8005dd0:	eef0 8a67 	vmov.f32	s17, s15
 8005dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d045      	beq.n	8005e6c <_dtoa_r+0x5b4>
 8005de0:	494c      	ldr	r1, [pc, #304]	; (8005f14 <_dtoa_r+0x65c>)
 8005de2:	2000      	movs	r0, #0
 8005de4:	f7fa fd32 	bl	800084c <__aeabi_ddiv>
 8005de8:	ec53 2b18 	vmov	r2, r3, d8
 8005dec:	f7fa fa4c 	bl	8000288 <__aeabi_dsub>
 8005df0:	9d00      	ldr	r5, [sp, #0]
 8005df2:	ec41 0b18 	vmov	d8, r0, r1
 8005df6:	4639      	mov	r1, r7
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7fa fead 	bl	8000b58 <__aeabi_d2iz>
 8005dfe:	900c      	str	r0, [sp, #48]	; 0x30
 8005e00:	f7fa fb90 	bl	8000524 <__aeabi_i2d>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fa3c 	bl	8000288 <__aeabi_dsub>
 8005e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e12:	3330      	adds	r3, #48	; 0x30
 8005e14:	f805 3b01 	strb.w	r3, [r5], #1
 8005e18:	ec53 2b18 	vmov	r2, r3, d8
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	460f      	mov	r7, r1
 8005e20:	f7fa fe5c 	bl	8000adc <__aeabi_dcmplt>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d165      	bne.n	8005ef4 <_dtoa_r+0x63c>
 8005e28:	4632      	mov	r2, r6
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	4935      	ldr	r1, [pc, #212]	; (8005f04 <_dtoa_r+0x64c>)
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f7fa fa2a 	bl	8000288 <__aeabi_dsub>
 8005e34:	ec53 2b18 	vmov	r2, r3, d8
 8005e38:	f7fa fe50 	bl	8000adc <__aeabi_dcmplt>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f040 80b9 	bne.w	8005fb4 <_dtoa_r+0x6fc>
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	429d      	cmp	r5, r3
 8005e46:	f43f af75 	beq.w	8005d34 <_dtoa_r+0x47c>
 8005e4a:	4b2f      	ldr	r3, [pc, #188]	; (8005f08 <_dtoa_r+0x650>)
 8005e4c:	ec51 0b18 	vmov	r0, r1, d8
 8005e50:	2200      	movs	r2, #0
 8005e52:	f7fa fbd1 	bl	80005f8 <__aeabi_dmul>
 8005e56:	4b2c      	ldr	r3, [pc, #176]	; (8005f08 <_dtoa_r+0x650>)
 8005e58:	ec41 0b18 	vmov	d8, r0, r1
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fbc9 	bl	80005f8 <__aeabi_dmul>
 8005e66:	4606      	mov	r6, r0
 8005e68:	460f      	mov	r7, r1
 8005e6a:	e7c4      	b.n	8005df6 <_dtoa_r+0x53e>
 8005e6c:	ec51 0b17 	vmov	r0, r1, d7
 8005e70:	f7fa fbc2 	bl	80005f8 <__aeabi_dmul>
 8005e74:	9b02      	ldr	r3, [sp, #8]
 8005e76:	9d00      	ldr	r5, [sp, #0]
 8005e78:	930c      	str	r3, [sp, #48]	; 0x30
 8005e7a:	ec41 0b18 	vmov	d8, r0, r1
 8005e7e:	4639      	mov	r1, r7
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7fa fe69 	bl	8000b58 <__aeabi_d2iz>
 8005e86:	9011      	str	r0, [sp, #68]	; 0x44
 8005e88:	f7fa fb4c 	bl	8000524 <__aeabi_i2d>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa f9f8 	bl	8000288 <__aeabi_dsub>
 8005e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e9a:	3330      	adds	r3, #48	; 0x30
 8005e9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	429d      	cmp	r5, r3
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	d134      	bne.n	8005f18 <_dtoa_r+0x660>
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <_dtoa_r+0x65c>)
 8005eb0:	ec51 0b18 	vmov	r0, r1, d8
 8005eb4:	f7fa f9ea 	bl	800028c <__adddf3>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa fe2a 	bl	8000b18 <__aeabi_dcmpgt>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d175      	bne.n	8005fb4 <_dtoa_r+0x6fc>
 8005ec8:	ec53 2b18 	vmov	r2, r3, d8
 8005ecc:	4911      	ldr	r1, [pc, #68]	; (8005f14 <_dtoa_r+0x65c>)
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f7fa f9da 	bl	8000288 <__aeabi_dsub>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	f7fa fdfe 	bl	8000adc <__aeabi_dcmplt>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	f43f af27 	beq.w	8005d34 <_dtoa_r+0x47c>
 8005ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ee8:	1e6b      	subs	r3, r5, #1
 8005eea:	930c      	str	r3, [sp, #48]	; 0x30
 8005eec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ef0:	2b30      	cmp	r3, #48	; 0x30
 8005ef2:	d0f8      	beq.n	8005ee6 <_dtoa_r+0x62e>
 8005ef4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005ef8:	e04a      	b.n	8005f90 <_dtoa_r+0x6d8>
 8005efa:	bf00      	nop
 8005efc:	08007e60 	.word	0x08007e60
 8005f00:	08007e38 	.word	0x08007e38
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	40240000 	.word	0x40240000
 8005f0c:	401c0000 	.word	0x401c0000
 8005f10:	40140000 	.word	0x40140000
 8005f14:	3fe00000 	.word	0x3fe00000
 8005f18:	4baf      	ldr	r3, [pc, #700]	; (80061d8 <_dtoa_r+0x920>)
 8005f1a:	f7fa fb6d 	bl	80005f8 <__aeabi_dmul>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	460f      	mov	r7, r1
 8005f22:	e7ac      	b.n	8005e7e <_dtoa_r+0x5c6>
 8005f24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f28:	9d00      	ldr	r5, [sp, #0]
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa fc8b 	bl	800084c <__aeabi_ddiv>
 8005f36:	f7fa fe0f 	bl	8000b58 <__aeabi_d2iz>
 8005f3a:	9002      	str	r0, [sp, #8]
 8005f3c:	f7fa faf2 	bl	8000524 <__aeabi_i2d>
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	f7fa fb58 	bl	80005f8 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	f7fa f99a 	bl	8000288 <__aeabi_dsub>
 8005f54:	9e02      	ldr	r6, [sp, #8]
 8005f56:	9f01      	ldr	r7, [sp, #4]
 8005f58:	3630      	adds	r6, #48	; 0x30
 8005f5a:	f805 6b01 	strb.w	r6, [r5], #1
 8005f5e:	9e00      	ldr	r6, [sp, #0]
 8005f60:	1bae      	subs	r6, r5, r6
 8005f62:	42b7      	cmp	r7, r6
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	d137      	bne.n	8005fda <_dtoa_r+0x722>
 8005f6a:	f7fa f98f 	bl	800028c <__adddf3>
 8005f6e:	4642      	mov	r2, r8
 8005f70:	464b      	mov	r3, r9
 8005f72:	4606      	mov	r6, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	f7fa fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8005f7a:	b9c8      	cbnz	r0, 8005fb0 <_dtoa_r+0x6f8>
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f88:	b110      	cbz	r0, 8005f90 <_dtoa_r+0x6d8>
 8005f8a:	9b02      	ldr	r3, [sp, #8]
 8005f8c:	07d9      	lsls	r1, r3, #31
 8005f8e:	d40f      	bmi.n	8005fb0 <_dtoa_r+0x6f8>
 8005f90:	4620      	mov	r0, r4
 8005f92:	4659      	mov	r1, fp
 8005f94:	f000 fad6 	bl	8006544 <_Bfree>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	702b      	strb	r3, [r5, #0]
 8005f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f9e:	f10a 0001 	add.w	r0, sl, #1
 8005fa2:	6018      	str	r0, [r3, #0]
 8005fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f43f acd8 	beq.w	800595c <_dtoa_r+0xa4>
 8005fac:	601d      	str	r5, [r3, #0]
 8005fae:	e4d5      	b.n	800595c <_dtoa_r+0xa4>
 8005fb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fbc:	2a39      	cmp	r2, #57	; 0x39
 8005fbe:	d108      	bne.n	8005fd2 <_dtoa_r+0x71a>
 8005fc0:	9a00      	ldr	r2, [sp, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d1f7      	bne.n	8005fb6 <_dtoa_r+0x6fe>
 8005fc6:	9a07      	ldr	r2, [sp, #28]
 8005fc8:	9900      	ldr	r1, [sp, #0]
 8005fca:	3201      	adds	r2, #1
 8005fcc:	9207      	str	r2, [sp, #28]
 8005fce:	2230      	movs	r2, #48	; 0x30
 8005fd0:	700a      	strb	r2, [r1, #0]
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	3201      	adds	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e78c      	b.n	8005ef4 <_dtoa_r+0x63c>
 8005fda:	4b7f      	ldr	r3, [pc, #508]	; (80061d8 <_dtoa_r+0x920>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	f7fa fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d09b      	beq.n	8005f2a <_dtoa_r+0x672>
 8005ff2:	e7cd      	b.n	8005f90 <_dtoa_r+0x6d8>
 8005ff4:	9a08      	ldr	r2, [sp, #32]
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	f000 80c4 	beq.w	8006184 <_dtoa_r+0x8cc>
 8005ffc:	9a05      	ldr	r2, [sp, #20]
 8005ffe:	2a01      	cmp	r2, #1
 8006000:	f300 80a8 	bgt.w	8006154 <_dtoa_r+0x89c>
 8006004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006006:	2a00      	cmp	r2, #0
 8006008:	f000 80a0 	beq.w	800614c <_dtoa_r+0x894>
 800600c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006010:	9e06      	ldr	r6, [sp, #24]
 8006012:	4645      	mov	r5, r8
 8006014:	9a04      	ldr	r2, [sp, #16]
 8006016:	2101      	movs	r1, #1
 8006018:	441a      	add	r2, r3
 800601a:	4620      	mov	r0, r4
 800601c:	4498      	add	r8, r3
 800601e:	9204      	str	r2, [sp, #16]
 8006020:	f000 fb4c 	bl	80066bc <__i2b>
 8006024:	4607      	mov	r7, r0
 8006026:	2d00      	cmp	r5, #0
 8006028:	dd0b      	ble.n	8006042 <_dtoa_r+0x78a>
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	dd08      	ble.n	8006042 <_dtoa_r+0x78a>
 8006030:	42ab      	cmp	r3, r5
 8006032:	9a04      	ldr	r2, [sp, #16]
 8006034:	bfa8      	it	ge
 8006036:	462b      	movge	r3, r5
 8006038:	eba8 0803 	sub.w	r8, r8, r3
 800603c:	1aed      	subs	r5, r5, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	b1fb      	cbz	r3, 8006086 <_dtoa_r+0x7ce>
 8006046:	9b08      	ldr	r3, [sp, #32]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 809f 	beq.w	800618c <_dtoa_r+0x8d4>
 800604e:	2e00      	cmp	r6, #0
 8006050:	dd11      	ble.n	8006076 <_dtoa_r+0x7be>
 8006052:	4639      	mov	r1, r7
 8006054:	4632      	mov	r2, r6
 8006056:	4620      	mov	r0, r4
 8006058:	f000 fbec 	bl	8006834 <__pow5mult>
 800605c:	465a      	mov	r2, fp
 800605e:	4601      	mov	r1, r0
 8006060:	4607      	mov	r7, r0
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fb40 	bl	80066e8 <__multiply>
 8006068:	4659      	mov	r1, fp
 800606a:	9007      	str	r0, [sp, #28]
 800606c:	4620      	mov	r0, r4
 800606e:	f000 fa69 	bl	8006544 <_Bfree>
 8006072:	9b07      	ldr	r3, [sp, #28]
 8006074:	469b      	mov	fp, r3
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	1b9a      	subs	r2, r3, r6
 800607a:	d004      	beq.n	8006086 <_dtoa_r+0x7ce>
 800607c:	4659      	mov	r1, fp
 800607e:	4620      	mov	r0, r4
 8006080:	f000 fbd8 	bl	8006834 <__pow5mult>
 8006084:	4683      	mov	fp, r0
 8006086:	2101      	movs	r1, #1
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fb17 	bl	80066bc <__i2b>
 800608e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006090:	2b00      	cmp	r3, #0
 8006092:	4606      	mov	r6, r0
 8006094:	dd7c      	ble.n	8006190 <_dtoa_r+0x8d8>
 8006096:	461a      	mov	r2, r3
 8006098:	4601      	mov	r1, r0
 800609a:	4620      	mov	r0, r4
 800609c:	f000 fbca 	bl	8006834 <__pow5mult>
 80060a0:	9b05      	ldr	r3, [sp, #20]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	4606      	mov	r6, r0
 80060a6:	dd76      	ble.n	8006196 <_dtoa_r+0x8de>
 80060a8:	2300      	movs	r3, #0
 80060aa:	9306      	str	r3, [sp, #24]
 80060ac:	6933      	ldr	r3, [r6, #16]
 80060ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060b2:	6918      	ldr	r0, [r3, #16]
 80060b4:	f000 fab2 	bl	800661c <__hi0bits>
 80060b8:	f1c0 0020 	rsb	r0, r0, #32
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	4418      	add	r0, r3
 80060c0:	f010 001f 	ands.w	r0, r0, #31
 80060c4:	f000 8086 	beq.w	80061d4 <_dtoa_r+0x91c>
 80060c8:	f1c0 0320 	rsb	r3, r0, #32
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	dd7f      	ble.n	80061d0 <_dtoa_r+0x918>
 80060d0:	f1c0 001c 	rsb	r0, r0, #28
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	4403      	add	r3, r0
 80060d8:	4480      	add	r8, r0
 80060da:	4405      	add	r5, r0
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	f1b8 0f00 	cmp.w	r8, #0
 80060e2:	dd05      	ble.n	80060f0 <_dtoa_r+0x838>
 80060e4:	4659      	mov	r1, fp
 80060e6:	4642      	mov	r2, r8
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fbfd 	bl	80068e8 <__lshift>
 80060ee:	4683      	mov	fp, r0
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dd05      	ble.n	8006102 <_dtoa_r+0x84a>
 80060f6:	4631      	mov	r1, r6
 80060f8:	461a      	mov	r2, r3
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fbf4 	bl	80068e8 <__lshift>
 8006100:	4606      	mov	r6, r0
 8006102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006104:	2b00      	cmp	r3, #0
 8006106:	d069      	beq.n	80061dc <_dtoa_r+0x924>
 8006108:	4631      	mov	r1, r6
 800610a:	4658      	mov	r0, fp
 800610c:	f000 fc58 	bl	80069c0 <__mcmp>
 8006110:	2800      	cmp	r0, #0
 8006112:	da63      	bge.n	80061dc <_dtoa_r+0x924>
 8006114:	2300      	movs	r3, #0
 8006116:	4659      	mov	r1, fp
 8006118:	220a      	movs	r2, #10
 800611a:	4620      	mov	r0, r4
 800611c:	f000 fa34 	bl	8006588 <__multadd>
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006126:	4683      	mov	fp, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 818f 	beq.w	800644c <_dtoa_r+0xb94>
 800612e:	4639      	mov	r1, r7
 8006130:	2300      	movs	r3, #0
 8006132:	220a      	movs	r2, #10
 8006134:	4620      	mov	r0, r4
 8006136:	f000 fa27 	bl	8006588 <__multadd>
 800613a:	f1b9 0f00 	cmp.w	r9, #0
 800613e:	4607      	mov	r7, r0
 8006140:	f300 808e 	bgt.w	8006260 <_dtoa_r+0x9a8>
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	2b02      	cmp	r3, #2
 8006148:	dc50      	bgt.n	80061ec <_dtoa_r+0x934>
 800614a:	e089      	b.n	8006260 <_dtoa_r+0x9a8>
 800614c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800614e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006152:	e75d      	b.n	8006010 <_dtoa_r+0x758>
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	1e5e      	subs	r6, r3, #1
 8006158:	9b06      	ldr	r3, [sp, #24]
 800615a:	42b3      	cmp	r3, r6
 800615c:	bfbf      	itttt	lt
 800615e:	9b06      	ldrlt	r3, [sp, #24]
 8006160:	9606      	strlt	r6, [sp, #24]
 8006162:	1af2      	sublt	r2, r6, r3
 8006164:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006166:	bfb6      	itet	lt
 8006168:	189b      	addlt	r3, r3, r2
 800616a:	1b9e      	subge	r6, r3, r6
 800616c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	bfb8      	it	lt
 8006172:	2600      	movlt	r6, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	bfb5      	itete	lt
 8006178:	eba8 0503 	sublt.w	r5, r8, r3
 800617c:	9b01      	ldrge	r3, [sp, #4]
 800617e:	2300      	movlt	r3, #0
 8006180:	4645      	movge	r5, r8
 8006182:	e747      	b.n	8006014 <_dtoa_r+0x75c>
 8006184:	9e06      	ldr	r6, [sp, #24]
 8006186:	9f08      	ldr	r7, [sp, #32]
 8006188:	4645      	mov	r5, r8
 800618a:	e74c      	b.n	8006026 <_dtoa_r+0x76e>
 800618c:	9a06      	ldr	r2, [sp, #24]
 800618e:	e775      	b.n	800607c <_dtoa_r+0x7c4>
 8006190:	9b05      	ldr	r3, [sp, #20]
 8006192:	2b01      	cmp	r3, #1
 8006194:	dc18      	bgt.n	80061c8 <_dtoa_r+0x910>
 8006196:	9b02      	ldr	r3, [sp, #8]
 8006198:	b9b3      	cbnz	r3, 80061c8 <_dtoa_r+0x910>
 800619a:	9b03      	ldr	r3, [sp, #12]
 800619c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a0:	b9a3      	cbnz	r3, 80061cc <_dtoa_r+0x914>
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	0d1b      	lsrs	r3, r3, #20
 80061aa:	051b      	lsls	r3, r3, #20
 80061ac:	b12b      	cbz	r3, 80061ba <_dtoa_r+0x902>
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	3301      	adds	r3, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	f108 0801 	add.w	r8, r8, #1
 80061b8:	2301      	movs	r3, #1
 80061ba:	9306      	str	r3, [sp, #24]
 80061bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f47f af74 	bne.w	80060ac <_dtoa_r+0x7f4>
 80061c4:	2001      	movs	r0, #1
 80061c6:	e779      	b.n	80060bc <_dtoa_r+0x804>
 80061c8:	2300      	movs	r3, #0
 80061ca:	e7f6      	b.n	80061ba <_dtoa_r+0x902>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	e7f4      	b.n	80061ba <_dtoa_r+0x902>
 80061d0:	d085      	beq.n	80060de <_dtoa_r+0x826>
 80061d2:	4618      	mov	r0, r3
 80061d4:	301c      	adds	r0, #28
 80061d6:	e77d      	b.n	80060d4 <_dtoa_r+0x81c>
 80061d8:	40240000 	.word	0x40240000
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dc38      	bgt.n	8006254 <_dtoa_r+0x99c>
 80061e2:	9b05      	ldr	r3, [sp, #20]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	dd35      	ble.n	8006254 <_dtoa_r+0x99c>
 80061e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80061ec:	f1b9 0f00 	cmp.w	r9, #0
 80061f0:	d10d      	bne.n	800620e <_dtoa_r+0x956>
 80061f2:	4631      	mov	r1, r6
 80061f4:	464b      	mov	r3, r9
 80061f6:	2205      	movs	r2, #5
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 f9c5 	bl	8006588 <__multadd>
 80061fe:	4601      	mov	r1, r0
 8006200:	4606      	mov	r6, r0
 8006202:	4658      	mov	r0, fp
 8006204:	f000 fbdc 	bl	80069c0 <__mcmp>
 8006208:	2800      	cmp	r0, #0
 800620a:	f73f adbd 	bgt.w	8005d88 <_dtoa_r+0x4d0>
 800620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006210:	9d00      	ldr	r5, [sp, #0]
 8006212:	ea6f 0a03 	mvn.w	sl, r3
 8006216:	f04f 0800 	mov.w	r8, #0
 800621a:	4631      	mov	r1, r6
 800621c:	4620      	mov	r0, r4
 800621e:	f000 f991 	bl	8006544 <_Bfree>
 8006222:	2f00      	cmp	r7, #0
 8006224:	f43f aeb4 	beq.w	8005f90 <_dtoa_r+0x6d8>
 8006228:	f1b8 0f00 	cmp.w	r8, #0
 800622c:	d005      	beq.n	800623a <_dtoa_r+0x982>
 800622e:	45b8      	cmp	r8, r7
 8006230:	d003      	beq.n	800623a <_dtoa_r+0x982>
 8006232:	4641      	mov	r1, r8
 8006234:	4620      	mov	r0, r4
 8006236:	f000 f985 	bl	8006544 <_Bfree>
 800623a:	4639      	mov	r1, r7
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f981 	bl	8006544 <_Bfree>
 8006242:	e6a5      	b.n	8005f90 <_dtoa_r+0x6d8>
 8006244:	2600      	movs	r6, #0
 8006246:	4637      	mov	r7, r6
 8006248:	e7e1      	b.n	800620e <_dtoa_r+0x956>
 800624a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800624c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006250:	4637      	mov	r7, r6
 8006252:	e599      	b.n	8005d88 <_dtoa_r+0x4d0>
 8006254:	9b08      	ldr	r3, [sp, #32]
 8006256:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80fd 	beq.w	800645a <_dtoa_r+0xba2>
 8006260:	2d00      	cmp	r5, #0
 8006262:	dd05      	ble.n	8006270 <_dtoa_r+0x9b8>
 8006264:	4639      	mov	r1, r7
 8006266:	462a      	mov	r2, r5
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fb3d 	bl	80068e8 <__lshift>
 800626e:	4607      	mov	r7, r0
 8006270:	9b06      	ldr	r3, [sp, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d05c      	beq.n	8006330 <_dtoa_r+0xa78>
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f923 	bl	80064c4 <_Balloc>
 800627e:	4605      	mov	r5, r0
 8006280:	b928      	cbnz	r0, 800628e <_dtoa_r+0x9d6>
 8006282:	4b80      	ldr	r3, [pc, #512]	; (8006484 <_dtoa_r+0xbcc>)
 8006284:	4602      	mov	r2, r0
 8006286:	f240 21ea 	movw	r1, #746	; 0x2ea
 800628a:	f7ff bb2e 	b.w	80058ea <_dtoa_r+0x32>
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	3202      	adds	r2, #2
 8006292:	0092      	lsls	r2, r2, #2
 8006294:	f107 010c 	add.w	r1, r7, #12
 8006298:	300c      	adds	r0, #12
 800629a:	f000 f905 	bl	80064a8 <memcpy>
 800629e:	2201      	movs	r2, #1
 80062a0:	4629      	mov	r1, r5
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fb20 	bl	80068e8 <__lshift>
 80062a8:	9b00      	ldr	r3, [sp, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	444b      	add	r3, r9
 80062b2:	9307      	str	r3, [sp, #28]
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	46b8      	mov	r8, r7
 80062bc:	9306      	str	r3, [sp, #24]
 80062be:	4607      	mov	r7, r0
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	4631      	mov	r1, r6
 80062c4:	3b01      	subs	r3, #1
 80062c6:	4658      	mov	r0, fp
 80062c8:	9302      	str	r3, [sp, #8]
 80062ca:	f7ff fa67 	bl	800579c <quorem>
 80062ce:	4603      	mov	r3, r0
 80062d0:	3330      	adds	r3, #48	; 0x30
 80062d2:	9004      	str	r0, [sp, #16]
 80062d4:	4641      	mov	r1, r8
 80062d6:	4658      	mov	r0, fp
 80062d8:	9308      	str	r3, [sp, #32]
 80062da:	f000 fb71 	bl	80069c0 <__mcmp>
 80062de:	463a      	mov	r2, r7
 80062e0:	4681      	mov	r9, r0
 80062e2:	4631      	mov	r1, r6
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 fb87 	bl	80069f8 <__mdiff>
 80062ea:	68c2      	ldr	r2, [r0, #12]
 80062ec:	9b08      	ldr	r3, [sp, #32]
 80062ee:	4605      	mov	r5, r0
 80062f0:	bb02      	cbnz	r2, 8006334 <_dtoa_r+0xa7c>
 80062f2:	4601      	mov	r1, r0
 80062f4:	4658      	mov	r0, fp
 80062f6:	f000 fb63 	bl	80069c0 <__mcmp>
 80062fa:	9b08      	ldr	r3, [sp, #32]
 80062fc:	4602      	mov	r2, r0
 80062fe:	4629      	mov	r1, r5
 8006300:	4620      	mov	r0, r4
 8006302:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006306:	f000 f91d 	bl	8006544 <_Bfree>
 800630a:	9b05      	ldr	r3, [sp, #20]
 800630c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800630e:	9d01      	ldr	r5, [sp, #4]
 8006310:	ea43 0102 	orr.w	r1, r3, r2
 8006314:	9b06      	ldr	r3, [sp, #24]
 8006316:	430b      	orrs	r3, r1
 8006318:	9b08      	ldr	r3, [sp, #32]
 800631a:	d10d      	bne.n	8006338 <_dtoa_r+0xa80>
 800631c:	2b39      	cmp	r3, #57	; 0x39
 800631e:	d029      	beq.n	8006374 <_dtoa_r+0xabc>
 8006320:	f1b9 0f00 	cmp.w	r9, #0
 8006324:	dd01      	ble.n	800632a <_dtoa_r+0xa72>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	3331      	adds	r3, #49	; 0x31
 800632a:	9a02      	ldr	r2, [sp, #8]
 800632c:	7013      	strb	r3, [r2, #0]
 800632e:	e774      	b.n	800621a <_dtoa_r+0x962>
 8006330:	4638      	mov	r0, r7
 8006332:	e7b9      	b.n	80062a8 <_dtoa_r+0x9f0>
 8006334:	2201      	movs	r2, #1
 8006336:	e7e2      	b.n	80062fe <_dtoa_r+0xa46>
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	db06      	blt.n	800634c <_dtoa_r+0xa94>
 800633e:	9905      	ldr	r1, [sp, #20]
 8006340:	ea41 0909 	orr.w	r9, r1, r9
 8006344:	9906      	ldr	r1, [sp, #24]
 8006346:	ea59 0101 	orrs.w	r1, r9, r1
 800634a:	d120      	bne.n	800638e <_dtoa_r+0xad6>
 800634c:	2a00      	cmp	r2, #0
 800634e:	ddec      	ble.n	800632a <_dtoa_r+0xa72>
 8006350:	4659      	mov	r1, fp
 8006352:	2201      	movs	r2, #1
 8006354:	4620      	mov	r0, r4
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	f000 fac6 	bl	80068e8 <__lshift>
 800635c:	4631      	mov	r1, r6
 800635e:	4683      	mov	fp, r0
 8006360:	f000 fb2e 	bl	80069c0 <__mcmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	dc02      	bgt.n	8006370 <_dtoa_r+0xab8>
 800636a:	d1de      	bne.n	800632a <_dtoa_r+0xa72>
 800636c:	07da      	lsls	r2, r3, #31
 800636e:	d5dc      	bpl.n	800632a <_dtoa_r+0xa72>
 8006370:	2b39      	cmp	r3, #57	; 0x39
 8006372:	d1d8      	bne.n	8006326 <_dtoa_r+0xa6e>
 8006374:	9a02      	ldr	r2, [sp, #8]
 8006376:	2339      	movs	r3, #57	; 0x39
 8006378:	7013      	strb	r3, [r2, #0]
 800637a:	462b      	mov	r3, r5
 800637c:	461d      	mov	r5, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006384:	2a39      	cmp	r2, #57	; 0x39
 8006386:	d050      	beq.n	800642a <_dtoa_r+0xb72>
 8006388:	3201      	adds	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e745      	b.n	800621a <_dtoa_r+0x962>
 800638e:	2a00      	cmp	r2, #0
 8006390:	dd03      	ble.n	800639a <_dtoa_r+0xae2>
 8006392:	2b39      	cmp	r3, #57	; 0x39
 8006394:	d0ee      	beq.n	8006374 <_dtoa_r+0xabc>
 8006396:	3301      	adds	r3, #1
 8006398:	e7c7      	b.n	800632a <_dtoa_r+0xa72>
 800639a:	9a01      	ldr	r2, [sp, #4]
 800639c:	9907      	ldr	r1, [sp, #28]
 800639e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063a2:	428a      	cmp	r2, r1
 80063a4:	d02a      	beq.n	80063fc <_dtoa_r+0xb44>
 80063a6:	4659      	mov	r1, fp
 80063a8:	2300      	movs	r3, #0
 80063aa:	220a      	movs	r2, #10
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f8eb 	bl	8006588 <__multadd>
 80063b2:	45b8      	cmp	r8, r7
 80063b4:	4683      	mov	fp, r0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f04f 020a 	mov.w	r2, #10
 80063be:	4641      	mov	r1, r8
 80063c0:	4620      	mov	r0, r4
 80063c2:	d107      	bne.n	80063d4 <_dtoa_r+0xb1c>
 80063c4:	f000 f8e0 	bl	8006588 <__multadd>
 80063c8:	4680      	mov	r8, r0
 80063ca:	4607      	mov	r7, r0
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	3301      	adds	r3, #1
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	e775      	b.n	80062c0 <_dtoa_r+0xa08>
 80063d4:	f000 f8d8 	bl	8006588 <__multadd>
 80063d8:	4639      	mov	r1, r7
 80063da:	4680      	mov	r8, r0
 80063dc:	2300      	movs	r3, #0
 80063de:	220a      	movs	r2, #10
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 f8d1 	bl	8006588 <__multadd>
 80063e6:	4607      	mov	r7, r0
 80063e8:	e7f0      	b.n	80063cc <_dtoa_r+0xb14>
 80063ea:	f1b9 0f00 	cmp.w	r9, #0
 80063ee:	9a00      	ldr	r2, [sp, #0]
 80063f0:	bfcc      	ite	gt
 80063f2:	464d      	movgt	r5, r9
 80063f4:	2501      	movle	r5, #1
 80063f6:	4415      	add	r5, r2
 80063f8:	f04f 0800 	mov.w	r8, #0
 80063fc:	4659      	mov	r1, fp
 80063fe:	2201      	movs	r2, #1
 8006400:	4620      	mov	r0, r4
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	f000 fa70 	bl	80068e8 <__lshift>
 8006408:	4631      	mov	r1, r6
 800640a:	4683      	mov	fp, r0
 800640c:	f000 fad8 	bl	80069c0 <__mcmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	dcb2      	bgt.n	800637a <_dtoa_r+0xac2>
 8006414:	d102      	bne.n	800641c <_dtoa_r+0xb64>
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	07db      	lsls	r3, r3, #31
 800641a:	d4ae      	bmi.n	800637a <_dtoa_r+0xac2>
 800641c:	462b      	mov	r3, r5
 800641e:	461d      	mov	r5, r3
 8006420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006424:	2a30      	cmp	r2, #48	; 0x30
 8006426:	d0fa      	beq.n	800641e <_dtoa_r+0xb66>
 8006428:	e6f7      	b.n	800621a <_dtoa_r+0x962>
 800642a:	9a00      	ldr	r2, [sp, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d1a5      	bne.n	800637c <_dtoa_r+0xac4>
 8006430:	f10a 0a01 	add.w	sl, sl, #1
 8006434:	2331      	movs	r3, #49	; 0x31
 8006436:	e779      	b.n	800632c <_dtoa_r+0xa74>
 8006438:	4b13      	ldr	r3, [pc, #76]	; (8006488 <_dtoa_r+0xbd0>)
 800643a:	f7ff baaf 	b.w	800599c <_dtoa_r+0xe4>
 800643e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006440:	2b00      	cmp	r3, #0
 8006442:	f47f aa86 	bne.w	8005952 <_dtoa_r+0x9a>
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <_dtoa_r+0xbd4>)
 8006448:	f7ff baa8 	b.w	800599c <_dtoa_r+0xe4>
 800644c:	f1b9 0f00 	cmp.w	r9, #0
 8006450:	dc03      	bgt.n	800645a <_dtoa_r+0xba2>
 8006452:	9b05      	ldr	r3, [sp, #20]
 8006454:	2b02      	cmp	r3, #2
 8006456:	f73f aec9 	bgt.w	80061ec <_dtoa_r+0x934>
 800645a:	9d00      	ldr	r5, [sp, #0]
 800645c:	4631      	mov	r1, r6
 800645e:	4658      	mov	r0, fp
 8006460:	f7ff f99c 	bl	800579c <quorem>
 8006464:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006468:	f805 3b01 	strb.w	r3, [r5], #1
 800646c:	9a00      	ldr	r2, [sp, #0]
 800646e:	1aaa      	subs	r2, r5, r2
 8006470:	4591      	cmp	r9, r2
 8006472:	ddba      	ble.n	80063ea <_dtoa_r+0xb32>
 8006474:	4659      	mov	r1, fp
 8006476:	2300      	movs	r3, #0
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f884 	bl	8006588 <__multadd>
 8006480:	4683      	mov	fp, r0
 8006482:	e7eb      	b.n	800645c <_dtoa_r+0xba4>
 8006484:	08007dc3 	.word	0x08007dc3
 8006488:	08007d1c 	.word	0x08007d1c
 800648c:	08007d40 	.word	0x08007d40

08006490 <_localeconv_r>:
 8006490:	4800      	ldr	r0, [pc, #0]	; (8006494 <_localeconv_r+0x4>)
 8006492:	4770      	bx	lr
 8006494:	20000178 	.word	0x20000178

08006498 <malloc>:
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <malloc+0xc>)
 800649a:	4601      	mov	r1, r0
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f000 bbef 	b.w	8006c80 <_malloc_r>
 80064a2:	bf00      	nop
 80064a4:	20000024 	.word	0x20000024

080064a8 <memcpy>:
 80064a8:	440a      	add	r2, r1
 80064aa:	4291      	cmp	r1, r2
 80064ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80064b0:	d100      	bne.n	80064b4 <memcpy+0xc>
 80064b2:	4770      	bx	lr
 80064b4:	b510      	push	{r4, lr}
 80064b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064be:	4291      	cmp	r1, r2
 80064c0:	d1f9      	bne.n	80064b6 <memcpy+0xe>
 80064c2:	bd10      	pop	{r4, pc}

080064c4 <_Balloc>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	b976      	cbnz	r6, 80064ec <_Balloc+0x28>
 80064ce:	2010      	movs	r0, #16
 80064d0:	f7ff ffe2 	bl	8006498 <malloc>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6260      	str	r0, [r4, #36]	; 0x24
 80064d8:	b920      	cbnz	r0, 80064e4 <_Balloc+0x20>
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <_Balloc+0x78>)
 80064dc:	4818      	ldr	r0, [pc, #96]	; (8006540 <_Balloc+0x7c>)
 80064de:	2166      	movs	r1, #102	; 0x66
 80064e0:	f000 fd94 	bl	800700c <__assert_func>
 80064e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064e8:	6006      	str	r6, [r0, #0]
 80064ea:	60c6      	str	r6, [r0, #12]
 80064ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064ee:	68f3      	ldr	r3, [r6, #12]
 80064f0:	b183      	cbz	r3, 8006514 <_Balloc+0x50>
 80064f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064fa:	b9b8      	cbnz	r0, 800652c <_Balloc+0x68>
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f605 	lsl.w	r6, r1, r5
 8006502:	1d72      	adds	r2, r6, #5
 8006504:	0092      	lsls	r2, r2, #2
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fb5a 	bl	8006bc0 <_calloc_r>
 800650c:	b160      	cbz	r0, 8006528 <_Balloc+0x64>
 800650e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006512:	e00e      	b.n	8006532 <_Balloc+0x6e>
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	2104      	movs	r1, #4
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fb51 	bl	8006bc0 <_calloc_r>
 800651e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006520:	60f0      	str	r0, [r6, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e4      	bne.n	80064f2 <_Balloc+0x2e>
 8006528:	2000      	movs	r0, #0
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	6802      	ldr	r2, [r0, #0]
 800652e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006532:	2300      	movs	r3, #0
 8006534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006538:	e7f7      	b.n	800652a <_Balloc+0x66>
 800653a:	bf00      	nop
 800653c:	08007d4d 	.word	0x08007d4d
 8006540:	08007dd4 	.word	0x08007dd4

08006544 <_Bfree>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006548:	4605      	mov	r5, r0
 800654a:	460c      	mov	r4, r1
 800654c:	b976      	cbnz	r6, 800656c <_Bfree+0x28>
 800654e:	2010      	movs	r0, #16
 8006550:	f7ff ffa2 	bl	8006498 <malloc>
 8006554:	4602      	mov	r2, r0
 8006556:	6268      	str	r0, [r5, #36]	; 0x24
 8006558:	b920      	cbnz	r0, 8006564 <_Bfree+0x20>
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <_Bfree+0x3c>)
 800655c:	4809      	ldr	r0, [pc, #36]	; (8006584 <_Bfree+0x40>)
 800655e:	218a      	movs	r1, #138	; 0x8a
 8006560:	f000 fd54 	bl	800700c <__assert_func>
 8006564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006568:	6006      	str	r6, [r0, #0]
 800656a:	60c6      	str	r6, [r0, #12]
 800656c:	b13c      	cbz	r4, 800657e <_Bfree+0x3a>
 800656e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006570:	6862      	ldr	r2, [r4, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006578:	6021      	str	r1, [r4, #0]
 800657a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	08007d4d 	.word	0x08007d4d
 8006584:	08007dd4 	.word	0x08007dd4

08006588 <__multadd>:
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658c:	690e      	ldr	r6, [r1, #16]
 800658e:	4607      	mov	r7, r0
 8006590:	4698      	mov	r8, r3
 8006592:	460c      	mov	r4, r1
 8006594:	f101 0014 	add.w	r0, r1, #20
 8006598:	2300      	movs	r3, #0
 800659a:	6805      	ldr	r5, [r0, #0]
 800659c:	b2a9      	uxth	r1, r5
 800659e:	fb02 8101 	mla	r1, r2, r1, r8
 80065a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80065a6:	0c2d      	lsrs	r5, r5, #16
 80065a8:	fb02 c505 	mla	r5, r2, r5, ip
 80065ac:	b289      	uxth	r1, r1
 80065ae:	3301      	adds	r3, #1
 80065b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80065b4:	429e      	cmp	r6, r3
 80065b6:	f840 1b04 	str.w	r1, [r0], #4
 80065ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80065be:	dcec      	bgt.n	800659a <__multadd+0x12>
 80065c0:	f1b8 0f00 	cmp.w	r8, #0
 80065c4:	d022      	beq.n	800660c <__multadd+0x84>
 80065c6:	68a3      	ldr	r3, [r4, #8]
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	dc19      	bgt.n	8006600 <__multadd+0x78>
 80065cc:	6861      	ldr	r1, [r4, #4]
 80065ce:	4638      	mov	r0, r7
 80065d0:	3101      	adds	r1, #1
 80065d2:	f7ff ff77 	bl	80064c4 <_Balloc>
 80065d6:	4605      	mov	r5, r0
 80065d8:	b928      	cbnz	r0, 80065e6 <__multadd+0x5e>
 80065da:	4602      	mov	r2, r0
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <__multadd+0x8c>)
 80065de:	480e      	ldr	r0, [pc, #56]	; (8006618 <__multadd+0x90>)
 80065e0:	21b5      	movs	r1, #181	; 0xb5
 80065e2:	f000 fd13 	bl	800700c <__assert_func>
 80065e6:	6922      	ldr	r2, [r4, #16]
 80065e8:	3202      	adds	r2, #2
 80065ea:	f104 010c 	add.w	r1, r4, #12
 80065ee:	0092      	lsls	r2, r2, #2
 80065f0:	300c      	adds	r0, #12
 80065f2:	f7ff ff59 	bl	80064a8 <memcpy>
 80065f6:	4621      	mov	r1, r4
 80065f8:	4638      	mov	r0, r7
 80065fa:	f7ff ffa3 	bl	8006544 <_Bfree>
 80065fe:	462c      	mov	r4, r5
 8006600:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006604:	3601      	adds	r6, #1
 8006606:	f8c3 8014 	str.w	r8, [r3, #20]
 800660a:	6126      	str	r6, [r4, #16]
 800660c:	4620      	mov	r0, r4
 800660e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006612:	bf00      	nop
 8006614:	08007dc3 	.word	0x08007dc3
 8006618:	08007dd4 	.word	0x08007dd4

0800661c <__hi0bits>:
 800661c:	0c03      	lsrs	r3, r0, #16
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	b9d3      	cbnz	r3, 8006658 <__hi0bits+0x3c>
 8006622:	0400      	lsls	r0, r0, #16
 8006624:	2310      	movs	r3, #16
 8006626:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800662a:	bf04      	itt	eq
 800662c:	0200      	lsleq	r0, r0, #8
 800662e:	3308      	addeq	r3, #8
 8006630:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006634:	bf04      	itt	eq
 8006636:	0100      	lsleq	r0, r0, #4
 8006638:	3304      	addeq	r3, #4
 800663a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800663e:	bf04      	itt	eq
 8006640:	0080      	lsleq	r0, r0, #2
 8006642:	3302      	addeq	r3, #2
 8006644:	2800      	cmp	r0, #0
 8006646:	db05      	blt.n	8006654 <__hi0bits+0x38>
 8006648:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800664c:	f103 0301 	add.w	r3, r3, #1
 8006650:	bf08      	it	eq
 8006652:	2320      	moveq	r3, #32
 8006654:	4618      	mov	r0, r3
 8006656:	4770      	bx	lr
 8006658:	2300      	movs	r3, #0
 800665a:	e7e4      	b.n	8006626 <__hi0bits+0xa>

0800665c <__lo0bits>:
 800665c:	6803      	ldr	r3, [r0, #0]
 800665e:	f013 0207 	ands.w	r2, r3, #7
 8006662:	4601      	mov	r1, r0
 8006664:	d00b      	beq.n	800667e <__lo0bits+0x22>
 8006666:	07da      	lsls	r2, r3, #31
 8006668:	d424      	bmi.n	80066b4 <__lo0bits+0x58>
 800666a:	0798      	lsls	r0, r3, #30
 800666c:	bf49      	itett	mi
 800666e:	085b      	lsrmi	r3, r3, #1
 8006670:	089b      	lsrpl	r3, r3, #2
 8006672:	2001      	movmi	r0, #1
 8006674:	600b      	strmi	r3, [r1, #0]
 8006676:	bf5c      	itt	pl
 8006678:	600b      	strpl	r3, [r1, #0]
 800667a:	2002      	movpl	r0, #2
 800667c:	4770      	bx	lr
 800667e:	b298      	uxth	r0, r3
 8006680:	b9b0      	cbnz	r0, 80066b0 <__lo0bits+0x54>
 8006682:	0c1b      	lsrs	r3, r3, #16
 8006684:	2010      	movs	r0, #16
 8006686:	f013 0fff 	tst.w	r3, #255	; 0xff
 800668a:	bf04      	itt	eq
 800668c:	0a1b      	lsreq	r3, r3, #8
 800668e:	3008      	addeq	r0, #8
 8006690:	071a      	lsls	r2, r3, #28
 8006692:	bf04      	itt	eq
 8006694:	091b      	lsreq	r3, r3, #4
 8006696:	3004      	addeq	r0, #4
 8006698:	079a      	lsls	r2, r3, #30
 800669a:	bf04      	itt	eq
 800669c:	089b      	lsreq	r3, r3, #2
 800669e:	3002      	addeq	r0, #2
 80066a0:	07da      	lsls	r2, r3, #31
 80066a2:	d403      	bmi.n	80066ac <__lo0bits+0x50>
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	f100 0001 	add.w	r0, r0, #1
 80066aa:	d005      	beq.n	80066b8 <__lo0bits+0x5c>
 80066ac:	600b      	str	r3, [r1, #0]
 80066ae:	4770      	bx	lr
 80066b0:	4610      	mov	r0, r2
 80066b2:	e7e8      	b.n	8006686 <__lo0bits+0x2a>
 80066b4:	2000      	movs	r0, #0
 80066b6:	4770      	bx	lr
 80066b8:	2020      	movs	r0, #32
 80066ba:	4770      	bx	lr

080066bc <__i2b>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	2101      	movs	r1, #1
 80066c2:	f7ff feff 	bl	80064c4 <_Balloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	b928      	cbnz	r0, 80066d6 <__i2b+0x1a>
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <__i2b+0x24>)
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <__i2b+0x28>)
 80066ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066d2:	f000 fc9b 	bl	800700c <__assert_func>
 80066d6:	2301      	movs	r3, #1
 80066d8:	6144      	str	r4, [r0, #20]
 80066da:	6103      	str	r3, [r0, #16]
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	08007dc3 	.word	0x08007dc3
 80066e4:	08007dd4 	.word	0x08007dd4

080066e8 <__multiply>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4614      	mov	r4, r2
 80066ee:	690a      	ldr	r2, [r1, #16]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bfb8      	it	lt
 80066f6:	460b      	movlt	r3, r1
 80066f8:	460d      	mov	r5, r1
 80066fa:	bfbc      	itt	lt
 80066fc:	4625      	movlt	r5, r4
 80066fe:	461c      	movlt	r4, r3
 8006700:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006704:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006708:	68ab      	ldr	r3, [r5, #8]
 800670a:	6869      	ldr	r1, [r5, #4]
 800670c:	eb0a 0709 	add.w	r7, sl, r9
 8006710:	42bb      	cmp	r3, r7
 8006712:	b085      	sub	sp, #20
 8006714:	bfb8      	it	lt
 8006716:	3101      	addlt	r1, #1
 8006718:	f7ff fed4 	bl	80064c4 <_Balloc>
 800671c:	b930      	cbnz	r0, 800672c <__multiply+0x44>
 800671e:	4602      	mov	r2, r0
 8006720:	4b42      	ldr	r3, [pc, #264]	; (800682c <__multiply+0x144>)
 8006722:	4843      	ldr	r0, [pc, #268]	; (8006830 <__multiply+0x148>)
 8006724:	f240 115d 	movw	r1, #349	; 0x15d
 8006728:	f000 fc70 	bl	800700c <__assert_func>
 800672c:	f100 0614 	add.w	r6, r0, #20
 8006730:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006734:	4633      	mov	r3, r6
 8006736:	2200      	movs	r2, #0
 8006738:	4543      	cmp	r3, r8
 800673a:	d31e      	bcc.n	800677a <__multiply+0x92>
 800673c:	f105 0c14 	add.w	ip, r5, #20
 8006740:	f104 0314 	add.w	r3, r4, #20
 8006744:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006748:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800674c:	9202      	str	r2, [sp, #8]
 800674e:	ebac 0205 	sub.w	r2, ip, r5
 8006752:	3a15      	subs	r2, #21
 8006754:	f022 0203 	bic.w	r2, r2, #3
 8006758:	3204      	adds	r2, #4
 800675a:	f105 0115 	add.w	r1, r5, #21
 800675e:	458c      	cmp	ip, r1
 8006760:	bf38      	it	cc
 8006762:	2204      	movcc	r2, #4
 8006764:	9201      	str	r2, [sp, #4]
 8006766:	9a02      	ldr	r2, [sp, #8]
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	429a      	cmp	r2, r3
 800676c:	d808      	bhi.n	8006780 <__multiply+0x98>
 800676e:	2f00      	cmp	r7, #0
 8006770:	dc55      	bgt.n	800681e <__multiply+0x136>
 8006772:	6107      	str	r7, [r0, #16]
 8006774:	b005      	add	sp, #20
 8006776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677a:	f843 2b04 	str.w	r2, [r3], #4
 800677e:	e7db      	b.n	8006738 <__multiply+0x50>
 8006780:	f8b3 a000 	ldrh.w	sl, [r3]
 8006784:	f1ba 0f00 	cmp.w	sl, #0
 8006788:	d020      	beq.n	80067cc <__multiply+0xe4>
 800678a:	f105 0e14 	add.w	lr, r5, #20
 800678e:	46b1      	mov	r9, r6
 8006790:	2200      	movs	r2, #0
 8006792:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006796:	f8d9 b000 	ldr.w	fp, [r9]
 800679a:	b2a1      	uxth	r1, r4
 800679c:	fa1f fb8b 	uxth.w	fp, fp
 80067a0:	fb0a b101 	mla	r1, sl, r1, fp
 80067a4:	4411      	add	r1, r2
 80067a6:	f8d9 2000 	ldr.w	r2, [r9]
 80067aa:	0c24      	lsrs	r4, r4, #16
 80067ac:	0c12      	lsrs	r2, r2, #16
 80067ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80067b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80067b6:	b289      	uxth	r1, r1
 80067b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80067bc:	45f4      	cmp	ip, lr
 80067be:	f849 1b04 	str.w	r1, [r9], #4
 80067c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80067c6:	d8e4      	bhi.n	8006792 <__multiply+0xaa>
 80067c8:	9901      	ldr	r1, [sp, #4]
 80067ca:	5072      	str	r2, [r6, r1]
 80067cc:	9a03      	ldr	r2, [sp, #12]
 80067ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067d2:	3304      	adds	r3, #4
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	d01f      	beq.n	800681a <__multiply+0x132>
 80067da:	6834      	ldr	r4, [r6, #0]
 80067dc:	f105 0114 	add.w	r1, r5, #20
 80067e0:	46b6      	mov	lr, r6
 80067e2:	f04f 0a00 	mov.w	sl, #0
 80067e6:	880a      	ldrh	r2, [r1, #0]
 80067e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80067ec:	fb09 b202 	mla	r2, r9, r2, fp
 80067f0:	4492      	add	sl, r2
 80067f2:	b2a4      	uxth	r4, r4
 80067f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80067f8:	f84e 4b04 	str.w	r4, [lr], #4
 80067fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8006800:	f8be 2000 	ldrh.w	r2, [lr]
 8006804:	0c24      	lsrs	r4, r4, #16
 8006806:	fb09 2404 	mla	r4, r9, r4, r2
 800680a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800680e:	458c      	cmp	ip, r1
 8006810:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006814:	d8e7      	bhi.n	80067e6 <__multiply+0xfe>
 8006816:	9a01      	ldr	r2, [sp, #4]
 8006818:	50b4      	str	r4, [r6, r2]
 800681a:	3604      	adds	r6, #4
 800681c:	e7a3      	b.n	8006766 <__multiply+0x7e>
 800681e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1a5      	bne.n	8006772 <__multiply+0x8a>
 8006826:	3f01      	subs	r7, #1
 8006828:	e7a1      	b.n	800676e <__multiply+0x86>
 800682a:	bf00      	nop
 800682c:	08007dc3 	.word	0x08007dc3
 8006830:	08007dd4 	.word	0x08007dd4

08006834 <__pow5mult>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	4615      	mov	r5, r2
 800683a:	f012 0203 	ands.w	r2, r2, #3
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	d007      	beq.n	8006854 <__pow5mult+0x20>
 8006844:	4c25      	ldr	r4, [pc, #148]	; (80068dc <__pow5mult+0xa8>)
 8006846:	3a01      	subs	r2, #1
 8006848:	2300      	movs	r3, #0
 800684a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800684e:	f7ff fe9b 	bl	8006588 <__multadd>
 8006852:	4607      	mov	r7, r0
 8006854:	10ad      	asrs	r5, r5, #2
 8006856:	d03d      	beq.n	80068d4 <__pow5mult+0xa0>
 8006858:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800685a:	b97c      	cbnz	r4, 800687c <__pow5mult+0x48>
 800685c:	2010      	movs	r0, #16
 800685e:	f7ff fe1b 	bl	8006498 <malloc>
 8006862:	4602      	mov	r2, r0
 8006864:	6270      	str	r0, [r6, #36]	; 0x24
 8006866:	b928      	cbnz	r0, 8006874 <__pow5mult+0x40>
 8006868:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <__pow5mult+0xac>)
 800686a:	481e      	ldr	r0, [pc, #120]	; (80068e4 <__pow5mult+0xb0>)
 800686c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006870:	f000 fbcc 	bl	800700c <__assert_func>
 8006874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006878:	6004      	str	r4, [r0, #0]
 800687a:	60c4      	str	r4, [r0, #12]
 800687c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006884:	b94c      	cbnz	r4, 800689a <__pow5mult+0x66>
 8006886:	f240 2171 	movw	r1, #625	; 0x271
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff ff16 	bl	80066bc <__i2b>
 8006890:	2300      	movs	r3, #0
 8006892:	f8c8 0008 	str.w	r0, [r8, #8]
 8006896:	4604      	mov	r4, r0
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	f04f 0900 	mov.w	r9, #0
 800689e:	07eb      	lsls	r3, r5, #31
 80068a0:	d50a      	bpl.n	80068b8 <__pow5mult+0x84>
 80068a2:	4639      	mov	r1, r7
 80068a4:	4622      	mov	r2, r4
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7ff ff1e 	bl	80066e8 <__multiply>
 80068ac:	4639      	mov	r1, r7
 80068ae:	4680      	mov	r8, r0
 80068b0:	4630      	mov	r0, r6
 80068b2:	f7ff fe47 	bl	8006544 <_Bfree>
 80068b6:	4647      	mov	r7, r8
 80068b8:	106d      	asrs	r5, r5, #1
 80068ba:	d00b      	beq.n	80068d4 <__pow5mult+0xa0>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	b938      	cbnz	r0, 80068d0 <__pow5mult+0x9c>
 80068c0:	4622      	mov	r2, r4
 80068c2:	4621      	mov	r1, r4
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7ff ff0f 	bl	80066e8 <__multiply>
 80068ca:	6020      	str	r0, [r4, #0]
 80068cc:	f8c0 9000 	str.w	r9, [r0]
 80068d0:	4604      	mov	r4, r0
 80068d2:	e7e4      	b.n	800689e <__pow5mult+0x6a>
 80068d4:	4638      	mov	r0, r7
 80068d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068da:	bf00      	nop
 80068dc:	08007f28 	.word	0x08007f28
 80068e0:	08007d4d 	.word	0x08007d4d
 80068e4:	08007dd4 	.word	0x08007dd4

080068e8 <__lshift>:
 80068e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ec:	460c      	mov	r4, r1
 80068ee:	6849      	ldr	r1, [r1, #4]
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	4607      	mov	r7, r0
 80068fa:	4691      	mov	r9, r2
 80068fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006900:	f108 0601 	add.w	r6, r8, #1
 8006904:	42b3      	cmp	r3, r6
 8006906:	db0b      	blt.n	8006920 <__lshift+0x38>
 8006908:	4638      	mov	r0, r7
 800690a:	f7ff fddb 	bl	80064c4 <_Balloc>
 800690e:	4605      	mov	r5, r0
 8006910:	b948      	cbnz	r0, 8006926 <__lshift+0x3e>
 8006912:	4602      	mov	r2, r0
 8006914:	4b28      	ldr	r3, [pc, #160]	; (80069b8 <__lshift+0xd0>)
 8006916:	4829      	ldr	r0, [pc, #164]	; (80069bc <__lshift+0xd4>)
 8006918:	f240 11d9 	movw	r1, #473	; 0x1d9
 800691c:	f000 fb76 	bl	800700c <__assert_func>
 8006920:	3101      	adds	r1, #1
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	e7ee      	b.n	8006904 <__lshift+0x1c>
 8006926:	2300      	movs	r3, #0
 8006928:	f100 0114 	add.w	r1, r0, #20
 800692c:	f100 0210 	add.w	r2, r0, #16
 8006930:	4618      	mov	r0, r3
 8006932:	4553      	cmp	r3, sl
 8006934:	db33      	blt.n	800699e <__lshift+0xb6>
 8006936:	6920      	ldr	r0, [r4, #16]
 8006938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800693c:	f104 0314 	add.w	r3, r4, #20
 8006940:	f019 091f 	ands.w	r9, r9, #31
 8006944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800694c:	d02b      	beq.n	80069a6 <__lshift+0xbe>
 800694e:	f1c9 0e20 	rsb	lr, r9, #32
 8006952:	468a      	mov	sl, r1
 8006954:	2200      	movs	r2, #0
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	fa00 f009 	lsl.w	r0, r0, r9
 800695c:	4302      	orrs	r2, r0
 800695e:	f84a 2b04 	str.w	r2, [sl], #4
 8006962:	f853 2b04 	ldr.w	r2, [r3], #4
 8006966:	459c      	cmp	ip, r3
 8006968:	fa22 f20e 	lsr.w	r2, r2, lr
 800696c:	d8f3      	bhi.n	8006956 <__lshift+0x6e>
 800696e:	ebac 0304 	sub.w	r3, ip, r4
 8006972:	3b15      	subs	r3, #21
 8006974:	f023 0303 	bic.w	r3, r3, #3
 8006978:	3304      	adds	r3, #4
 800697a:	f104 0015 	add.w	r0, r4, #21
 800697e:	4584      	cmp	ip, r0
 8006980:	bf38      	it	cc
 8006982:	2304      	movcc	r3, #4
 8006984:	50ca      	str	r2, [r1, r3]
 8006986:	b10a      	cbz	r2, 800698c <__lshift+0xa4>
 8006988:	f108 0602 	add.w	r6, r8, #2
 800698c:	3e01      	subs	r6, #1
 800698e:	4638      	mov	r0, r7
 8006990:	612e      	str	r6, [r5, #16]
 8006992:	4621      	mov	r1, r4
 8006994:	f7ff fdd6 	bl	8006544 <_Bfree>
 8006998:	4628      	mov	r0, r5
 800699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699e:	f842 0f04 	str.w	r0, [r2, #4]!
 80069a2:	3301      	adds	r3, #1
 80069a4:	e7c5      	b.n	8006932 <__lshift+0x4a>
 80069a6:	3904      	subs	r1, #4
 80069a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80069b0:	459c      	cmp	ip, r3
 80069b2:	d8f9      	bhi.n	80069a8 <__lshift+0xc0>
 80069b4:	e7ea      	b.n	800698c <__lshift+0xa4>
 80069b6:	bf00      	nop
 80069b8:	08007dc3 	.word	0x08007dc3
 80069bc:	08007dd4 	.word	0x08007dd4

080069c0 <__mcmp>:
 80069c0:	b530      	push	{r4, r5, lr}
 80069c2:	6902      	ldr	r2, [r0, #16]
 80069c4:	690c      	ldr	r4, [r1, #16]
 80069c6:	1b12      	subs	r2, r2, r4
 80069c8:	d10e      	bne.n	80069e8 <__mcmp+0x28>
 80069ca:	f100 0314 	add.w	r3, r0, #20
 80069ce:	3114      	adds	r1, #20
 80069d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d003      	beq.n	80069ec <__mcmp+0x2c>
 80069e4:	d305      	bcc.n	80069f2 <__mcmp+0x32>
 80069e6:	2201      	movs	r2, #1
 80069e8:	4610      	mov	r0, r2
 80069ea:	bd30      	pop	{r4, r5, pc}
 80069ec:	4283      	cmp	r3, r0
 80069ee:	d3f3      	bcc.n	80069d8 <__mcmp+0x18>
 80069f0:	e7fa      	b.n	80069e8 <__mcmp+0x28>
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295
 80069f6:	e7f7      	b.n	80069e8 <__mcmp+0x28>

080069f8 <__mdiff>:
 80069f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	460c      	mov	r4, r1
 80069fe:	4606      	mov	r6, r0
 8006a00:	4611      	mov	r1, r2
 8006a02:	4620      	mov	r0, r4
 8006a04:	4617      	mov	r7, r2
 8006a06:	f7ff ffdb 	bl	80069c0 <__mcmp>
 8006a0a:	1e05      	subs	r5, r0, #0
 8006a0c:	d110      	bne.n	8006a30 <__mdiff+0x38>
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff fd57 	bl	80064c4 <_Balloc>
 8006a16:	b930      	cbnz	r0, 8006a26 <__mdiff+0x2e>
 8006a18:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <__mdiff+0x108>)
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	f240 2132 	movw	r1, #562	; 0x232
 8006a20:	4838      	ldr	r0, [pc, #224]	; (8006b04 <__mdiff+0x10c>)
 8006a22:	f000 faf3 	bl	800700c <__assert_func>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a30:	bfa4      	itt	ge
 8006a32:	463b      	movge	r3, r7
 8006a34:	4627      	movge	r7, r4
 8006a36:	4630      	mov	r0, r6
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	bfa6      	itte	ge
 8006a3c:	461c      	movge	r4, r3
 8006a3e:	2500      	movge	r5, #0
 8006a40:	2501      	movlt	r5, #1
 8006a42:	f7ff fd3f 	bl	80064c4 <_Balloc>
 8006a46:	b920      	cbnz	r0, 8006a52 <__mdiff+0x5a>
 8006a48:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <__mdiff+0x108>)
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a50:	e7e6      	b.n	8006a20 <__mdiff+0x28>
 8006a52:	693e      	ldr	r6, [r7, #16]
 8006a54:	60c5      	str	r5, [r0, #12]
 8006a56:	6925      	ldr	r5, [r4, #16]
 8006a58:	f107 0114 	add.w	r1, r7, #20
 8006a5c:	f104 0914 	add.w	r9, r4, #20
 8006a60:	f100 0e14 	add.w	lr, r0, #20
 8006a64:	f107 0210 	add.w	r2, r7, #16
 8006a68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006a6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006a70:	46f2      	mov	sl, lr
 8006a72:	2700      	movs	r7, #0
 8006a74:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a7c:	fa1f f883 	uxth.w	r8, r3
 8006a80:	fa17 f78b 	uxtah	r7, r7, fp
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	eba7 0808 	sub.w	r8, r7, r8
 8006a8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a92:	fa1f f888 	uxth.w	r8, r8
 8006a96:	141f      	asrs	r7, r3, #16
 8006a98:	454d      	cmp	r5, r9
 8006a9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a9e:	f84a 3b04 	str.w	r3, [sl], #4
 8006aa2:	d8e7      	bhi.n	8006a74 <__mdiff+0x7c>
 8006aa4:	1b2b      	subs	r3, r5, r4
 8006aa6:	3b15      	subs	r3, #21
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
 8006aac:	3304      	adds	r3, #4
 8006aae:	3415      	adds	r4, #21
 8006ab0:	42a5      	cmp	r5, r4
 8006ab2:	bf38      	it	cc
 8006ab4:	2304      	movcc	r3, #4
 8006ab6:	4419      	add	r1, r3
 8006ab8:	4473      	add	r3, lr
 8006aba:	469e      	mov	lr, r3
 8006abc:	460d      	mov	r5, r1
 8006abe:	4565      	cmp	r5, ip
 8006ac0:	d30e      	bcc.n	8006ae0 <__mdiff+0xe8>
 8006ac2:	f10c 0203 	add.w	r2, ip, #3
 8006ac6:	1a52      	subs	r2, r2, r1
 8006ac8:	f022 0203 	bic.w	r2, r2, #3
 8006acc:	3903      	subs	r1, #3
 8006ace:	458c      	cmp	ip, r1
 8006ad0:	bf38      	it	cc
 8006ad2:	2200      	movcc	r2, #0
 8006ad4:	441a      	add	r2, r3
 8006ad6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006ada:	b17b      	cbz	r3, 8006afc <__mdiff+0x104>
 8006adc:	6106      	str	r6, [r0, #16]
 8006ade:	e7a5      	b.n	8006a2c <__mdiff+0x34>
 8006ae0:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ae4:	fa17 f488 	uxtah	r4, r7, r8
 8006ae8:	1422      	asrs	r2, r4, #16
 8006aea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006aee:	b2a4      	uxth	r4, r4
 8006af0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006af4:	f84e 4b04 	str.w	r4, [lr], #4
 8006af8:	1417      	asrs	r7, r2, #16
 8006afa:	e7e0      	b.n	8006abe <__mdiff+0xc6>
 8006afc:	3e01      	subs	r6, #1
 8006afe:	e7ea      	b.n	8006ad6 <__mdiff+0xde>
 8006b00:	08007dc3 	.word	0x08007dc3
 8006b04:	08007dd4 	.word	0x08007dd4

08006b08 <__d2b>:
 8006b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	2101      	movs	r1, #1
 8006b10:	ec57 6b10 	vmov	r6, r7, d0
 8006b14:	4690      	mov	r8, r2
 8006b16:	f7ff fcd5 	bl	80064c4 <_Balloc>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	b930      	cbnz	r0, 8006b2c <__d2b+0x24>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <__d2b+0xb0>)
 8006b22:	4826      	ldr	r0, [pc, #152]	; (8006bbc <__d2b+0xb4>)
 8006b24:	f240 310a 	movw	r1, #778	; 0x30a
 8006b28:	f000 fa70 	bl	800700c <__assert_func>
 8006b2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b34:	bb35      	cbnz	r5, 8006b84 <__d2b+0x7c>
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	d028      	beq.n	8006b8e <__d2b+0x86>
 8006b3c:	4668      	mov	r0, sp
 8006b3e:	9600      	str	r6, [sp, #0]
 8006b40:	f7ff fd8c 	bl	800665c <__lo0bits>
 8006b44:	9900      	ldr	r1, [sp, #0]
 8006b46:	b300      	cbz	r0, 8006b8a <__d2b+0x82>
 8006b48:	9a01      	ldr	r2, [sp, #4]
 8006b4a:	f1c0 0320 	rsb	r3, r0, #32
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	430b      	orrs	r3, r1
 8006b54:	40c2      	lsrs	r2, r0
 8006b56:	6163      	str	r3, [r4, #20]
 8006b58:	9201      	str	r2, [sp, #4]
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	61a3      	str	r3, [r4, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bf14      	ite	ne
 8006b62:	2202      	movne	r2, #2
 8006b64:	2201      	moveq	r2, #1
 8006b66:	6122      	str	r2, [r4, #16]
 8006b68:	b1d5      	cbz	r5, 8006ba0 <__d2b+0x98>
 8006b6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b6e:	4405      	add	r5, r0
 8006b70:	f8c9 5000 	str.w	r5, [r9]
 8006b74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b78:	f8c8 0000 	str.w	r0, [r8]
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	b003      	add	sp, #12
 8006b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b88:	e7d5      	b.n	8006b36 <__d2b+0x2e>
 8006b8a:	6161      	str	r1, [r4, #20]
 8006b8c:	e7e5      	b.n	8006b5a <__d2b+0x52>
 8006b8e:	a801      	add	r0, sp, #4
 8006b90:	f7ff fd64 	bl	800665c <__lo0bits>
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	6163      	str	r3, [r4, #20]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	6122      	str	r2, [r4, #16]
 8006b9c:	3020      	adds	r0, #32
 8006b9e:	e7e3      	b.n	8006b68 <__d2b+0x60>
 8006ba0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ba4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ba8:	f8c9 0000 	str.w	r0, [r9]
 8006bac:	6918      	ldr	r0, [r3, #16]
 8006bae:	f7ff fd35 	bl	800661c <__hi0bits>
 8006bb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bb6:	e7df      	b.n	8006b78 <__d2b+0x70>
 8006bb8:	08007dc3 	.word	0x08007dc3
 8006bbc:	08007dd4 	.word	0x08007dd4

08006bc0 <_calloc_r>:
 8006bc0:	b513      	push	{r0, r1, r4, lr}
 8006bc2:	434a      	muls	r2, r1
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	9201      	str	r2, [sp, #4]
 8006bc8:	f000 f85a 	bl	8006c80 <_malloc_r>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	b118      	cbz	r0, 8006bd8 <_calloc_r+0x18>
 8006bd0:	9a01      	ldr	r2, [sp, #4]
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	f7fe f936 	bl	8004e44 <memset>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	b002      	add	sp, #8
 8006bdc:	bd10      	pop	{r4, pc}
	...

08006be0 <_free_r>:
 8006be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006be2:	2900      	cmp	r1, #0
 8006be4:	d048      	beq.n	8006c78 <_free_r+0x98>
 8006be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bea:	9001      	str	r0, [sp, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f1a1 0404 	sub.w	r4, r1, #4
 8006bf2:	bfb8      	it	lt
 8006bf4:	18e4      	addlt	r4, r4, r3
 8006bf6:	f000 fa65 	bl	80070c4 <__malloc_lock>
 8006bfa:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <_free_r+0x9c>)
 8006bfc:	9801      	ldr	r0, [sp, #4]
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	4615      	mov	r5, r2
 8006c02:	b933      	cbnz	r3, 8006c12 <_free_r+0x32>
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	6014      	str	r4, [r2, #0]
 8006c08:	b003      	add	sp, #12
 8006c0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c0e:	f000 ba5f 	b.w	80070d0 <__malloc_unlock>
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	d90b      	bls.n	8006c2e <_free_r+0x4e>
 8006c16:	6821      	ldr	r1, [r4, #0]
 8006c18:	1862      	adds	r2, r4, r1
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	bf04      	itt	eq
 8006c1e:	681a      	ldreq	r2, [r3, #0]
 8006c20:	685b      	ldreq	r3, [r3, #4]
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	bf04      	itt	eq
 8006c26:	1852      	addeq	r2, r2, r1
 8006c28:	6022      	streq	r2, [r4, #0]
 8006c2a:	602c      	str	r4, [r5, #0]
 8006c2c:	e7ec      	b.n	8006c08 <_free_r+0x28>
 8006c2e:	461a      	mov	r2, r3
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b10b      	cbz	r3, 8006c38 <_free_r+0x58>
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	d9fa      	bls.n	8006c2e <_free_r+0x4e>
 8006c38:	6811      	ldr	r1, [r2, #0]
 8006c3a:	1855      	adds	r5, r2, r1
 8006c3c:	42a5      	cmp	r5, r4
 8006c3e:	d10b      	bne.n	8006c58 <_free_r+0x78>
 8006c40:	6824      	ldr	r4, [r4, #0]
 8006c42:	4421      	add	r1, r4
 8006c44:	1854      	adds	r4, r2, r1
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	6011      	str	r1, [r2, #0]
 8006c4a:	d1dd      	bne.n	8006c08 <_free_r+0x28>
 8006c4c:	681c      	ldr	r4, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	6053      	str	r3, [r2, #4]
 8006c52:	4421      	add	r1, r4
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	e7d7      	b.n	8006c08 <_free_r+0x28>
 8006c58:	d902      	bls.n	8006c60 <_free_r+0x80>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	6003      	str	r3, [r0, #0]
 8006c5e:	e7d3      	b.n	8006c08 <_free_r+0x28>
 8006c60:	6825      	ldr	r5, [r4, #0]
 8006c62:	1961      	adds	r1, r4, r5
 8006c64:	428b      	cmp	r3, r1
 8006c66:	bf04      	itt	eq
 8006c68:	6819      	ldreq	r1, [r3, #0]
 8006c6a:	685b      	ldreq	r3, [r3, #4]
 8006c6c:	6063      	str	r3, [r4, #4]
 8006c6e:	bf04      	itt	eq
 8006c70:	1949      	addeq	r1, r1, r5
 8006c72:	6021      	streq	r1, [r4, #0]
 8006c74:	6054      	str	r4, [r2, #4]
 8006c76:	e7c7      	b.n	8006c08 <_free_r+0x28>
 8006c78:	b003      	add	sp, #12
 8006c7a:	bd30      	pop	{r4, r5, pc}
 8006c7c:	20000324 	.word	0x20000324

08006c80 <_malloc_r>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	1ccd      	adds	r5, r1, #3
 8006c84:	f025 0503 	bic.w	r5, r5, #3
 8006c88:	3508      	adds	r5, #8
 8006c8a:	2d0c      	cmp	r5, #12
 8006c8c:	bf38      	it	cc
 8006c8e:	250c      	movcc	r5, #12
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	4606      	mov	r6, r0
 8006c94:	db01      	blt.n	8006c9a <_malloc_r+0x1a>
 8006c96:	42a9      	cmp	r1, r5
 8006c98:	d903      	bls.n	8006ca2 <_malloc_r+0x22>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	6033      	str	r3, [r6, #0]
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca2:	f000 fa0f 	bl	80070c4 <__malloc_lock>
 8006ca6:	4921      	ldr	r1, [pc, #132]	; (8006d2c <_malloc_r+0xac>)
 8006ca8:	680a      	ldr	r2, [r1, #0]
 8006caa:	4614      	mov	r4, r2
 8006cac:	b99c      	cbnz	r4, 8006cd6 <_malloc_r+0x56>
 8006cae:	4f20      	ldr	r7, [pc, #128]	; (8006d30 <_malloc_r+0xb0>)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	b923      	cbnz	r3, 8006cbe <_malloc_r+0x3e>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f000 f998 	bl	8006fec <_sbrk_r>
 8006cbc:	6038      	str	r0, [r7, #0]
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f000 f993 	bl	8006fec <_sbrk_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	d123      	bne.n	8006d12 <_malloc_r+0x92>
 8006cca:	230c      	movs	r3, #12
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f000 f9fe 	bl	80070d0 <__malloc_unlock>
 8006cd4:	e7e3      	b.n	8006c9e <_malloc_r+0x1e>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	1b5b      	subs	r3, r3, r5
 8006cda:	d417      	bmi.n	8006d0c <_malloc_r+0x8c>
 8006cdc:	2b0b      	cmp	r3, #11
 8006cde:	d903      	bls.n	8006ce8 <_malloc_r+0x68>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	441c      	add	r4, r3
 8006ce4:	6025      	str	r5, [r4, #0]
 8006ce6:	e004      	b.n	8006cf2 <_malloc_r+0x72>
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	42a2      	cmp	r2, r4
 8006cec:	bf0c      	ite	eq
 8006cee:	600b      	streq	r3, [r1, #0]
 8006cf0:	6053      	strne	r3, [r2, #4]
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 f9ec 	bl	80070d0 <__malloc_unlock>
 8006cf8:	f104 000b 	add.w	r0, r4, #11
 8006cfc:	1d23      	adds	r3, r4, #4
 8006cfe:	f020 0007 	bic.w	r0, r0, #7
 8006d02:	1ac2      	subs	r2, r0, r3
 8006d04:	d0cc      	beq.n	8006ca0 <_malloc_r+0x20>
 8006d06:	1a1b      	subs	r3, r3, r0
 8006d08:	50a3      	str	r3, [r4, r2]
 8006d0a:	e7c9      	b.n	8006ca0 <_malloc_r+0x20>
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	6864      	ldr	r4, [r4, #4]
 8006d10:	e7cc      	b.n	8006cac <_malloc_r+0x2c>
 8006d12:	1cc4      	adds	r4, r0, #3
 8006d14:	f024 0403 	bic.w	r4, r4, #3
 8006d18:	42a0      	cmp	r0, r4
 8006d1a:	d0e3      	beq.n	8006ce4 <_malloc_r+0x64>
 8006d1c:	1a21      	subs	r1, r4, r0
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f000 f964 	bl	8006fec <_sbrk_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d1dd      	bne.n	8006ce4 <_malloc_r+0x64>
 8006d28:	e7cf      	b.n	8006cca <_malloc_r+0x4a>
 8006d2a:	bf00      	nop
 8006d2c:	20000324 	.word	0x20000324
 8006d30:	20000328 	.word	0x20000328

08006d34 <__ssputs_r>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	688e      	ldr	r6, [r1, #8]
 8006d3a:	429e      	cmp	r6, r3
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4690      	mov	r8, r2
 8006d42:	461f      	mov	r7, r3
 8006d44:	d838      	bhi.n	8006db8 <__ssputs_r+0x84>
 8006d46:	898a      	ldrh	r2, [r1, #12]
 8006d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d4c:	d032      	beq.n	8006db4 <__ssputs_r+0x80>
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	6909      	ldr	r1, [r1, #16]
 8006d52:	eba5 0901 	sub.w	r9, r5, r1
 8006d56:	6965      	ldr	r5, [r4, #20]
 8006d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d60:	3301      	adds	r3, #1
 8006d62:	444b      	add	r3, r9
 8006d64:	106d      	asrs	r5, r5, #1
 8006d66:	429d      	cmp	r5, r3
 8006d68:	bf38      	it	cc
 8006d6a:	461d      	movcc	r5, r3
 8006d6c:	0553      	lsls	r3, r2, #21
 8006d6e:	d531      	bpl.n	8006dd4 <__ssputs_r+0xa0>
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7ff ff85 	bl	8006c80 <_malloc_r>
 8006d76:	4606      	mov	r6, r0
 8006d78:	b950      	cbnz	r0, 8006d90 <__ssputs_r+0x5c>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	f8ca 3000 	str.w	r3, [sl]
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	6921      	ldr	r1, [r4, #16]
 8006d92:	464a      	mov	r2, r9
 8006d94:	f7ff fb88 	bl	80064a8 <memcpy>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	6126      	str	r6, [r4, #16]
 8006da6:	6165      	str	r5, [r4, #20]
 8006da8:	444e      	add	r6, r9
 8006daa:	eba5 0509 	sub.w	r5, r5, r9
 8006dae:	6026      	str	r6, [r4, #0]
 8006db0:	60a5      	str	r5, [r4, #8]
 8006db2:	463e      	mov	r6, r7
 8006db4:	42be      	cmp	r6, r7
 8006db6:	d900      	bls.n	8006dba <__ssputs_r+0x86>
 8006db8:	463e      	mov	r6, r7
 8006dba:	4632      	mov	r2, r6
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	f000 f966 	bl	8007090 <memmove>
 8006dc4:	68a3      	ldr	r3, [r4, #8]
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	1b9b      	subs	r3, r3, r6
 8006dca:	4432      	add	r2, r6
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	6022      	str	r2, [r4, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e7db      	b.n	8006d8c <__ssputs_r+0x58>
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	f000 f981 	bl	80070dc <_realloc_r>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d1e1      	bne.n	8006da4 <__ssputs_r+0x70>
 8006de0:	6921      	ldr	r1, [r4, #16]
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7ff fefc 	bl	8006be0 <_free_r>
 8006de8:	e7c7      	b.n	8006d7a <__ssputs_r+0x46>
	...

08006dec <_svfiprintf_r>:
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	4698      	mov	r8, r3
 8006df2:	898b      	ldrh	r3, [r1, #12]
 8006df4:	061b      	lsls	r3, r3, #24
 8006df6:	b09d      	sub	sp, #116	; 0x74
 8006df8:	4607      	mov	r7, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	d50e      	bpl.n	8006e1e <_svfiprintf_r+0x32>
 8006e00:	690b      	ldr	r3, [r1, #16]
 8006e02:	b963      	cbnz	r3, 8006e1e <_svfiprintf_r+0x32>
 8006e04:	2140      	movs	r1, #64	; 0x40
 8006e06:	f7ff ff3b 	bl	8006c80 <_malloc_r>
 8006e0a:	6028      	str	r0, [r5, #0]
 8006e0c:	6128      	str	r0, [r5, #16]
 8006e0e:	b920      	cbnz	r0, 8006e1a <_svfiprintf_r+0x2e>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e0d1      	b.n	8006fbe <_svfiprintf_r+0x1d2>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	616b      	str	r3, [r5, #20]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9309      	str	r3, [sp, #36]	; 0x24
 8006e22:	2320      	movs	r3, #32
 8006e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2c:	2330      	movs	r3, #48	; 0x30
 8006e2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fd8 <_svfiprintf_r+0x1ec>
 8006e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e36:	f04f 0901 	mov.w	r9, #1
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	469a      	mov	sl, r3
 8006e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e42:	b10a      	cbz	r2, 8006e48 <_svfiprintf_r+0x5c>
 8006e44:	2a25      	cmp	r2, #37	; 0x25
 8006e46:	d1f9      	bne.n	8006e3c <_svfiprintf_r+0x50>
 8006e48:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4c:	d00b      	beq.n	8006e66 <_svfiprintf_r+0x7a>
 8006e4e:	465b      	mov	r3, fp
 8006e50:	4622      	mov	r2, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff ff6d 	bl	8006d34 <__ssputs_r>
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f000 80aa 	beq.w	8006fb4 <_svfiprintf_r+0x1c8>
 8006e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e62:	445a      	add	r2, fp
 8006e64:	9209      	str	r2, [sp, #36]	; 0x24
 8006e66:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80a2 	beq.w	8006fb4 <_svfiprintf_r+0x1c8>
 8006e70:	2300      	movs	r3, #0
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e7a:	f10a 0a01 	add.w	sl, sl, #1
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	9307      	str	r3, [sp, #28]
 8006e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e86:	931a      	str	r3, [sp, #104]	; 0x68
 8006e88:	4654      	mov	r4, sl
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	4851      	ldr	r0, [pc, #324]	; (8006fd8 <_svfiprintf_r+0x1ec>)
 8006e92:	f7f9 f9a5 	bl	80001e0 <memchr>
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	b9d8      	cbnz	r0, 8006ed2 <_svfiprintf_r+0xe6>
 8006e9a:	06d0      	lsls	r0, r2, #27
 8006e9c:	bf44      	itt	mi
 8006e9e:	2320      	movmi	r3, #32
 8006ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea4:	0711      	lsls	r1, r2, #28
 8006ea6:	bf44      	itt	mi
 8006ea8:	232b      	movmi	r3, #43	; 0x2b
 8006eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eae:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb4:	d015      	beq.n	8006ee2 <_svfiprintf_r+0xf6>
 8006eb6:	9a07      	ldr	r2, [sp, #28]
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec6:	3b30      	subs	r3, #48	; 0x30
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d94e      	bls.n	8006f6a <_svfiprintf_r+0x17e>
 8006ecc:	b1b0      	cbz	r0, 8006efc <_svfiprintf_r+0x110>
 8006ece:	9207      	str	r2, [sp, #28]
 8006ed0:	e014      	b.n	8006efc <_svfiprintf_r+0x110>
 8006ed2:	eba0 0308 	sub.w	r3, r0, r8
 8006ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	46a2      	mov	sl, r4
 8006ee0:	e7d2      	b.n	8006e88 <_svfiprintf_r+0x9c>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	1d19      	adds	r1, r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9103      	str	r1, [sp, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bfbb      	ittet	lt
 8006eee:	425b      	neglt	r3, r3
 8006ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef4:	9307      	strge	r3, [sp, #28]
 8006ef6:	9307      	strlt	r3, [sp, #28]
 8006ef8:	bfb8      	it	lt
 8006efa:	9204      	strlt	r2, [sp, #16]
 8006efc:	7823      	ldrb	r3, [r4, #0]
 8006efe:	2b2e      	cmp	r3, #46	; 0x2e
 8006f00:	d10c      	bne.n	8006f1c <_svfiprintf_r+0x130>
 8006f02:	7863      	ldrb	r3, [r4, #1]
 8006f04:	2b2a      	cmp	r3, #42	; 0x2a
 8006f06:	d135      	bne.n	8006f74 <_svfiprintf_r+0x188>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfb8      	it	lt
 8006f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f18:	3402      	adds	r4, #2
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fe8 <_svfiprintf_r+0x1fc>
 8006f20:	7821      	ldrb	r1, [r4, #0]
 8006f22:	2203      	movs	r2, #3
 8006f24:	4650      	mov	r0, sl
 8006f26:	f7f9 f95b 	bl	80001e0 <memchr>
 8006f2a:	b140      	cbz	r0, 8006f3e <_svfiprintf_r+0x152>
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	eba0 000a 	sub.w	r0, r0, sl
 8006f32:	fa03 f000 	lsl.w	r0, r3, r0
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	4303      	orrs	r3, r0
 8006f3a:	3401      	adds	r4, #1
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f42:	4826      	ldr	r0, [pc, #152]	; (8006fdc <_svfiprintf_r+0x1f0>)
 8006f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f48:	2206      	movs	r2, #6
 8006f4a:	f7f9 f949 	bl	80001e0 <memchr>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d038      	beq.n	8006fc4 <_svfiprintf_r+0x1d8>
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <_svfiprintf_r+0x1f4>)
 8006f54:	bb1b      	cbnz	r3, 8006f9e <_svfiprintf_r+0x1b2>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	3307      	adds	r3, #7
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	3308      	adds	r3, #8
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	4433      	add	r3, r6
 8006f66:	9309      	str	r3, [sp, #36]	; 0x24
 8006f68:	e767      	b.n	8006e3a <_svfiprintf_r+0x4e>
 8006f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f6e:	460c      	mov	r4, r1
 8006f70:	2001      	movs	r0, #1
 8006f72:	e7a5      	b.n	8006ec0 <_svfiprintf_r+0xd4>
 8006f74:	2300      	movs	r3, #0
 8006f76:	3401      	adds	r4, #1
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f04f 0c0a 	mov.w	ip, #10
 8006f80:	4620      	mov	r0, r4
 8006f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f86:	3a30      	subs	r2, #48	; 0x30
 8006f88:	2a09      	cmp	r2, #9
 8006f8a:	d903      	bls.n	8006f94 <_svfiprintf_r+0x1a8>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0c5      	beq.n	8006f1c <_svfiprintf_r+0x130>
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	e7c3      	b.n	8006f1c <_svfiprintf_r+0x130>
 8006f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f98:	4604      	mov	r4, r0
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7f0      	b.n	8006f80 <_svfiprintf_r+0x194>
 8006f9e:	ab03      	add	r3, sp, #12
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <_svfiprintf_r+0x1f8>)
 8006fa6:	a904      	add	r1, sp, #16
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f7fd fff3 	bl	8004f94 <_printf_float>
 8006fae:	1c42      	adds	r2, r0, #1
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	d1d6      	bne.n	8006f62 <_svfiprintf_r+0x176>
 8006fb4:	89ab      	ldrh	r3, [r5, #12]
 8006fb6:	065b      	lsls	r3, r3, #25
 8006fb8:	f53f af2c 	bmi.w	8006e14 <_svfiprintf_r+0x28>
 8006fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fbe:	b01d      	add	sp, #116	; 0x74
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <_svfiprintf_r+0x1f8>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7fe fa84 	bl	80054dc <_printf_i>
 8006fd4:	e7eb      	b.n	8006fae <_svfiprintf_r+0x1c2>
 8006fd6:	bf00      	nop
 8006fd8:	08007f34 	.word	0x08007f34
 8006fdc:	08007f3e 	.word	0x08007f3e
 8006fe0:	08004f95 	.word	0x08004f95
 8006fe4:	08006d35 	.word	0x08006d35
 8006fe8:	08007f3a 	.word	0x08007f3a

08006fec <_sbrk_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_sbrk_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7fa fd48 	bl	8001a8c <_sbrk>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_sbrk_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_sbrk_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	200008d8 	.word	0x200008d8

0800700c <__assert_func>:
 800700c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800700e:	4614      	mov	r4, r2
 8007010:	461a      	mov	r2, r3
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <__assert_func+0x2c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4605      	mov	r5, r0
 8007018:	68d8      	ldr	r0, [r3, #12]
 800701a:	b14c      	cbz	r4, 8007030 <__assert_func+0x24>
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <__assert_func+0x30>)
 800701e:	9100      	str	r1, [sp, #0]
 8007020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007024:	4906      	ldr	r1, [pc, #24]	; (8007040 <__assert_func+0x34>)
 8007026:	462b      	mov	r3, r5
 8007028:	f000 f80e 	bl	8007048 <fiprintf>
 800702c:	f000 faa4 	bl	8007578 <abort>
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <__assert_func+0x38>)
 8007032:	461c      	mov	r4, r3
 8007034:	e7f3      	b.n	800701e <__assert_func+0x12>
 8007036:	bf00      	nop
 8007038:	20000024 	.word	0x20000024
 800703c:	08007f45 	.word	0x08007f45
 8007040:	08007f52 	.word	0x08007f52
 8007044:	08007f80 	.word	0x08007f80

08007048 <fiprintf>:
 8007048:	b40e      	push	{r1, r2, r3}
 800704a:	b503      	push	{r0, r1, lr}
 800704c:	4601      	mov	r1, r0
 800704e:	ab03      	add	r3, sp, #12
 8007050:	4805      	ldr	r0, [pc, #20]	; (8007068 <fiprintf+0x20>)
 8007052:	f853 2b04 	ldr.w	r2, [r3], #4
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	f000 f88f 	bl	800717c <_vfiprintf_r>
 800705e:	b002      	add	sp, #8
 8007060:	f85d eb04 	ldr.w	lr, [sp], #4
 8007064:	b003      	add	sp, #12
 8007066:	4770      	bx	lr
 8007068:	20000024 	.word	0x20000024

0800706c <__ascii_mbtowc>:
 800706c:	b082      	sub	sp, #8
 800706e:	b901      	cbnz	r1, 8007072 <__ascii_mbtowc+0x6>
 8007070:	a901      	add	r1, sp, #4
 8007072:	b142      	cbz	r2, 8007086 <__ascii_mbtowc+0x1a>
 8007074:	b14b      	cbz	r3, 800708a <__ascii_mbtowc+0x1e>
 8007076:	7813      	ldrb	r3, [r2, #0]
 8007078:	600b      	str	r3, [r1, #0]
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	1e10      	subs	r0, r2, #0
 800707e:	bf18      	it	ne
 8007080:	2001      	movne	r0, #1
 8007082:	b002      	add	sp, #8
 8007084:	4770      	bx	lr
 8007086:	4610      	mov	r0, r2
 8007088:	e7fb      	b.n	8007082 <__ascii_mbtowc+0x16>
 800708a:	f06f 0001 	mvn.w	r0, #1
 800708e:	e7f8      	b.n	8007082 <__ascii_mbtowc+0x16>

08007090 <memmove>:
 8007090:	4288      	cmp	r0, r1
 8007092:	b510      	push	{r4, lr}
 8007094:	eb01 0402 	add.w	r4, r1, r2
 8007098:	d902      	bls.n	80070a0 <memmove+0x10>
 800709a:	4284      	cmp	r4, r0
 800709c:	4623      	mov	r3, r4
 800709e:	d807      	bhi.n	80070b0 <memmove+0x20>
 80070a0:	1e43      	subs	r3, r0, #1
 80070a2:	42a1      	cmp	r1, r4
 80070a4:	d008      	beq.n	80070b8 <memmove+0x28>
 80070a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ae:	e7f8      	b.n	80070a2 <memmove+0x12>
 80070b0:	4402      	add	r2, r0
 80070b2:	4601      	mov	r1, r0
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d100      	bne.n	80070ba <memmove+0x2a>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070c2:	e7f7      	b.n	80070b4 <memmove+0x24>

080070c4 <__malloc_lock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__malloc_lock+0x8>)
 80070c6:	f000 bc17 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	200008e0 	.word	0x200008e0

080070d0 <__malloc_unlock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__malloc_unlock+0x8>)
 80070d2:	f000 bc12 	b.w	80078fa <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	200008e0 	.word	0x200008e0

080070dc <_realloc_r>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	4607      	mov	r7, r0
 80070e0:	4614      	mov	r4, r2
 80070e2:	460e      	mov	r6, r1
 80070e4:	b921      	cbnz	r1, 80070f0 <_realloc_r+0x14>
 80070e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070ea:	4611      	mov	r1, r2
 80070ec:	f7ff bdc8 	b.w	8006c80 <_malloc_r>
 80070f0:	b922      	cbnz	r2, 80070fc <_realloc_r+0x20>
 80070f2:	f7ff fd75 	bl	8006be0 <_free_r>
 80070f6:	4625      	mov	r5, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070fc:	f000 fc62 	bl	80079c4 <_malloc_usable_size_r>
 8007100:	42a0      	cmp	r0, r4
 8007102:	d20f      	bcs.n	8007124 <_realloc_r+0x48>
 8007104:	4621      	mov	r1, r4
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff fdba 	bl	8006c80 <_malloc_r>
 800710c:	4605      	mov	r5, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d0f2      	beq.n	80070f8 <_realloc_r+0x1c>
 8007112:	4631      	mov	r1, r6
 8007114:	4622      	mov	r2, r4
 8007116:	f7ff f9c7 	bl	80064a8 <memcpy>
 800711a:	4631      	mov	r1, r6
 800711c:	4638      	mov	r0, r7
 800711e:	f7ff fd5f 	bl	8006be0 <_free_r>
 8007122:	e7e9      	b.n	80070f8 <_realloc_r+0x1c>
 8007124:	4635      	mov	r5, r6
 8007126:	e7e7      	b.n	80070f8 <_realloc_r+0x1c>

08007128 <__sfputc_r>:
 8007128:	6893      	ldr	r3, [r2, #8]
 800712a:	3b01      	subs	r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	b410      	push	{r4}
 8007130:	6093      	str	r3, [r2, #8]
 8007132:	da08      	bge.n	8007146 <__sfputc_r+0x1e>
 8007134:	6994      	ldr	r4, [r2, #24]
 8007136:	42a3      	cmp	r3, r4
 8007138:	db01      	blt.n	800713e <__sfputc_r+0x16>
 800713a:	290a      	cmp	r1, #10
 800713c:	d103      	bne.n	8007146 <__sfputc_r+0x1e>
 800713e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007142:	f000 b94b 	b.w	80073dc <__swbuf_r>
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	1c58      	adds	r0, r3, #1
 800714a:	6010      	str	r0, [r2, #0]
 800714c:	7019      	strb	r1, [r3, #0]
 800714e:	4608      	mov	r0, r1
 8007150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007154:	4770      	bx	lr

08007156 <__sfputs_r>:
 8007156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007158:	4606      	mov	r6, r0
 800715a:	460f      	mov	r7, r1
 800715c:	4614      	mov	r4, r2
 800715e:	18d5      	adds	r5, r2, r3
 8007160:	42ac      	cmp	r4, r5
 8007162:	d101      	bne.n	8007168 <__sfputs_r+0x12>
 8007164:	2000      	movs	r0, #0
 8007166:	e007      	b.n	8007178 <__sfputs_r+0x22>
 8007168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716c:	463a      	mov	r2, r7
 800716e:	4630      	mov	r0, r6
 8007170:	f7ff ffda 	bl	8007128 <__sfputc_r>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d1f3      	bne.n	8007160 <__sfputs_r+0xa>
 8007178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800717c <_vfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	460d      	mov	r5, r1
 8007182:	b09d      	sub	sp, #116	; 0x74
 8007184:	4614      	mov	r4, r2
 8007186:	4698      	mov	r8, r3
 8007188:	4606      	mov	r6, r0
 800718a:	b118      	cbz	r0, 8007194 <_vfiprintf_r+0x18>
 800718c:	6983      	ldr	r3, [r0, #24]
 800718e:	b90b      	cbnz	r3, 8007194 <_vfiprintf_r+0x18>
 8007190:	f000 fb14 	bl	80077bc <__sinit>
 8007194:	4b89      	ldr	r3, [pc, #548]	; (80073bc <_vfiprintf_r+0x240>)
 8007196:	429d      	cmp	r5, r3
 8007198:	d11b      	bne.n	80071d2 <_vfiprintf_r+0x56>
 800719a:	6875      	ldr	r5, [r6, #4]
 800719c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	d405      	bmi.n	80071ae <_vfiprintf_r+0x32>
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	059a      	lsls	r2, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_vfiprintf_r+0x32>
 80071a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071aa:	f000 fba5 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	071b      	lsls	r3, r3, #28
 80071b2:	d501      	bpl.n	80071b8 <_vfiprintf_r+0x3c>
 80071b4:	692b      	ldr	r3, [r5, #16]
 80071b6:	b9eb      	cbnz	r3, 80071f4 <_vfiprintf_r+0x78>
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f000 f96e 	bl	800749c <__swsetup_r>
 80071c0:	b1c0      	cbz	r0, 80071f4 <_vfiprintf_r+0x78>
 80071c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c4:	07dc      	lsls	r4, r3, #31
 80071c6:	d50e      	bpl.n	80071e6 <_vfiprintf_r+0x6a>
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	b01d      	add	sp, #116	; 0x74
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	4b7b      	ldr	r3, [pc, #492]	; (80073c0 <_vfiprintf_r+0x244>)
 80071d4:	429d      	cmp	r5, r3
 80071d6:	d101      	bne.n	80071dc <_vfiprintf_r+0x60>
 80071d8:	68b5      	ldr	r5, [r6, #8]
 80071da:	e7df      	b.n	800719c <_vfiprintf_r+0x20>
 80071dc:	4b79      	ldr	r3, [pc, #484]	; (80073c4 <_vfiprintf_r+0x248>)
 80071de:	429d      	cmp	r5, r3
 80071e0:	bf08      	it	eq
 80071e2:	68f5      	ldreq	r5, [r6, #12]
 80071e4:	e7da      	b.n	800719c <_vfiprintf_r+0x20>
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	0598      	lsls	r0, r3, #22
 80071ea:	d4ed      	bmi.n	80071c8 <_vfiprintf_r+0x4c>
 80071ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ee:	f000 fb84 	bl	80078fa <__retarget_lock_release_recursive>
 80071f2:	e7e9      	b.n	80071c8 <_vfiprintf_r+0x4c>
 80071f4:	2300      	movs	r3, #0
 80071f6:	9309      	str	r3, [sp, #36]	; 0x24
 80071f8:	2320      	movs	r3, #32
 80071fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007202:	2330      	movs	r3, #48	; 0x30
 8007204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073c8 <_vfiprintf_r+0x24c>
 8007208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800720c:	f04f 0901 	mov.w	r9, #1
 8007210:	4623      	mov	r3, r4
 8007212:	469a      	mov	sl, r3
 8007214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007218:	b10a      	cbz	r2, 800721e <_vfiprintf_r+0xa2>
 800721a:	2a25      	cmp	r2, #37	; 0x25
 800721c:	d1f9      	bne.n	8007212 <_vfiprintf_r+0x96>
 800721e:	ebba 0b04 	subs.w	fp, sl, r4
 8007222:	d00b      	beq.n	800723c <_vfiprintf_r+0xc0>
 8007224:	465b      	mov	r3, fp
 8007226:	4622      	mov	r2, r4
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ff93 	bl	8007156 <__sfputs_r>
 8007230:	3001      	adds	r0, #1
 8007232:	f000 80aa 	beq.w	800738a <_vfiprintf_r+0x20e>
 8007236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007238:	445a      	add	r2, fp
 800723a:	9209      	str	r2, [sp, #36]	; 0x24
 800723c:	f89a 3000 	ldrb.w	r3, [sl]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80a2 	beq.w	800738a <_vfiprintf_r+0x20e>
 8007246:	2300      	movs	r3, #0
 8007248:	f04f 32ff 	mov.w	r2, #4294967295
 800724c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007250:	f10a 0a01 	add.w	sl, sl, #1
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800725c:	931a      	str	r3, [sp, #104]	; 0x68
 800725e:	4654      	mov	r4, sl
 8007260:	2205      	movs	r2, #5
 8007262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007266:	4858      	ldr	r0, [pc, #352]	; (80073c8 <_vfiprintf_r+0x24c>)
 8007268:	f7f8 ffba 	bl	80001e0 <memchr>
 800726c:	9a04      	ldr	r2, [sp, #16]
 800726e:	b9d8      	cbnz	r0, 80072a8 <_vfiprintf_r+0x12c>
 8007270:	06d1      	lsls	r1, r2, #27
 8007272:	bf44      	itt	mi
 8007274:	2320      	movmi	r3, #32
 8007276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800727a:	0713      	lsls	r3, r2, #28
 800727c:	bf44      	itt	mi
 800727e:	232b      	movmi	r3, #43	; 0x2b
 8007280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b2a      	cmp	r3, #42	; 0x2a
 800728a:	d015      	beq.n	80072b8 <_vfiprintf_r+0x13c>
 800728c:	9a07      	ldr	r2, [sp, #28]
 800728e:	4654      	mov	r4, sl
 8007290:	2000      	movs	r0, #0
 8007292:	f04f 0c0a 	mov.w	ip, #10
 8007296:	4621      	mov	r1, r4
 8007298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800729c:	3b30      	subs	r3, #48	; 0x30
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d94e      	bls.n	8007340 <_vfiprintf_r+0x1c4>
 80072a2:	b1b0      	cbz	r0, 80072d2 <_vfiprintf_r+0x156>
 80072a4:	9207      	str	r2, [sp, #28]
 80072a6:	e014      	b.n	80072d2 <_vfiprintf_r+0x156>
 80072a8:	eba0 0308 	sub.w	r3, r0, r8
 80072ac:	fa09 f303 	lsl.w	r3, r9, r3
 80072b0:	4313      	orrs	r3, r2
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	46a2      	mov	sl, r4
 80072b6:	e7d2      	b.n	800725e <_vfiprintf_r+0xe2>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	1d19      	adds	r1, r3, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	9103      	str	r1, [sp, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bfbb      	ittet	lt
 80072c4:	425b      	neglt	r3, r3
 80072c6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ca:	9307      	strge	r3, [sp, #28]
 80072cc:	9307      	strlt	r3, [sp, #28]
 80072ce:	bfb8      	it	lt
 80072d0:	9204      	strlt	r2, [sp, #16]
 80072d2:	7823      	ldrb	r3, [r4, #0]
 80072d4:	2b2e      	cmp	r3, #46	; 0x2e
 80072d6:	d10c      	bne.n	80072f2 <_vfiprintf_r+0x176>
 80072d8:	7863      	ldrb	r3, [r4, #1]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d135      	bne.n	800734a <_vfiprintf_r+0x1ce>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	1d1a      	adds	r2, r3, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	9203      	str	r2, [sp, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfb8      	it	lt
 80072ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80072ee:	3402      	adds	r4, #2
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073d8 <_vfiprintf_r+0x25c>
 80072f6:	7821      	ldrb	r1, [r4, #0]
 80072f8:	2203      	movs	r2, #3
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7f8 ff70 	bl	80001e0 <memchr>
 8007300:	b140      	cbz	r0, 8007314 <_vfiprintf_r+0x198>
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	eba0 000a 	sub.w	r0, r0, sl
 8007308:	fa03 f000 	lsl.w	r0, r3, r0
 800730c:	9b04      	ldr	r3, [sp, #16]
 800730e:	4303      	orrs	r3, r0
 8007310:	3401      	adds	r4, #1
 8007312:	9304      	str	r3, [sp, #16]
 8007314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007318:	482c      	ldr	r0, [pc, #176]	; (80073cc <_vfiprintf_r+0x250>)
 800731a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800731e:	2206      	movs	r2, #6
 8007320:	f7f8 ff5e 	bl	80001e0 <memchr>
 8007324:	2800      	cmp	r0, #0
 8007326:	d03f      	beq.n	80073a8 <_vfiprintf_r+0x22c>
 8007328:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <_vfiprintf_r+0x254>)
 800732a:	bb1b      	cbnz	r3, 8007374 <_vfiprintf_r+0x1f8>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	3307      	adds	r3, #7
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	3308      	adds	r3, #8
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	443b      	add	r3, r7
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	e767      	b.n	8007210 <_vfiprintf_r+0x94>
 8007340:	fb0c 3202 	mla	r2, ip, r2, r3
 8007344:	460c      	mov	r4, r1
 8007346:	2001      	movs	r0, #1
 8007348:	e7a5      	b.n	8007296 <_vfiprintf_r+0x11a>
 800734a:	2300      	movs	r3, #0
 800734c:	3401      	adds	r4, #1
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	4619      	mov	r1, r3
 8007352:	f04f 0c0a 	mov.w	ip, #10
 8007356:	4620      	mov	r0, r4
 8007358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735c:	3a30      	subs	r2, #48	; 0x30
 800735e:	2a09      	cmp	r2, #9
 8007360:	d903      	bls.n	800736a <_vfiprintf_r+0x1ee>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c5      	beq.n	80072f2 <_vfiprintf_r+0x176>
 8007366:	9105      	str	r1, [sp, #20]
 8007368:	e7c3      	b.n	80072f2 <_vfiprintf_r+0x176>
 800736a:	fb0c 2101 	mla	r1, ip, r1, r2
 800736e:	4604      	mov	r4, r0
 8007370:	2301      	movs	r3, #1
 8007372:	e7f0      	b.n	8007356 <_vfiprintf_r+0x1da>
 8007374:	ab03      	add	r3, sp, #12
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	462a      	mov	r2, r5
 800737a:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <_vfiprintf_r+0x258>)
 800737c:	a904      	add	r1, sp, #16
 800737e:	4630      	mov	r0, r6
 8007380:	f7fd fe08 	bl	8004f94 <_printf_float>
 8007384:	4607      	mov	r7, r0
 8007386:	1c78      	adds	r0, r7, #1
 8007388:	d1d6      	bne.n	8007338 <_vfiprintf_r+0x1bc>
 800738a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800738c:	07d9      	lsls	r1, r3, #31
 800738e:	d405      	bmi.n	800739c <_vfiprintf_r+0x220>
 8007390:	89ab      	ldrh	r3, [r5, #12]
 8007392:	059a      	lsls	r2, r3, #22
 8007394:	d402      	bmi.n	800739c <_vfiprintf_r+0x220>
 8007396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007398:	f000 faaf 	bl	80078fa <__retarget_lock_release_recursive>
 800739c:	89ab      	ldrh	r3, [r5, #12]
 800739e:	065b      	lsls	r3, r3, #25
 80073a0:	f53f af12 	bmi.w	80071c8 <_vfiprintf_r+0x4c>
 80073a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a6:	e711      	b.n	80071cc <_vfiprintf_r+0x50>
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <_vfiprintf_r+0x258>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7fe f892 	bl	80054dc <_printf_i>
 80073b8:	e7e4      	b.n	8007384 <_vfiprintf_r+0x208>
 80073ba:	bf00      	nop
 80073bc:	080080ac 	.word	0x080080ac
 80073c0:	080080cc 	.word	0x080080cc
 80073c4:	0800808c 	.word	0x0800808c
 80073c8:	08007f34 	.word	0x08007f34
 80073cc:	08007f3e 	.word	0x08007f3e
 80073d0:	08004f95 	.word	0x08004f95
 80073d4:	08007157 	.word	0x08007157
 80073d8:	08007f3a 	.word	0x08007f3a

080073dc <__swbuf_r>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	460e      	mov	r6, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	4605      	mov	r5, r0
 80073e4:	b118      	cbz	r0, 80073ee <__swbuf_r+0x12>
 80073e6:	6983      	ldr	r3, [r0, #24]
 80073e8:	b90b      	cbnz	r3, 80073ee <__swbuf_r+0x12>
 80073ea:	f000 f9e7 	bl	80077bc <__sinit>
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <__swbuf_r+0x98>)
 80073f0:	429c      	cmp	r4, r3
 80073f2:	d12b      	bne.n	800744c <__swbuf_r+0x70>
 80073f4:	686c      	ldr	r4, [r5, #4]
 80073f6:	69a3      	ldr	r3, [r4, #24]
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	071a      	lsls	r2, r3, #28
 80073fe:	d52f      	bpl.n	8007460 <__swbuf_r+0x84>
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b36b      	cbz	r3, 8007460 <__swbuf_r+0x84>
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	1ac0      	subs	r0, r0, r3
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	b2f6      	uxtb	r6, r6
 800740e:	4283      	cmp	r3, r0
 8007410:	4637      	mov	r7, r6
 8007412:	dc04      	bgt.n	800741e <__swbuf_r+0x42>
 8007414:	4621      	mov	r1, r4
 8007416:	4628      	mov	r0, r5
 8007418:	f000 f93c 	bl	8007694 <_fflush_r>
 800741c:	bb30      	cbnz	r0, 800746c <__swbuf_r+0x90>
 800741e:	68a3      	ldr	r3, [r4, #8]
 8007420:	3b01      	subs	r3, #1
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	701e      	strb	r6, [r3, #0]
 800742c:	6963      	ldr	r3, [r4, #20]
 800742e:	3001      	adds	r0, #1
 8007430:	4283      	cmp	r3, r0
 8007432:	d004      	beq.n	800743e <__swbuf_r+0x62>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	07db      	lsls	r3, r3, #31
 8007438:	d506      	bpl.n	8007448 <__swbuf_r+0x6c>
 800743a:	2e0a      	cmp	r6, #10
 800743c:	d104      	bne.n	8007448 <__swbuf_r+0x6c>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 f927 	bl	8007694 <_fflush_r>
 8007446:	b988      	cbnz	r0, 800746c <__swbuf_r+0x90>
 8007448:	4638      	mov	r0, r7
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <__swbuf_r+0x9c>)
 800744e:	429c      	cmp	r4, r3
 8007450:	d101      	bne.n	8007456 <__swbuf_r+0x7a>
 8007452:	68ac      	ldr	r4, [r5, #8]
 8007454:	e7cf      	b.n	80073f6 <__swbuf_r+0x1a>
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <__swbuf_r+0xa0>)
 8007458:	429c      	cmp	r4, r3
 800745a:	bf08      	it	eq
 800745c:	68ec      	ldreq	r4, [r5, #12]
 800745e:	e7ca      	b.n	80073f6 <__swbuf_r+0x1a>
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f81a 	bl	800749c <__swsetup_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	d0cb      	beq.n	8007404 <__swbuf_r+0x28>
 800746c:	f04f 37ff 	mov.w	r7, #4294967295
 8007470:	e7ea      	b.n	8007448 <__swbuf_r+0x6c>
 8007472:	bf00      	nop
 8007474:	080080ac 	.word	0x080080ac
 8007478:	080080cc 	.word	0x080080cc
 800747c:	0800808c 	.word	0x0800808c

08007480 <__ascii_wctomb>:
 8007480:	b149      	cbz	r1, 8007496 <__ascii_wctomb+0x16>
 8007482:	2aff      	cmp	r2, #255	; 0xff
 8007484:	bf85      	ittet	hi
 8007486:	238a      	movhi	r3, #138	; 0x8a
 8007488:	6003      	strhi	r3, [r0, #0]
 800748a:	700a      	strbls	r2, [r1, #0]
 800748c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007490:	bf98      	it	ls
 8007492:	2001      	movls	r0, #1
 8007494:	4770      	bx	lr
 8007496:	4608      	mov	r0, r1
 8007498:	4770      	bx	lr
	...

0800749c <__swsetup_r>:
 800749c:	4b32      	ldr	r3, [pc, #200]	; (8007568 <__swsetup_r+0xcc>)
 800749e:	b570      	push	{r4, r5, r6, lr}
 80074a0:	681d      	ldr	r5, [r3, #0]
 80074a2:	4606      	mov	r6, r0
 80074a4:	460c      	mov	r4, r1
 80074a6:	b125      	cbz	r5, 80074b2 <__swsetup_r+0x16>
 80074a8:	69ab      	ldr	r3, [r5, #24]
 80074aa:	b913      	cbnz	r3, 80074b2 <__swsetup_r+0x16>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f985 	bl	80077bc <__sinit>
 80074b2:	4b2e      	ldr	r3, [pc, #184]	; (800756c <__swsetup_r+0xd0>)
 80074b4:	429c      	cmp	r4, r3
 80074b6:	d10f      	bne.n	80074d8 <__swsetup_r+0x3c>
 80074b8:	686c      	ldr	r4, [r5, #4]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074c0:	0719      	lsls	r1, r3, #28
 80074c2:	d42c      	bmi.n	800751e <__swsetup_r+0x82>
 80074c4:	06dd      	lsls	r5, r3, #27
 80074c6:	d411      	bmi.n	80074ec <__swsetup_r+0x50>
 80074c8:	2309      	movs	r3, #9
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	e03e      	b.n	8007556 <__swsetup_r+0xba>
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <__swsetup_r+0xd4>)
 80074da:	429c      	cmp	r4, r3
 80074dc:	d101      	bne.n	80074e2 <__swsetup_r+0x46>
 80074de:	68ac      	ldr	r4, [r5, #8]
 80074e0:	e7eb      	b.n	80074ba <__swsetup_r+0x1e>
 80074e2:	4b24      	ldr	r3, [pc, #144]	; (8007574 <__swsetup_r+0xd8>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	bf08      	it	eq
 80074e8:	68ec      	ldreq	r4, [r5, #12]
 80074ea:	e7e6      	b.n	80074ba <__swsetup_r+0x1e>
 80074ec:	0758      	lsls	r0, r3, #29
 80074ee:	d512      	bpl.n	8007516 <__swsetup_r+0x7a>
 80074f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074f2:	b141      	cbz	r1, 8007506 <__swsetup_r+0x6a>
 80074f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f8:	4299      	cmp	r1, r3
 80074fa:	d002      	beq.n	8007502 <__swsetup_r+0x66>
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff fb6f 	bl	8006be0 <_free_r>
 8007502:	2300      	movs	r3, #0
 8007504:	6363      	str	r3, [r4, #52]	; 0x34
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	2300      	movs	r3, #0
 8007510:	6063      	str	r3, [r4, #4]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f043 0308 	orr.w	r3, r3, #8
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	b94b      	cbnz	r3, 8007536 <__swsetup_r+0x9a>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752c:	d003      	beq.n	8007536 <__swsetup_r+0x9a>
 800752e:	4621      	mov	r1, r4
 8007530:	4630      	mov	r0, r6
 8007532:	f000 fa07 	bl	8007944 <__smakebuf_r>
 8007536:	89a0      	ldrh	r0, [r4, #12]
 8007538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800753c:	f010 0301 	ands.w	r3, r0, #1
 8007540:	d00a      	beq.n	8007558 <__swsetup_r+0xbc>
 8007542:	2300      	movs	r3, #0
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	6963      	ldr	r3, [r4, #20]
 8007548:	425b      	negs	r3, r3
 800754a:	61a3      	str	r3, [r4, #24]
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	b943      	cbnz	r3, 8007562 <__swsetup_r+0xc6>
 8007550:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007554:	d1ba      	bne.n	80074cc <__swsetup_r+0x30>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	0781      	lsls	r1, r0, #30
 800755a:	bf58      	it	pl
 800755c:	6963      	ldrpl	r3, [r4, #20]
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	e7f4      	b.n	800754c <__swsetup_r+0xb0>
 8007562:	2000      	movs	r0, #0
 8007564:	e7f7      	b.n	8007556 <__swsetup_r+0xba>
 8007566:	bf00      	nop
 8007568:	20000024 	.word	0x20000024
 800756c:	080080ac 	.word	0x080080ac
 8007570:	080080cc 	.word	0x080080cc
 8007574:	0800808c 	.word	0x0800808c

08007578 <abort>:
 8007578:	b508      	push	{r3, lr}
 800757a:	2006      	movs	r0, #6
 800757c:	f000 fa52 	bl	8007a24 <raise>
 8007580:	2001      	movs	r0, #1
 8007582:	f7fa fa0b 	bl	800199c <_exit>
	...

08007588 <__sflush_r>:
 8007588:	898a      	ldrh	r2, [r1, #12]
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	4605      	mov	r5, r0
 8007590:	0710      	lsls	r0, r2, #28
 8007592:	460c      	mov	r4, r1
 8007594:	d458      	bmi.n	8007648 <__sflush_r+0xc0>
 8007596:	684b      	ldr	r3, [r1, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc05      	bgt.n	80075a8 <__sflush_r+0x20>
 800759c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dc02      	bgt.n	80075a8 <__sflush_r+0x20>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d0f9      	beq.n	80075a2 <__sflush_r+0x1a>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b4:	682f      	ldr	r7, [r5, #0]
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	d032      	beq.n	8007620 <__sflush_r+0x98>
 80075ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	075a      	lsls	r2, r3, #29
 80075c0:	d505      	bpl.n	80075ce <__sflush_r+0x46>
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	1ac0      	subs	r0, r0, r3
 80075c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c8:	b10b      	cbz	r3, 80075ce <__sflush_r+0x46>
 80075ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075cc:	1ac0      	subs	r0, r0, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	4602      	mov	r2, r0
 80075d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b0      	blx	r6
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	d106      	bne.n	80075ee <__sflush_r+0x66>
 80075e0:	6829      	ldr	r1, [r5, #0]
 80075e2:	291d      	cmp	r1, #29
 80075e4:	d82c      	bhi.n	8007640 <__sflush_r+0xb8>
 80075e6:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <__sflush_r+0x108>)
 80075e8:	40ca      	lsrs	r2, r1
 80075ea:	07d6      	lsls	r6, r2, #31
 80075ec:	d528      	bpl.n	8007640 <__sflush_r+0xb8>
 80075ee:	2200      	movs	r2, #0
 80075f0:	6062      	str	r2, [r4, #4]
 80075f2:	04d9      	lsls	r1, r3, #19
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	d504      	bpl.n	8007604 <__sflush_r+0x7c>
 80075fa:	1c42      	adds	r2, r0, #1
 80075fc:	d101      	bne.n	8007602 <__sflush_r+0x7a>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b903      	cbnz	r3, 8007604 <__sflush_r+0x7c>
 8007602:	6560      	str	r0, [r4, #84]	; 0x54
 8007604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007606:	602f      	str	r7, [r5, #0]
 8007608:	2900      	cmp	r1, #0
 800760a:	d0ca      	beq.n	80075a2 <__sflush_r+0x1a>
 800760c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007610:	4299      	cmp	r1, r3
 8007612:	d002      	beq.n	800761a <__sflush_r+0x92>
 8007614:	4628      	mov	r0, r5
 8007616:	f7ff fae3 	bl	8006be0 <_free_r>
 800761a:	2000      	movs	r0, #0
 800761c:	6360      	str	r0, [r4, #52]	; 0x34
 800761e:	e7c1      	b.n	80075a4 <__sflush_r+0x1c>
 8007620:	6a21      	ldr	r1, [r4, #32]
 8007622:	2301      	movs	r3, #1
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	1c41      	adds	r1, r0, #1
 800762a:	d1c7      	bne.n	80075bc <__sflush_r+0x34>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0c4      	beq.n	80075bc <__sflush_r+0x34>
 8007632:	2b1d      	cmp	r3, #29
 8007634:	d001      	beq.n	800763a <__sflush_r+0xb2>
 8007636:	2b16      	cmp	r3, #22
 8007638:	d101      	bne.n	800763e <__sflush_r+0xb6>
 800763a:	602f      	str	r7, [r5, #0]
 800763c:	e7b1      	b.n	80075a2 <__sflush_r+0x1a>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7ad      	b.n	80075a4 <__sflush_r+0x1c>
 8007648:	690f      	ldr	r7, [r1, #16]
 800764a:	2f00      	cmp	r7, #0
 800764c:	d0a9      	beq.n	80075a2 <__sflush_r+0x1a>
 800764e:	0793      	lsls	r3, r2, #30
 8007650:	680e      	ldr	r6, [r1, #0]
 8007652:	bf08      	it	eq
 8007654:	694b      	ldreq	r3, [r1, #20]
 8007656:	600f      	str	r7, [r1, #0]
 8007658:	bf18      	it	ne
 800765a:	2300      	movne	r3, #0
 800765c:	eba6 0807 	sub.w	r8, r6, r7
 8007660:	608b      	str	r3, [r1, #8]
 8007662:	f1b8 0f00 	cmp.w	r8, #0
 8007666:	dd9c      	ble.n	80075a2 <__sflush_r+0x1a>
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800766c:	4643      	mov	r3, r8
 800766e:	463a      	mov	r2, r7
 8007670:	4628      	mov	r0, r5
 8007672:	47b0      	blx	r6
 8007674:	2800      	cmp	r0, #0
 8007676:	dc06      	bgt.n	8007686 <__sflush_r+0xfe>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	e78e      	b.n	80075a4 <__sflush_r+0x1c>
 8007686:	4407      	add	r7, r0
 8007688:	eba8 0800 	sub.w	r8, r8, r0
 800768c:	e7e9      	b.n	8007662 <__sflush_r+0xda>
 800768e:	bf00      	nop
 8007690:	20400001 	.word	0x20400001

08007694 <_fflush_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	690b      	ldr	r3, [r1, #16]
 8007698:	4605      	mov	r5, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b913      	cbnz	r3, 80076a4 <_fflush_r+0x10>
 800769e:	2500      	movs	r5, #0
 80076a0:	4628      	mov	r0, r5
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	b118      	cbz	r0, 80076ae <_fflush_r+0x1a>
 80076a6:	6983      	ldr	r3, [r0, #24]
 80076a8:	b90b      	cbnz	r3, 80076ae <_fflush_r+0x1a>
 80076aa:	f000 f887 	bl	80077bc <__sinit>
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <_fflush_r+0x6c>)
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d11b      	bne.n	80076ec <_fflush_r+0x58>
 80076b4:	686c      	ldr	r4, [r5, #4]
 80076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ef      	beq.n	800769e <_fflush_r+0xa>
 80076be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c0:	07d0      	lsls	r0, r2, #31
 80076c2:	d404      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c4:	0599      	lsls	r1, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ca:	f000 f915 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80076ce:	4628      	mov	r0, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7ff ff59 	bl	8007588 <__sflush_r>
 80076d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d8:	07da      	lsls	r2, r3, #31
 80076da:	4605      	mov	r5, r0
 80076dc:	d4e0      	bmi.n	80076a0 <_fflush_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	d4dd      	bmi.n	80076a0 <_fflush_r+0xc>
 80076e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e6:	f000 f908 	bl	80078fa <__retarget_lock_release_recursive>
 80076ea:	e7d9      	b.n	80076a0 <_fflush_r+0xc>
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_fflush_r+0x70>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d101      	bne.n	80076f6 <_fflush_r+0x62>
 80076f2:	68ac      	ldr	r4, [r5, #8]
 80076f4:	e7df      	b.n	80076b6 <_fflush_r+0x22>
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <_fflush_r+0x74>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	bf08      	it	eq
 80076fc:	68ec      	ldreq	r4, [r5, #12]
 80076fe:	e7da      	b.n	80076b6 <_fflush_r+0x22>
 8007700:	080080ac 	.word	0x080080ac
 8007704:	080080cc 	.word	0x080080cc
 8007708:	0800808c 	.word	0x0800808c

0800770c <std>:
 800770c:	2300      	movs	r3, #0
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	e9c0 3300 	strd	r3, r3, [r0]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	; 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	6183      	str	r3, [r0, #24]
 8007724:	4619      	mov	r1, r3
 8007726:	2208      	movs	r2, #8
 8007728:	305c      	adds	r0, #92	; 0x5c
 800772a:	f7fd fb8b 	bl	8004e44 <memset>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x38>)
 8007730:	6263      	str	r3, [r4, #36]	; 0x24
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x3c>)
 8007734:	62a3      	str	r3, [r4, #40]	; 0x28
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x40>)
 8007738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x44>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	6323      	str	r3, [r4, #48]	; 0x30
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	08007a5d 	.word	0x08007a5d
 8007748:	08007a7f 	.word	0x08007a7f
 800774c:	08007ab7 	.word	0x08007ab7
 8007750:	08007adb 	.word	0x08007adb

08007754 <_cleanup_r>:
 8007754:	4901      	ldr	r1, [pc, #4]	; (800775c <_cleanup_r+0x8>)
 8007756:	f000 b8af 	b.w	80078b8 <_fwalk_reent>
 800775a:	bf00      	nop
 800775c:	08007695 	.word	0x08007695

08007760 <__sfmoreglue>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	1e4a      	subs	r2, r1, #1
 8007764:	2568      	movs	r5, #104	; 0x68
 8007766:	4355      	muls	r5, r2
 8007768:	460e      	mov	r6, r1
 800776a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800776e:	f7ff fa87 	bl	8006c80 <_malloc_r>
 8007772:	4604      	mov	r4, r0
 8007774:	b140      	cbz	r0, 8007788 <__sfmoreglue+0x28>
 8007776:	2100      	movs	r1, #0
 8007778:	e9c0 1600 	strd	r1, r6, [r0]
 800777c:	300c      	adds	r0, #12
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007784:	f7fd fb5e 	bl	8004e44 <memset>
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}

0800778c <__sfp_lock_acquire>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__sfp_lock_acquire+0x8>)
 800778e:	f000 b8b3 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	200008e4 	.word	0x200008e4

08007798 <__sfp_lock_release>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__sfp_lock_release+0x8>)
 800779a:	f000 b8ae 	b.w	80078fa <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	200008e4 	.word	0x200008e4

080077a4 <__sinit_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sinit_lock_acquire+0x8>)
 80077a6:	f000 b8a7 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	200008df 	.word	0x200008df

080077b0 <__sinit_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sinit_lock_release+0x8>)
 80077b2:	f000 b8a2 	b.w	80078fa <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	200008df 	.word	0x200008df

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sinit_lock_acquire>
 80077c4:	69a3      	ldr	r3, [r4, #24]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sinit_lock_release>
 80077d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077d4:	6523      	str	r3, [r4, #80]	; 0x50
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <__sinit+0x68>)
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <__sinit+0x6c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077de:	42a3      	cmp	r3, r4
 80077e0:	bf04      	itt	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	61a3      	streq	r3, [r4, #24]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f820 	bl	800782c <__sfp>
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f81c 	bl	800782c <__sfp>
 80077f4:	60a0      	str	r0, [r4, #8]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f818 	bl	800782c <__sfp>
 80077fc:	2200      	movs	r2, #0
 80077fe:	60e0      	str	r0, [r4, #12]
 8007800:	2104      	movs	r1, #4
 8007802:	6860      	ldr	r0, [r4, #4]
 8007804:	f7ff ff82 	bl	800770c <std>
 8007808:	68a0      	ldr	r0, [r4, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	2109      	movs	r1, #9
 800780e:	f7ff ff7d 	bl	800770c <std>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff ff78 	bl	800770c <std>
 800781c:	2301      	movs	r3, #1
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	e7d2      	b.n	80077c8 <__sinit+0xc>
 8007822:	bf00      	nop
 8007824:	08007d08 	.word	0x08007d08
 8007828:	08007755 	.word	0x08007755

0800782c <__sfp>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	4607      	mov	r7, r0
 8007830:	f7ff ffac 	bl	800778c <__sfp_lock_acquire>
 8007834:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <__sfp+0x84>)
 8007836:	681e      	ldr	r6, [r3, #0]
 8007838:	69b3      	ldr	r3, [r6, #24]
 800783a:	b913      	cbnz	r3, 8007842 <__sfp+0x16>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ffbd 	bl	80077bc <__sinit>
 8007842:	3648      	adds	r6, #72	; 0x48
 8007844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	d503      	bpl.n	8007854 <__sfp+0x28>
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	b30b      	cbz	r3, 8007894 <__sfp+0x68>
 8007850:	6836      	ldr	r6, [r6, #0]
 8007852:	e7f7      	b.n	8007844 <__sfp+0x18>
 8007854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007858:	b9d5      	cbnz	r5, 8007890 <__sfp+0x64>
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <__sfp+0x88>)
 800785c:	60e3      	str	r3, [r4, #12]
 800785e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007862:	6665      	str	r5, [r4, #100]	; 0x64
 8007864:	f000 f847 	bl	80078f6 <__retarget_lock_init_recursive>
 8007868:	f7ff ff96 	bl	8007798 <__sfp_lock_release>
 800786c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007874:	6025      	str	r5, [r4, #0]
 8007876:	61a5      	str	r5, [r4, #24]
 8007878:	2208      	movs	r2, #8
 800787a:	4629      	mov	r1, r5
 800787c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007880:	f7fd fae0 	bl	8004e44 <memset>
 8007884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800788c:	4620      	mov	r0, r4
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	3468      	adds	r4, #104	; 0x68
 8007892:	e7d9      	b.n	8007848 <__sfp+0x1c>
 8007894:	2104      	movs	r1, #4
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ff62 	bl	8007760 <__sfmoreglue>
 800789c:	4604      	mov	r4, r0
 800789e:	6030      	str	r0, [r6, #0]
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1d5      	bne.n	8007850 <__sfp+0x24>
 80078a4:	f7ff ff78 	bl	8007798 <__sfp_lock_release>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	e7ee      	b.n	800788c <__sfp+0x60>
 80078ae:	bf00      	nop
 80078b0:	08007d08 	.word	0x08007d08
 80078b4:	ffff0001 	.word	0xffff0001

080078b8 <_fwalk_reent>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4606      	mov	r6, r0
 80078be:	4688      	mov	r8, r1
 80078c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078c4:	2700      	movs	r7, #0
 80078c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ca:	f1b9 0901 	subs.w	r9, r9, #1
 80078ce:	d505      	bpl.n	80078dc <_fwalk_reent+0x24>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	d1f7      	bne.n	80078c6 <_fwalk_reent+0xe>
 80078d6:	4638      	mov	r0, r7
 80078d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d907      	bls.n	80078f2 <_fwalk_reent+0x3a>
 80078e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e6:	3301      	adds	r3, #1
 80078e8:	d003      	beq.n	80078f2 <_fwalk_reent+0x3a>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	47c0      	blx	r8
 80078f0:	4307      	orrs	r7, r0
 80078f2:	3568      	adds	r5, #104	; 0x68
 80078f4:	e7e9      	b.n	80078ca <_fwalk_reent+0x12>

080078f6 <__retarget_lock_init_recursive>:
 80078f6:	4770      	bx	lr

080078f8 <__retarget_lock_acquire_recursive>:
 80078f8:	4770      	bx	lr

080078fa <__retarget_lock_release_recursive>:
 80078fa:	4770      	bx	lr

080078fc <__swhatbuf_r>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007904:	2900      	cmp	r1, #0
 8007906:	b096      	sub	sp, #88	; 0x58
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	da07      	bge.n	800791e <__swhatbuf_r+0x22>
 800790e:	2300      	movs	r3, #0
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	89b3      	ldrh	r3, [r6, #12]
 8007914:	061a      	lsls	r2, r3, #24
 8007916:	d410      	bmi.n	800793a <__swhatbuf_r+0x3e>
 8007918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791c:	e00e      	b.n	800793c <__swhatbuf_r+0x40>
 800791e:	466a      	mov	r2, sp
 8007920:	f000 f902 	bl	8007b28 <_fstat_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	dbf2      	blt.n	800790e <__swhatbuf_r+0x12>
 8007928:	9a01      	ldr	r2, [sp, #4]
 800792a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800792e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007932:	425a      	negs	r2, r3
 8007934:	415a      	adcs	r2, r3
 8007936:	602a      	str	r2, [r5, #0]
 8007938:	e7ee      	b.n	8007918 <__swhatbuf_r+0x1c>
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	2000      	movs	r0, #0
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	b016      	add	sp, #88	; 0x58
 8007942:	bd70      	pop	{r4, r5, r6, pc}

08007944 <__smakebuf_r>:
 8007944:	898b      	ldrh	r3, [r1, #12]
 8007946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007948:	079d      	lsls	r5, r3, #30
 800794a:	4606      	mov	r6, r0
 800794c:	460c      	mov	r4, r1
 800794e:	d507      	bpl.n	8007960 <__smakebuf_r+0x1c>
 8007950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	2301      	movs	r3, #1
 800795a:	6163      	str	r3, [r4, #20]
 800795c:	b002      	add	sp, #8
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	ab01      	add	r3, sp, #4
 8007962:	466a      	mov	r2, sp
 8007964:	f7ff ffca 	bl	80078fc <__swhatbuf_r>
 8007968:	9900      	ldr	r1, [sp, #0]
 800796a:	4605      	mov	r5, r0
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff f987 	bl	8006c80 <_malloc_r>
 8007972:	b948      	cbnz	r0, 8007988 <__smakebuf_r+0x44>
 8007974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007978:	059a      	lsls	r2, r3, #22
 800797a:	d4ef      	bmi.n	800795c <__smakebuf_r+0x18>
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	f043 0302 	orr.w	r3, r3, #2
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	e7e3      	b.n	8007950 <__smakebuf_r+0xc>
 8007988:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <__smakebuf_r+0x7c>)
 800798a:	62b3      	str	r3, [r6, #40]	; 0x28
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	9b00      	ldr	r3, [sp, #0]
 8007998:	6163      	str	r3, [r4, #20]
 800799a:	9b01      	ldr	r3, [sp, #4]
 800799c:	6120      	str	r0, [r4, #16]
 800799e:	b15b      	cbz	r3, 80079b8 <__smakebuf_r+0x74>
 80079a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a4:	4630      	mov	r0, r6
 80079a6:	f000 f8d1 	bl	8007b4c <_isatty_r>
 80079aa:	b128      	cbz	r0, 80079b8 <__smakebuf_r+0x74>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f023 0303 	bic.w	r3, r3, #3
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	89a0      	ldrh	r0, [r4, #12]
 80079ba:	4305      	orrs	r5, r0
 80079bc:	81a5      	strh	r5, [r4, #12]
 80079be:	e7cd      	b.n	800795c <__smakebuf_r+0x18>
 80079c0:	08007755 	.word	0x08007755

080079c4 <_malloc_usable_size_r>:
 80079c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c8:	1f18      	subs	r0, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfbc      	itt	lt
 80079ce:	580b      	ldrlt	r3, [r1, r0]
 80079d0:	18c0      	addlt	r0, r0, r3
 80079d2:	4770      	bx	lr

080079d4 <_raise_r>:
 80079d4:	291f      	cmp	r1, #31
 80079d6:	b538      	push	{r3, r4, r5, lr}
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	d904      	bls.n	80079e8 <_raise_r+0x14>
 80079de:	2316      	movs	r3, #22
 80079e0:	6003      	str	r3, [r0, #0]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079ea:	b112      	cbz	r2, 80079f2 <_raise_r+0x1e>
 80079ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f0:	b94b      	cbnz	r3, 8007a06 <_raise_r+0x32>
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 f830 	bl	8007a58 <_getpid_r>
 80079f8:	462a      	mov	r2, r5
 80079fa:	4601      	mov	r1, r0
 80079fc:	4620      	mov	r0, r4
 80079fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a02:	f000 b817 	b.w	8007a34 <_kill_r>
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d00a      	beq.n	8007a20 <_raise_r+0x4c>
 8007a0a:	1c59      	adds	r1, r3, #1
 8007a0c:	d103      	bne.n	8007a16 <_raise_r+0x42>
 8007a0e:	2316      	movs	r3, #22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	2001      	movs	r0, #1
 8007a14:	e7e7      	b.n	80079e6 <_raise_r+0x12>
 8007a16:	2400      	movs	r4, #0
 8007a18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	4798      	blx	r3
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7e0      	b.n	80079e6 <_raise_r+0x12>

08007a24 <raise>:
 8007a24:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <raise+0xc>)
 8007a26:	4601      	mov	r1, r0
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	f7ff bfd3 	b.w	80079d4 <_raise_r>
 8007a2e:	bf00      	nop
 8007a30:	20000024 	.word	0x20000024

08007a34 <_kill_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d07      	ldr	r5, [pc, #28]	; (8007a54 <_kill_r+0x20>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f7f9 ff9b 	bl	800197c <_kill>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d102      	bne.n	8007a50 <_kill_r+0x1c>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	b103      	cbz	r3, 8007a50 <_kill_r+0x1c>
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	bf00      	nop
 8007a54:	200008d8 	.word	0x200008d8

08007a58 <_getpid_r>:
 8007a58:	f7f9 bf88 	b.w	800196c <_getpid>

08007a5c <__sread>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	f000 f894 	bl	8007b90 <_read_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	bfab      	itete	ge
 8007a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a70:	181b      	addge	r3, r3, r0
 8007a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a76:	bfac      	ite	ge
 8007a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a7a:	81a3      	strhlt	r3, [r4, #12]
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <__swrite>:
 8007a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	461f      	mov	r7, r3
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	05db      	lsls	r3, r3, #23
 8007a88:	4605      	mov	r5, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	d505      	bpl.n	8007a9c <__swrite+0x1e>
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	2302      	movs	r3, #2
 8007a96:	2200      	movs	r2, #0
 8007a98:	f000 f868 	bl	8007b6c <_lseek_r>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	463b      	mov	r3, r7
 8007aac:	4628      	mov	r0, r5
 8007aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	f000 b817 	b.w	8007ae4 <_write_r>

08007ab6 <__sseek>:
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007abe:	f000 f855 	bl	8007b6c <_lseek_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	bf15      	itete	ne
 8007ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ad2:	81a3      	strheq	r3, [r4, #12]
 8007ad4:	bf18      	it	ne
 8007ad6:	81a3      	strhne	r3, [r4, #12]
 8007ad8:	bd10      	pop	{r4, pc}

08007ada <__sclose>:
 8007ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ade:	f000 b813 	b.w	8007b08 <_close_r>
	...

08007ae4 <_write_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	; (8007b04 <_write_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 ff79 	bl	80019ea <_write>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_write_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_write_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	200008d8 	.word	0x200008d8

08007b08 <_close_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d06      	ldr	r5, [pc, #24]	; (8007b24 <_close_r+0x1c>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f7f9 ff85 	bl	8001a22 <_close>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_close_r+0x1a>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_close_r+0x1a>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	200008d8 	.word	0x200008d8

08007b28 <_fstat_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d07      	ldr	r5, [pc, #28]	; (8007b48 <_fstat_r+0x20>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	f7f9 ff80 	bl	8001a3a <_fstat>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d102      	bne.n	8007b44 <_fstat_r+0x1c>
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	b103      	cbz	r3, 8007b44 <_fstat_r+0x1c>
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	200008d8 	.word	0x200008d8

08007b4c <_isatty_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	; (8007b68 <_isatty_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 ff7f 	bl	8001a5a <_isatty>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_isatty_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_isatty_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	200008d8 	.word	0x200008d8

08007b6c <_lseek_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d07      	ldr	r5, [pc, #28]	; (8007b8c <_lseek_r+0x20>)
 8007b70:	4604      	mov	r4, r0
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	2200      	movs	r2, #0
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f7f9 ff78 	bl	8001a70 <_lseek>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_lseek_r+0x1e>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_lseek_r+0x1e>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	200008d8 	.word	0x200008d8

08007b90 <_read_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d07      	ldr	r5, [pc, #28]	; (8007bb0 <_read_r+0x20>)
 8007b94:	4604      	mov	r4, r0
 8007b96:	4608      	mov	r0, r1
 8007b98:	4611      	mov	r1, r2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	602a      	str	r2, [r5, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f7f9 ff06 	bl	80019b0 <_read>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_read_r+0x1e>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_read_r+0x1e>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	200008d8 	.word	0x200008d8

08007bb4 <_init>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr

08007bc0 <_fini>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	bf00      	nop
 8007bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc6:	bc08      	pop	{r3}
 8007bc8:	469e      	mov	lr, r3
 8007bca:	4770      	bx	lr
