
STM 32 External Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003284  08003284  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800328c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000594  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3b5  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f98  00000000  00000000  0002e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  00030ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000328d  00000000  00000000  00031570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c049  00000000  00000000  000347fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c526d  00000000  00000000  00040846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00105ab3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024a4  00000000  00000000  00105b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800324c 	.word	0x0800324c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	0800324c 	.word	0x0800324c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fb21 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82d 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f91f 	bl	8000710 <MX_GPIO_Init>
  MX_FATFS_Init();
 80004d2:	f002 f8eb 	bl	80026ac <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f8f1 	bl	80006bc <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80004da:	f000 f8b9 	bl	8000650 <MX_SPI3_Init>
  MX_SPI2_Init();
 80004de:	f000 f881 	bl	80005e4 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t data = 0xF2;
 80004e2:	23f2      	movs	r3, #242	; 0xf2
 80004e4:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <main+0x60>)
 80004ec:	f000 fe26 	bl	800113c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, sizeof(data), 100);
 80004f0:	1df9      	adds	r1, r7, #7
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	2201      	movs	r2, #1
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <main+0x64>)
 80004f8:	f001 fb0b 	bl	8001b12 <HAL_SPI_Transmit>
	  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80004fc:	bf00      	nop
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x64>)
 8000500:	f001 fde5 	bl	80020ce <HAL_SPI_GetState>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d1f9      	bne.n	80004fe <main+0x3e>
	  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2102      	movs	r1, #2
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x60>)
 8000510:	f000 fe14 	bl	800113c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 fb6a 	bl	8000bf0 <HAL_Delay>
  {
 800051c:	e7e1      	b.n	80004e2 <main+0x22>
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	20000050 	.word	0x20000050

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fe80 	bl	800323c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xb4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xb4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <SystemClock_Config+0xb8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <SystemClock_Config+0xb8>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fde9 	bl	8001170 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a4:	f000 f938 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f84c 	bl	8001660 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ce:	f000 f923 	bl	8000818 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_SPI2_Init+0x64>)
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_SPI2_Init+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI2_Init+0x64>)
 80005f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI2_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_SPI2_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI2_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI2_Init+0x64>)
 8000610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000614:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI2_Init+0x64>)
 8000618:	2238      	movs	r2, #56	; 0x38
 800061a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_SPI2_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI2_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_SPI2_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI2_Init+0x64>)
 8000630:	220a      	movs	r2, #10
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_SPI2_Init+0x64>)
 8000636:	f001 f9e3 	bl	8001a00 <HAL_SPI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 f8ea 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000050 	.word	0x20000050
 800064c:	40003800 	.word	0x40003800

08000650 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_SPI3_Init+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI3_Init+0x64>)
 800065c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_SPI3_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI3_Init+0x64>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000684:	2238      	movs	r2, #56	; 0x38
 8000686:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_SPI3_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_SPI3_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI3_Init+0x64>)
 800069c:	220a      	movs	r2, #10
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_SPI3_Init+0x64>)
 80006a2:	f001 f9ad 	bl	8001a00 <HAL_SPI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80006ac:	f000 f8b4 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000a8 	.word	0x200000a8
 80006b8:	40003c00 	.word	0x40003c00

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fdc4 	bl	8002280 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f88b 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000100 	.word	0x20000100
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_GPIO_Init+0xfc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a37      	ldr	r2, [pc, #220]	; (800080c <MX_GPIO_Init+0xfc>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_GPIO_Init+0xfc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_GPIO_Init+0xfc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a30      	ldr	r2, [pc, #192]	; (800080c <MX_GPIO_Init+0xfc>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_GPIO_Init+0xfc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xfc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a29      	ldr	r2, [pc, #164]	; (800080c <MX_GPIO_Init+0xfc>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_GPIO_Init+0xfc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xfc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a22      	ldr	r2, [pc, #136]	; (800080c <MX_GPIO_Init+0xfc>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0xfc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0xfc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_GPIO_Init+0xfc>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0xfc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INA_CS_GPIO_Port, INA_CS_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4815      	ldr	r0, [pc, #84]	; (8000810 <MX_GPIO_Init+0x100>)
 80007ba:	f000 fcbf 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	4814      	ldr	r0, [pc, #80]	; (8000814 <MX_GPIO_Init+0x104>)
 80007c4:	f000 fcba 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INA_CS_Pin */
  GPIO_InitStruct.Pin = INA_CS_Pin;
 80007c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INA_CS_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_GPIO_Init+0x100>)
 80007e2:	f000 fb0f 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_GPIO_Init+0x104>)
 80007fe:	f000 fb01 	bl	8000e04 <HAL_GPIO_Init>

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020c00 	.word	0x40020c00
 8000814:	40021000 	.word	0x40021000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a42      	ldr	r2, [pc, #264]	; (800099c <HAL_SPI_MspInit+0x128>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d14b      	bne.n	800092e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a40      	ldr	r2, [pc, #256]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b3e      	ldr	r3, [pc, #248]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ea:	230c      	movs	r3, #12
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fa:	2305      	movs	r3, #5
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4827      	ldr	r0, [pc, #156]	; (80009a4 <HAL_SPI_MspInit+0x130>)
 8000906:	f000 fa7d 	bl	8000e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800090a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <HAL_SPI_MspInit+0x134>)
 8000928:	f000 fa6c 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800092c:	e031      	b.n	8000992 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <HAL_SPI_MspInit+0x138>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d12c      	bne.n	8000992 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 8000942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_SPI_MspInit+0x12c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000970:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000982:	2306      	movs	r3, #6
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_SPI_MspInit+0x130>)
 800098e:	f000 fa39 	bl	8000e04 <HAL_GPIO_Init>
}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40003800 	.word	0x40003800
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020400 	.word	0x40020400
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_UART_MspInit+0x8c>)
 8000a26:	f000 f9ed 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f890 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd7 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fb85 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fce9 	bl	80004c0 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000afc:	0800328c 	.word	0x0800328c
  ldr r2, =_sbss
 8000b00:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000b04:	200005b8 	.word	0x200005b8

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f931 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe70 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f93b 	bl	8000dea <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f911 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000144 	.word	0x20000144

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000144 	.word	0x20000144

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff47 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff5c 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffb0 	bl	8000d58 <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e16b      	b.n	80010f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 815a 	bne.w	80010f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80b4 	beq.w	80010f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b60      	ldr	r3, [pc, #384]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a5f      	ldr	r2, [pc, #380]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a5b      	ldr	r2, [pc, #364]	; (8001114 <HAL_GPIO_Init+0x310>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x314>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x226>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a51      	ldr	r2, [pc, #324]	; (800111c <HAL_GPIO_Init+0x318>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x222>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a50      	ldr	r2, [pc, #320]	; (8001120 <HAL_GPIO_Init+0x31c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x21e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_GPIO_Init+0x320>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_GPIO_Init+0x324>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	; (800112c <HAL_GPIO_Init+0x328>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4b      	ldr	r2, [pc, #300]	; (8001134 <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x20a>
 800100a:	2307      	movs	r3, #7
 800100c:	e00e      	b.n	800102c <HAL_GPIO_Init+0x228>
 800100e:	2308      	movs	r3, #8
 8001010:	e00c      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001012:	2306      	movs	r3, #6
 8001014:	e00a      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001016:	2305      	movs	r3, #5
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x228>
 800101a:	2304      	movs	r3, #4
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x228>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x228>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x310>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_GPIO_Init+0x334>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106e:	4a32      	ldr	r2, [pc, #200]	; (8001138 <HAL_GPIO_Init+0x334>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_GPIO_Init+0x334>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_GPIO_Init+0x334>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f ae90 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e264      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118e:	4ba3      	ldr	r3, [pc, #652]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4ba0      	ldr	r3, [pc, #640]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b9d      	ldr	r3, [pc, #628]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b99      	ldr	r3, [pc, #612]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e23f      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b91      	ldr	r3, [pc, #580]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a8a      	ldr	r2, [pc, #552]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a87      	ldr	r2, [pc, #540]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a83      	ldr	r2, [pc, #524]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a80      	ldr	r2, [pc, #512]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcd6 	bl	8000bd8 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcd2 	bl	8000bd8 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e204      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fcc2 	bl	8000bd8 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcbe 	bl	8000bd8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1f0      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b6c      	ldr	r3, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b65      	ldr	r3, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1c4      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4952      	ldr	r1, [pc, #328]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x2b0>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc77 	bl	8000bd8 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc73 	bl	8000bd8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1a5      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4940      	ldr	r1, [pc, #256]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <HAL_RCC_OscConfig+0x2b0>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc56 	bl	8000bd8 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc52 	bl	8000bd8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e184      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d030      	beq.n	80013bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_RCC_OscConfig+0x2b4>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc36 	bl	8000bd8 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc32 	bl	8000bd8 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e164      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e015      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x2b4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc1f 	bl	8000bd8 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fc1b 	bl	8000bd8 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e14d      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a0 	beq.w	800150a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d121      	bne.n	800144a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbe1 	bl	8000bd8 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e011      	b.n	800143e <HAL_RCC_OscConfig+0x2ce>
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
 8001428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142c:	f7ff fbd4 	bl	8000bd8 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e106      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b85      	ldr	r3, [pc, #532]	; (8001654 <HAL_RCC_OscConfig+0x4e4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x2f0>
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a80      	ldr	r2, [pc, #512]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x32a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	4b78      	ldr	r3, [pc, #480]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a77      	ldr	r2, [pc, #476]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x32a>
 8001482:	4b75      	ldr	r3, [pc, #468]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a74      	ldr	r2, [pc, #464]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b72      	ldr	r3, [pc, #456]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a71      	ldr	r2, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb99 	bl	8000bd8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fb95 	bl	8000bd8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0c5      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x33a>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb83 	bl	8000bd8 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb7f 	bl	8000bd8 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0af      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a55      	ldr	r2, [pc, #340]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 809b 	beq.w	800164a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d05c      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d141      	bne.n	80015ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b4c      	ldr	r3, [pc, #304]	; (800165c <HAL_RCC_OscConfig+0x4ec>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb53 	bl	8000bd8 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb4f 	bl	8000bd8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e081      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	061b      	lsls	r3, r3, #24
 8001578:	4937      	ldr	r1, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x4ec>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fb28 	bl	8000bd8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff fb24 	bl	8000bd8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e056      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x41c>
 80015aa:	e04e      	b.n	800164a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x4ec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb11 	bl	8000bd8 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fb0d 	bl	8000bd8 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e03f      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x44a>
 80015d8:	e037      	b.n	800164a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e032      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_RCC_OscConfig+0x4e8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d028      	beq.n	8001646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d121      	bne.n	8001646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d11a      	bne.n	8001646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800161c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161e:	4293      	cmp	r3, r2
 8001620:	d111      	bne.n	8001646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40007000 	.word	0x40007000
 8001658:	40023800 	.word	0x40023800
 800165c:	42470060 	.word	0x42470060

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa42 	bl	8000bd8 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa3e 	bl	8000bd8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f9a2 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	08003264 	.word	0x08003264
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001832:	2100      	movs	r1, #0
 8001834:	6079      	str	r1, [r7, #4]
 8001836:	2100      	movs	r1, #0
 8001838:	60f9      	str	r1, [r7, #12]
 800183a:	2100      	movs	r1, #0
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800183e:	2100      	movs	r1, #0
 8001840:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001842:	4952      	ldr	r1, [pc, #328]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001844:	6889      	ldr	r1, [r1, #8]
 8001846:	f001 010c 	and.w	r1, r1, #12
 800184a:	2908      	cmp	r1, #8
 800184c:	d00d      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x3e>
 800184e:	2908      	cmp	r1, #8
 8001850:	f200 8094 	bhi.w	800197c <HAL_RCC_GetSysClockFreq+0x150>
 8001854:	2900      	cmp	r1, #0
 8001856:	d002      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x32>
 8001858:	2904      	cmp	r1, #4
 800185a:	d003      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x38>
 800185c:	e08e      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_GetSysClockFreq+0x164>)
 8001860:	60bb      	str	r3, [r7, #8]
       break;
 8001862:	e08e      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_GetSysClockFreq+0x168>)
 8001866:	60bb      	str	r3, [r7, #8]
      break;
 8001868:	e08b      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186a:	4948      	ldr	r1, [pc, #288]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 800186c:	6849      	ldr	r1, [r1, #4]
 800186e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001872:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001874:	4945      	ldr	r1, [pc, #276]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001876:	6849      	ldr	r1, [r1, #4]
 8001878:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800187c:	2900      	cmp	r1, #0
 800187e:	d024      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001880:	4942      	ldr	r1, [pc, #264]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001882:	6849      	ldr	r1, [r1, #4]
 8001884:	0989      	lsrs	r1, r1, #6
 8001886:	4608      	mov	r0, r1
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001890:	f04f 0500 	mov.w	r5, #0
 8001894:	ea00 0204 	and.w	r2, r0, r4
 8001898:	ea01 0305 	and.w	r3, r1, r5
 800189c:	493d      	ldr	r1, [pc, #244]	; (8001994 <HAL_RCC_GetSysClockFreq+0x168>)
 800189e:	fb01 f003 	mul.w	r0, r1, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	fb01 f102 	mul.w	r1, r1, r2
 80018a8:	1844      	adds	r4, r0, r1
 80018aa:	493a      	ldr	r1, [pc, #232]	; (8001994 <HAL_RCC_GetSysClockFreq+0x168>)
 80018ac:	fba2 0101 	umull	r0, r1, r2, r1
 80018b0:	1863      	adds	r3, r4, r1
 80018b2:	4619      	mov	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f7fe fc84 	bl	80001c8 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e04a      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	461a      	mov	r2, r3
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	ea02 0400 	and.w	r4, r2, r0
 80018e2:	ea03 0501 	and.w	r5, r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	014b      	lsls	r3, r1, #5
 80018f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018f8:	0142      	lsls	r2, r0, #5
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	1b00      	subs	r0, r0, r4
 8001900:	eb61 0105 	sbc.w	r1, r1, r5
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	018b      	lsls	r3, r1, #6
 800190e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001912:	0182      	lsls	r2, r0, #6
 8001914:	1a12      	subs	r2, r2, r0
 8001916:	eb63 0301 	sbc.w	r3, r3, r1
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	00d9      	lsls	r1, r3, #3
 8001924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001928:	00d0      	lsls	r0, r2, #3
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	1912      	adds	r2, r2, r4
 8001930:	eb45 0303 	adc.w	r3, r5, r3
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	0299      	lsls	r1, r3, #10
 800193e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001942:	0290      	lsls	r0, r2, #10
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	461a      	mov	r2, r3
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	f7fe fc38 	bl	80001c8 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4613      	mov	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	60bb      	str	r3, [r7, #8]
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_RCC_GetSysClockFreq+0x164>)
 800197e:	60bb      	str	r3, [r7, #8]
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	68bb      	ldr	r3, [r7, #8]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bdb0      	pop	{r4, r5, r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	00f42400 	.word	0x00f42400
 8001994:	017d7840 	.word	0x017d7840

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_GetHCLKFreq+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019b4:	f7ff fff0 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08003274 	.word	0x08003274

080019d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019dc:	f7ff ffdc 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0b5b      	lsrs	r3, r3, #13
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08003274 	.word	0x08003274

08001a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07b      	b.n	8001b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a22:	d009      	beq.n	8001a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
 8001a2a:	e005      	b.n	8001a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe ff0e 	bl	8000874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	ea42 0103 	orr.w	r1, r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0104 	and.w	r1, r3, #4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	f003 0210 	and.w	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b088      	sub	sp, #32
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_SPI_Transmit+0x22>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e126      	b.n	8001d82 <HAL_SPI_Transmit+0x270>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b3c:	f7ff f84c 	bl	8000bd8 <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d002      	beq.n	8001b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b56:	e10b      	b.n	8001d70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_SPI_Transmit+0x52>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b68:	e102      	b.n	8001d70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d007      	beq.n	8001bf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf8:	d14b      	bne.n	8001c92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_SPI_Transmit+0xf6>
 8001c02:	8afb      	ldrh	r3, [r7, #22]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d13e      	bne.n	8001c86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	1c9a      	adds	r2, r3, #2
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c2c:	e02b      	b.n	8001c86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d112      	bne.n	8001c62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	1c9a      	adds	r2, r3, #2
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c60:	e011      	b.n	8001c86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c62:	f7fe ffb9 	bl	8000bd8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d803      	bhi.n	8001c7a <HAL_SPI_Transmit+0x168>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d102      	bne.n	8001c80 <HAL_SPI_Transmit+0x16e>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c84:	e074      	b.n	8001d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ce      	bne.n	8001c2e <HAL_SPI_Transmit+0x11c>
 8001c90:	e04c      	b.n	8001d2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_SPI_Transmit+0x18e>
 8001c9a:	8afb      	ldrh	r3, [r7, #22]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d140      	bne.n	8001d22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cc6:	e02c      	b.n	8001d22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d113      	bne.n	8001cfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	330c      	adds	r3, #12
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cfc:	e011      	b.n	8001d22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfe:	f7fe ff6b 	bl	8000bd8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d803      	bhi.n	8001d16 <HAL_SPI_Transmit+0x204>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d102      	bne.n	8001d1c <HAL_SPI_Transmit+0x20a>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d20:	e026      	b.n	8001d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1cd      	bne.n	8001cc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fa63 	bl	80021fc <SPI_EndRxTxTransaction>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	77fb      	strb	r3, [r7, #31]
 8001d6c:	e000      	b.n	8001d70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b08c      	sub	sp, #48	; 0x30
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_SPI_TransmitReceive+0x26>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e18a      	b.n	80020c6 <HAL_SPI_TransmitReceive+0x33c>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001db8:	f7fe ff0e 	bl	8000bd8 <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d00f      	beq.n	8001dfa <HAL_SPI_TransmitReceive+0x70>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001de0:	d107      	bne.n	8001df2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_SPI_TransmitReceive+0x68>
 8001dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001df8:	e15b      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_SPI_TransmitReceive+0x82>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_SPI_TransmitReceive+0x82>
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e12:	e14e      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d003      	beq.n	8001e28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2205      	movs	r2, #5
 8001e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	887a      	ldrh	r2, [r7, #2]
 8001e3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	887a      	ldrh	r2, [r7, #2]
 8001e4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d007      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e84:	d178      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_SPI_TransmitReceive+0x10a>
 8001e8e:	8b7b      	ldrh	r3, [r7, #26]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d166      	bne.n	8001f62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eb8:	e053      	b.n	8001f62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d11b      	bne.n	8001f00 <HAL_SPI_TransmitReceive+0x176>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_SPI_TransmitReceive+0x176>
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d113      	bne.n	8001f00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	881a      	ldrh	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	1c9a      	adds	r2, r3, #2
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d119      	bne.n	8001f42 <HAL_SPI_TransmitReceive+0x1b8>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	b292      	uxth	r2, r2
 8001f24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	1c9a      	adds	r2, r3, #2
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f42:	f7fe fe49 	bl	8000bd8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d807      	bhi.n	8001f62 <HAL_SPI_TransmitReceive+0x1d8>
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d003      	beq.n	8001f62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f60:	e0a7      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1a6      	bne.n	8001eba <HAL_SPI_TransmitReceive+0x130>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1a1      	bne.n	8001eba <HAL_SPI_TransmitReceive+0x130>
 8001f76:	e07c      	b.n	8002072 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_SPI_TransmitReceive+0x1fc>
 8001f80:	8b7b      	ldrh	r3, [r7, #26]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d16b      	bne.n	800205e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	330c      	adds	r3, #12
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fac:	e057      	b.n	800205e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d11c      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x26c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d017      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x26c>
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d114      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	330c      	adds	r3, #12
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d119      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x2ae>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d014      	beq.n	8002038 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002034:	2301      	movs	r3, #1
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002038:	f7fe fdce 	bl	8000bd8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002044:	429a      	cmp	r2, r3
 8002046:	d803      	bhi.n	8002050 <HAL_SPI_TransmitReceive+0x2c6>
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204e:	d102      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x2cc>
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800205c:	e029      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1a2      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x224>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d19d      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f8c0 	bl	80021fc <SPI_EndRxTxTransaction>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800208e:	e010      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	e000      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020dc:	b2db      	uxtb	r3, r3
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020fc:	f7fe fd6c 	bl	8000bd8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800210c:	f7fe fd64 	bl	8000bd8 <HAL_GetTick>
 8002110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	0d1b      	lsrs	r3, r3, #20
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002122:	e054      	b.n	80021ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d050      	beq.n	80021ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800212c:	f7fe fd54 	bl	8000bd8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	429a      	cmp	r2, r3
 800213a:	d902      	bls.n	8002142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d13d      	bne.n	80021be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215a:	d111      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002164:	d004      	beq.n	8002170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216e:	d107      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800217e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002188:	d10f      	bne.n	80021aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e017      	b.n	80021ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d19b      	bne.n	8002124 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <SPI_EndRxTxTransaction+0x7c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <SPI_EndRxTxTransaction+0x80>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0d5b      	lsrs	r3, r3, #21
 8002214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002226:	d112      	bne.n	800224e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2200      	movs	r2, #0
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ff5a 	bl	80020ec <SPI_WaitFlagStateUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e00f      	b.n	800226e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3b01      	subs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d0f2      	beq.n	800224e <SPI_EndRxTxTransaction+0x52>
 8002268:	e000      	b.n	800226c <SPI_EndRxTxTransaction+0x70>
        break;
 800226a:	bf00      	nop
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	165e9f81 	.word	0x165e9f81

08002280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e03f      	b.n	8002312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fb82 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2224      	movs	r2, #36	; 0x24
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f829 	bl	800231c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002320:	b09f      	sub	sp, #124	; 0x7c
 8002322:	af00      	add	r7, sp, #0
 8002324:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	ea40 0301 	orr.w	r3, r0, r1
 800233c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	431a      	orrs	r2, r3
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4313      	orrs	r3, r2
 8002354:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002360:	f021 010c 	bic.w	r1, r1, #12
 8002364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800236a:	430b      	orrs	r3, r1
 800236c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237a:	6999      	ldr	r1, [r3, #24]
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	ea40 0301 	orr.w	r3, r0, r1
 8002384:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4bc5      	ldr	r3, [pc, #788]	; (80026a0 <UART_SetConfig+0x384>)
 800238c:	429a      	cmp	r2, r3
 800238e:	d004      	beq.n	800239a <UART_SetConfig+0x7e>
 8002390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4bc3      	ldr	r3, [pc, #780]	; (80026a4 <UART_SetConfig+0x388>)
 8002396:	429a      	cmp	r2, r3
 8002398:	d103      	bne.n	80023a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800239a:	f7ff fb1d 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 800239e:	6778      	str	r0, [r7, #116]	; 0x74
 80023a0:	e002      	b.n	80023a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a2:	f7ff fb05 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80023a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b0:	f040 80b6 	bne.w	8002520 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b6:	461c      	mov	r4, r3
 80023b8:	f04f 0500 	mov.w	r5, #0
 80023bc:	4622      	mov	r2, r4
 80023be:	462b      	mov	r3, r5
 80023c0:	1891      	adds	r1, r2, r2
 80023c2:	6439      	str	r1, [r7, #64]	; 0x40
 80023c4:	415b      	adcs	r3, r3
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
 80023c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023cc:	1912      	adds	r2, r2, r4
 80023ce:	eb45 0303 	adc.w	r3, r5, r3
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	00d9      	lsls	r1, r3, #3
 80023dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023e0:	00d0      	lsls	r0, r2, #3
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	1911      	adds	r1, r2, r4
 80023e8:	6639      	str	r1, [r7, #96]	; 0x60
 80023ea:	416b      	adcs	r3, r5
 80023ec:	667b      	str	r3, [r7, #100]	; 0x64
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	1891      	adds	r1, r2, r2
 80023fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80023fc:	415b      	adcs	r3, r3
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002404:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002408:	f7fd fede 	bl	80001c8 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4ba5      	ldr	r3, [pc, #660]	; (80026a8 <UART_SetConfig+0x38c>)
 8002412:	fba3 2302 	umull	r2, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	011e      	lsls	r6, r3, #4
 800241a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241c:	461c      	mov	r4, r3
 800241e:	f04f 0500 	mov.w	r5, #0
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	1891      	adds	r1, r2, r2
 8002428:	6339      	str	r1, [r7, #48]	; 0x30
 800242a:	415b      	adcs	r3, r3
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
 800242e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002432:	1912      	adds	r2, r2, r4
 8002434:	eb45 0303 	adc.w	r3, r5, r3
 8002438:	f04f 0000 	mov.w	r0, #0
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	00d9      	lsls	r1, r3, #3
 8002442:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002446:	00d0      	lsls	r0, r2, #3
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	1911      	adds	r1, r2, r4
 800244e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002450:	416b      	adcs	r3, r5
 8002452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	461a      	mov	r2, r3
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	1891      	adds	r1, r2, r2
 8002460:	62b9      	str	r1, [r7, #40]	; 0x28
 8002462:	415b      	adcs	r3, r3
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800246a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800246e:	f7fd feab 	bl	80001c8 <__aeabi_uldivmod>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4b8c      	ldr	r3, [pc, #560]	; (80026a8 <UART_SetConfig+0x38c>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	; 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a87      	ldr	r2, [pc, #540]	; (80026a8 <UART_SetConfig+0x38c>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002498:	441e      	add	r6, r3
 800249a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249c:	4618      	mov	r0, r3
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	1894      	adds	r4, r2, r2
 80024a8:	623c      	str	r4, [r7, #32]
 80024aa:	415b      	adcs	r3, r3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024b2:	1812      	adds	r2, r2, r0
 80024b4:	eb41 0303 	adc.w	r3, r1, r3
 80024b8:	f04f 0400 	mov.w	r4, #0
 80024bc:	f04f 0500 	mov.w	r5, #0
 80024c0:	00dd      	lsls	r5, r3, #3
 80024c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024c6:	00d4      	lsls	r4, r2, #3
 80024c8:	4622      	mov	r2, r4
 80024ca:	462b      	mov	r3, r5
 80024cc:	1814      	adds	r4, r2, r0
 80024ce:	653c      	str	r4, [r7, #80]	; 0x50
 80024d0:	414b      	adcs	r3, r1
 80024d2:	657b      	str	r3, [r7, #84]	; 0x54
 80024d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	461a      	mov	r2, r3
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	1891      	adds	r1, r2, r2
 80024e0:	61b9      	str	r1, [r7, #24]
 80024e2:	415b      	adcs	r3, r3
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80024ee:	f7fd fe6b 	bl	80001c8 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <UART_SetConfig+0x38c>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	2164      	movs	r1, #100	; 0x64
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	3332      	adds	r3, #50	; 0x32
 800250a:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <UART_SetConfig+0x38c>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	f003 0207 	and.w	r2, r3, #7
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4432      	add	r2, r6
 800251c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800251e:	e0b9      	b.n	8002694 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002522:	461c      	mov	r4, r3
 8002524:	f04f 0500 	mov.w	r5, #0
 8002528:	4622      	mov	r2, r4
 800252a:	462b      	mov	r3, r5
 800252c:	1891      	adds	r1, r2, r2
 800252e:	6139      	str	r1, [r7, #16]
 8002530:	415b      	adcs	r3, r3
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002538:	1912      	adds	r2, r2, r4
 800253a:	eb45 0303 	adc.w	r3, r5, r3
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	00d9      	lsls	r1, r3, #3
 8002548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800254c:	00d0      	lsls	r0, r2, #3
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	eb12 0804 	adds.w	r8, r2, r4
 8002556:	eb43 0905 	adc.w	r9, r3, r5
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	008b      	lsls	r3, r1, #2
 800256e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002572:	0082      	lsls	r2, r0, #2
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f7fd fe26 	bl	80001c8 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <UART_SetConfig+0x38c>)
 8002582:	fba3 2302 	umull	r2, r3, r3, r2
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	011e      	lsls	r6, r3, #4
 800258a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258c:	4618      	mov	r0, r3
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	1894      	adds	r4, r2, r2
 8002598:	60bc      	str	r4, [r7, #8]
 800259a:	415b      	adcs	r3, r3
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a2:	1812      	adds	r2, r2, r0
 80025a4:	eb41 0303 	adc.w	r3, r1, r3
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	f04f 0500 	mov.w	r5, #0
 80025b0:	00dd      	lsls	r5, r3, #3
 80025b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025b6:	00d4      	lsls	r4, r2, #3
 80025b8:	4622      	mov	r2, r4
 80025ba:	462b      	mov	r3, r5
 80025bc:	1814      	adds	r4, r2, r0
 80025be:	64bc      	str	r4, [r7, #72]	; 0x48
 80025c0:	414b      	adcs	r3, r1
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	008b      	lsls	r3, r1, #2
 80025d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025dc:	0082      	lsls	r2, r0, #2
 80025de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025e2:	f7fd fdf1 	bl	80001c8 <__aeabi_uldivmod>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <UART_SetConfig+0x38c>)
 80025ec:	fba3 1302 	umull	r1, r3, r3, r2
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	2164      	movs	r1, #100	; 0x64
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	3332      	adds	r3, #50	; 0x32
 80025fe:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <UART_SetConfig+0x38c>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260a:	441e      	add	r6, r3
 800260c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260e:	4618      	mov	r0, r3
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	1894      	adds	r4, r2, r2
 800261a:	603c      	str	r4, [r7, #0]
 800261c:	415b      	adcs	r3, r3
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002624:	1812      	adds	r2, r2, r0
 8002626:	eb41 0303 	adc.w	r3, r1, r3
 800262a:	f04f 0400 	mov.w	r4, #0
 800262e:	f04f 0500 	mov.w	r5, #0
 8002632:	00dd      	lsls	r5, r3, #3
 8002634:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002638:	00d4      	lsls	r4, r2, #3
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	eb12 0a00 	adds.w	sl, r2, r0
 8002642:	eb43 0b01 	adc.w	fp, r3, r1
 8002646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4618      	mov	r0, r3
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	008b      	lsls	r3, r1, #2
 800265a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800265e:	0082      	lsls	r2, r0, #2
 8002660:	4650      	mov	r0, sl
 8002662:	4659      	mov	r1, fp
 8002664:	f7fd fdb0 	bl	80001c8 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <UART_SetConfig+0x38c>)
 800266e:	fba3 1302 	umull	r1, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2164      	movs	r1, #100	; 0x64
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	; 0x32
 8002680:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <UART_SetConfig+0x38c>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4432      	add	r2, r6
 8002692:	609a      	str	r2, [r3, #8]
}
 8002694:	bf00      	nop
 8002696:	377c      	adds	r7, #124	; 0x7c
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40011400 	.word	0x40011400
 80026a8:	51eb851f 	.word	0x51eb851f

080026ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <MX_FATFS_Init+0x18>)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_FATFS_Init+0x1c>)
 80026b4:	f000 fd8e 	bl	80031d4 <FATFS_LinkDriver>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <MX_FATFS_Init+0x20>)
 80026be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000148 	.word	0x20000148
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	2000014c 	.word	0x2000014c

080026d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f9d9 	bl	8002a94 <USER_SPI_initialize>
 80026e2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fab7 	bl	8002c6c <USER_SPI_status>
 80026fe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8002718:	7bf8      	ldrb	r0, [r7, #15]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	f000 faba 	bl	8002c98 <USER_SPI_read>
 8002724:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800273e:	7bf8      	ldrb	r0, [r7, #15]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	f000 fb0d 	bl	8002d64 <USER_SPI_write>
 800274a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	603a      	str	r2, [r7, #0]
 800275e:	71fb      	strb	r3, [r7, #7]
 8002760:	460b      	mov	r3, r1
 8002762:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8002764:	79b9      	ldrb	r1, [r7, #6]
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fb76 	bl	8002e5c <USER_SPI_ioctl>
 8002770:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002784:	f7fe fa28 	bl	8000bd8 <HAL_GetTick>
 8002788:	4603      	mov	r3, r0
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <SPI_Timer_On+0x20>)
 800278c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <SPI_Timer_On+0x24>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200005b0 	.word	0x200005b0
 80027a0:	200005b4 	.word	0x200005b4

080027a4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80027a8:	f7fe fa16 	bl	8000bd8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <SPI_Timer_Status+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SPI_Timer_Status+0x28>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bf34      	ite	cc
 80027bc:	2301      	movcc	r3, #1
 80027be:	2300      	movcs	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200005b0 	.word	0x200005b0
 80027cc:	200005b4 	.word	0x200005b4

080027d0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80027da:	f107 020f 	add.w	r2, r7, #15
 80027de:	1df9      	adds	r1, r7, #7
 80027e0:	2332      	movs	r3, #50	; 0x32
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	4804      	ldr	r0, [pc, #16]	; (80027f8 <xchg_spi+0x28>)
 80027e8:	f7ff facf 	bl	8001d8a <HAL_SPI_TransmitReceive>
    return rxDat;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200000a8 	.word	0x200000a8

080027fc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e00a      	b.n	8002822 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	18d4      	adds	r4, r2, r3
 8002812:	20ff      	movs	r0, #255	; 0xff
 8002814:	f7ff ffdc 	bl	80027d0 <xchg_spi>
 8002818:	4603      	mov	r3, r0
 800281a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3f0      	bcc.n	800280c <rcvr_spi_multi+0x10>
	}
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}

08002834 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e009      	b.n	8002858 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ffbf 	bl	80027d0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d3f1      	bcc.n	8002844 <xmit_spi_multi+0x10>
	}
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002872:	f7fe f9b1 	bl	8000bd8 <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800287c:	20ff      	movs	r0, #255	; 0xff
 800287e:	f7ff ffa7 	bl	80027d0 <xchg_spi>
 8002882:	4603      	mov	r3, r0
 8002884:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2bff      	cmp	r3, #255	; 0xff
 800288a:	d007      	beq.n	800289c <wait_ready+0x32>
 800288c:	f7fe f9a4 	bl	8000bd8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8ef      	bhi.n	800287c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2bff      	cmp	r3, #255	; 0xff
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80028b4:	2201      	movs	r2, #1
 80028b6:	2102      	movs	r1, #2
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <despiselect+0x18>)
 80028ba:	f7fe fc3f 	bl	800113c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80028be:	20ff      	movs	r0, #255	; 0xff
 80028c0:	f7ff ff86 	bl	80027d0 <xchg_spi>

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80028d0:	2200      	movs	r2, #0
 80028d2:	2102      	movs	r1, #2
 80028d4:	4809      	ldr	r0, [pc, #36]	; (80028fc <spiselect+0x30>)
 80028d6:	f7fe fc31 	bl	800113c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80028da:	20ff      	movs	r0, #255	; 0xff
 80028dc:	f7ff ff78 	bl	80027d0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80028e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028e4:	f7ff ffc1 	bl	800286a <wait_ready>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <spiselect+0x26>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e002      	b.n	80028f8 <spiselect+0x2c>

	despiselect();
 80028f2:	f7ff ffdd 	bl	80028b0 <despiselect>
	return 0;	/* Timeout */
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000

08002900 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800290a:	20c8      	movs	r0, #200	; 0xc8
 800290c:	f7ff ff36 	bl	800277c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002910:	20ff      	movs	r0, #255	; 0xff
 8002912:	f7ff ff5d 	bl	80027d0 <xchg_spi>
 8002916:	4603      	mov	r3, r0
 8002918:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2bff      	cmp	r3, #255	; 0xff
 800291e:	d104      	bne.n	800292a <rcvr_datablock+0x2a>
 8002920:	f7ff ff40 	bl	80027a4 <SPI_Timer_Status>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f2      	bne.n	8002910 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2bfe      	cmp	r3, #254	; 0xfe
 800292e:	d001      	beq.n	8002934 <rcvr_datablock+0x34>
 8002930:	2300      	movs	r3, #0
 8002932:	e00a      	b.n	800294a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff60 	bl	80027fc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800293c:	20ff      	movs	r0, #255	; 0xff
 800293e:	f7ff ff47 	bl	80027d0 <xchg_spi>
 8002942:	20ff      	movs	r0, #255	; 0xff
 8002944:	f7ff ff44 	bl	80027d0 <xchg_spi>

	return 1;						/* Function succeeded */
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800295e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002962:	f7ff ff82 	bl	800286a <wait_ready>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <xmit_datablock+0x1e>
 800296c:	2300      	movs	r3, #0
 800296e:	e01e      	b.n	80029ae <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff2c 	bl	80027d0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	2bfd      	cmp	r3, #253	; 0xfd
 800297c:	d016      	beq.n	80029ac <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800297e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff56 	bl	8002834 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002988:	20ff      	movs	r0, #255	; 0xff
 800298a:	f7ff ff21 	bl	80027d0 <xchg_spi>
 800298e:	20ff      	movs	r0, #255	; 0xff
 8002990:	f7ff ff1e 	bl	80027d0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002994:	20ff      	movs	r0, #255	; 0xff
 8002996:	f7ff ff1b 	bl	80027d0 <xchg_spi>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d001      	beq.n	80029ac <xmit_datablock+0x5a>
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <xmit_datablock+0x5c>
	}
	return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	6039      	str	r1, [r7, #0]
 80029c0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0e      	bge.n	80029e8 <send_cmd+0x32>
		cmd &= 0x7F;
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80029d2:	2100      	movs	r1, #0
 80029d4:	2037      	movs	r0, #55	; 0x37
 80029d6:	f7ff ffee 	bl	80029b6 <send_cmd>
 80029da:	4603      	mov	r3, r0
 80029dc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80029de:	7bbb      	ldrb	r3, [r7, #14]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d901      	bls.n	80029e8 <send_cmd+0x32>
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	e051      	b.n	8002a8c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d008      	beq.n	8002a00 <send_cmd+0x4a>
		despiselect();
 80029ee:	f7ff ff5f 	bl	80028b0 <despiselect>
		if (!spiselect()) return 0xFF;
 80029f2:	f7ff ff6b 	bl	80028cc <spiselect>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <send_cmd+0x4a>
 80029fc:	23ff      	movs	r3, #255	; 0xff
 80029fe:	e045      	b.n	8002a8c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fee1 	bl	80027d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	0e1b      	lsrs	r3, r3, #24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fedb 	bl	80027d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fed5 	bl	80027d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fecf 	bl	80027d0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff feca 	bl	80027d0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <send_cmd+0x94>
 8002a46:	2395      	movs	r3, #149	; 0x95
 8002a48:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d101      	bne.n	8002a54 <send_cmd+0x9e>
 8002a50:	2387      	movs	r3, #135	; 0x87
 8002a52:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff feba 	bl	80027d0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d102      	bne.n	8002a68 <send_cmd+0xb2>
 8002a62:	20ff      	movs	r0, #255	; 0xff
 8002a64:	f7ff feb4 	bl	80027d0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002a68:	230a      	movs	r3, #10
 8002a6a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002a6c:	20ff      	movs	r0, #255	; 0xff
 8002a6e:	f7ff feaf 	bl	80027d0 <xchg_spi>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da05      	bge.n	8002a8a <send_cmd+0xd4>
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <send_cmd+0xb6>

	return res;							/* Return received response */
 8002a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <USER_SPI_initialize+0x14>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0d6      	b.n	8002c56 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002aa8:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <USER_SPI_initialize+0x1cc>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <USER_SPI_initialize+0x2a>
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <USER_SPI_initialize+0x1cc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e0cb      	b.n	8002c56 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002abe:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <USER_SPI_initialize+0x1d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <USER_SPI_initialize+0x1d0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002ad0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e005      	b.n	8002ae4 <USER_SPI_initialize+0x50>
 8002ad8:	20ff      	movs	r0, #255	; 0xff
 8002ada:	f7ff fe79 	bl	80027d0 <xchg_spi>
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f6      	bne.n	8002ad8 <USER_SPI_initialize+0x44>

	ty = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002aee:	2100      	movs	r1, #0
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff ff60 	bl	80029b6 <send_cmd>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 808b 	bne.w	8002c14 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b02:	f7ff fe3b 	bl	800277c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002b06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b0a:	2008      	movs	r0, #8
 8002b0c:	f7ff ff53 	bl	80029b6 <send_cmd>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d151      	bne.n	8002bba <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e00d      	b.n	8002b38 <USER_SPI_initialize+0xa4>
 8002b1c:	7bfc      	ldrb	r4, [r7, #15]
 8002b1e:	20ff      	movs	r0, #255	; 0xff
 8002b20:	f7ff fe56 	bl	80027d0 <xchg_spi>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	4423      	add	r3, r4
 8002b2e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3301      	adds	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d9ee      	bls.n	8002b1c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002b3e:	7abb      	ldrb	r3, [r7, #10]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d167      	bne.n	8002c14 <USER_SPI_initialize+0x180>
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	2baa      	cmp	r3, #170	; 0xaa
 8002b48:	d164      	bne.n	8002c14 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002b4a:	bf00      	nop
 8002b4c:	f7ff fe2a 	bl	80027a4 <SPI_Timer_Status>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <USER_SPI_initialize+0xd2>
 8002b56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b5a:	20a9      	movs	r0, #169	; 0xa9
 8002b5c:	f7ff ff2b 	bl	80029b6 <send_cmd>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f2      	bne.n	8002b4c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002b66:	f7ff fe1d 	bl	80027a4 <SPI_Timer_Status>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d051      	beq.n	8002c14 <USER_SPI_initialize+0x180>
 8002b70:	2100      	movs	r1, #0
 8002b72:	203a      	movs	r0, #58	; 0x3a
 8002b74:	f7ff ff1f 	bl	80029b6 <send_cmd>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d14a      	bne.n	8002c14 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e00d      	b.n	8002ba0 <USER_SPI_initialize+0x10c>
 8002b84:	7bfc      	ldrb	r4, [r7, #15]
 8002b86:	20ff      	movs	r0, #255	; 0xff
 8002b88:	f7ff fe22 	bl	80027d0 <xchg_spi>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	4423      	add	r3, r4
 8002b96:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d9ee      	bls.n	8002b84 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002ba6:	7a3b      	ldrb	r3, [r7, #8]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <USER_SPI_initialize+0x120>
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	e000      	b.n	8002bb6 <USER_SPI_initialize+0x122>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	737b      	strb	r3, [r7, #13]
 8002bb8:	e02c      	b.n	8002c14 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002bba:	2100      	movs	r1, #0
 8002bbc:	20a9      	movs	r0, #169	; 0xa9
 8002bbe:	f7ff fefa 	bl	80029b6 <send_cmd>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d804      	bhi.n	8002bd2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002bc8:	2302      	movs	r3, #2
 8002bca:	737b      	strb	r3, [r7, #13]
 8002bcc:	23a9      	movs	r3, #169	; 0xa9
 8002bce:	73bb      	strb	r3, [r7, #14]
 8002bd0:	e003      	b.n	8002bda <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	737b      	strb	r3, [r7, #13]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002bda:	bf00      	nop
 8002bdc:	f7ff fde2 	bl	80027a4 <SPI_Timer_Status>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <USER_SPI_initialize+0x162>
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fee3 	bl	80029b6 <send_cmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f2      	bne.n	8002bdc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002bf6:	f7ff fdd5 	bl	80027a4 <SPI_Timer_Status>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <USER_SPI_initialize+0x17c>
 8002c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c04:	2010      	movs	r0, #16
 8002c06:	f7ff fed6 	bl	80029b6 <send_cmd>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <USER_SPI_initialize+0x180>
				ty = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <USER_SPI_initialize+0x1d4>)
 8002c16:	7b7b      	ldrb	r3, [r7, #13]
 8002c18:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002c1a:	f7ff fe49 	bl	80028b0 <despiselect>

	if (ty) {			/* OK */
 8002c1e:	7b7b      	ldrb	r3, [r7, #13]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <USER_SPI_initialize+0x1d0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <USER_SPI_initialize+0x1d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0208 	orr.w	r2, r2, #8
 8002c36:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <USER_SPI_initialize+0x1cc>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <USER_SPI_initialize+0x1cc>)
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e002      	b.n	8002c50 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <USER_SPI_initialize+0x1cc>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <USER_SPI_initialize+0x1cc>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000020 	.word	0x20000020
 8002c64:	200000a8 	.word	0x200000a8
 8002c68:	20000040 	.word	0x20000040

08002c6c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <USER_SPI_status+0x14>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e002      	b.n	8002c86 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <USER_SPI_status+0x28>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000020 	.word	0x20000020

08002c98 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <USER_SPI_read+0x1c>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <USER_SPI_read+0x20>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e04d      	b.n	8002d54 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002cb8:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <USER_SPI_read+0xc4>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <USER_SPI_read+0x32>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e044      	b.n	8002d54 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <USER_SPI_read+0xc8>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <USER_SPI_read+0x44>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d111      	bne.n	8002d06 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	2011      	movs	r0, #17
 8002ce6:	f7ff fe66 	bl	80029b6 <send_cmd>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d129      	bne.n	8002d44 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf4:	68b8      	ldr	r0, [r7, #8]
 8002cf6:	f7ff fe03 	bl	8002900 <rcvr_datablock>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d021      	beq.n	8002d44 <USER_SPI_read+0xac>
			count = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	e01e      	b.n	8002d44 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	2012      	movs	r0, #18
 8002d0a:	f7ff fe54 	bl	80029b6 <send_cmd>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d117      	bne.n	8002d44 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d18:	68b8      	ldr	r0, [r7, #8]
 8002d1a:	f7ff fdf1 	bl	8002900 <rcvr_datablock>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <USER_SPI_read+0xa2>
				buff += 512;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d2a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ed      	bne.n	8002d14 <USER_SPI_read+0x7c>
 8002d38:	e000      	b.n	8002d3c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002d3a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	200c      	movs	r0, #12
 8002d40:	f7ff fe39 	bl	80029b6 <send_cmd>
		}
	}
	despiselect();
 8002d44:	f7ff fdb4 	bl	80028b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000020 	.word	0x20000020
 8002d60:	20000040 	.word	0x20000040

08002d64 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <USER_SPI_write+0x1c>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <USER_SPI_write+0x20>
 8002d80:	2304      	movs	r3, #4
 8002d82:	e063      	b.n	8002e4c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <USER_SPI_write+0xf0>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <USER_SPI_write+0x32>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e05a      	b.n	8002e4c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <USER_SPI_write+0xf0>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <USER_SPI_write+0x44>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e051      	b.n	8002e4c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <USER_SPI_write+0xf4>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <USER_SPI_write+0x56>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d110      	bne.n	8002de2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	2018      	movs	r0, #24
 8002dc4:	f7ff fdf7 	bl	80029b6 <send_cmd>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d136      	bne.n	8002e3c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002dce:	21fe      	movs	r1, #254	; 0xfe
 8002dd0:	68b8      	ldr	r0, [r7, #8]
 8002dd2:	f7ff fdbe 	bl	8002952 <xmit_datablock>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02f      	beq.n	8002e3c <USER_SPI_write+0xd8>
			count = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	e02c      	b.n	8002e3c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <USER_SPI_write+0xf4>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	f003 0306 	and.w	r3, r3, #6
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <USER_SPI_write+0x92>
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	2097      	movs	r0, #151	; 0x97
 8002df2:	f7ff fde0 	bl	80029b6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	2019      	movs	r0, #25
 8002dfa:	f7ff fddc 	bl	80029b6 <send_cmd>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11b      	bne.n	8002e3c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002e04:	21fc      	movs	r1, #252	; 0xfc
 8002e06:	68b8      	ldr	r0, [r7, #8]
 8002e08:	f7ff fda3 	bl	8002952 <xmit_datablock>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <USER_SPI_write+0xc4>
				buff += 512;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e18:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ee      	bne.n	8002e04 <USER_SPI_write+0xa0>
 8002e26:	e000      	b.n	8002e2a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002e28:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002e2a:	21fd      	movs	r1, #253	; 0xfd
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7ff fd90 	bl	8002952 <xmit_datablock>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <USER_SPI_write+0xd8>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002e3c:	f7ff fd38 	bl	80028b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000020 	.word	0x20000020
 8002e58:	20000040 	.word	0x20000040

08002e5c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	; 0x30
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	603a      	str	r2, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <USER_SPI_ioctl+0x1a>
 8002e72:	2304      	movs	r3, #4
 8002e74:	e15a      	b.n	800312c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002e76:	4baf      	ldr	r3, [pc, #700]	; (8003134 <USER_SPI_ioctl+0x2d8>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <USER_SPI_ioctl+0x2c>
 8002e84:	2303      	movs	r3, #3
 8002e86:	e151      	b.n	800312c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002e8e:	79bb      	ldrb	r3, [r7, #6]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	f200 8136 	bhi.w	8003102 <USER_SPI_ioctl+0x2a6>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <USER_SPI_ioctl+0x40>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002eb1 	.word	0x08002eb1
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08003103 	.word	0x08003103
 8002ea8:	08002f71 	.word	0x08002f71
 8002eac:	08003067 	.word	0x08003067
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002eb0:	f7ff fd0c 	bl	80028cc <spiselect>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8127 	beq.w	800310a <USER_SPI_ioctl+0x2ae>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002ec2:	e122      	b.n	800310a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2009      	movs	r0, #9
 8002ec8:	f7ff fd75 	bl	80029b6 <send_cmd>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 811d 	bne.w	800310e <USER_SPI_ioctl+0x2b2>
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	2110      	movs	r1, #16
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fd10 	bl	8002900 <rcvr_datablock>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8113 	beq.w	800310e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002ee8:	7b3b      	ldrb	r3, [r7, #12]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d111      	bne.n	8002f16 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002ef2:	7d7b      	ldrb	r3, [r7, #21]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	7d3b      	ldrb	r3, [r7, #20]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	4413      	add	r3, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	041b      	lsls	r3, r3, #16
 8002f02:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002f06:	4413      	add	r3, r2
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	029a      	lsls	r2, r3, #10
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e028      	b.n	8002f68 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002f16:	7c7b      	ldrb	r3, [r7, #17]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	7dbb      	ldrb	r3, [r7, #22]
 8002f20:	09db      	lsrs	r3, r3, #7
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	7d7b      	ldrb	r3, [r7, #21]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0306 	and.w	r3, r3, #6
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002f3e:	7d3b      	ldrb	r3, [r7, #20]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	7cbb      	ldrb	r3, [r7, #18]
 8002f4e:	029b      	lsls	r3, r3, #10
 8002f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f54:	4413      	add	r3, r2
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f5e:	3b09      	subs	r3, #9
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	409a      	lsls	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002f6e:	e0ce      	b.n	800310e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002f70:	4b71      	ldr	r3, [pc, #452]	; (8003138 <USER_SPI_ioctl+0x2dc>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d031      	beq.n	8002fe0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	208d      	movs	r0, #141	; 0x8d
 8002f80:	f7ff fd19 	bl	80029b6 <send_cmd>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 80c3 	bne.w	8003112 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002f8c:	20ff      	movs	r0, #255	; 0xff
 8002f8e:	f7ff fc1f 	bl	80027d0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	2110      	movs	r1, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fcb1 	bl	8002900 <rcvr_datablock>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80b6 	beq.w	8003112 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002fa6:	2330      	movs	r3, #48	; 0x30
 8002fa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002fac:	e007      	b.n	8002fbe <USER_SPI_ioctl+0x162>
 8002fae:	20ff      	movs	r0, #255	; 0xff
 8002fb0:	f7ff fc0e 	bl	80027d0 <xchg_spi>
 8002fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f3      	bne.n	8002fae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002fc6:	7dbb      	ldrb	r3, [r7, #22]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2310      	movs	r3, #16
 8002fd0:	fa03 f202 	lsl.w	r2, r3, r2
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002fde:	e098      	b.n	8003112 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2009      	movs	r0, #9
 8002fe4:	f7ff fce7 	bl	80029b6 <send_cmd>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 8091 	bne.w	8003112 <USER_SPI_ioctl+0x2b6>
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fc82 	bl	8002900 <rcvr_datablock>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8087 	beq.w	8003112 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003004:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <USER_SPI_ioctl+0x2dc>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003010:	7dbb      	ldrb	r3, [r7, #22]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003018:	7dfa      	ldrb	r2, [r7, #23]
 800301a:	09d2      	lsrs	r2, r2, #7
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	4413      	add	r3, r2
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	7e7b      	ldrb	r3, [r7, #25]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	461a      	mov	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e013      	b.n	800305e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	109b      	asrs	r3, r3, #2
 800303a:	b29b      	uxth	r3, r3
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	3301      	adds	r3, #1
 8003042:	7dfa      	ldrb	r2, [r7, #23]
 8003044:	00d2      	lsls	r2, r2, #3
 8003046:	f002 0218 	and.w	r2, r2, #24
 800304a:	7df9      	ldrb	r1, [r7, #23]
 800304c:	0949      	lsrs	r1, r1, #5
 800304e:	b2c9      	uxtb	r1, r1
 8003050:	440a      	add	r2, r1
 8003052:	3201      	adds	r2, #1
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	461a      	mov	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003064:	e055      	b.n	8003112 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <USER_SPI_ioctl+0x2dc>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	f003 0306 	and.w	r3, r3, #6
 800306e:	2b00      	cmp	r3, #0
 8003070:	d051      	beq.n	8003116 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003072:	f107 020c 	add.w	r2, r7, #12
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	210b      	movs	r1, #11
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff feee 	bl	8002e5c <USER_SPI_ioctl>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d149      	bne.n	800311a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003086:	7b3b      	ldrb	r3, [r7, #12]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <USER_SPI_ioctl+0x23e>
 8003090:	7dbb      	ldrb	r3, [r7, #22]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d041      	beq.n	800311e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <USER_SPI_ioctl+0x2dc>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	025b      	lsls	r3, r3, #9
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80030c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c4:	2020      	movs	r0, #32
 80030c6:	f7ff fc76 	bl	80029b6 <send_cmd>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d128      	bne.n	8003122 <USER_SPI_ioctl+0x2c6>
 80030d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d2:	2021      	movs	r0, #33	; 0x21
 80030d4:	f7ff fc6f 	bl	80029b6 <send_cmd>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d121      	bne.n	8003122 <USER_SPI_ioctl+0x2c6>
 80030de:	2100      	movs	r1, #0
 80030e0:	2026      	movs	r0, #38	; 0x26
 80030e2:	f7ff fc68 	bl	80029b6 <send_cmd>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d11a      	bne.n	8003122 <USER_SPI_ioctl+0x2c6>
 80030ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80030f0:	f7ff fbbb 	bl	800286a <wait_ready>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d013      	beq.n	8003122 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003100:	e00f      	b.n	8003122 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003102:	2304      	movs	r3, #4
 8003104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003108:	e00c      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		break;
 800310a:	bf00      	nop
 800310c:	e00a      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		break;
 800310e:	bf00      	nop
 8003110:	e008      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		break;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <USER_SPI_ioctl+0x2c8>
		break;
 8003122:	bf00      	nop
	}

	despiselect();
 8003124:	f7ff fbc4 	bl	80028b0 <despiselect>

	return res;
 8003128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800312c:	4618      	mov	r0, r3
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000020 	.word	0x20000020
 8003138:	20000040 	.word	0x20000040

0800313c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003154:	7a5b      	ldrb	r3, [r3, #9]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d131      	bne.n	80031c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 800315e:	7a5b      	ldrb	r3, [r3, #9]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 800316c:	7a5b      	ldrb	r3, [r3, #9]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 800317c:	7a5b      	ldrb	r3, [r3, #9]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003184:	4413      	add	r3, r2
 8003186:	79fa      	ldrb	r2, [r7, #7]
 8003188:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 800318c:	7a5b      	ldrb	r3, [r3, #9]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	b2d1      	uxtb	r1, r2
 8003194:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003196:	7251      	strb	r1, [r2, #9]
 8003198:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	3330      	adds	r3, #48	; 0x30
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	3301      	adds	r3, #1
 80031a8:	223a      	movs	r2, #58	; 0x3a
 80031aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3302      	adds	r3, #2
 80031b0:	222f      	movs	r2, #47	; 0x2f
 80031b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3303      	adds	r3, #3
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000044 	.word	0x20000044

080031d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffaa 	bl	800313c <FATFS_LinkDriverEx>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4d0d      	ldr	r5, [pc, #52]	; (800322c <__libc_init_array+0x38>)
 80031f8:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fa:	1b64      	subs	r4, r4, r5
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	2600      	movs	r6, #0
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	4d0b      	ldr	r5, [pc, #44]	; (8003234 <__libc_init_array+0x40>)
 8003206:	4c0c      	ldr	r4, [pc, #48]	; (8003238 <__libc_init_array+0x44>)
 8003208:	f000 f820 	bl	800324c <_init>
 800320c:	1b64      	subs	r4, r4, r5
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	2600      	movs	r6, #0
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08003284 	.word	0x08003284
 8003230:	08003284 	.word	0x08003284
 8003234:	08003284 	.word	0x08003284
 8003238:	08003288 	.word	0x08003288

0800323c <memset>:
 800323c:	4402      	add	r2, r0
 800323e:	4603      	mov	r3, r0
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <memset+0xa>
 8003244:	4770      	bx	lr
 8003246:	f803 1b01 	strb.w	r1, [r3], #1
 800324a:	e7f9      	b.n	8003240 <memset+0x4>

0800324c <_init>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr

08003258 <_fini>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr
